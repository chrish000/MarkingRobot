
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad4c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800b018  0800b018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b060  0800b060  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b068  0800b068  0000c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b06c  0800b06c  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800b070  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  24000014  0800b084  0000d014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003e0  0800b084  0000d3e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b393  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fff  00000000  00000000  000283d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001240  00000000  00000000  0002b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e42  00000000  00000000  0002c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f17  00000000  00000000  0002d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aa42  00000000  00000000  00061371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150b09  00000000  00000000  0007bdb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc8bc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004dc4  00000000  00000000  001cc900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001d16c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b000 	.word	0x0800b000

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800b000 	.word	0x0800b000

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZN7TMC2209C1Ev>:
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private user code ---------------------------------------------------------*/
TMC2209::TMC2209(){
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2203      	movs	r2, #3
 8000608:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	StandstillMode = 1; //default ON
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
}
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b0e0      	sub	sp, #384	@ 0x180
 8000628:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 800062a:	f000 fc5b 	bl	8000ee4 <_ZL10MPU_Configv>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800062e:	f000 ffa7 	bl	8001580 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000632:	f000 f8b7 	bl	80007a4 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000636:	f000 fafd 	bl	8000c34 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800063a:	f000 fac3 	bl	8000bc4 <_ZL11MX_DMA_Initv>
	MX_UART8_Init();
 800063e:	f000 fa01 	bl	8000a44 <_ZL13MX_UART8_Initv>
	MX_USART2_UART_Init();
 8000642:	f000 fa5f 	bl	8000b04 <_ZL19MX_USART2_UART_Initv>
	MX_CRC_Init();
 8000646:	f000 f92b 	bl	80008a0 <_ZL11MX_CRC_Initv>
	MX_TIM2_Init();
 800064a:	f000 f96d 	bl	8000928 <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */
	/* Peripheral Configuration */
	TMC2209 tmcX;
 800064e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffd2 	bl	80005fc <_ZN7TMC2209C1Ev>
	tmcX.UART = huart2;
 8000658:	4a48      	ldr	r2, [pc, #288]	@ (800077c <main+0x158>)
 800065a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800065e:	4611      	mov	r1, r2
 8000660:	2294      	movs	r2, #148	@ 0x94
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fcbe 	bl	800afe4 <memcpy>
	tmcX.HardwareEnablePort = X_EN_GPIO_Port;
 8000668:	4b45      	ldr	r3, [pc, #276]	@ (8000780 <main+0x15c>)
 800066a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	tmcX.HardwareEnablePin = X_EN_Pin;
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	f8a7 3160 	strh.w	r3, [r7, #352]	@ 0x160
	TMC2209 tmcZ;
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffbf 	bl	80005fc <_ZN7TMC2209C1Ev>
	tmcZ.UART = huart8;
 800067e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000682:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8000686:	4a3f      	ldr	r2, [pc, #252]	@ (8000784 <main+0x160>)
 8000688:	4618      	mov	r0, r3
 800068a:	4611      	mov	r1, r2
 800068c:	2394      	movs	r3, #148	@ 0x94
 800068e:	461a      	mov	r2, r3
 8000690:	f00a fca8 	bl	800afe4 <memcpy>
	tmcZ.HardwareEnablePort = Z_EN_GPIO_Port;
 8000694:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000698:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800069c:	4a3a      	ldr	r2, [pc, #232]	@ (8000788 <main+0x164>)
 800069e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	tmcZ.HardwareEnablePin = Z_EN_Pin;
 80006a2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006a6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80006aa:	2201      	movs	r2, #1
 80006ac:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	/* CLK Configuration */
	HAL_TIM_Base_Start_IT(&htim2);
 80006b0:	4836      	ldr	r0, [pc, #216]	@ (800078c <main+0x168>)
 80006b2:	f007 f991 	bl	80079d8 <HAL_TIM_Base_Start_IT>

	/* GPIO Configuration */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	@ 0x40
 80006ba:	4831      	ldr	r0, [pc, #196]	@ (8000780 <main+0x15c>)
 80006bc:	f004 fb84 	bl	8004dc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	4830      	ldr	r0, [pc, #192]	@ (8000788 <main+0x164>)
 80006c6:	f004 fb7f 	bl	8004dc8 <HAL_GPIO_WritePin>

	/* UART Configuration */
	HAL_HalfDuplex_EnableReceiver(&huart2);
 80006ca:	482c      	ldr	r0, [pc, #176]	@ (800077c <main+0x158>)
 80006cc:	f008 ff94 	bl	80095f8 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 80006d0:	2220      	movs	r2, #32
 80006d2:	492f      	ldr	r1, [pc, #188]	@ (8000790 <main+0x16c>)
 80006d4:	4829      	ldr	r0, [pc, #164]	@ (800077c <main+0x158>)
 80006d6:	f00a fbb7 	bl	800ae48 <HAL_UARTEx_ReceiveToIdle_DMA>

	//########################### Uart X (Uart2)
	uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
 80006da:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006de:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80006e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000794 <main+0x170>)
 80006e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
 80006ec:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006f0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80006f4:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <main+0x174>)
 80006f6:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <main+0x178>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
			if (0 /*Move_To_Pos((uint16_t*)HomePos)*/)
				Error_Handler();
		}
		//*********************************************************************************************
		//TODO UART in seperate Datei
		write[7] = HAL_CRC_Calculate(&hcrc, (uint32_t*) write,
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2207      	movs	r2, #7
 8000706:	4619      	mov	r1, r3
 8000708:	4825      	ldr	r0, [pc, #148]	@ (80007a0 <main+0x17c>)
 800070a:	f001 f9db 	bl	8001ac4 <HAL_CRC_Calculate>
 800070e:	4603      	mov	r3, r0
 8000710:	b2da      	uxtb	r2, r3
 8000712:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000716:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800071a:	71da      	strb	r2, [r3, #7]
				sizeof(write) - 1);
		read[3] = HAL_CRC_Calculate(&hcrc, (uint32_t*) read, sizeof(read) - 1);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2203      	movs	r2, #3
 8000720:	4619      	mov	r1, r3
 8000722:	481f      	ldr	r0, [pc, #124]	@ (80007a0 <main+0x17c>)
 8000724:	f001 f9ce 	bl	8001ac4 <HAL_CRC_Calculate>
 8000728:	4603      	mov	r3, r0
 800072a:	b2da      	uxtb	r2, r3
 800072c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000730:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8000734:	70da      	strb	r2, [r3, #3]
		//*********************************************************************************************
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000736:	4811      	ldr	r0, [pc, #68]	@ (800077c <main+0x158>)
 8000738:	f008 ff0a 	bl	8009550 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, write, 8);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2208      	movs	r2, #8
 8000742:	4619      	mov	r1, r3
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <main+0x158>)
 8000746:	f008 faa1 	bl	8008c8c <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <main+0x158>)
 800074c:	f008 ff54 	bl	80095f8 <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 8000750:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000754:	f000 ffa6 	bl	80016a4 <HAL_Delay>
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000758:	4808      	ldr	r0, [pc, #32]	@ (800077c <main+0x158>)
 800075a:	f008 fef9 	bl	8009550 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, read, 4);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2204      	movs	r2, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <main+0x158>)
 8000766:	f008 fa91 	bl	8008c8c <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <main+0x158>)
 800076c:	f008 ff44 	bl	80095f8 <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 8000770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000774:	f000 ff96 	bl	80016a4 <HAL_Delay>
		if (BatteryAlarm) {
 8000778:	e7be      	b.n	80006f8 <main+0xd4>
 800077a:	bf00      	nop
 800077c:	24000134 	.word	0x24000134
 8000780:	58020c00 	.word	0x58020c00
 8000784:	240000a0 	.word	0x240000a0
 8000788:	58021000 	.word	0x58021000
 800078c:	24000054 	.word	0x24000054
 8000790:	240003a8 	.word	0x240003a8
 8000794:	0800b018 	.word	0x0800b018
 8000798:	8f020005 	.word	0x8f020005
 800079c:	240003c8 	.word	0x240003c8
 80007a0:	24000030 	.word	0x24000030

080007a4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	@ 0x70
 80007a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	224c      	movs	r2, #76	@ 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f00a fbea 	bl	800af8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00a fbe4 	bl	800af8c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f004 fb4d 	bl	8004e64 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b33      	ldr	r3, [pc, #204]	@ (800089c <_Z18SystemClock_Configv+0xf8>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a32      	ldr	r2, [pc, #200]	@ (800089c <_Z18SystemClock_Configv+0xf8>)
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b30      	ldr	r3, [pc, #192]	@ (800089c <_Z18SystemClock_Configv+0xf8>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80007e6:	bf00      	nop
 80007e8:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <_Z18SystemClock_Configv+0xf8>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007f4:	bf14      	ite	ne
 80007f6:	2301      	movne	r3, #1
 80007f8:	2300      	moveq	r3, #0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f3      	bne.n	80007e8 <_Z18SystemClock_Configv+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000804:	2301      	movs	r3, #1
 8000806:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 8000818:	2322      	movs	r3, #34	@ 0x22
 800081a:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000820:	2303      	movs	r3, #3
 8000822:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000828:	230c      	movs	r3, #12
 800082a:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800082c:	2300      	movs	r3, #0
 800082e:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000830:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000834:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fb4c 	bl	8004ed8 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_Z18SystemClock_Configv+0xb0>
		Error_Handler();
 8000850:	f000 fb74 	bl	8000f3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000854:	233f      	movs	r3, #63	@ 0x3f
 8000856:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000860:	2308      	movs	r3, #8
 8000862:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000864:	2340      	movs	r3, #64	@ 0x40
 8000866:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000868:	2340      	movs	r3, #64	@ 0x40
 800086a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800086c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000870:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000872:	2340      	movs	r3, #64	@ 0x40
 8000874:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2103      	movs	r1, #3
 800087a:	4618      	mov	r0, r3
 800087c:	f004 ff06 	bl	800568c <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf14      	ite	ne
 8000886:	2301      	movne	r3, #1
 8000888:	2300      	moveq	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 8000890:	f000 fb54 	bl	8000f3c <Error_Handler>
	}
}
 8000894:	bf00      	nop
 8000896:	3770      	adds	r7, #112	@ 0x70
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	58024800 	.word	0x58024800

080008a0 <_ZL11MX_CRC_Initv>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <_ZL11MX_CRC_Initv+0x7c>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <_ZL11MX_CRC_Initv+0x7c>)
 80008ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <_ZL11MX_CRC_Initv+0x7c>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <_ZL11MX_CRC_Initv+0x84>)
 80008c8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008d8:	2207      	movs	r2, #7
 80008da:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008de:	2210      	movs	r2, #16
 80008e0:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008ea:	2220      	movs	r2, #32
 80008ec:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80008fa:	4809      	ldr	r0, [pc, #36]	@ (8000920 <_ZL11MX_CRC_Initv+0x80>)
 80008fc:	f001 f87e 	bl	80019fc <HAL_CRC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <_ZL11MX_CRC_Initv+0x74>
		Error_Handler();
 8000910:	f000 fb14 	bl	8000f3c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	58024400 	.word	0x58024400
 8000920:	24000030 	.word	0x24000030
 8000924:	58024c00 	.word	0x58024c00

08000928 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	@ 0x38
 800092c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800092e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800095a:	4b39      	ldr	r3, [pc, #228]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 800095c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000960:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 8000962:	4b37      	ldr	r3, [pc, #220]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 8000964:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000968:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000970:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 8000972:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000976:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000984:	482e      	ldr	r0, [pc, #184]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 8000986:	f006 ffcf 	bl	8007928 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	bf14      	ite	ne
 8000990:	2301      	movne	r3, #1
 8000992:	2300      	moveq	r3, #0
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <_ZL12MX_TIM2_Initv+0x76>
		Error_Handler();
 800099a:	f000 facf 	bl	8000f3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4825      	ldr	r0, [pc, #148]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 80009ac:	f007 fb16 	bl	8007fdc <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZL12MX_TIM2_Initv+0x9c>
		Error_Handler();
 80009c0:	f000 fabc 	bl	8000f3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009c4:	481e      	ldr	r0, [pc, #120]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 80009c6:	f007 f88d 	bl	8007ae4 <HAL_TIM_PWM_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	bf14      	ite	ne
 80009d0:	2301      	movne	r3, #1
 80009d2:	2300      	moveq	r3, #0
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <_ZL12MX_TIM2_Initv+0xb6>
		Error_Handler();
 80009da:	f000 faaf 	bl	8000f3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4814      	ldr	r0, [pc, #80]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 80009ee:	f008 f83b 	bl	8008a68 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	bf14      	ite	ne
 80009f8:	2301      	movne	r3, #1
 80009fa:	2300      	moveq	r3, #0
 80009fc:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <_ZL12MX_TIM2_Initv+0xde>
		Error_Handler();
 8000a02:	f000 fa9b 	bl	8000f3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a06:	2360      	movs	r3, #96	@ 0x60
 8000a08:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000a0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a0e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <_ZL12MX_TIM2_Initv+0x118>)
 8000a20:	f007 f9c8 	bl	8007db4 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <_ZL12MX_TIM2_Initv+0x110>
		Error_Handler();
 8000a34:	f000 fa82 	bl	8000f3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	@ 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000054 	.word	0x24000054

08000a44 <_ZL13MX_UART8_Initv>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8000a48:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b00 <_ZL13MX_UART8_Initv+0xbc>)
 8000a4c:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK) {
 8000a8c:	481b      	ldr	r0, [pc, #108]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000a8e:	f008 f8a5 	bl	8008bdc <HAL_HalfDuplex_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf14      	ite	ne
 8000a98:	2301      	movne	r3, #1
 8000a9a:	2300      	moveq	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <_ZL13MX_UART8_Initv+0x62>
		Error_Handler();
 8000aa2:	f000 fa4b 	bl	8000f3c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4814      	ldr	r0, [pc, #80]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000aaa:	f00a f951 	bl	800ad50 <HAL_UARTEx_SetTxFifoThreshold>
 8000aae:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <_ZL13MX_UART8_Initv+0x7e>
		Error_Handler();
 8000abe:	f000 fa3d 	bl	8000f3c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000ac6:	f00a f981 	bl	800adcc <HAL_UARTEx_SetRxFifoThreshold>
 8000aca:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf14      	ite	ne
 8000ad0:	2301      	movne	r3, #1
 8000ad2:	2300      	moveq	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <_ZL13MX_UART8_Initv+0x9a>
		Error_Handler();
 8000ada:	f000 fa2f 	bl	8000f3c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <_ZL13MX_UART8_Initv+0xb8>)
 8000ae0:	f00a f8fd 	bl	800acde <HAL_UARTEx_DisableFifoMode>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <_ZL13MX_UART8_Initv+0xb4>
		Error_Handler();
 8000af4:	f000 fa22 	bl	8000f3c <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	240000a0 	.word	0x240000a0
 8000b00:	40007c00 	.word	0x40007c00

08000b04 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b08:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000b0c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b26      	ldr	r3, [pc, #152]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8000b4c:	481b      	ldr	r0, [pc, #108]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b4e:	f008 f845 	bl	8008bdc <HAL_HalfDuplex_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bf14      	ite	ne
 8000b58:	2301      	movne	r3, #1
 8000b5a:	2300      	moveq	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <_ZL19MX_USART2_UART_Initv+0x62>
		Error_Handler();
 8000b62:	f000 f9eb 	bl	8000f3c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4814      	ldr	r0, [pc, #80]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b6a:	f00a f8f1 	bl	800ad50 <HAL_UARTEx_SetTxFifoThreshold>
 8000b6e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <_ZL19MX_USART2_UART_Initv+0x7e>
		Error_Handler();
 8000b7e:	f000 f9dd 	bl	8000f3c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000b82:	2100      	movs	r1, #0
 8000b84:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b86:	f00a f921 	bl	800adcc <HAL_UARTEx_SetRxFifoThreshold>
 8000b8a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	bf14      	ite	ne
 8000b90:	2301      	movne	r3, #1
 8000b92:	2300      	moveq	r3, #0
 8000b94:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <_ZL19MX_USART2_UART_Initv+0x9a>
		Error_Handler();
 8000b9a:	f000 f9cf 	bl	8000f3c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000b9e:	4807      	ldr	r0, [pc, #28]	@ (8000bbc <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ba0:	f00a f89d 	bl	800acde <HAL_UARTEx_DisableFifoMode>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bf14      	ite	ne
 8000baa:	2301      	movne	r3, #1
 8000bac:	2300      	moveq	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <_ZL19MX_USART2_UART_Initv+0xb4>
		Error_Handler();
 8000bb4:	f000 f9c2 	bl	8000f3c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	24000134 	.word	0x24000134
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <_ZL11MX_DMA_Initv+0x6c>)
 8000bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bd0:	4a17      	ldr	r2, [pc, #92]	@ (8000c30 <_ZL11MX_DMA_Initv+0x6c>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_ZL11MX_DMA_Initv+0x6c>)
 8000bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	200b      	movs	r0, #11
 8000bee:	f000 fe58 	bl	80018a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bf2:	200b      	movs	r0, #11
 8000bf4:	f000 fe6f 	bl	80018d6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	200c      	movs	r0, #12
 8000bfe:	f000 fe50 	bl	80018a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f000 fe67 	bl	80018d6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	200d      	movs	r0, #13
 8000c0e:	f000 fe48 	bl	80018a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c12:	200d      	movs	r0, #13
 8000c14:	f000 fe5f 	bl	80018d6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	200e      	movs	r0, #14
 8000c1e:	f000 fe40 	bl	80018a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c22:	200e      	movs	r0, #14
 8000c24:	f000 fe57 	bl	80018d6 <HAL_NVIC_EnableIRQ>

}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	58024400 	.word	0x58024400

08000c34 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	4b52      	ldr	r3, [pc, #328]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a50      	ldr	r2, [pc, #320]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b4a      	ldr	r3, [pc, #296]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a49      	ldr	r2, [pc, #292]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b46      	ldr	r3, [pc, #280]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b43      	ldr	r3, [pc, #268]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a41      	ldr	r2, [pc, #260]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b3f      	ldr	r3, [pc, #252]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a3a      	ldr	r2, [pc, #232]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <_ZL12MX_GPIO_Initv+0x160>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin | Z_DIR_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	210c      	movs	r1, #12
 8000cc6:	4834      	ldr	r0, [pc, #208]	@ (8000d98 <_ZL12MX_GPIO_Initv+0x164>)
 8000cc8:	f004 f87e 	bl	8004dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin | X_STEP_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2118      	movs	r1, #24
 8000cd0:	4832      	ldr	r0, [pc, #200]	@ (8000d9c <_ZL12MX_GPIO_Initv+0x168>)
 8000cd2:	f004 f879 	bl	8004dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2140      	movs	r1, #64	@ 0x40
 8000cda:	4830      	ldr	r0, [pc, #192]	@ (8000d9c <_ZL12MX_GPIO_Initv+0x168>)
 8000cdc:	f004 f874 	bl	8004dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	482e      	ldr	r0, [pc, #184]	@ (8000da0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000ce6:	f004 f86f 	bl	8004dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2101      	movs	r1, #1
 8000cee:	482a      	ldr	r0, [pc, #168]	@ (8000d98 <_ZL12MX_GPIO_Initv+0x164>)
 8000cf0:	f004 f86a 	bl	8004dc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin | Z_DIR_Pin | Z_EN_Pin;
 8000cf4:	230d      	movs	r3, #13
 8000cf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4823      	ldr	r0, [pc, #140]	@ (8000d98 <_ZL12MX_GPIO_Initv+0x164>)
 8000d0c:	f003 feb4 	bl	8004a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8000d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d16:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	481f      	ldr	r0, [pc, #124]	@ (8000da4 <_ZL12MX_GPIO_Initv+0x170>)
 8000d28:	f003 fea6 	bl	8004a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin | X_MIN_Pin;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4819      	ldr	r0, [pc, #100]	@ (8000da4 <_ZL12MX_GPIO_Initv+0x170>)
 8000d40:	f003 fe9a 	bl	8004a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin | X_STEP_Pin | X_EN_Pin;
 8000d44:	2358      	movs	r3, #88	@ 0x58
 8000d46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <_ZL12MX_GPIO_Initv+0x168>)
 8000d5c:	f003 fe8c 	bl	8004a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000d60:	2308      	movs	r3, #8
 8000d62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000d78:	f003 fe7e 	bl	8004a78 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2028      	movs	r0, #40	@ 0x28
 8000d82:	f000 fd8e 	bl	80018a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d86:	2028      	movs	r0, #40	@ 0x28
 8000d88:	f000 fda5 	bl	80018d6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	@ 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58021000 	.word	0x58021000
 8000d9c:	58020c00 	.word	0x58020c00
 8000da0:	58020400 	.word	0x58020400
 8000da4:	58020800 	.word	0x58020800

08000da8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO External Interrupt Callback Function
 * @param GPIO_Pin GPIO-Pin with active Interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <HAL_GPIO_EXTI_Callback+0x24>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
	}
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	240003c8 	.word	0x240003c8

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer External Interrupt Callback Function
 * @param htim Pointer to Timer with elapsed Timer Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000de0:	d150      	bne.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (PWMEnabledX) {
 8000de2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf14      	ite	ne
 8000dec:	2301      	movne	r3, #1
 8000dee:	2300      	moveq	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d046      	beq.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0xb4>
			PWMCounterX++;
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e02:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000e04:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	429a      	cmp	r2, r3
 8000e12:	bf2c      	ite	cs
 8000e14:	2301      	movcs	r3, #1
 8000e16:	2300      	movcc	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d007      	beq.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x5e>
				PWMCounterX = 0;
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e2c:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	bf34      	ite	cc
 8000e3e:	2301      	movcc	r3, #1
 8000e40:	2300      	movcs	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x84>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4814      	ldr	r0, [pc, #80]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e4e:	f003 ffbb 	bl	8004dc8 <HAL_GPIO_WritePin>
 8000e52:	e004      	b.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2110      	movs	r1, #16
 8000e58:	4811      	ldr	r0, [pc, #68]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e5a:	f003 ffb5 	bl	8004dc8 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	bf2c      	ite	cs
 8000e6a:	2301      	movcs	r3, #1
 8000e6c:	2300      	movcc	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0xb4>
				PWMEnabledX = false;
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e80:	f003 ffa2 	bl	8004dc8 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	240003d8 	.word	0x240003d8
 8000e90:	240003d0 	.word	0x240003d0
 8000e94:	24000000 	.word	0x24000000
 8000e98:	240003cc 	.word	0x240003cc
 8000e9c:	24000002 	.word	0x24000002
 8000ea0:	58020c00 	.word	0x58020c00
 8000ea4:	240003d4 	.word	0x240003d4

08000ea8 <HAL_UART_TxCpltCallback>:
/**
 * @brief UART Transmitt Completed Callback Function
 * @param huart Pointer to UART with completed Transmitt
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {

	}
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_UARTEx_RxEventCallback>:
 * @brief UART Recive Completed Callback Function
 * @param huart Pointer to UART with recived data
 * @param Size Size of the recived data
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000ec8:	2220      	movs	r2, #32
 8000eca:	4904      	ldr	r1, [pc, #16]	@ (8000edc <HAL_UARTEx_RxEventCallback+0x20>)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <HAL_UARTEx_RxEventCallback+0x24>)
 8000ece:	f009 ffbb 	bl	800ae48 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	240003a8 	.word	0x240003a8
 8000ee0:	24000134 	.word	0x24000134

08000ee4 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000ef6:	f000 fd09 	bl	800190c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000efa:	2301      	movs	r3, #1
 8000efc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f06:	231f      	movs	r3, #31
 8000f08:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000f0a:	2387      	movs	r3, #135	@ 0x87
 8000f0c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f12:	2300      	movs	r3, #0
 8000f14:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fd27 	bl	800197c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f000 fd04 	bl	800193c <HAL_MPU_Enable>

}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000f44:	2108      	movs	r1, #8
 8000f46:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <Error_Handler+0x1c>)
 8000f48:	f003 ff57 	bl	8004dfa <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f4c:	2064      	movs	r0, #100	@ 0x64
 8000f4e:	f000 fba9 	bl	80016a4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000f52:	bf00      	nop
 8000f54:	e7f6      	b.n	8000f44 <Error_Handler+0x8>
 8000f56:	bf00      	nop
 8000f58:	58020400 	.word	0x58020400

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_MspInit+0x30>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f68:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x30>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x30>)
 8000f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	58024400 	.word	0x58024400

08000f90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_CRC_MspInit+0x3c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_CRC_MspInit+0x40>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_CRC_MspInit+0x40>)
 8000faa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_CRC_MspInit+0x40>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58024c00 	.word	0x58024c00
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe4:	d116      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_TIM_Base_MspInit+0x48>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <HAL_TIM_Base_MspInit+0x48>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_TIM_Base_MspInit+0x48>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	201c      	movs	r0, #28
 800100a:	f000 fc4a 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800100e:	201c      	movs	r0, #28
 8001010:	f000 fc61 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024400 	.word	0x58024400

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ba      	sub	sp, #232	@ 0xe8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	22b8      	movs	r2, #184	@ 0xb8
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f009 ffa3 	bl	800af8c <memset>
  if(huart->Instance==UART8)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4ab0      	ldr	r2, [pc, #704]	@ (800130c <HAL_UART_MspInit+0x2ec>)
 800104c:	4293      	cmp	r3, r2
 800104e:	f040 80aa 	bne.w	80011a6 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001052:	f04f 0202 	mov.w	r2, #2
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f004 fe9b 	bl	8005da4 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001074:	f7ff ff62 	bl	8000f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001078:	4ba5      	ldr	r3, [pc, #660]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 800107a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800107e:	4aa4      	ldr	r2, [pc, #656]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001084:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001088:	4ba1      	ldr	r3, [pc, #644]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 800108a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800108e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	4b9e      	ldr	r3, [pc, #632]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109c:	4a9c      	ldr	r2, [pc, #624]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a6:	4b9a      	ldr	r3, [pc, #616]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d6:	4619      	mov	r1, r3
 80010d8:	488e      	ldr	r0, [pc, #568]	@ (8001314 <HAL_UART_MspInit+0x2f4>)
 80010da:	f003 fccd 	bl	8004a78 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 80010de:	4b8e      	ldr	r3, [pc, #568]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 80010e0:	4a8e      	ldr	r2, [pc, #568]	@ (800131c <HAL_UART_MspInit+0x2fc>)
 80010e2:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80010e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 80010e6:	2252      	movs	r2, #82	@ 0x52
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 80010ec:	2240      	movs	r2, #64	@ 0x40
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b89      	ldr	r3, [pc, #548]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b88      	ldr	r3, [pc, #544]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 80010f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b86      	ldr	r3, [pc, #536]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b84      	ldr	r3, [pc, #528]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800110a:	4b83      	ldr	r3, [pc, #524]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b81      	ldr	r3, [pc, #516]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001116:	4b80      	ldr	r3, [pc, #512]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 800111c:	487e      	ldr	r0, [pc, #504]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 800111e:	f000 fe73 	bl	8001e08 <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001128:	f7ff ff08 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a7a      	ldr	r2, [pc, #488]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 8001130:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001132:	4a79      	ldr	r2, [pc, #484]	@ (8001318 <HAL_UART_MspInit+0x2f8>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8001138:	4b79      	ldr	r3, [pc, #484]	@ (8001320 <HAL_UART_MspInit+0x300>)
 800113a:	4a7a      	ldr	r2, [pc, #488]	@ (8001324 <HAL_UART_MspInit+0x304>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800113e:	4b78      	ldr	r3, [pc, #480]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001140:	2251      	movs	r2, #81	@ 0x51
 8001142:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b76      	ldr	r3, [pc, #472]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b75      	ldr	r3, [pc, #468]	@ (8001320 <HAL_UART_MspInit+0x300>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b73      	ldr	r3, [pc, #460]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001152:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001156:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001158:	4b71      	ldr	r3, [pc, #452]	@ (8001320 <HAL_UART_MspInit+0x300>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115e:	4b70      	ldr	r3, [pc, #448]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001164:	4b6e      	ldr	r3, [pc, #440]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800116a:	4b6d      	ldr	r3, [pc, #436]	@ (8001320 <HAL_UART_MspInit+0x300>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001170:	4b6b      	ldr	r3, [pc, #428]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001176:	486a      	ldr	r0, [pc, #424]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001178:	f000 fe46 	bl	8001e08 <HAL_DMA_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001182:	f7ff fedb 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <HAL_UART_MspInit+0x300>)
 800118a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800118e:	4a64      	ldr	r2, [pc, #400]	@ (8001320 <HAL_UART_MspInit+0x300>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2053      	movs	r0, #83	@ 0x53
 800119a:	f000 fb82 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800119e:	2053      	movs	r0, #83	@ 0x53
 80011a0:	f000 fb99 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a4:	e0ae      	b.n	8001304 <HAL_UART_MspInit+0x2e4>
  else if(huart->Instance==USART2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001328 <HAL_UART_MspInit+0x308>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	f040 80a9 	bne.w	8001304 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011b2:	f04f 0202 	mov.w	r2, #2
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 fdeb 	bl	8005da4 <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80011d4:	f7ff feb2 	bl	8000f3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 80011da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011de:	4a4c      	ldr	r2, [pc, #304]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011e8:	4b49      	ldr	r3, [pc, #292]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 80011ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	4b46      	ldr	r3, [pc, #280]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	4a44      	ldr	r2, [pc, #272]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 80011fe:	f043 0308 	orr.w	r3, r3, #8
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001206:	4b42      	ldr	r3, [pc, #264]	@ (8001310 <HAL_UART_MspInit+0x2f0>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8001214:	2320      	movs	r3, #32
 8001216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122c:	2307      	movs	r3, #7
 800122e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001236:	4619      	mov	r1, r3
 8001238:	483c      	ldr	r0, [pc, #240]	@ (800132c <HAL_UART_MspInit+0x30c>)
 800123a:	f003 fc1d 	bl	8004a78 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 800123e:	4b3c      	ldr	r3, [pc, #240]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001240:	4a3c      	ldr	r2, [pc, #240]	@ (8001334 <HAL_UART_MspInit+0x314>)
 8001242:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001244:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001246:	222c      	movs	r2, #44	@ 0x2c
 8001248:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124a:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <HAL_UART_MspInit+0x310>)
 800124c:	2240      	movs	r2, #64	@ 0x40
 800124e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001250:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001258:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125e:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001264:	4b32      	ldr	r3, [pc, #200]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <HAL_UART_MspInit+0x310>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001276:	4b2e      	ldr	r3, [pc, #184]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800127c:	482c      	ldr	r0, [pc, #176]	@ (8001330 <HAL_UART_MspInit+0x310>)
 800127e:	f000 fdc3 	bl	8001e08 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8001288:	f7ff fe58 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a28      	ldr	r2, [pc, #160]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001290:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001292:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <HAL_UART_MspInit+0x310>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001298:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <HAL_UART_MspInit+0x318>)
 800129a:	4a28      	ldr	r2, [pc, #160]	@ (800133c <HAL_UART_MspInit+0x31c>)
 800129c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012a0:	222b      	movs	r2, #43	@ 0x2b
 80012a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a4:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012b0:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012d6:	4818      	ldr	r0, [pc, #96]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012d8:	f000 fd96 	bl	8001e08 <HAL_DMA_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 80012e2:	f7ff fe2b 	bl	8000f3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <HAL_UART_MspInit+0x318>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2026      	movs	r0, #38	@ 0x26
 80012fa:	f000 fad2 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fe:	2026      	movs	r0, #38	@ 0x26
 8001300:	f000 fae9 	bl	80018d6 <HAL_NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	37e8      	adds	r7, #232	@ 0xe8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40007c00 	.word	0x40007c00
 8001310:	58024400 	.word	0x58024400
 8001314:	58021000 	.word	0x58021000
 8001318:	240001c8 	.word	0x240001c8
 800131c:	40020040 	.word	0x40020040
 8001320:	24000240 	.word	0x24000240
 8001324:	40020058 	.word	0x40020058
 8001328:	40004400 	.word	0x40004400
 800132c:	58020c00 	.word	0x58020c00
 8001330:	240002b8 	.word	0x240002b8
 8001334:	40020010 	.word	0x40020010
 8001338:	24000330 	.word	0x24000330
 800133c:	40020028 	.word	0x40020028

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f965 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <DMA1_Stream0_IRQHandler+0x10>)
 80013a6:	f002 f855 	bl	8003454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	240002b8 	.word	0x240002b8

080013b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <DMA1_Stream1_IRQHandler+0x10>)
 80013ba:	f002 f84b 	bl	8003454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	24000330 	.word	0x24000330

080013c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Stream2_IRQHandler+0x10>)
 80013ce:	f002 f841 	bl	8003454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	240001c8 	.word	0x240001c8

080013dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <DMA1_Stream3_IRQHandler+0x10>)
 80013e2:	f002 f837 	bl	8003454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000240 	.word	0x24000240

080013f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <TIM2_IRQHandler+0x10>)
 80013f6:	f006 fbd6 	bl	8007ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24000054 	.word	0x24000054

08001404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001408:	4802      	ldr	r0, [pc, #8]	@ (8001414 <USART2_IRQHandler+0x10>)
 800140a:	f007 fcbf 	bl	8008d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	24000134 	.word	0x24000134

08001418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 800141c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001420:	f003 fd05 	bl	8004e2e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <UART8_IRQHandler+0x10>)
 800142e:	f007 fcad 	bl	8008d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	240000a0 	.word	0x240000a0

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001440:	4b32      	ldr	r3, [pc, #200]	@ (800150c <SystemInit+0xd0>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a31      	ldr	r2, [pc, #196]	@ (800150c <SystemInit+0xd0>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001450:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <SystemInit+0xd4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	2b06      	cmp	r3, #6
 800145a:	d807      	bhi.n	800146c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800145c:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <SystemInit+0xd4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 030f 	bic.w	r3, r3, #15
 8001464:	4a2a      	ldr	r2, [pc, #168]	@ (8001510 <SystemInit+0xd4>)
 8001466:	f043 0307 	orr.w	r3, r3, #7
 800146a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <SystemInit+0xd8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <SystemInit+0xd8>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001478:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <SystemInit+0xd8>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800147e:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <SystemInit+0xd8>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4924      	ldr	r1, [pc, #144]	@ (8001514 <SystemInit+0xd8>)
 8001484:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <SystemInit+0xdc>)
 8001486:	4013      	ands	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <SystemInit+0xd4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001496:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <SystemInit+0xd4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 030f 	bic.w	r3, r3, #15
 800149e:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <SystemInit+0xd4>)
 80014a0:	f043 0307 	orr.w	r3, r3, #7
 80014a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <SystemInit+0xd8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <SystemInit+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <SystemInit+0xd8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <SystemInit+0xd8>)
 80014ba:	4a18      	ldr	r2, [pc, #96]	@ (800151c <SystemInit+0xe0>)
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <SystemInit+0xd8>)
 80014c0:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <SystemInit+0xe4>)
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <SystemInit+0xd8>)
 80014c6:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <SystemInit+0xe8>)
 80014c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <SystemInit+0xd8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <SystemInit+0xd8>)
 80014d2:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <SystemInit+0xe8>)
 80014d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <SystemInit+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <SystemInit+0xd8>)
 80014de:	4a11      	ldr	r2, [pc, #68]	@ (8001524 <SystemInit+0xe8>)
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <SystemInit+0xd8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <SystemInit+0xd8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <SystemInit+0xd8>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <SystemInit+0xd8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <SystemInit+0xec>)
 80014fc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001500:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	52002000 	.word	0x52002000
 8001514:	58024400 	.word	0x58024400
 8001518:	eaf6ed7f 	.word	0xeaf6ed7f
 800151c:	02020200 	.word	0x02020200
 8001520:	01ff0000 	.word	0x01ff0000
 8001524:	01010280 	.word	0x01010280
 8001528:	52004000 	.word	0x52004000

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001564 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001530:	f7ff ff84 	bl	800143c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	@ (8001578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155a:	f009 fd1f 	bl	800af9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff f861 	bl	8000624 <main>
  bx  lr
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001568:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800156c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001570:	0800b070 	.word	0x0800b070
  ldr r2, =_sbss
 8001574:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001578:	240003e0 	.word	0x240003e0

0800157c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC3_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001586:	2003      	movs	r0, #3
 8001588:	f000 f980 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800158c:	f004 fa34 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_Init+0x68>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	4913      	ldr	r1, [pc, #76]	@ (80015ec <HAL_Init+0x6c>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_Init+0x68>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_Init+0x6c>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <HAL_Init+0x70>)
 80015c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_Init+0x74>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ca:	200f      	movs	r0, #15
 80015cc:	f000 f814 	bl	80015f8 <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e002      	b.n	80015e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015da:	f7ff fcbf 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	58024400 	.word	0x58024400
 80015ec:	0800b020 	.word	0x0800b020
 80015f0:	24000008 	.word	0x24000008
 80015f4:	24000004 	.word	0x24000004

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_InitTick+0x60>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e021      	b.n	8001650 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <HAL_InitTick+0x64>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_InitTick+0x60>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f965 	bl	80018f2 <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f92f 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <HAL_InitTick+0x68>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	24000010 	.word	0x24000010
 800165c:	24000004 	.word	0x24000004
 8001660:	2400000c 	.word	0x2400000c

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	24000010 	.word	0x24000010
 8001688:	240003dc 	.word	0x240003dc

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	240003dc 	.word	0x240003dc

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24000010 	.word	0x24000010

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <__NVIC_SetPriorityGrouping+0x40>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	4313      	orrs	r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x40>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00
 8001730:	05fa0000 	.word	0x05fa0000

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	@ (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff40 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff33 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa4 	bl	8001848 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001910:	f3bf 8f5f 	dmb	sy
}
 8001914:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_MPU_Disable+0x28>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <HAL_MPU_Disable+0x28>)
 800191c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001920:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_MPU_Disable+0x2c>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	e000ed90 	.word	0xe000ed90

0800193c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <HAL_MPU_Enable+0x38>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_MPU_Enable+0x3c>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_MPU_Enable+0x3c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800195a:	f3bf 8f4f 	dsb	sy
}
 800195e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001960:	f3bf 8f6f 	isb	sy
}
 8001964:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed90 	.word	0xe000ed90
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	785a      	ldrb	r2, [r3, #1]
 8001988:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_MPU_ConfigRegion+0x7c>)
 800198a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_MPU_ConfigRegion+0x7c>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_MPU_ConfigRegion+0x7c>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001998:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <HAL_MPU_ConfigRegion+0x7c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
 80019a4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7adb      	ldrb	r3, [r3, #11]
 80019aa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7a9b      	ldrb	r3, [r3, #10]
 80019b2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7b5b      	ldrb	r3, [r3, #13]
 80019ba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b9b      	ldrb	r3, [r3, #14]
 80019c2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7bdb      	ldrb	r3, [r3, #15]
 80019ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7a5b      	ldrb	r3, [r3, #9]
 80019d2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7a1b      	ldrb	r3, [r3, #8]
 80019da:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019dc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019e6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e8:	6113      	str	r3, [r2, #16]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000ed90 	.word	0xe000ed90

080019fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e054      	b.n	8001ab8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7f5b      	ldrb	r3, [r3, #29]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fab6 	bl	8000f90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10c      	bne.n	8001a4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <HAL_CRC_Init+0xc4>)
 8001a38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0218 	bic.w	r2, r2, #24
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e00c      	b.n	8001a66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6899      	ldr	r1, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f948 	bl	8001cec <HAL_CRCEx_Polynomial_Set>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e028      	b.n	8001ab8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	795b      	ldrb	r3, [r3, #5]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	e004      	b.n	8001a84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6912      	ldr	r2, [r2, #16]
 8001a82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699a      	ldr	r2, [r3, #24]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	04c11db7 	.word	0x04c11db7

08001ac4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d006      	beq.n	8001b00 <HAL_CRC_Calculate+0x3c>
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d829      	bhi.n	8001b4a <HAL_CRC_Calculate+0x86>
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d019      	beq.n	8001b2e <HAL_CRC_Calculate+0x6a>
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d01e      	beq.n	8001b3c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001afe:	e024      	b.n	8001b4a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e00a      	b.n	8001b1c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	441a      	add	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d3f0      	bcc.n	8001b06 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
      break;
 8001b2c:	e00e      	b.n	8001b4c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f812 	bl	8001b5c <CRC_Handle_8>
 8001b38:	6138      	str	r0, [r7, #16]
      break;
 8001b3a:	e007      	b.n	8001b4c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f899 	bl	8001c78 <CRC_Handle_16>
 8001b46:	6138      	str	r0, [r7, #16]
      break;
 8001b48:	e000      	b.n	8001b4c <HAL_CRC_Calculate+0x88>
      break;
 8001b4a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b52:	693b      	ldr	r3, [r7, #16]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e023      	b.n	8001bb6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	3301      	adds	r3, #1
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	440b      	add	r3, r1
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b88:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	440b      	add	r3, r1
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b98:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	440b      	add	r3, r1
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bac:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3d6      	bcc.n	8001b6e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04d      	beq.n	8001c66 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d116      	bne.n	8001c1c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3301      	adds	r3, #1
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	440b      	add	r3, r1
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	8b7a      	ldrh	r2, [r7, #26]
 8001c1a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d11f      	bne.n	8001c66 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	3301      	adds	r3, #1
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	440b      	add	r3, r1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	8b7a      	ldrh	r2, [r7, #26]
 8001c52:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3724      	adds	r7, #36	@ 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e013      	b.n	8001cb2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4413      	add	r3, r2
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3e6      	bcc.n	8001c8a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	881a      	ldrh	r2, [r3, #0]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001cfc:	231f      	movs	r3, #31
 8001cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
 8001d0e:	e063      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d10:	bf00      	nop
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	613a      	str	r2, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_CRCEx_Polynomial_Set+0x44>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b18      	cmp	r3, #24
 8001d34:	d846      	bhi.n	8001dc4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001d36:	a201      	add	r2, pc, #4	@ (adr r2, 8001d3c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001dcb 	.word	0x08001dcb
 8001d40:	08001dc5 	.word	0x08001dc5
 8001d44:	08001dc5 	.word	0x08001dc5
 8001d48:	08001dc5 	.word	0x08001dc5
 8001d4c:	08001dc5 	.word	0x08001dc5
 8001d50:	08001dc5 	.word	0x08001dc5
 8001d54:	08001dc5 	.word	0x08001dc5
 8001d58:	08001dc5 	.word	0x08001dc5
 8001d5c:	08001db9 	.word	0x08001db9
 8001d60:	08001dc5 	.word	0x08001dc5
 8001d64:	08001dc5 	.word	0x08001dc5
 8001d68:	08001dc5 	.word	0x08001dc5
 8001d6c:	08001dc5 	.word	0x08001dc5
 8001d70:	08001dc5 	.word	0x08001dc5
 8001d74:	08001dc5 	.word	0x08001dc5
 8001d78:	08001dc5 	.word	0x08001dc5
 8001d7c:	08001dad 	.word	0x08001dad
 8001d80:	08001dc5 	.word	0x08001dc5
 8001d84:	08001dc5 	.word	0x08001dc5
 8001d88:	08001dc5 	.word	0x08001dc5
 8001d8c:	08001dc5 	.word	0x08001dc5
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08001dc5 	.word	0x08001dc5
 8001d98:	08001dc5 	.word	0x08001dc5
 8001d9c:	08001da1 	.word	0x08001da1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d913      	bls.n	8001dce <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001daa:	e010      	b.n	8001dce <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b07      	cmp	r3, #7
 8001db0:	d90f      	bls.n	8001dd2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001db6:	e00c      	b.n	8001dd2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	2b0f      	cmp	r3, #15
 8001dbc:	d90b      	bls.n	8001dd6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dc2:	e008      	b.n	8001dd6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
        break;
 8001dc8:	e006      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dca:	bf00      	nop
 8001dcc:	e004      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dce:	bf00      	nop
 8001dd0:	e002      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dd2:	bf00      	nop
 8001dd4:	e000      	b.n	8001dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001dd6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 0118 	bic.w	r1, r3, #24
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff fc3c 	bl	800168c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e312      	b.n	8002446 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a66      	ldr	r2, [pc, #408]	@ (8001fc0 <HAL_DMA_Init+0x1b8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d04a      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <HAL_DMA_Init+0x1bc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d045      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a63      	ldr	r2, [pc, #396]	@ (8001fc8 <HAL_DMA_Init+0x1c0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d040      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a62      	ldr	r2, [pc, #392]	@ (8001fcc <HAL_DMA_Init+0x1c4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d03b      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a60      	ldr	r2, [pc, #384]	@ (8001fd0 <HAL_DMA_Init+0x1c8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d036      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd4 <HAL_DMA_Init+0x1cc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d031      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a5d      	ldr	r2, [pc, #372]	@ (8001fd8 <HAL_DMA_Init+0x1d0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02c      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001fdc <HAL_DMA_Init+0x1d4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d027      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5a      	ldr	r2, [pc, #360]	@ (8001fe0 <HAL_DMA_Init+0x1d8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d022      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <HAL_DMA_Init+0x1dc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d01d      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a57      	ldr	r2, [pc, #348]	@ (8001fe8 <HAL_DMA_Init+0x1e0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a56      	ldr	r2, [pc, #344]	@ (8001fec <HAL_DMA_Init+0x1e4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a54      	ldr	r2, [pc, #336]	@ (8001ff0 <HAL_DMA_Init+0x1e8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a53      	ldr	r2, [pc, #332]	@ (8001ff4 <HAL_DMA_Init+0x1ec>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a51      	ldr	r2, [pc, #324]	@ (8001ff8 <HAL_DMA_Init+0x1f0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_DMA_Init+0xb8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a50      	ldr	r2, [pc, #320]	@ (8001ffc <HAL_DMA_Init+0x1f4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DMA_Init+0xbc>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_DMA_Init+0xbe>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 813c 	beq.w	8002144 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a37      	ldr	r2, [pc, #220]	@ (8001fc0 <HAL_DMA_Init+0x1b8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04a      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a36      	ldr	r2, [pc, #216]	@ (8001fc4 <HAL_DMA_Init+0x1bc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d045      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a34      	ldr	r2, [pc, #208]	@ (8001fc8 <HAL_DMA_Init+0x1c0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d040      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a33      	ldr	r2, [pc, #204]	@ (8001fcc <HAL_DMA_Init+0x1c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d03b      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <HAL_DMA_Init+0x1c8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d036      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a30      	ldr	r2, [pc, #192]	@ (8001fd4 <HAL_DMA_Init+0x1cc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d031      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <HAL_DMA_Init+0x1d0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02c      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2d      	ldr	r2, [pc, #180]	@ (8001fdc <HAL_DMA_Init+0x1d4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d027      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe0 <HAL_DMA_Init+0x1d8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe4 <HAL_DMA_Init+0x1dc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01d      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a28      	ldr	r2, [pc, #160]	@ (8001fe8 <HAL_DMA_Init+0x1e0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d018      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a27      	ldr	r2, [pc, #156]	@ (8001fec <HAL_DMA_Init+0x1e4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a25      	ldr	r2, [pc, #148]	@ (8001ff0 <HAL_DMA_Init+0x1e8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00e      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <HAL_DMA_Init+0x1ec>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ff8 <HAL_DMA_Init+0x1f0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_Init+0x174>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <HAL_DMA_Init+0x1f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <HAL_DMA_Init+0x186>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_DMA_Init+0x196>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f9e:	e02f      	b.n	8002000 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa0:	f7ff fb74 	bl	800168c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d928      	bls.n	8002000 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e242      	b.n	8002446 <HAL_DMA_Init+0x63e>
 8001fc0:	40020010 	.word	0x40020010
 8001fc4:	40020028 	.word	0x40020028
 8001fc8:	40020040 	.word	0x40020040
 8001fcc:	40020058 	.word	0x40020058
 8001fd0:	40020070 	.word	0x40020070
 8001fd4:	40020088 	.word	0x40020088
 8001fd8:	400200a0 	.word	0x400200a0
 8001fdc:	400200b8 	.word	0x400200b8
 8001fe0:	40020410 	.word	0x40020410
 8001fe4:	40020428 	.word	0x40020428
 8001fe8:	40020440 	.word	0x40020440
 8001fec:	40020458 	.word	0x40020458
 8001ff0:	40020470 	.word	0x40020470
 8001ff4:	40020488 	.word	0x40020488
 8001ff8:	400204a0 	.word	0x400204a0
 8001ffc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1c8      	bne.n	8001fa0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <HAL_DMA_Init+0x420>)
 800201a:	4013      	ands	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002026:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b04      	cmp	r3, #4
 8002052:	d107      	bne.n	8002064 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b28      	cmp	r3, #40	@ 0x28
 800206a:	d903      	bls.n	8002074 <HAL_DMA_Init+0x26c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b2e      	cmp	r3, #46	@ 0x2e
 8002072:	d91f      	bls.n	80020b4 <HAL_DMA_Init+0x2ac>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b3e      	cmp	r3, #62	@ 0x3e
 800207a:	d903      	bls.n	8002084 <HAL_DMA_Init+0x27c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b42      	cmp	r3, #66	@ 0x42
 8002082:	d917      	bls.n	80020b4 <HAL_DMA_Init+0x2ac>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b46      	cmp	r3, #70	@ 0x46
 800208a:	d903      	bls.n	8002094 <HAL_DMA_Init+0x28c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b48      	cmp	r3, #72	@ 0x48
 8002092:	d90f      	bls.n	80020b4 <HAL_DMA_Init+0x2ac>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b4e      	cmp	r3, #78	@ 0x4e
 800209a:	d903      	bls.n	80020a4 <HAL_DMA_Init+0x29c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b52      	cmp	r3, #82	@ 0x52
 80020a2:	d907      	bls.n	80020b4 <HAL_DMA_Init+0x2ac>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b73      	cmp	r3, #115	@ 0x73
 80020aa:	d905      	bls.n	80020b8 <HAL_DMA_Init+0x2b0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b77      	cmp	r3, #119	@ 0x77
 80020b2:	d801      	bhi.n	80020b8 <HAL_DMA_Init+0x2b0>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_DMA_Init+0x2b2>
 80020b8:	2300      	movs	r3, #0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f023 0307 	bic.w	r3, r3, #7
 80020dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d117      	bne.n	8002120 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f002 fb2e 	bl	8004764 <DMA_CheckFifoParam>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e192      	b.n	8002446 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f002 fa69 	bl	8004600 <DMA_CalcBaseAndBitshift>
 800212e:	4603      	mov	r3, r0
 8002130:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	223f      	movs	r2, #63	@ 0x3f
 800213c:	409a      	lsls	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e0c8      	b.n	80022d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a38      	ldr	r2, [pc, #224]	@ (800222c <HAL_DMA_Init+0x424>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d022      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a37      	ldr	r2, [pc, #220]	@ (8002230 <HAL_DMA_Init+0x428>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01d      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a35      	ldr	r2, [pc, #212]	@ (8002234 <HAL_DMA_Init+0x42c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <HAL_DMA_Init+0x430>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a32      	ldr	r2, [pc, #200]	@ (800223c <HAL_DMA_Init+0x434>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <HAL_DMA_Init+0x438>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2f      	ldr	r2, [pc, #188]	@ (8002244 <HAL_DMA_Init+0x43c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Init+0x38c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <HAL_DMA_Init+0x440>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_DMA_Init+0x390>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_DMA_Init+0x392>
 8002198:	2300      	movs	r3, #0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8092 	beq.w	80022c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a21      	ldr	r2, [pc, #132]	@ (800222c <HAL_DMA_Init+0x424>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d021      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a20      	ldr	r2, [pc, #128]	@ (8002230 <HAL_DMA_Init+0x428>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01c      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <HAL_DMA_Init+0x42c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d017      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <HAL_DMA_Init+0x430>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d012      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <HAL_DMA_Init+0x434>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002240 <HAL_DMA_Init+0x438>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d008      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <HAL_DMA_Init+0x43c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <HAL_DMA_Init+0x3e6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <HAL_DMA_Init+0x440>)
 80021ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_DMA_Init+0x444>)
 800220a:	4013      	ands	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b40      	cmp	r3, #64	@ 0x40
 8002214:	d01c      	beq.n	8002250 <HAL_DMA_Init+0x448>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b80      	cmp	r3, #128	@ 0x80
 800221c:	d102      	bne.n	8002224 <HAL_DMA_Init+0x41c>
 800221e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002222:	e016      	b.n	8002252 <HAL_DMA_Init+0x44a>
 8002224:	2300      	movs	r3, #0
 8002226:	e014      	b.n	8002252 <HAL_DMA_Init+0x44a>
 8002228:	fe10803f 	.word	0xfe10803f
 800222c:	58025408 	.word	0x58025408
 8002230:	5802541c 	.word	0x5802541c
 8002234:	58025430 	.word	0x58025430
 8002238:	58025444 	.word	0x58025444
 800223c:	58025458 	.word	0x58025458
 8002240:	5802546c 	.word	0x5802546c
 8002244:	58025480 	.word	0x58025480
 8002248:	58025494 	.word	0x58025494
 800224c:	fffe000f 	.word	0xfffe000f
 8002250:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68d2      	ldr	r2, [r2, #12]
 8002256:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002258:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002260:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002268:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002270:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002278:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002280:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b6e      	ldr	r3, [pc, #440]	@ (8002450 <HAL_DMA_Init+0x648>)
 8002298:	4413      	add	r3, r2
 800229a:	4a6e      	ldr	r2, [pc, #440]	@ (8002454 <HAL_DMA_Init+0x64c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f002 f9a9 	bl	8004600 <DMA_CalcBaseAndBitshift>
 80022ae:	4603      	mov	r3, r0
 80022b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2201      	movs	r2, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	e008      	b.n	80022d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2240      	movs	r2, #64	@ 0x40
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0b7      	b.n	8002446 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5f      	ldr	r2, [pc, #380]	@ (8002458 <HAL_DMA_Init+0x650>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d072      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	@ (800245c <HAL_DMA_Init+0x654>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d06d      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002460 <HAL_DMA_Init+0x658>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d068      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002464 <HAL_DMA_Init+0x65c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d063      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a59      	ldr	r2, [pc, #356]	@ (8002468 <HAL_DMA_Init+0x660>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d05e      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a57      	ldr	r2, [pc, #348]	@ (800246c <HAL_DMA_Init+0x664>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d059      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a56      	ldr	r2, [pc, #344]	@ (8002470 <HAL_DMA_Init+0x668>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d054      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a54      	ldr	r2, [pc, #336]	@ (8002474 <HAL_DMA_Init+0x66c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04f      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a53      	ldr	r2, [pc, #332]	@ (8002478 <HAL_DMA_Init+0x670>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04a      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a51      	ldr	r2, [pc, #324]	@ (800247c <HAL_DMA_Init+0x674>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d045      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a50      	ldr	r2, [pc, #320]	@ (8002480 <HAL_DMA_Init+0x678>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d040      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <HAL_DMA_Init+0x67c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d03b      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4d      	ldr	r2, [pc, #308]	@ (8002488 <HAL_DMA_Init+0x680>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d036      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4b      	ldr	r2, [pc, #300]	@ (800248c <HAL_DMA_Init+0x684>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d031      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4a      	ldr	r2, [pc, #296]	@ (8002490 <HAL_DMA_Init+0x688>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d02c      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a48      	ldr	r2, [pc, #288]	@ (8002494 <HAL_DMA_Init+0x68c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d027      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a47      	ldr	r2, [pc, #284]	@ (8002498 <HAL_DMA_Init+0x690>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a45      	ldr	r2, [pc, #276]	@ (800249c <HAL_DMA_Init+0x694>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a44      	ldr	r2, [pc, #272]	@ (80024a0 <HAL_DMA_Init+0x698>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a42      	ldr	r2, [pc, #264]	@ (80024a4 <HAL_DMA_Init+0x69c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a41      	ldr	r2, [pc, #260]	@ (80024a8 <HAL_DMA_Init+0x6a0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00e      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3f      	ldr	r2, [pc, #252]	@ (80024ac <HAL_DMA_Init+0x6a4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3e      	ldr	r2, [pc, #248]	@ (80024b0 <HAL_DMA_Init+0x6a8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_DMA_Init+0x5be>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3c      	ldr	r2, [pc, #240]	@ (80024b4 <HAL_DMA_Init+0x6ac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Init+0x5c2>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_DMA_Init+0x5c4>
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d032      	beq.n	8002436 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f002 fa43 	bl	800485c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b80      	cmp	r3, #128	@ 0x80
 80023dc:	d102      	bne.n	80023e4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80023f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_DMA_Init+0x61c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d80c      	bhi.n	8002424 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f002 fac0 	bl	8004990 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e008      	b.n	8002436 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	a7fdabf8 	.word	0xa7fdabf8
 8002454:	cccccccd 	.word	0xcccccccd
 8002458:	40020010 	.word	0x40020010
 800245c:	40020028 	.word	0x40020028
 8002460:	40020040 	.word	0x40020040
 8002464:	40020058 	.word	0x40020058
 8002468:	40020070 	.word	0x40020070
 800246c:	40020088 	.word	0x40020088
 8002470:	400200a0 	.word	0x400200a0
 8002474:	400200b8 	.word	0x400200b8
 8002478:	40020410 	.word	0x40020410
 800247c:	40020428 	.word	0x40020428
 8002480:	40020440 	.word	0x40020440
 8002484:	40020458 	.word	0x40020458
 8002488:	40020470 	.word	0x40020470
 800248c:	40020488 	.word	0x40020488
 8002490:	400204a0 	.word	0x400204a0
 8002494:	400204b8 	.word	0x400204b8
 8002498:	58025408 	.word	0x58025408
 800249c:	5802541c 	.word	0x5802541c
 80024a0:	58025430 	.word	0x58025430
 80024a4:	58025444 	.word	0x58025444
 80024a8:	58025458 	.word	0x58025458
 80024ac:	5802546c 	.word	0x5802546c
 80024b0:	58025480 	.word	0x58025480
 80024b4:	58025494 	.word	0x58025494

080024b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e226      	b.n	8002922 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_DMA_Start_IT+0x2a>
 80024de:	2302      	movs	r3, #2
 80024e0:	e21f      	b.n	8002922 <HAL_DMA_Start_IT+0x46a>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 820a 	bne.w	800290c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a68      	ldr	r2, [pc, #416]	@ (80026ac <HAL_DMA_Start_IT+0x1f4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d04a      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a66      	ldr	r2, [pc, #408]	@ (80026b0 <HAL_DMA_Start_IT+0x1f8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d045      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a65      	ldr	r2, [pc, #404]	@ (80026b4 <HAL_DMA_Start_IT+0x1fc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d040      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a63      	ldr	r2, [pc, #396]	@ (80026b8 <HAL_DMA_Start_IT+0x200>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d03b      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a62      	ldr	r2, [pc, #392]	@ (80026bc <HAL_DMA_Start_IT+0x204>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d036      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a60      	ldr	r2, [pc, #384]	@ (80026c0 <HAL_DMA_Start_IT+0x208>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d031      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5f      	ldr	r2, [pc, #380]	@ (80026c4 <HAL_DMA_Start_IT+0x20c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d02c      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_DMA_Start_IT+0x210>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d027      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5c      	ldr	r2, [pc, #368]	@ (80026cc <HAL_DMA_Start_IT+0x214>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5a      	ldr	r2, [pc, #360]	@ (80026d0 <HAL_DMA_Start_IT+0x218>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01d      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a59      	ldr	r2, [pc, #356]	@ (80026d4 <HAL_DMA_Start_IT+0x21c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d018      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a57      	ldr	r2, [pc, #348]	@ (80026d8 <HAL_DMA_Start_IT+0x220>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_DMA_Start_IT+0x224>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a54      	ldr	r2, [pc, #336]	@ (80026e0 <HAL_DMA_Start_IT+0x228>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a53      	ldr	r2, [pc, #332]	@ (80026e4 <HAL_DMA_Start_IT+0x22c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d004      	beq.n	80025a6 <HAL_DMA_Start_IT+0xee>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a51      	ldr	r2, [pc, #324]	@ (80026e8 <HAL_DMA_Start_IT+0x230>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <HAL_DMA_Start_IT+0x100>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_DMA_Start_IT+0x110>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f001 fe6a 	bl	80042a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a34      	ldr	r2, [pc, #208]	@ (80026ac <HAL_DMA_Start_IT+0x1f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d04a      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a33      	ldr	r2, [pc, #204]	@ (80026b0 <HAL_DMA_Start_IT+0x1f8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d045      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a31      	ldr	r2, [pc, #196]	@ (80026b4 <HAL_DMA_Start_IT+0x1fc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d040      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a30      	ldr	r2, [pc, #192]	@ (80026b8 <HAL_DMA_Start_IT+0x200>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d03b      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2e      	ldr	r2, [pc, #184]	@ (80026bc <HAL_DMA_Start_IT+0x204>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d036      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <HAL_DMA_Start_IT+0x208>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d031      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2b      	ldr	r2, [pc, #172]	@ (80026c4 <HAL_DMA_Start_IT+0x20c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d02c      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2a      	ldr	r2, [pc, #168]	@ (80026c8 <HAL_DMA_Start_IT+0x210>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d027      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a28      	ldr	r2, [pc, #160]	@ (80026cc <HAL_DMA_Start_IT+0x214>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d022      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a27      	ldr	r2, [pc, #156]	@ (80026d0 <HAL_DMA_Start_IT+0x218>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d01d      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <HAL_DMA_Start_IT+0x21c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d018      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a24      	ldr	r2, [pc, #144]	@ (80026d8 <HAL_DMA_Start_IT+0x220>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d013      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_DMA_Start_IT+0x224>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00e      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_DMA_Start_IT+0x228>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d009      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <HAL_DMA_Start_IT+0x22c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <HAL_DMA_Start_IT+0x1bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <HAL_DMA_Start_IT+0x230>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Start_IT+0x1c0>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_DMA_Start_IT+0x1c2>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d036      	beq.n	80026ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 021e 	bic.w	r2, r3, #30
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0216 	orr.w	r2, r2, #22
 8002690:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03e      	beq.n	8002718 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0208 	orr.w	r2, r2, #8
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e035      	b.n	8002718 <HAL_DMA_Start_IT+0x260>
 80026ac:	40020010 	.word	0x40020010
 80026b0:	40020028 	.word	0x40020028
 80026b4:	40020040 	.word	0x40020040
 80026b8:	40020058 	.word	0x40020058
 80026bc:	40020070 	.word	0x40020070
 80026c0:	40020088 	.word	0x40020088
 80026c4:	400200a0 	.word	0x400200a0
 80026c8:	400200b8 	.word	0x400200b8
 80026cc:	40020410 	.word	0x40020410
 80026d0:	40020428 	.word	0x40020428
 80026d4:	40020440 	.word	0x40020440
 80026d8:	40020458 	.word	0x40020458
 80026dc:	40020470 	.word	0x40020470
 80026e0:	40020488 	.word	0x40020488
 80026e4:	400204a0 	.word	0x400204a0
 80026e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 020e 	bic.w	r2, r3, #14
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 020a 	orr.w	r2, r2, #10
 80026fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0204 	orr.w	r2, r2, #4
 8002716:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a83      	ldr	r2, [pc, #524]	@ (800292c <HAL_DMA_Start_IT+0x474>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d072      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a82      	ldr	r2, [pc, #520]	@ (8002930 <HAL_DMA_Start_IT+0x478>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d06d      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a80      	ldr	r2, [pc, #512]	@ (8002934 <HAL_DMA_Start_IT+0x47c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d068      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a7f      	ldr	r2, [pc, #508]	@ (8002938 <HAL_DMA_Start_IT+0x480>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d063      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a7d      	ldr	r2, [pc, #500]	@ (800293c <HAL_DMA_Start_IT+0x484>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d05e      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7c      	ldr	r2, [pc, #496]	@ (8002940 <HAL_DMA_Start_IT+0x488>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d059      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a7a      	ldr	r2, [pc, #488]	@ (8002944 <HAL_DMA_Start_IT+0x48c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d054      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a79      	ldr	r2, [pc, #484]	@ (8002948 <HAL_DMA_Start_IT+0x490>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d04f      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a77      	ldr	r2, [pc, #476]	@ (800294c <HAL_DMA_Start_IT+0x494>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d04a      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a76      	ldr	r2, [pc, #472]	@ (8002950 <HAL_DMA_Start_IT+0x498>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d045      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a74      	ldr	r2, [pc, #464]	@ (8002954 <HAL_DMA_Start_IT+0x49c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d040      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a73      	ldr	r2, [pc, #460]	@ (8002958 <HAL_DMA_Start_IT+0x4a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d03b      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a71      	ldr	r2, [pc, #452]	@ (800295c <HAL_DMA_Start_IT+0x4a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d036      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a70      	ldr	r2, [pc, #448]	@ (8002960 <HAL_DMA_Start_IT+0x4a8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d031      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002964 <HAL_DMA_Start_IT+0x4ac>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02c      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6d      	ldr	r2, [pc, #436]	@ (8002968 <HAL_DMA_Start_IT+0x4b0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d027      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	@ (800296c <HAL_DMA_Start_IT+0x4b4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d022      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a6a      	ldr	r2, [pc, #424]	@ (8002970 <HAL_DMA_Start_IT+0x4b8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d01d      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a68      	ldr	r2, [pc, #416]	@ (8002974 <HAL_DMA_Start_IT+0x4bc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d018      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a67      	ldr	r2, [pc, #412]	@ (8002978 <HAL_DMA_Start_IT+0x4c0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d013      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a65      	ldr	r2, [pc, #404]	@ (800297c <HAL_DMA_Start_IT+0x4c4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a64      	ldr	r2, [pc, #400]	@ (8002980 <HAL_DMA_Start_IT+0x4c8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a62      	ldr	r2, [pc, #392]	@ (8002984 <HAL_DMA_Start_IT+0x4cc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_DMA_Start_IT+0x350>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a61      	ldr	r2, [pc, #388]	@ (8002988 <HAL_DMA_Start_IT+0x4d0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_DMA_Start_IT+0x354>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_DMA_Start_IT+0x356>
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01a      	beq.n	8002848 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002846:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a37      	ldr	r2, [pc, #220]	@ (800292c <HAL_DMA_Start_IT+0x474>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d04a      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a36      	ldr	r2, [pc, #216]	@ (8002930 <HAL_DMA_Start_IT+0x478>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d045      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <HAL_DMA_Start_IT+0x47c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d040      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a33      	ldr	r2, [pc, #204]	@ (8002938 <HAL_DMA_Start_IT+0x480>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d03b      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a31      	ldr	r2, [pc, #196]	@ (800293c <HAL_DMA_Start_IT+0x484>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d036      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a30      	ldr	r2, [pc, #192]	@ (8002940 <HAL_DMA_Start_IT+0x488>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d031      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2e      	ldr	r2, [pc, #184]	@ (8002944 <HAL_DMA_Start_IT+0x48c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02c      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2d      	ldr	r2, [pc, #180]	@ (8002948 <HAL_DMA_Start_IT+0x490>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d027      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2b      	ldr	r2, [pc, #172]	@ (800294c <HAL_DMA_Start_IT+0x494>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d022      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002950 <HAL_DMA_Start_IT+0x498>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d01d      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a28      	ldr	r2, [pc, #160]	@ (8002954 <HAL_DMA_Start_IT+0x49c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d018      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a27      	ldr	r2, [pc, #156]	@ (8002958 <HAL_DMA_Start_IT+0x4a0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a25      	ldr	r2, [pc, #148]	@ (800295c <HAL_DMA_Start_IT+0x4a4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00e      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <HAL_DMA_Start_IT+0x4a8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_DMA_Start_IT+0x4ac>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_DMA_Start_IT+0x430>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a21      	ldr	r2, [pc, #132]	@ (8002968 <HAL_DMA_Start_IT+0x4b0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d108      	bne.n	80028fa <HAL_DMA_Start_IT+0x442>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e012      	b.n	8002920 <HAL_DMA_Start_IT+0x468>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e009      	b.n	8002920 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40020010 	.word	0x40020010
 8002930:	40020028 	.word	0x40020028
 8002934:	40020040 	.word	0x40020040
 8002938:	40020058 	.word	0x40020058
 800293c:	40020070 	.word	0x40020070
 8002940:	40020088 	.word	0x40020088
 8002944:	400200a0 	.word	0x400200a0
 8002948:	400200b8 	.word	0x400200b8
 800294c:	40020410 	.word	0x40020410
 8002950:	40020428 	.word	0x40020428
 8002954:	40020440 	.word	0x40020440
 8002958:	40020458 	.word	0x40020458
 800295c:	40020470 	.word	0x40020470
 8002960:	40020488 	.word	0x40020488
 8002964:	400204a0 	.word	0x400204a0
 8002968:	400204b8 	.word	0x400204b8
 800296c:	58025408 	.word	0x58025408
 8002970:	5802541c 	.word	0x5802541c
 8002974:	58025430 	.word	0x58025430
 8002978:	58025444 	.word	0x58025444
 800297c:	58025458 	.word	0x58025458
 8002980:	5802546c 	.word	0x5802546c
 8002984:	58025480 	.word	0x58025480
 8002988:	58025494 	.word	0x58025494

0800298c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002994:	f7fe fe7a 	bl	800168c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e2dc      	b.n	8002f5e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2280      	movs	r2, #128	@ 0x80
 80029b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e2cd      	b.n	8002f5e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a76      	ldr	r2, [pc, #472]	@ (8002ba0 <HAL_DMA_Abort+0x214>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d04a      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a74      	ldr	r2, [pc, #464]	@ (8002ba4 <HAL_DMA_Abort+0x218>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d045      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a73      	ldr	r2, [pc, #460]	@ (8002ba8 <HAL_DMA_Abort+0x21c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d040      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a71      	ldr	r2, [pc, #452]	@ (8002bac <HAL_DMA_Abort+0x220>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d03b      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a70      	ldr	r2, [pc, #448]	@ (8002bb0 <HAL_DMA_Abort+0x224>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d036      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a6e      	ldr	r2, [pc, #440]	@ (8002bb4 <HAL_DMA_Abort+0x228>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d031      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6d      	ldr	r2, [pc, #436]	@ (8002bb8 <HAL_DMA_Abort+0x22c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d02c      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bbc <HAL_DMA_Abort+0x230>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc0 <HAL_DMA_Abort+0x234>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a68      	ldr	r2, [pc, #416]	@ (8002bc4 <HAL_DMA_Abort+0x238>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a67      	ldr	r2, [pc, #412]	@ (8002bc8 <HAL_DMA_Abort+0x23c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a65      	ldr	r2, [pc, #404]	@ (8002bcc <HAL_DMA_Abort+0x240>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a64      	ldr	r2, [pc, #400]	@ (8002bd0 <HAL_DMA_Abort+0x244>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a62      	ldr	r2, [pc, #392]	@ (8002bd4 <HAL_DMA_Abort+0x248>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a61      	ldr	r2, [pc, #388]	@ (8002bd8 <HAL_DMA_Abort+0x24c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_DMA_Abort+0xd6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bdc <HAL_DMA_Abort+0x250>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_DMA_Abort+0xda>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_DMA_Abort+0xdc>
 8002a66:	2300      	movs	r3, #0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 021e 	bic.w	r2, r2, #30
 8002a7a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a8a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e00a      	b.n	8002aaa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 020e 	bic.w	r2, r2, #14
 8002aa2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3c      	ldr	r2, [pc, #240]	@ (8002ba0 <HAL_DMA_Abort+0x214>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d072      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8002ba4 <HAL_DMA_Abort+0x218>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d06d      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a39      	ldr	r2, [pc, #228]	@ (8002ba8 <HAL_DMA_Abort+0x21c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d068      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a37      	ldr	r2, [pc, #220]	@ (8002bac <HAL_DMA_Abort+0x220>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d063      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a36      	ldr	r2, [pc, #216]	@ (8002bb0 <HAL_DMA_Abort+0x224>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d05e      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a34      	ldr	r2, [pc, #208]	@ (8002bb4 <HAL_DMA_Abort+0x228>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d059      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a33      	ldr	r2, [pc, #204]	@ (8002bb8 <HAL_DMA_Abort+0x22c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d054      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a31      	ldr	r2, [pc, #196]	@ (8002bbc <HAL_DMA_Abort+0x230>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d04f      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a30      	ldr	r2, [pc, #192]	@ (8002bc0 <HAL_DMA_Abort+0x234>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d04a      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc4 <HAL_DMA_Abort+0x238>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d045      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc8 <HAL_DMA_Abort+0x23c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d040      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bcc <HAL_DMA_Abort+0x240>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d03b      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd0 <HAL_DMA_Abort+0x244>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d036      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a28      	ldr	r2, [pc, #160]	@ (8002bd4 <HAL_DMA_Abort+0x248>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d031      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	@ (8002bd8 <HAL_DMA_Abort+0x24c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d02c      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a25      	ldr	r2, [pc, #148]	@ (8002bdc <HAL_DMA_Abort+0x250>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d027      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a24      	ldr	r2, [pc, #144]	@ (8002be0 <HAL_DMA_Abort+0x254>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <HAL_DMA_Abort+0x258>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01d      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a21      	ldr	r2, [pc, #132]	@ (8002be8 <HAL_DMA_Abort+0x25c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d018      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <HAL_DMA_Abort+0x260>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf0 <HAL_DMA_Abort+0x264>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <HAL_DMA_Abort+0x268>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d009      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <HAL_DMA_Abort+0x26c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Abort+0x20e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	@ (8002bfc <HAL_DMA_Abort+0x270>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d132      	bne.n	8002c00 <HAL_DMA_Abort+0x274>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e031      	b.n	8002c02 <HAL_DMA_Abort+0x276>
 8002b9e:	bf00      	nop
 8002ba0:	40020010 	.word	0x40020010
 8002ba4:	40020028 	.word	0x40020028
 8002ba8:	40020040 	.word	0x40020040
 8002bac:	40020058 	.word	0x40020058
 8002bb0:	40020070 	.word	0x40020070
 8002bb4:	40020088 	.word	0x40020088
 8002bb8:	400200a0 	.word	0x400200a0
 8002bbc:	400200b8 	.word	0x400200b8
 8002bc0:	40020410 	.word	0x40020410
 8002bc4:	40020428 	.word	0x40020428
 8002bc8:	40020440 	.word	0x40020440
 8002bcc:	40020458 	.word	0x40020458
 8002bd0:	40020470 	.word	0x40020470
 8002bd4:	40020488 	.word	0x40020488
 8002bd8:	400204a0 	.word	0x400204a0
 8002bdc:	400204b8 	.word	0x400204b8
 8002be0:	58025408 	.word	0x58025408
 8002be4:	5802541c 	.word	0x5802541c
 8002be8:	58025430 	.word	0x58025430
 8002bec:	58025444 	.word	0x58025444
 8002bf0:	58025458 	.word	0x58025458
 8002bf4:	5802546c 	.word	0x5802546c
 8002bf8:	58025480 	.word	0x58025480
 8002bfc:	58025494 	.word	0x58025494
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c14:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8002dd0 <HAL_DMA_Abort+0x444>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd4 <HAL_DMA_Abort+0x448>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd8 <HAL_DMA_Abort+0x44c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a68      	ldr	r2, [pc, #416]	@ (8002ddc <HAL_DMA_Abort+0x450>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a67      	ldr	r2, [pc, #412]	@ (8002de0 <HAL_DMA_Abort+0x454>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_DMA_Abort+0x458>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a64      	ldr	r2, [pc, #400]	@ (8002de8 <HAL_DMA_Abort+0x45c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a62      	ldr	r2, [pc, #392]	@ (8002dec <HAL_DMA_Abort+0x460>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a61      	ldr	r2, [pc, #388]	@ (8002df0 <HAL_DMA_Abort+0x464>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5f      	ldr	r2, [pc, #380]	@ (8002df4 <HAL_DMA_Abort+0x468>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	@ (8002df8 <HAL_DMA_Abort+0x46c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5c      	ldr	r2, [pc, #368]	@ (8002dfc <HAL_DMA_Abort+0x470>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5b      	ldr	r2, [pc, #364]	@ (8002e00 <HAL_DMA_Abort+0x474>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a59      	ldr	r2, [pc, #356]	@ (8002e04 <HAL_DMA_Abort+0x478>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a58      	ldr	r2, [pc, #352]	@ (8002e08 <HAL_DMA_Abort+0x47c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Abort+0x32a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_DMA_Abort+0x480>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <HAL_DMA_Abort+0x33c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <HAL_DMA_Abort+0x34c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002cd8:	e013      	b.n	8002d02 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cda:	f7fe fcd7 	bl	800168c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d90c      	bls.n	8002d02 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e12d      	b.n	8002f5e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd0 <HAL_DMA_Abort+0x444>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04a      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd4 <HAL_DMA_Abort+0x448>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d045      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <HAL_DMA_Abort+0x44c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d040      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	@ (8002ddc <HAL_DMA_Abort+0x450>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d03b      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a29      	ldr	r2, [pc, #164]	@ (8002de0 <HAL_DMA_Abort+0x454>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d036      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a27      	ldr	r2, [pc, #156]	@ (8002de4 <HAL_DMA_Abort+0x458>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a26      	ldr	r2, [pc, #152]	@ (8002de8 <HAL_DMA_Abort+0x45c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02c      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a24      	ldr	r2, [pc, #144]	@ (8002dec <HAL_DMA_Abort+0x460>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d027      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a23      	ldr	r2, [pc, #140]	@ (8002df0 <HAL_DMA_Abort+0x464>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <HAL_DMA_Abort+0x468>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_DMA_Abort+0x46c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <HAL_DMA_Abort+0x470>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <HAL_DMA_Abort+0x474>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1b      	ldr	r2, [pc, #108]	@ (8002e04 <HAL_DMA_Abort+0x478>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_DMA_Abort+0x47c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_Abort+0x422>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a18      	ldr	r2, [pc, #96]	@ (8002e0c <HAL_DMA_Abort+0x480>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_DMA_Abort+0x426>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_DMA_Abort+0x428>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02b      	beq.n	8002e10 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	223f      	movs	r2, #63	@ 0x3f
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	e02a      	b.n	8002e26 <HAL_DMA_Abort+0x49a>
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	409a      	lsls	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a4f      	ldr	r2, [pc, #316]	@ (8002f68 <HAL_DMA_Abort+0x5dc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d072      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	@ (8002f6c <HAL_DMA_Abort+0x5e0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d06d      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002f70 <HAL_DMA_Abort+0x5e4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d068      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a4a      	ldr	r2, [pc, #296]	@ (8002f74 <HAL_DMA_Abort+0x5e8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d063      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a49      	ldr	r2, [pc, #292]	@ (8002f78 <HAL_DMA_Abort+0x5ec>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d05e      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a47      	ldr	r2, [pc, #284]	@ (8002f7c <HAL_DMA_Abort+0x5f0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d059      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a46      	ldr	r2, [pc, #280]	@ (8002f80 <HAL_DMA_Abort+0x5f4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d054      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a44      	ldr	r2, [pc, #272]	@ (8002f84 <HAL_DMA_Abort+0x5f8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d04f      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a43      	ldr	r2, [pc, #268]	@ (8002f88 <HAL_DMA_Abort+0x5fc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d04a      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a41      	ldr	r2, [pc, #260]	@ (8002f8c <HAL_DMA_Abort+0x600>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d045      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a40      	ldr	r2, [pc, #256]	@ (8002f90 <HAL_DMA_Abort+0x604>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d040      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a3e      	ldr	r2, [pc, #248]	@ (8002f94 <HAL_DMA_Abort+0x608>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d03b      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8002f98 <HAL_DMA_Abort+0x60c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d036      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a3b      	ldr	r2, [pc, #236]	@ (8002f9c <HAL_DMA_Abort+0x610>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d031      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8002fa0 <HAL_DMA_Abort+0x614>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d02c      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a38      	ldr	r2, [pc, #224]	@ (8002fa4 <HAL_DMA_Abort+0x618>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d027      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a37      	ldr	r2, [pc, #220]	@ (8002fa8 <HAL_DMA_Abort+0x61c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d022      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a35      	ldr	r2, [pc, #212]	@ (8002fac <HAL_DMA_Abort+0x620>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a34      	ldr	r2, [pc, #208]	@ (8002fb0 <HAL_DMA_Abort+0x624>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d018      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a32      	ldr	r2, [pc, #200]	@ (8002fb4 <HAL_DMA_Abort+0x628>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a31      	ldr	r2, [pc, #196]	@ (8002fb8 <HAL_DMA_Abort+0x62c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2f      	ldr	r2, [pc, #188]	@ (8002fbc <HAL_DMA_Abort+0x630>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <HAL_DMA_Abort+0x634>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_DMA_Abort+0x58a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2c      	ldr	r2, [pc, #176]	@ (8002fc4 <HAL_DMA_Abort+0x638>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_DMA_Abort+0x58e>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_DMA_Abort+0x590>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f28:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f40:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f4a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020010 	.word	0x40020010
 8002f6c:	40020028 	.word	0x40020028
 8002f70:	40020040 	.word	0x40020040
 8002f74:	40020058 	.word	0x40020058
 8002f78:	40020070 	.word	0x40020070
 8002f7c:	40020088 	.word	0x40020088
 8002f80:	400200a0 	.word	0x400200a0
 8002f84:	400200b8 	.word	0x400200b8
 8002f88:	40020410 	.word	0x40020410
 8002f8c:	40020428 	.word	0x40020428
 8002f90:	40020440 	.word	0x40020440
 8002f94:	40020458 	.word	0x40020458
 8002f98:	40020470 	.word	0x40020470
 8002f9c:	40020488 	.word	0x40020488
 8002fa0:	400204a0 	.word	0x400204a0
 8002fa4:	400204b8 	.word	0x400204b8
 8002fa8:	58025408 	.word	0x58025408
 8002fac:	5802541c 	.word	0x5802541c
 8002fb0:	58025430 	.word	0x58025430
 8002fb4:	58025444 	.word	0x58025444
 8002fb8:	58025458 	.word	0x58025458
 8002fbc:	5802546c 	.word	0x5802546c
 8002fc0:	58025480 	.word	0x58025480
 8002fc4:	58025494 	.word	0x58025494

08002fc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e237      	b.n	800344a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2280      	movs	r2, #128	@ 0x80
 8002fea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e22c      	b.n	800344a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5c      	ldr	r2, [pc, #368]	@ (8003168 <HAL_DMA_Abort_IT+0x1a0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d04a      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800316c <HAL_DMA_Abort_IT+0x1a4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d045      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a59      	ldr	r2, [pc, #356]	@ (8003170 <HAL_DMA_Abort_IT+0x1a8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d040      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a58      	ldr	r2, [pc, #352]	@ (8003174 <HAL_DMA_Abort_IT+0x1ac>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d03b      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a56      	ldr	r2, [pc, #344]	@ (8003178 <HAL_DMA_Abort_IT+0x1b0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d036      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a55      	ldr	r2, [pc, #340]	@ (800317c <HAL_DMA_Abort_IT+0x1b4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d031      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a53      	ldr	r2, [pc, #332]	@ (8003180 <HAL_DMA_Abort_IT+0x1b8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d02c      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a52      	ldr	r2, [pc, #328]	@ (8003184 <HAL_DMA_Abort_IT+0x1bc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d027      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a50      	ldr	r2, [pc, #320]	@ (8003188 <HAL_DMA_Abort_IT+0x1c0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d022      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a4f      	ldr	r2, [pc, #316]	@ (800318c <HAL_DMA_Abort_IT+0x1c4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d01d      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a4d      	ldr	r2, [pc, #308]	@ (8003190 <HAL_DMA_Abort_IT+0x1c8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4c      	ldr	r2, [pc, #304]	@ (8003194 <HAL_DMA_Abort_IT+0x1cc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a4a      	ldr	r2, [pc, #296]	@ (8003198 <HAL_DMA_Abort_IT+0x1d0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a49      	ldr	r2, [pc, #292]	@ (800319c <HAL_DMA_Abort_IT+0x1d4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a47      	ldr	r2, [pc, #284]	@ (80031a0 <HAL_DMA_Abort_IT+0x1d8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_DMA_Abort_IT+0xc8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a46      	ldr	r2, [pc, #280]	@ (80031a4 <HAL_DMA_Abort_IT+0x1dc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_DMA_Abort_IT+0xcc>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_DMA_Abort_IT+0xce>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8086 	beq.w	80031a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003168 <HAL_DMA_Abort_IT+0x1a0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d04a      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2e      	ldr	r2, [pc, #184]	@ (800316c <HAL_DMA_Abort_IT+0x1a4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d045      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <HAL_DMA_Abort_IT+0x1a8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d040      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003174 <HAL_DMA_Abort_IT+0x1ac>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d03b      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <HAL_DMA_Abort_IT+0x1b0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d036      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a28      	ldr	r2, [pc, #160]	@ (800317c <HAL_DMA_Abort_IT+0x1b4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d031      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a26      	ldr	r2, [pc, #152]	@ (8003180 <HAL_DMA_Abort_IT+0x1b8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02c      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a25      	ldr	r2, [pc, #148]	@ (8003184 <HAL_DMA_Abort_IT+0x1bc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d027      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a23      	ldr	r2, [pc, #140]	@ (8003188 <HAL_DMA_Abort_IT+0x1c0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a22      	ldr	r2, [pc, #136]	@ (800318c <HAL_DMA_Abort_IT+0x1c4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d01d      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a20      	ldr	r2, [pc, #128]	@ (8003190 <HAL_DMA_Abort_IT+0x1c8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_DMA_Abort_IT+0x1cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_DMA_Abort_IT+0x1d0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <HAL_DMA_Abort_IT+0x1d4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1a      	ldr	r2, [pc, #104]	@ (80031a0 <HAL_DMA_Abort_IT+0x1d8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Abort_IT+0x17c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <HAL_DMA_Abort_IT+0x1dc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <HAL_DMA_Abort_IT+0x18e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e178      	b.n	8003448 <HAL_DMA_Abort_IT+0x480>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e16f      	b.n	8003448 <HAL_DMA_Abort_IT+0x480>
 8003168:	40020010 	.word	0x40020010
 800316c:	40020028 	.word	0x40020028
 8003170:	40020040 	.word	0x40020040
 8003174:	40020058 	.word	0x40020058
 8003178:	40020070 	.word	0x40020070
 800317c:	40020088 	.word	0x40020088
 8003180:	400200a0 	.word	0x400200a0
 8003184:	400200b8 	.word	0x400200b8
 8003188:	40020410 	.word	0x40020410
 800318c:	40020428 	.word	0x40020428
 8003190:	40020440 	.word	0x40020440
 8003194:	40020458 	.word	0x40020458
 8003198:	40020470 	.word	0x40020470
 800319c:	40020488 	.word	0x40020488
 80031a0:	400204a0 	.word	0x400204a0
 80031a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 020e 	bic.w	r2, r2, #14
 80031b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a6c      	ldr	r2, [pc, #432]	@ (8003370 <HAL_DMA_Abort_IT+0x3a8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d04a      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6b      	ldr	r2, [pc, #428]	@ (8003374 <HAL_DMA_Abort_IT+0x3ac>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d045      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a69      	ldr	r2, [pc, #420]	@ (8003378 <HAL_DMA_Abort_IT+0x3b0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d040      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a68      	ldr	r2, [pc, #416]	@ (800337c <HAL_DMA_Abort_IT+0x3b4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d03b      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a66      	ldr	r2, [pc, #408]	@ (8003380 <HAL_DMA_Abort_IT+0x3b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d036      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a65      	ldr	r2, [pc, #404]	@ (8003384 <HAL_DMA_Abort_IT+0x3bc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d031      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a63      	ldr	r2, [pc, #396]	@ (8003388 <HAL_DMA_Abort_IT+0x3c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02c      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a62      	ldr	r2, [pc, #392]	@ (800338c <HAL_DMA_Abort_IT+0x3c4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d027      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a60      	ldr	r2, [pc, #384]	@ (8003390 <HAL_DMA_Abort_IT+0x3c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d022      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5f      	ldr	r2, [pc, #380]	@ (8003394 <HAL_DMA_Abort_IT+0x3cc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d01d      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a5d      	ldr	r2, [pc, #372]	@ (8003398 <HAL_DMA_Abort_IT+0x3d0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d018      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5c      	ldr	r2, [pc, #368]	@ (800339c <HAL_DMA_Abort_IT+0x3d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5a      	ldr	r2, [pc, #360]	@ (80033a0 <HAL_DMA_Abort_IT+0x3d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a59      	ldr	r2, [pc, #356]	@ (80033a4 <HAL_DMA_Abort_IT+0x3dc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a57      	ldr	r2, [pc, #348]	@ (80033a8 <HAL_DMA_Abort_IT+0x3e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_DMA_Abort_IT+0x290>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a56      	ldr	r2, [pc, #344]	@ (80033ac <HAL_DMA_Abort_IT+0x3e4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d108      	bne.n	800326a <HAL_DMA_Abort_IT+0x2a2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e007      	b.n	800327a <HAL_DMA_Abort_IT+0x2b2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a3c      	ldr	r2, [pc, #240]	@ (8003370 <HAL_DMA_Abort_IT+0x3a8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d072      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3a      	ldr	r2, [pc, #232]	@ (8003374 <HAL_DMA_Abort_IT+0x3ac>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d06d      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a39      	ldr	r2, [pc, #228]	@ (8003378 <HAL_DMA_Abort_IT+0x3b0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d068      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a37      	ldr	r2, [pc, #220]	@ (800337c <HAL_DMA_Abort_IT+0x3b4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d063      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a36      	ldr	r2, [pc, #216]	@ (8003380 <HAL_DMA_Abort_IT+0x3b8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d05e      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a34      	ldr	r2, [pc, #208]	@ (8003384 <HAL_DMA_Abort_IT+0x3bc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d059      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a33      	ldr	r2, [pc, #204]	@ (8003388 <HAL_DMA_Abort_IT+0x3c0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d054      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a31      	ldr	r2, [pc, #196]	@ (800338c <HAL_DMA_Abort_IT+0x3c4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d04f      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a30      	ldr	r2, [pc, #192]	@ (8003390 <HAL_DMA_Abort_IT+0x3c8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04a      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003394 <HAL_DMA_Abort_IT+0x3cc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d045      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003398 <HAL_DMA_Abort_IT+0x3d0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d040      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2b      	ldr	r2, [pc, #172]	@ (800339c <HAL_DMA_Abort_IT+0x3d4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d03b      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2a      	ldr	r2, [pc, #168]	@ (80033a0 <HAL_DMA_Abort_IT+0x3d8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d036      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a28      	ldr	r2, [pc, #160]	@ (80033a4 <HAL_DMA_Abort_IT+0x3dc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <HAL_DMA_Abort_IT+0x3e0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d02c      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a25      	ldr	r2, [pc, #148]	@ (80033ac <HAL_DMA_Abort_IT+0x3e4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d027      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a24      	ldr	r2, [pc, #144]	@ (80033b0 <HAL_DMA_Abort_IT+0x3e8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a22      	ldr	r2, [pc, #136]	@ (80033b4 <HAL_DMA_Abort_IT+0x3ec>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01d      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a21      	ldr	r2, [pc, #132]	@ (80033b8 <HAL_DMA_Abort_IT+0x3f0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1f      	ldr	r2, [pc, #124]	@ (80033bc <HAL_DMA_Abort_IT+0x3f4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1e      	ldr	r2, [pc, #120]	@ (80033c0 <HAL_DMA_Abort_IT+0x3f8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_DMA_Abort_IT+0x3fc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <HAL_DMA_Abort_IT+0x400>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_DMA_Abort_IT+0x3a2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a19      	ldr	r2, [pc, #100]	@ (80033cc <HAL_DMA_Abort_IT+0x404>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d132      	bne.n	80033d0 <HAL_DMA_Abort_IT+0x408>
 800336a:	2301      	movs	r3, #1
 800336c:	e031      	b.n	80033d2 <HAL_DMA_Abort_IT+0x40a>
 800336e:	bf00      	nop
 8003370:	40020010 	.word	0x40020010
 8003374:	40020028 	.word	0x40020028
 8003378:	40020040 	.word	0x40020040
 800337c:	40020058 	.word	0x40020058
 8003380:	40020070 	.word	0x40020070
 8003384:	40020088 	.word	0x40020088
 8003388:	400200a0 	.word	0x400200a0
 800338c:	400200b8 	.word	0x400200b8
 8003390:	40020410 	.word	0x40020410
 8003394:	40020428 	.word	0x40020428
 8003398:	40020440 	.word	0x40020440
 800339c:	40020458 	.word	0x40020458
 80033a0:	40020470 	.word	0x40020470
 80033a4:	40020488 	.word	0x40020488
 80033a8:	400204a0 	.word	0x400204a0
 80033ac:	400204b8 	.word	0x400204b8
 80033b0:	58025408 	.word	0x58025408
 80033b4:	5802541c 	.word	0x5802541c
 80033b8:	58025430 	.word	0x58025430
 80033bc:	58025444 	.word	0x58025444
 80033c0:	58025458 	.word	0x58025458
 80033c4:	5802546c 	.word	0x5802546c
 80033c8:	58025480 	.word	0x58025480
 80033cc:	58025494 	.word	0x58025494
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d028      	beq.n	8003428 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2201      	movs	r2, #1
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003404:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800341c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003426:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop

08003454 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003460:	4b67      	ldr	r3, [pc, #412]	@ (8003600 <HAL_DMA_IRQHandler+0x1ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a67      	ldr	r2, [pc, #412]	@ (8003604 <HAL_DMA_IRQHandler+0x1b0>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	0a9b      	lsrs	r3, r3, #10
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a5f      	ldr	r2, [pc, #380]	@ (8003608 <HAL_DMA_IRQHandler+0x1b4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d04a      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5d      	ldr	r2, [pc, #372]	@ (800360c <HAL_DMA_IRQHandler+0x1b8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d045      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5c      	ldr	r2, [pc, #368]	@ (8003610 <HAL_DMA_IRQHandler+0x1bc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d040      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003614 <HAL_DMA_IRQHandler+0x1c0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d03b      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a59      	ldr	r2, [pc, #356]	@ (8003618 <HAL_DMA_IRQHandler+0x1c4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d036      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a57      	ldr	r2, [pc, #348]	@ (800361c <HAL_DMA_IRQHandler+0x1c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d031      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a56      	ldr	r2, [pc, #344]	@ (8003620 <HAL_DMA_IRQHandler+0x1cc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d02c      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a54      	ldr	r2, [pc, #336]	@ (8003624 <HAL_DMA_IRQHandler+0x1d0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d027      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a53      	ldr	r2, [pc, #332]	@ (8003628 <HAL_DMA_IRQHandler+0x1d4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a51      	ldr	r2, [pc, #324]	@ (800362c <HAL_DMA_IRQHandler+0x1d8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01d      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a50      	ldr	r2, [pc, #320]	@ (8003630 <HAL_DMA_IRQHandler+0x1dc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003634 <HAL_DMA_IRQHandler+0x1e0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a4d      	ldr	r2, [pc, #308]	@ (8003638 <HAL_DMA_IRQHandler+0x1e4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a4b      	ldr	r2, [pc, #300]	@ (800363c <HAL_DMA_IRQHandler+0x1e8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4a      	ldr	r2, [pc, #296]	@ (8003640 <HAL_DMA_IRQHandler+0x1ec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_DMA_IRQHandler+0xd2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a48      	ldr	r2, [pc, #288]	@ (8003644 <HAL_DMA_IRQHandler+0x1f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <HAL_DMA_IRQHandler+0xd6>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_DMA_IRQHandler+0xd8>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 842b 	beq.w	8003d88 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2208      	movs	r2, #8
 800353c:	409a      	lsls	r2, r3
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80a2 	beq.w	800368c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2e      	ldr	r2, [pc, #184]	@ (8003608 <HAL_DMA_IRQHandler+0x1b4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d04a      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2d      	ldr	r2, [pc, #180]	@ (800360c <HAL_DMA_IRQHandler+0x1b8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d045      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_DMA_IRQHandler+0x1bc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d040      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a2a      	ldr	r2, [pc, #168]	@ (8003614 <HAL_DMA_IRQHandler+0x1c0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d03b      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_DMA_IRQHandler+0x1c4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d036      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a27      	ldr	r2, [pc, #156]	@ (800361c <HAL_DMA_IRQHandler+0x1c8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d031      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a25      	ldr	r2, [pc, #148]	@ (8003620 <HAL_DMA_IRQHandler+0x1cc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02c      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a24      	ldr	r2, [pc, #144]	@ (8003624 <HAL_DMA_IRQHandler+0x1d0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d027      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <HAL_DMA_IRQHandler+0x1d4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d022      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a21      	ldr	r2, [pc, #132]	@ (800362c <HAL_DMA_IRQHandler+0x1d8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d01d      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_DMA_IRQHandler+0x1dc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003634 <HAL_DMA_IRQHandler+0x1e0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_DMA_IRQHandler+0x1e4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1b      	ldr	r2, [pc, #108]	@ (800363c <HAL_DMA_IRQHandler+0x1e8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a19      	ldr	r2, [pc, #100]	@ (8003640 <HAL_DMA_IRQHandler+0x1ec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_DMA_IRQHandler+0x194>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <HAL_DMA_IRQHandler+0x1f0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d12f      	bne.n	8003648 <HAL_DMA_IRQHandler+0x1f4>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e02e      	b.n	800365c <HAL_DMA_IRQHandler+0x208>
 80035fe:	bf00      	nop
 8003600:	24000004 	.word	0x24000004
 8003604:	1b4e81b5 	.word	0x1b4e81b5
 8003608:	40020010 	.word	0x40020010
 800360c:	40020028 	.word	0x40020028
 8003610:	40020040 	.word	0x40020040
 8003614:	40020058 	.word	0x40020058
 8003618:	40020070 	.word	0x40020070
 800361c:	40020088 	.word	0x40020088
 8003620:	400200a0 	.word	0x400200a0
 8003624:	400200b8 	.word	0x400200b8
 8003628:	40020410 	.word	0x40020410
 800362c:	40020428 	.word	0x40020428
 8003630:	40020440 	.word	0x40020440
 8003634:	40020458 	.word	0x40020458
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204a0 	.word	0x400204a0
 8003644:	400204b8 	.word	0x400204b8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d015      	beq.n	800368c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2208      	movs	r2, #8
 800367a:	409a      	lsls	r2, r3
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d06e      	beq.n	8003780 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a69      	ldr	r2, [pc, #420]	@ (800384c <HAL_DMA_IRQHandler+0x3f8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d04a      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a67      	ldr	r2, [pc, #412]	@ (8003850 <HAL_DMA_IRQHandler+0x3fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d045      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a66      	ldr	r2, [pc, #408]	@ (8003854 <HAL_DMA_IRQHandler+0x400>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d040      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a64      	ldr	r2, [pc, #400]	@ (8003858 <HAL_DMA_IRQHandler+0x404>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03b      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a63      	ldr	r2, [pc, #396]	@ (800385c <HAL_DMA_IRQHandler+0x408>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d036      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a61      	ldr	r2, [pc, #388]	@ (8003860 <HAL_DMA_IRQHandler+0x40c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d031      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a60      	ldr	r2, [pc, #384]	@ (8003864 <HAL_DMA_IRQHandler+0x410>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d02c      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5e      	ldr	r2, [pc, #376]	@ (8003868 <HAL_DMA_IRQHandler+0x414>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d027      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5d      	ldr	r2, [pc, #372]	@ (800386c <HAL_DMA_IRQHandler+0x418>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d022      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5b      	ldr	r2, [pc, #364]	@ (8003870 <HAL_DMA_IRQHandler+0x41c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_DMA_IRQHandler+0x420>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d018      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a58      	ldr	r2, [pc, #352]	@ (8003878 <HAL_DMA_IRQHandler+0x424>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a57      	ldr	r2, [pc, #348]	@ (800387c <HAL_DMA_IRQHandler+0x428>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a55      	ldr	r2, [pc, #340]	@ (8003880 <HAL_DMA_IRQHandler+0x42c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a54      	ldr	r2, [pc, #336]	@ (8003884 <HAL_DMA_IRQHandler+0x430>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_DMA_IRQHandler+0x2ee>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a52      	ldr	r2, [pc, #328]	@ (8003888 <HAL_DMA_IRQHandler+0x434>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10a      	bne.n	8003758 <HAL_DMA_IRQHandler+0x304>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e003      	b.n	8003760 <HAL_DMA_IRQHandler+0x30c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003778:	f043 0202 	orr.w	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2204      	movs	r2, #4
 800378a:	409a      	lsls	r2, r3
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 808f 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2c      	ldr	r2, [pc, #176]	@ (800384c <HAL_DMA_IRQHandler+0x3f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d04a      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003850 <HAL_DMA_IRQHandler+0x3fc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d045      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a29      	ldr	r2, [pc, #164]	@ (8003854 <HAL_DMA_IRQHandler+0x400>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d040      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a27      	ldr	r2, [pc, #156]	@ (8003858 <HAL_DMA_IRQHandler+0x404>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d03b      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a26      	ldr	r2, [pc, #152]	@ (800385c <HAL_DMA_IRQHandler+0x408>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d036      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a24      	ldr	r2, [pc, #144]	@ (8003860 <HAL_DMA_IRQHandler+0x40c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_DMA_IRQHandler+0x410>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d02c      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_DMA_IRQHandler+0x414>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d027      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a20      	ldr	r2, [pc, #128]	@ (800386c <HAL_DMA_IRQHandler+0x418>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <HAL_DMA_IRQHandler+0x41c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d01d      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_DMA_IRQHandler+0x420>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <HAL_DMA_IRQHandler+0x424>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1a      	ldr	r2, [pc, #104]	@ (800387c <HAL_DMA_IRQHandler+0x428>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <HAL_DMA_IRQHandler+0x42c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d009      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a17      	ldr	r2, [pc, #92]	@ (8003884 <HAL_DMA_IRQHandler+0x430>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_IRQHandler+0x3e2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a15      	ldr	r2, [pc, #84]	@ (8003888 <HAL_DMA_IRQHandler+0x434>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d12a      	bne.n	800388c <HAL_DMA_IRQHandler+0x438>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e023      	b.n	8003894 <HAL_DMA_IRQHandler+0x440>
 800384c:	40020010 	.word	0x40020010
 8003850:	40020028 	.word	0x40020028
 8003854:	40020040 	.word	0x40020040
 8003858:	40020058 	.word	0x40020058
 800385c:	40020070 	.word	0x40020070
 8003860:	40020088 	.word	0x40020088
 8003864:	400200a0 	.word	0x400200a0
 8003868:	400200b8 	.word	0x400200b8
 800386c:	40020410 	.word	0x40020410
 8003870:	40020428 	.word	0x40020428
 8003874:	40020440 	.word	0x40020440
 8003878:	40020458 	.word	0x40020458
 800387c:	40020470 	.word	0x40020470
 8003880:	40020488 	.word	0x40020488
 8003884:	400204a0 	.word	0x400204a0
 8003888:	400204b8 	.word	0x400204b8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2204      	movs	r2, #4
 80038a2:	409a      	lsls	r2, r3
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2210      	movs	r2, #16
 80038be:	409a      	lsls	r2, r3
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a6 	beq.w	8003a16 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a85      	ldr	r2, [pc, #532]	@ (8003ae4 <HAL_DMA_IRQHandler+0x690>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a83      	ldr	r2, [pc, #524]	@ (8003ae8 <HAL_DMA_IRQHandler+0x694>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a82      	ldr	r2, [pc, #520]	@ (8003aec <HAL_DMA_IRQHandler+0x698>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a80      	ldr	r2, [pc, #512]	@ (8003af0 <HAL_DMA_IRQHandler+0x69c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7f      	ldr	r2, [pc, #508]	@ (8003af4 <HAL_DMA_IRQHandler+0x6a0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7d      	ldr	r2, [pc, #500]	@ (8003af8 <HAL_DMA_IRQHandler+0x6a4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a7c      	ldr	r2, [pc, #496]	@ (8003afc <HAL_DMA_IRQHandler+0x6a8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7a      	ldr	r2, [pc, #488]	@ (8003b00 <HAL_DMA_IRQHandler+0x6ac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a79      	ldr	r2, [pc, #484]	@ (8003b04 <HAL_DMA_IRQHandler+0x6b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a77      	ldr	r2, [pc, #476]	@ (8003b08 <HAL_DMA_IRQHandler+0x6b4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a76      	ldr	r2, [pc, #472]	@ (8003b0c <HAL_DMA_IRQHandler+0x6b8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a74      	ldr	r2, [pc, #464]	@ (8003b10 <HAL_DMA_IRQHandler+0x6bc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a73      	ldr	r2, [pc, #460]	@ (8003b14 <HAL_DMA_IRQHandler+0x6c0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a71      	ldr	r2, [pc, #452]	@ (8003b18 <HAL_DMA_IRQHandler+0x6c4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a70      	ldr	r2, [pc, #448]	@ (8003b1c <HAL_DMA_IRQHandler+0x6c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_IRQHandler+0x516>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6e      	ldr	r2, [pc, #440]	@ (8003b20 <HAL_DMA_IRQHandler+0x6cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10a      	bne.n	8003980 <HAL_DMA_IRQHandler+0x52c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e009      	b.n	8003994 <HAL_DMA_IRQHandler+0x540>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03e      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	2210      	movs	r2, #16
 80039a2:	409a      	lsls	r2, r3
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d108      	bne.n	80039d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d024      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
 80039d4:	e01f      	b.n	8003a16 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01b      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
 80039e6:	e016      	b.n	8003a16 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d107      	bne.n	8003a06 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0208 	bic.w	r2, r2, #8
 8003a04:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2220      	movs	r2, #32
 8003a20:	409a      	lsls	r2, r3
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8110 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae4 <HAL_DMA_IRQHandler+0x690>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d04a      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <HAL_DMA_IRQHandler+0x694>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d045      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <HAL_DMA_IRQHandler+0x698>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d040      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a28      	ldr	r2, [pc, #160]	@ (8003af0 <HAL_DMA_IRQHandler+0x69c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d03b      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <HAL_DMA_IRQHandler+0x6a0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d036      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a25      	ldr	r2, [pc, #148]	@ (8003af8 <HAL_DMA_IRQHandler+0x6a4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d031      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a23      	ldr	r2, [pc, #140]	@ (8003afc <HAL_DMA_IRQHandler+0x6a8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d02c      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a22      	ldr	r2, [pc, #136]	@ (8003b00 <HAL_DMA_IRQHandler+0x6ac>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d027      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a20      	ldr	r2, [pc, #128]	@ (8003b04 <HAL_DMA_IRQHandler+0x6b0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d022      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b08 <HAL_DMA_IRQHandler+0x6b4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01d      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <HAL_DMA_IRQHandler+0x6b8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d018      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <HAL_DMA_IRQHandler+0x6bc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b14 <HAL_DMA_IRQHandler+0x6c0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <HAL_DMA_IRQHandler+0x6c4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a17      	ldr	r2, [pc, #92]	@ (8003b1c <HAL_DMA_IRQHandler+0x6c8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_DMA_IRQHandler+0x678>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	@ (8003b20 <HAL_DMA_IRQHandler+0x6cc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d12b      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x6d0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e02a      	b.n	8003b38 <HAL_DMA_IRQHandler+0x6e4>
 8003ae2:	bf00      	nop
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8087 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2220      	movs	r2, #32
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d139      	bne.n	8003bce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0216 	bic.w	r2, r2, #22
 8003b68:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b78:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x736>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	223f      	movs	r2, #63	@ 0x3f
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 834a 	beq.w	8004258 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
          }
          return;
 8003bcc:	e344      	b.n	8004258 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d018      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d02c      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
 8003bfa:	e027      	b.n	8003c4c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e01e      	b.n	8003c4c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0210 	bic.w	r2, r2, #16
 8003c2a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8306 	beq.w	8004262 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8088 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2204      	movs	r2, #4
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7a      	ldr	r2, [pc, #488]	@ (8003e5c <HAL_DMA_IRQHandler+0xa08>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a79      	ldr	r2, [pc, #484]	@ (8003e60 <HAL_DMA_IRQHandler+0xa0c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a77      	ldr	r2, [pc, #476]	@ (8003e64 <HAL_DMA_IRQHandler+0xa10>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a76      	ldr	r2, [pc, #472]	@ (8003e68 <HAL_DMA_IRQHandler+0xa14>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a74      	ldr	r2, [pc, #464]	@ (8003e6c <HAL_DMA_IRQHandler+0xa18>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a73      	ldr	r2, [pc, #460]	@ (8003e70 <HAL_DMA_IRQHandler+0xa1c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a71      	ldr	r2, [pc, #452]	@ (8003e74 <HAL_DMA_IRQHandler+0xa20>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a70      	ldr	r2, [pc, #448]	@ (8003e78 <HAL_DMA_IRQHandler+0xa24>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e7c <HAL_DMA_IRQHandler+0xa28>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6d      	ldr	r2, [pc, #436]	@ (8003e80 <HAL_DMA_IRQHandler+0xa2c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6b      	ldr	r2, [pc, #428]	@ (8003e84 <HAL_DMA_IRQHandler+0xa30>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6a      	ldr	r2, [pc, #424]	@ (8003e88 <HAL_DMA_IRQHandler+0xa34>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	@ (8003e8c <HAL_DMA_IRQHandler+0xa38>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a67      	ldr	r2, [pc, #412]	@ (8003e90 <HAL_DMA_IRQHandler+0xa3c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a65      	ldr	r2, [pc, #404]	@ (8003e94 <HAL_DMA_IRQHandler+0xa40>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x8b8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a64      	ldr	r2, [pc, #400]	@ (8003e98 <HAL_DMA_IRQHandler+0xa44>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x8ca>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e007      	b.n	8003d2e <HAL_DMA_IRQHandler+0x8da>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d307      	bcc.n	8003d4a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f2      	bne.n	8003d2e <HAL_DMA_IRQHandler+0x8da>
 8003d48:	e000      	b.n	8003d4c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d4a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003d62:	e003      	b.n	8003d6c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8272 	beq.w	8004262 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
 8003d86:	e26c      	b.n	8004262 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a43      	ldr	r2, [pc, #268]	@ (8003e9c <HAL_DMA_IRQHandler+0xa48>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d022      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a42      	ldr	r2, [pc, #264]	@ (8003ea0 <HAL_DMA_IRQHandler+0xa4c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d01d      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a40      	ldr	r2, [pc, #256]	@ (8003ea4 <HAL_DMA_IRQHandler+0xa50>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d018      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ea8 <HAL_DMA_IRQHandler+0xa54>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a3d      	ldr	r2, [pc, #244]	@ (8003eac <HAL_DMA_IRQHandler+0xa58>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00e      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb0 <HAL_DMA_IRQHandler+0xa5c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d009      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <HAL_DMA_IRQHandler+0xa60>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x984>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_DMA_IRQHandler+0xa64>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x988>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_DMA_IRQHandler+0x98a>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 823f 	beq.w	8004262 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2204      	movs	r2, #4
 8003df6:	409a      	lsls	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80cd 	beq.w	8003f9c <HAL_DMA_IRQHandler+0xb48>
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80c7 	beq.w	8003f9c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2204      	movs	r2, #4
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d049      	beq.n	8003ebc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8210 	beq.w	800425c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e44:	e20a      	b.n	800425c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 8206 	beq.w	800425c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e58:	e200      	b.n	800425c <HAL_DMA_IRQHandler+0xe08>
 8003e5a:	bf00      	nop
 8003e5c:	40020010 	.word	0x40020010
 8003e60:	40020028 	.word	0x40020028
 8003e64:	40020040 	.word	0x40020040
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	40020070 	.word	0x40020070
 8003e70:	40020088 	.word	0x40020088
 8003e74:	400200a0 	.word	0x400200a0
 8003e78:	400200b8 	.word	0x400200b8
 8003e7c:	40020410 	.word	0x40020410
 8003e80:	40020428 	.word	0x40020428
 8003e84:	40020440 	.word	0x40020440
 8003e88:	40020458 	.word	0x40020458
 8003e8c:	40020470 	.word	0x40020470
 8003e90:	40020488 	.word	0x40020488
 8003e94:	400204a0 	.word	0x400204a0
 8003e98:	400204b8 	.word	0x400204b8
 8003e9c:	58025408 	.word	0x58025408
 8003ea0:	5802541c 	.word	0x5802541c
 8003ea4:	58025430 	.word	0x58025430
 8003ea8:	58025444 	.word	0x58025444
 8003eac:	58025458 	.word	0x58025458
 8003eb0:	5802546c 	.word	0x5802546c
 8003eb4:	58025480 	.word	0x58025480
 8003eb8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d160      	bne.n	8003f88 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a7f      	ldr	r2, [pc, #508]	@ (80040c8 <HAL_DMA_IRQHandler+0xc74>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d04a      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80040cc <HAL_DMA_IRQHandler+0xc78>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d045      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7c      	ldr	r2, [pc, #496]	@ (80040d0 <HAL_DMA_IRQHandler+0xc7c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d040      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a7a      	ldr	r2, [pc, #488]	@ (80040d4 <HAL_DMA_IRQHandler+0xc80>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d03b      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a79      	ldr	r2, [pc, #484]	@ (80040d8 <HAL_DMA_IRQHandler+0xc84>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d036      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a77      	ldr	r2, [pc, #476]	@ (80040dc <HAL_DMA_IRQHandler+0xc88>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d031      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a76      	ldr	r2, [pc, #472]	@ (80040e0 <HAL_DMA_IRQHandler+0xc8c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d02c      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a74      	ldr	r2, [pc, #464]	@ (80040e4 <HAL_DMA_IRQHandler+0xc90>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d027      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a73      	ldr	r2, [pc, #460]	@ (80040e8 <HAL_DMA_IRQHandler+0xc94>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a71      	ldr	r2, [pc, #452]	@ (80040ec <HAL_DMA_IRQHandler+0xc98>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a70      	ldr	r2, [pc, #448]	@ (80040f0 <HAL_DMA_IRQHandler+0xc9c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6e      	ldr	r2, [pc, #440]	@ (80040f4 <HAL_DMA_IRQHandler+0xca0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6d      	ldr	r2, [pc, #436]	@ (80040f8 <HAL_DMA_IRQHandler+0xca4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80040fc <HAL_DMA_IRQHandler+0xca8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6a      	ldr	r2, [pc, #424]	@ (8004100 <HAL_DMA_IRQHandler+0xcac>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_DMA_IRQHandler+0xb12>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a68      	ldr	r2, [pc, #416]	@ (8004104 <HAL_DMA_IRQHandler+0xcb0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <HAL_DMA_IRQHandler+0xb24>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0208 	bic.w	r2, r2, #8
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e007      	b.n	8003f88 <HAL_DMA_IRQHandler+0xb34>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0204 	bic.w	r2, r2, #4
 8003f86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8165 	beq.w	800425c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f9a:	e15f      	b.n	800425c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80c5 	beq.w	800413c <HAL_DMA_IRQHandler+0xce8>
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80bf 	beq.w	800413c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 813a 	beq.w	8004260 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff4:	e134      	b.n	8004260 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8130 	beq.w	8004260 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004008:	e12a      	b.n	8004260 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8089 	bne.w	8004128 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2b      	ldr	r2, [pc, #172]	@ (80040c8 <HAL_DMA_IRQHandler+0xc74>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d04a      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a29      	ldr	r2, [pc, #164]	@ (80040cc <HAL_DMA_IRQHandler+0xc78>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d045      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a28      	ldr	r2, [pc, #160]	@ (80040d0 <HAL_DMA_IRQHandler+0xc7c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a26      	ldr	r2, [pc, #152]	@ (80040d4 <HAL_DMA_IRQHandler+0xc80>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d03b      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a25      	ldr	r2, [pc, #148]	@ (80040d8 <HAL_DMA_IRQHandler+0xc84>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d036      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a23      	ldr	r2, [pc, #140]	@ (80040dc <HAL_DMA_IRQHandler+0xc88>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a22      	ldr	r2, [pc, #136]	@ (80040e0 <HAL_DMA_IRQHandler+0xc8c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d02c      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a20      	ldr	r2, [pc, #128]	@ (80040e4 <HAL_DMA_IRQHandler+0xc90>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d027      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1f      	ldr	r2, [pc, #124]	@ (80040e8 <HAL_DMA_IRQHandler+0xc94>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <HAL_DMA_IRQHandler+0xc98>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01d      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1c      	ldr	r2, [pc, #112]	@ (80040f0 <HAL_DMA_IRQHandler+0xc9c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1a      	ldr	r2, [pc, #104]	@ (80040f4 <HAL_DMA_IRQHandler+0xca0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a19      	ldr	r2, [pc, #100]	@ (80040f8 <HAL_DMA_IRQHandler+0xca4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a17      	ldr	r2, [pc, #92]	@ (80040fc <HAL_DMA_IRQHandler+0xca8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	@ (8004100 <HAL_DMA_IRQHandler+0xcac>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xc62>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <HAL_DMA_IRQHandler+0xcb0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d128      	bne.n	8004108 <HAL_DMA_IRQHandler+0xcb4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0214 	bic.w	r2, r2, #20
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e027      	b.n	8004118 <HAL_DMA_IRQHandler+0xcc4>
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 020a 	bic.w	r2, r2, #10
 8004116:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8097 	beq.w	8004260 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413a:	e091      	b.n	8004260 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	2208      	movs	r2, #8
 8004146:	409a      	lsls	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8088 	beq.w	8004262 <HAL_DMA_IRQHandler+0xe0e>
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8082 	beq.w	8004262 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a41      	ldr	r2, [pc, #260]	@ (8004268 <HAL_DMA_IRQHandler+0xe14>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d04a      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a3f      	ldr	r2, [pc, #252]	@ (800426c <HAL_DMA_IRQHandler+0xe18>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d045      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3e      	ldr	r2, [pc, #248]	@ (8004270 <HAL_DMA_IRQHandler+0xe1c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d040      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3c      	ldr	r2, [pc, #240]	@ (8004274 <HAL_DMA_IRQHandler+0xe20>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d03b      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3b      	ldr	r2, [pc, #236]	@ (8004278 <HAL_DMA_IRQHandler+0xe24>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d036      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a39      	ldr	r2, [pc, #228]	@ (800427c <HAL_DMA_IRQHandler+0xe28>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d031      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a38      	ldr	r2, [pc, #224]	@ (8004280 <HAL_DMA_IRQHandler+0xe2c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d02c      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	@ (8004284 <HAL_DMA_IRQHandler+0xe30>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d027      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <HAL_DMA_IRQHandler+0xe34>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d022      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a33      	ldr	r2, [pc, #204]	@ (800428c <HAL_DMA_IRQHandler+0xe38>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01d      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <HAL_DMA_IRQHandler+0xe3c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d018      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <HAL_DMA_IRQHandler+0xe40>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2f      	ldr	r2, [pc, #188]	@ (8004298 <HAL_DMA_IRQHandler+0xe44>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	@ (800429c <HAL_DMA_IRQHandler+0xe48>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <HAL_DMA_IRQHandler+0xe4c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_DMA_IRQHandler+0xdaa>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2a      	ldr	r2, [pc, #168]	@ (80042a4 <HAL_DMA_IRQHandler+0xe50>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <HAL_DMA_IRQHandler+0xdbc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 021c 	bic.w	r2, r2, #28
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e007      	b.n	8004220 <HAL_DMA_IRQHandler+0xdcc>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 020e 	bic.w	r2, r2, #14
 800421e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2201      	movs	r2, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
 8004256:	e004      	b.n	8004262 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800425c:	bf00      	nop
 800425e:	e000      	b.n	8004262 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004260:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004262:	3728      	adds	r7, #40	@ 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40020010 	.word	0x40020010
 800426c:	40020028 	.word	0x40020028
 8004270:	40020040 	.word	0x40020040
 8004274:	40020058 	.word	0x40020058
 8004278:	40020070 	.word	0x40020070
 800427c:	40020088 	.word	0x40020088
 8004280:	400200a0 	.word	0x400200a0
 8004284:	400200b8 	.word	0x400200b8
 8004288:	40020410 	.word	0x40020410
 800428c:	40020428 	.word	0x40020428
 8004290:	40020440 	.word	0x40020440
 8004294:	40020458 	.word	0x40020458
 8004298:	40020470 	.word	0x40020470
 800429c:	40020488 	.word	0x40020488
 80042a0:	400204a0 	.word	0x400204a0
 80042a4:	400204b8 	.word	0x400204b8

080042a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7f      	ldr	r2, [pc, #508]	@ (80044c4 <DMA_SetConfig+0x21c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d072      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7d      	ldr	r2, [pc, #500]	@ (80044c8 <DMA_SetConfig+0x220>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d06d      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7c      	ldr	r2, [pc, #496]	@ (80044cc <DMA_SetConfig+0x224>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d068      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7a      	ldr	r2, [pc, #488]	@ (80044d0 <DMA_SetConfig+0x228>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d063      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a79      	ldr	r2, [pc, #484]	@ (80044d4 <DMA_SetConfig+0x22c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d05e      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a77      	ldr	r2, [pc, #476]	@ (80044d8 <DMA_SetConfig+0x230>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d059      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a76      	ldr	r2, [pc, #472]	@ (80044dc <DMA_SetConfig+0x234>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d054      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a74      	ldr	r2, [pc, #464]	@ (80044e0 <DMA_SetConfig+0x238>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d04f      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	@ (80044e4 <DMA_SetConfig+0x23c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d04a      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a71      	ldr	r2, [pc, #452]	@ (80044e8 <DMA_SetConfig+0x240>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d045      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a70      	ldr	r2, [pc, #448]	@ (80044ec <DMA_SetConfig+0x244>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d040      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6e      	ldr	r2, [pc, #440]	@ (80044f0 <DMA_SetConfig+0x248>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d03b      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6d      	ldr	r2, [pc, #436]	@ (80044f4 <DMA_SetConfig+0x24c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d036      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6b      	ldr	r2, [pc, #428]	@ (80044f8 <DMA_SetConfig+0x250>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d031      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6a      	ldr	r2, [pc, #424]	@ (80044fc <DMA_SetConfig+0x254>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d02c      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	@ (8004500 <DMA_SetConfig+0x258>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d027      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a67      	ldr	r2, [pc, #412]	@ (8004504 <DMA_SetConfig+0x25c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a65      	ldr	r2, [pc, #404]	@ (8004508 <DMA_SetConfig+0x260>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01d      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a64      	ldr	r2, [pc, #400]	@ (800450c <DMA_SetConfig+0x264>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a62      	ldr	r2, [pc, #392]	@ (8004510 <DMA_SetConfig+0x268>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a61      	ldr	r2, [pc, #388]	@ (8004514 <DMA_SetConfig+0x26c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a5f      	ldr	r2, [pc, #380]	@ (8004518 <DMA_SetConfig+0x270>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a5e      	ldr	r2, [pc, #376]	@ (800451c <DMA_SetConfig+0x274>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <DMA_SetConfig+0x10a>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a5c      	ldr	r2, [pc, #368]	@ (8004520 <DMA_SetConfig+0x278>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <DMA_SetConfig+0x10e>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <DMA_SetConfig+0x110>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a39      	ldr	r2, [pc, #228]	@ (80044c4 <DMA_SetConfig+0x21c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04a      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a38      	ldr	r2, [pc, #224]	@ (80044c8 <DMA_SetConfig+0x220>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d045      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a36      	ldr	r2, [pc, #216]	@ (80044cc <DMA_SetConfig+0x224>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d040      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a35      	ldr	r2, [pc, #212]	@ (80044d0 <DMA_SetConfig+0x228>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d03b      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a33      	ldr	r2, [pc, #204]	@ (80044d4 <DMA_SetConfig+0x22c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d036      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a32      	ldr	r2, [pc, #200]	@ (80044d8 <DMA_SetConfig+0x230>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d031      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a30      	ldr	r2, [pc, #192]	@ (80044dc <DMA_SetConfig+0x234>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02c      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2f      	ldr	r2, [pc, #188]	@ (80044e0 <DMA_SetConfig+0x238>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d027      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2d      	ldr	r2, [pc, #180]	@ (80044e4 <DMA_SetConfig+0x23c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2c      	ldr	r2, [pc, #176]	@ (80044e8 <DMA_SetConfig+0x240>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2a      	ldr	r2, [pc, #168]	@ (80044ec <DMA_SetConfig+0x244>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a29      	ldr	r2, [pc, #164]	@ (80044f0 <DMA_SetConfig+0x248>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a27      	ldr	r2, [pc, #156]	@ (80044f4 <DMA_SetConfig+0x24c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a26      	ldr	r2, [pc, #152]	@ (80044f8 <DMA_SetConfig+0x250>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a24      	ldr	r2, [pc, #144]	@ (80044fc <DMA_SetConfig+0x254>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <DMA_SetConfig+0x1d0>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a23      	ldr	r2, [pc, #140]	@ (8004500 <DMA_SetConfig+0x258>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <DMA_SetConfig+0x1d4>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <DMA_SetConfig+0x1d6>
 800447c:	2300      	movs	r3, #0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d059      	beq.n	8004536 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	223f      	movs	r2, #63	@ 0x3f
 800448c:	409a      	lsls	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b40      	cmp	r3, #64	@ 0x40
 80044b0:	d138      	bne.n	8004524 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80044c2:	e086      	b.n	80045d2 <DMA_SetConfig+0x32a>
 80044c4:	40020010 	.word	0x40020010
 80044c8:	40020028 	.word	0x40020028
 80044cc:	40020040 	.word	0x40020040
 80044d0:	40020058 	.word	0x40020058
 80044d4:	40020070 	.word	0x40020070
 80044d8:	40020088 	.word	0x40020088
 80044dc:	400200a0 	.word	0x400200a0
 80044e0:	400200b8 	.word	0x400200b8
 80044e4:	40020410 	.word	0x40020410
 80044e8:	40020428 	.word	0x40020428
 80044ec:	40020440 	.word	0x40020440
 80044f0:	40020458 	.word	0x40020458
 80044f4:	40020470 	.word	0x40020470
 80044f8:	40020488 	.word	0x40020488
 80044fc:	400204a0 	.word	0x400204a0
 8004500:	400204b8 	.word	0x400204b8
 8004504:	58025408 	.word	0x58025408
 8004508:	5802541c 	.word	0x5802541c
 800450c:	58025430 	.word	0x58025430
 8004510:	58025444 	.word	0x58025444
 8004514:	58025458 	.word	0x58025458
 8004518:	5802546c 	.word	0x5802546c
 800451c:	58025480 	.word	0x58025480
 8004520:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]
}
 8004534:	e04d      	b.n	80045d2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a29      	ldr	r2, [pc, #164]	@ (80045e0 <DMA_SetConfig+0x338>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d022      	beq.n	8004586 <DMA_SetConfig+0x2de>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a27      	ldr	r2, [pc, #156]	@ (80045e4 <DMA_SetConfig+0x33c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01d      	beq.n	8004586 <DMA_SetConfig+0x2de>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a26      	ldr	r2, [pc, #152]	@ (80045e8 <DMA_SetConfig+0x340>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <DMA_SetConfig+0x2de>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a24      	ldr	r2, [pc, #144]	@ (80045ec <DMA_SetConfig+0x344>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <DMA_SetConfig+0x2de>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a23      	ldr	r2, [pc, #140]	@ (80045f0 <DMA_SetConfig+0x348>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <DMA_SetConfig+0x2de>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a21      	ldr	r2, [pc, #132]	@ (80045f4 <DMA_SetConfig+0x34c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <DMA_SetConfig+0x2de>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <DMA_SetConfig+0x350>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <DMA_SetConfig+0x2de>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1e      	ldr	r2, [pc, #120]	@ (80045fc <DMA_SetConfig+0x354>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <DMA_SetConfig+0x2e2>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <DMA_SetConfig+0x2e4>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	d108      	bne.n	80045c2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	60da      	str	r2, [r3, #12]
}
 80045c0:	e007      	b.n	80045d2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	58025408 	.word	0x58025408
 80045e4:	5802541c 	.word	0x5802541c
 80045e8:	58025430 	.word	0x58025430
 80045ec:	58025444 	.word	0x58025444
 80045f0:	58025458 	.word	0x58025458
 80045f4:	5802546c 	.word	0x5802546c
 80045f8:	58025480 	.word	0x58025480
 80045fc:	58025494 	.word	0x58025494

08004600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a42      	ldr	r2, [pc, #264]	@ (8004718 <DMA_CalcBaseAndBitshift+0x118>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04a      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a41      	ldr	r2, [pc, #260]	@ (800471c <DMA_CalcBaseAndBitshift+0x11c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d045      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a3f      	ldr	r2, [pc, #252]	@ (8004720 <DMA_CalcBaseAndBitshift+0x120>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d040      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3e      	ldr	r2, [pc, #248]	@ (8004724 <DMA_CalcBaseAndBitshift+0x124>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d03b      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a3c      	ldr	r2, [pc, #240]	@ (8004728 <DMA_CalcBaseAndBitshift+0x128>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d036      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3b      	ldr	r2, [pc, #236]	@ (800472c <DMA_CalcBaseAndBitshift+0x12c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d031      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a39      	ldr	r2, [pc, #228]	@ (8004730 <DMA_CalcBaseAndBitshift+0x130>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02c      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <DMA_CalcBaseAndBitshift+0x134>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d027      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a36      	ldr	r2, [pc, #216]	@ (8004738 <DMA_CalcBaseAndBitshift+0x138>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d022      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a35      	ldr	r2, [pc, #212]	@ (800473c <DMA_CalcBaseAndBitshift+0x13c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01d      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a33      	ldr	r2, [pc, #204]	@ (8004740 <DMA_CalcBaseAndBitshift+0x140>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <DMA_CalcBaseAndBitshift+0x144>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a30      	ldr	r2, [pc, #192]	@ (8004748 <DMA_CalcBaseAndBitshift+0x148>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2f      	ldr	r2, [pc, #188]	@ (800474c <DMA_CalcBaseAndBitshift+0x14c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2d      	ldr	r2, [pc, #180]	@ (8004750 <DMA_CalcBaseAndBitshift+0x150>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <DMA_CalcBaseAndBitshift+0xa8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004754 <DMA_CalcBaseAndBitshift+0x154>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <DMA_CalcBaseAndBitshift+0xac>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <DMA_CalcBaseAndBitshift+0xae>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d024      	beq.n	80046fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3b10      	subs	r3, #16
 80046ba:	4a27      	ldr	r2, [pc, #156]	@ (8004758 <DMA_CalcBaseAndBitshift+0x158>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	4a24      	ldr	r2, [pc, #144]	@ (800475c <DMA_CalcBaseAndBitshift+0x15c>)
 80046cc:	5cd3      	ldrb	r3, [r2, r3]
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d908      	bls.n	80046ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004760 <DMA_CalcBaseAndBitshift+0x160>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	1d1a      	adds	r2, r3, #4
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80046ea:	e00d      	b.n	8004708 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <DMA_CalcBaseAndBitshift+0x160>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80046fa:	e005      	b.n	8004708 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8
 8004758:	aaaaaaab 	.word	0xaaaaaaab
 800475c:	0800b030 	.word	0x0800b030
 8004760:	fffffc00 	.word	0xfffffc00

08004764 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d120      	bne.n	80047ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	2b03      	cmp	r3, #3
 800477e:	d858      	bhi.n	8004832 <DMA_CheckFifoParam+0xce>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <DMA_CheckFifoParam+0x24>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	08004799 	.word	0x08004799
 800478c:	080047ab 	.word	0x080047ab
 8004790:	08004799 	.word	0x08004799
 8004794:	08004833 	.word	0x08004833
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d048      	beq.n	8004836 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047a8:	e045      	b.n	8004836 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047b2:	d142      	bne.n	800483a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047b8:	e03f      	b.n	800483a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c2:	d123      	bne.n	800480c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d838      	bhi.n	800483e <DMA_CheckFifoParam+0xda>
 80047cc:	a201      	add	r2, pc, #4	@ (adr r2, 80047d4 <DMA_CheckFifoParam+0x70>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047eb 	.word	0x080047eb
 80047dc:	080047e5 	.word	0x080047e5
 80047e0:	080047fd 	.word	0x080047fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
        break;
 80047e8:	e030      	b.n	800484c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d025      	beq.n	8004842 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047fa:	e022      	b.n	8004842 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004804:	d11f      	bne.n	8004846 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800480a:	e01c      	b.n	8004846 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	2b02      	cmp	r3, #2
 8004812:	d902      	bls.n	800481a <DMA_CheckFifoParam+0xb6>
 8004814:	2b03      	cmp	r3, #3
 8004816:	d003      	beq.n	8004820 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004818:	e018      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
        break;
 800481e:	e015      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
    break;
 8004830:	e00b      	b.n	800484a <DMA_CheckFifoParam+0xe6>
        break;
 8004832:	bf00      	nop
 8004834:	e00a      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        break;
 8004836:	bf00      	nop
 8004838:	e008      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        break;
 800483a:	bf00      	nop
 800483c:	e006      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        break;
 800483e:	bf00      	nop
 8004840:	e004      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        break;
 8004842:	bf00      	nop
 8004844:	e002      	b.n	800484c <DMA_CheckFifoParam+0xe8>
        break;
 8004846:	bf00      	nop
 8004848:	e000      	b.n	800484c <DMA_CheckFifoParam+0xe8>
    break;
 800484a:	bf00      	nop
    }
  }

  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop

0800485c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a38      	ldr	r2, [pc, #224]	@ (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a36      	ldr	r2, [pc, #216]	@ (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a35      	ldr	r2, [pc, #212]	@ (8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a33      	ldr	r2, [pc, #204]	@ (800495c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a32      	ldr	r2, [pc, #200]	@ (8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a30      	ldr	r2, [pc, #192]	@ (8004964 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004968 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2d      	ldr	r2, [pc, #180]	@ (800496c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01a      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3b08      	subs	r3, #8
 80048cc:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4b26      	ldr	r3, [pc, #152]	@ (8004974 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	461a      	mov	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a24      	ldr	r2, [pc, #144]	@ (8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2201      	movs	r2, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048f8:	e024      	b.n	8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3b10      	subs	r3, #16
 8004902:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4a1c      	ldr	r2, [pc, #112]	@ (8004980 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d806      	bhi.n	8004922 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4a1b      	ldr	r2, [pc, #108]	@ (8004984 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d902      	bls.n	8004922 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3308      	adds	r3, #8
 8004920:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a16      	ldr	r2, [pc, #88]	@ (800498c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004934:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2201      	movs	r2, #1
 800493e:	409a      	lsls	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	58025408 	.word	0x58025408
 8004954:	5802541c 	.word	0x5802541c
 8004958:	58025430 	.word	0x58025430
 800495c:	58025444 	.word	0x58025444
 8004960:	58025458 	.word	0x58025458
 8004964:	5802546c 	.word	0x5802546c
 8004968:	58025480 	.word	0x58025480
 800496c:	58025494 	.word	0x58025494
 8004970:	cccccccd 	.word	0xcccccccd
 8004974:	16009600 	.word	0x16009600
 8004978:	58025880 	.word	0x58025880
 800497c:	aaaaaaab 	.word	0xaaaaaaab
 8004980:	400204b8 	.word	0x400204b8
 8004984:	4002040f 	.word	0x4002040f
 8004988:	10008200 	.word	0x10008200
 800498c:	40020880 	.word	0x40020880

08004990 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d04a      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d847      	bhi.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a25      	ldr	r2, [pc, #148]	@ (8004a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a24      	ldr	r2, [pc, #144]	@ (8004a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a22      	ldr	r2, [pc, #136]	@ (8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a21      	ldr	r2, [pc, #132]	@ (8004a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4b17      	ldr	r3, [pc, #92]	@ (8004a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a15      	ldr	r2, [pc, #84]	@ (8004a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a18:	671a      	str	r2, [r3, #112]	@ 0x70
 8004a1a:	e009      	b.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4b14      	ldr	r3, [pc, #80]	@ (8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004a2e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	2201      	movs	r2, #1
 8004a36:	409a      	lsls	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	58025408 	.word	0x58025408
 8004a4c:	5802541c 	.word	0x5802541c
 8004a50:	58025430 	.word	0x58025430
 8004a54:	58025444 	.word	0x58025444
 8004a58:	58025458 	.word	0x58025458
 8004a5c:	5802546c 	.word	0x5802546c
 8004a60:	58025480 	.word	0x58025480
 8004a64:	58025494 	.word	0x58025494
 8004a68:	1600963f 	.word	0x1600963f
 8004a6c:	58025940 	.word	0x58025940
 8004a70:	1000823f 	.word	0x1000823f
 8004a74:	40020940 	.word	0x40020940

08004a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	@ 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a86:	4b86      	ldr	r3, [pc, #536]	@ (8004ca0 <HAL_GPIO_Init+0x228>)
 8004a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a8a:	e18c      	b.n	8004da6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 817e 	beq.w	8004da0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d005      	beq.n	8004abc <HAL_GPIO_Init+0x44>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d130      	bne.n	8004b1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004af2:	2201      	movs	r2, #1
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0201 	and.w	r2, r3, #1
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d017      	beq.n	8004b5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	2203      	movs	r2, #3
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d123      	bne.n	8004bae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	08da      	lsrs	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3208      	adds	r2, #8
 8004b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	220f      	movs	r2, #15
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4013      	ands	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	08da      	lsrs	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3208      	adds	r2, #8
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80d8 	beq.w	8004da0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <HAL_GPIO_Init+0x22c>)
 8004bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca4 <HAL_GPIO_Init+0x22c>)
 8004bf8:	f043 0302 	orr.w	r3, r3, #2
 8004bfc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004c00:	4b28      	ldr	r3, [pc, #160]	@ (8004ca4 <HAL_GPIO_Init+0x22c>)
 8004c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <HAL_GPIO_Init+0x230>)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <HAL_GPIO_Init+0x234>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d04a      	beq.n	8004cd0 <HAL_GPIO_Init+0x258>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <HAL_GPIO_Init+0x238>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02b      	beq.n	8004c9a <HAL_GPIO_Init+0x222>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <HAL_GPIO_Init+0x23c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d025      	beq.n	8004c96 <HAL_GPIO_Init+0x21e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb8 <HAL_GPIO_Init+0x240>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01f      	beq.n	8004c92 <HAL_GPIO_Init+0x21a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <HAL_GPIO_Init+0x244>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d019      	beq.n	8004c8e <HAL_GPIO_Init+0x216>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a18      	ldr	r2, [pc, #96]	@ (8004cc0 <HAL_GPIO_Init+0x248>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_GPIO_Init+0x212>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <HAL_GPIO_Init+0x24c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00d      	beq.n	8004c86 <HAL_GPIO_Init+0x20e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a16      	ldr	r2, [pc, #88]	@ (8004cc8 <HAL_GPIO_Init+0x250>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <HAL_GPIO_Init+0x20a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a15      	ldr	r2, [pc, #84]	@ (8004ccc <HAL_GPIO_Init+0x254>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d101      	bne.n	8004c7e <HAL_GPIO_Init+0x206>
 8004c7a:	2309      	movs	r3, #9
 8004c7c:	e029      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c7e:	230a      	movs	r3, #10
 8004c80:	e027      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c82:	2307      	movs	r3, #7
 8004c84:	e025      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c86:	2306      	movs	r3, #6
 8004c88:	e023      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c8a:	2305      	movs	r3, #5
 8004c8c:	e021      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c8e:	2304      	movs	r3, #4
 8004c90:	e01f      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c92:	2303      	movs	r3, #3
 8004c94:	e01d      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e01b      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e019      	b.n	8004cd2 <HAL_GPIO_Init+0x25a>
 8004c9e:	bf00      	nop
 8004ca0:	58000080 	.word	0x58000080
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	58000400 	.word	0x58000400
 8004cac:	58020000 	.word	0x58020000
 8004cb0:	58020400 	.word	0x58020400
 8004cb4:	58020800 	.word	0x58020800
 8004cb8:	58020c00 	.word	0x58020c00
 8004cbc:	58021000 	.word	0x58021000
 8004cc0:	58021400 	.word	0x58021400
 8004cc4:	58021800 	.word	0x58021800
 8004cc8:	58021c00 	.word	0x58021c00
 8004ccc:	58022400 	.word	0x58022400
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	f002 0203 	and.w	r2, r2, #3
 8004cd8:	0092      	lsls	r2, r2, #2
 8004cda:	4093      	lsls	r3, r2
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ce2:	4938      	ldr	r1, [pc, #224]	@ (8004dc4 <HAL_GPIO_Init+0x34c>)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	089b      	lsrs	r3, r3, #2
 8004ce8:	3302      	adds	r3, #2
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	3301      	adds	r3, #1
 8004da4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f47f ae6b 	bne.w	8004a8c <HAL_GPIO_Init+0x14>
  }
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	3724      	adds	r7, #36	@ 0x24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	58000400 	.word	0x58000400

08004dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004de4:	e003      	b.n	8004dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	041a      	lsls	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	619a      	str	r2, [r3, #24]
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4013      	ands	r3, r2
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43d9      	mvns	r1, r3
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	619a      	str	r2, [r3, #24]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	4603      	mov	r3, r0
 8004e36:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fb ffa7 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004e6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <HAL_PWREx_ConfigSupply+0x70>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d00a      	beq.n	8004e8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e78:	4b16      	ldr	r3, [pc, #88]	@ (8004ed4 <HAL_PWREx_ConfigSupply+0x70>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d001      	beq.n	8004e8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e01f      	b.n	8004eca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e01d      	b.n	8004eca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_PWREx_ConfigSupply+0x70>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f023 0207 	bic.w	r2, r3, #7
 8004e96:	490f      	ldr	r1, [pc, #60]	@ (8004ed4 <HAL_PWREx_ConfigSupply+0x70>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e9e:	f7fc fbf5 	bl	800168c <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ea4:	e009      	b.n	8004eba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ea6:	f7fc fbf1 	bl	800168c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004eb4:	d901      	bls.n	8004eba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e007      	b.n	8004eca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_PWREx_ConfigSupply+0x70>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec6:	d1ee      	bne.n	8004ea6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	58024800 	.word	0x58024800

08004ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	@ 0x30
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e3c8      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8087 	beq.w	8005006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef8:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f02:	4b86      	ldr	r3, [pc, #536]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d007      	beq.n	8004f1e <HAL_RCC_OscConfig+0x46>
 8004f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f10:	2b18      	cmp	r3, #24
 8004f12:	d110      	bne.n	8004f36 <HAL_RCC_OscConfig+0x5e>
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d10b      	bne.n	8004f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d06c      	beq.n	8005004 <HAL_RCC_OscConfig+0x12c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d168      	bne.n	8005004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e3a2      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x76>
 8004f40:	4b76      	ldr	r3, [pc, #472]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a75      	ldr	r2, [pc, #468]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	e02e      	b.n	8004fac <HAL_RCC_OscConfig+0xd4>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x98>
 8004f56:	4b71      	ldr	r3, [pc, #452]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a70      	ldr	r2, [pc, #448]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b6e      	ldr	r3, [pc, #440]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6d      	ldr	r2, [pc, #436]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e01d      	b.n	8004fac <HAL_RCC_OscConfig+0xd4>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f78:	d10c      	bne.n	8004f94 <HAL_RCC_OscConfig+0xbc>
 8004f7a:	4b68      	ldr	r3, [pc, #416]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a67      	ldr	r2, [pc, #412]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	4b65      	ldr	r3, [pc, #404]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a64      	ldr	r2, [pc, #400]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e00b      	b.n	8004fac <HAL_RCC_OscConfig+0xd4>
 8004f94:	4b61      	ldr	r3, [pc, #388]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a60      	ldr	r2, [pc, #384]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fb6a 	bl	800168c <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fc fb66 	bl	800168c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	@ 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e356      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fce:	4b53      	ldr	r3, [pc, #332]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0xe4>
 8004fda:	e014      	b.n	8005006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fc fb56 	bl	800168c <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fc fb52 	bl	800168c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	@ 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e342      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ff6:	4b49      	ldr	r3, [pc, #292]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x10c>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 808c 	beq.w	800512c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005014:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800501c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800501e:	4b3f      	ldr	r3, [pc, #252]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d007      	beq.n	800503a <HAL_RCC_OscConfig+0x162>
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	2b18      	cmp	r3, #24
 800502e:	d137      	bne.n	80050a0 <HAL_RCC_OscConfig+0x1c8>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d132      	bne.n	80050a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800503a:	4b38      	ldr	r3, [pc, #224]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_RCC_OscConfig+0x17a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e314      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005052:	4b32      	ldr	r3, [pc, #200]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 0219 	bic.w	r2, r3, #25
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	492f      	ldr	r1, [pc, #188]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8005060:	4313      	orrs	r3, r2
 8005062:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc fb12 	bl	800168c <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800506c:	f7fc fb0e 	bl	800168c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e2fe      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800507e:	4b27      	ldr	r3, [pc, #156]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508a:	4b24      	ldr	r3, [pc, #144]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	4920      	ldr	r1, [pc, #128]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 800509a:	4313      	orrs	r3, r2
 800509c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509e:	e045      	b.n	800512c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d026      	beq.n	80050f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050a8:	4b1c      	ldr	r3, [pc, #112]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 0219 	bic.w	r2, r3, #25
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4919      	ldr	r1, [pc, #100]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fc fae7 	bl	800168c <HAL_GetTick>
 80050be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fc fae3 	bl	800168c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e2d3      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b0e      	ldr	r3, [pc, #56]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	490b      	ldr	r1, [pc, #44]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
 80050f4:	e01a      	b.n	800512c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	4b09      	ldr	r3, [pc, #36]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a08      	ldr	r2, [pc, #32]	@ (800511c <HAL_RCC_OscConfig+0x244>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fc fac3 	bl	800168c <HAL_GetTick>
 8005106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7fc fabf 	bl	800168c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d903      	bls.n	8005120 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e2af      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
 800511c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005120:	4b96      	ldr	r3, [pc, #600]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d06a      	beq.n	800520e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005138:	4b90      	ldr	r3, [pc, #576]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005140:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005142:	4b8e      	ldr	r3, [pc, #568]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b08      	cmp	r3, #8
 800514c:	d007      	beq.n	800515e <HAL_RCC_OscConfig+0x286>
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b18      	cmp	r3, #24
 8005152:	d11b      	bne.n	800518c <HAL_RCC_OscConfig+0x2b4>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d116      	bne.n	800518c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800515e:	4b87      	ldr	r3, [pc, #540]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_RCC_OscConfig+0x29e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d001      	beq.n	8005176 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e282      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005176:	4b81      	ldr	r3, [pc, #516]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	497d      	ldr	r1, [pc, #500]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800518a:	e040      	b.n	800520e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d023      	beq.n	80051dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005194:	4b79      	ldr	r3, [pc, #484]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a78      	ldr	r2, [pc, #480]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800519a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800519e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fc fa74 	bl	800168c <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051a8:	f7fc fa70 	bl	800168c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e260      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051ba:	4b70      	ldr	r3, [pc, #448]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051c6:	4b6d      	ldr	r3, [pc, #436]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	4969      	ldr	r1, [pc, #420]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60cb      	str	r3, [r1, #12]
 80051da:	e018      	b.n	800520e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051dc:	4b67      	ldr	r3, [pc, #412]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a66      	ldr	r2, [pc, #408]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80051e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fc fa50 	bl	800168c <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051f0:	f7fc fa4c 	bl	800168c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e23c      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005202:	4b5e      	ldr	r3, [pc, #376]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d036      	beq.n	8005288 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d019      	beq.n	8005256 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005222:	4b56      	ldr	r3, [pc, #344]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005226:	4a55      	ldr	r2, [pc, #340]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522e:	f7fc fa2d 	bl	800168c <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005236:	f7fc fa29 	bl	800168c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e219      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005248:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800524a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x35e>
 8005254:	e018      	b.n	8005288 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005256:	4b49      	ldr	r3, [pc, #292]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525a:	4a48      	ldr	r2, [pc, #288]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7fc fa13 	bl	800168c <HAL_GetTick>
 8005266:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526a:	f7fc fa0f 	bl	800168c <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e1ff      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800527c:	4b3f      	ldr	r3, [pc, #252]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f0      	bne.n	800526a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d036      	beq.n	8005302 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d019      	beq.n	80052d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800529c:	4b37      	ldr	r3, [pc, #220]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a36      	ldr	r2, [pc, #216]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80052a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052a8:	f7fc f9f0 	bl	800168c <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052b0:	f7fc f9ec 	bl	800168c <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e1dc      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052c2:	4b2e      	ldr	r3, [pc, #184]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x3d8>
 80052ce:	e018      	b.n	8005302 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052d0:	4b2a      	ldr	r3, [pc, #168]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a29      	ldr	r2, [pc, #164]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80052d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052dc:	f7fc f9d6 	bl	800168c <HAL_GetTick>
 80052e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052e4:	f7fc f9d2 	bl	800168c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e1c2      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80052f6:	4b21      	ldr	r3, [pc, #132]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8086 	beq.w	800541c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005310:	4b1b      	ldr	r3, [pc, #108]	@ (8005380 <HAL_RCC_OscConfig+0x4a8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <HAL_RCC_OscConfig+0x4a8>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800531a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800531c:	f7fc f9b6 	bl	800168c <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005324:	f7fc f9b2 	bl	800168c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	@ 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e1a2      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005336:	4b12      	ldr	r3, [pc, #72]	@ (8005380 <HAL_RCC_OscConfig+0x4a8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x480>
 800534a:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534e:	4a0b      	ldr	r2, [pc, #44]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6713      	str	r3, [r2, #112]	@ 0x70
 8005356:	e032      	b.n	80053be <HAL_RCC_OscConfig+0x4e6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d111      	bne.n	8005384 <HAL_RCC_OscConfig+0x4ac>
 8005360:	4b06      	ldr	r3, [pc, #24]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	4a05      	ldr	r2, [pc, #20]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	6713      	str	r3, [r2, #112]	@ 0x70
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 800536e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005370:	4a02      	ldr	r2, [pc, #8]	@ (800537c <HAL_RCC_OscConfig+0x4a4>)
 8005372:	f023 0304 	bic.w	r3, r3, #4
 8005376:	6713      	str	r3, [r2, #112]	@ 0x70
 8005378:	e021      	b.n	80053be <HAL_RCC_OscConfig+0x4e6>
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
 8005380:	58024800 	.word	0x58024800
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b05      	cmp	r3, #5
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x4ce>
 800538c:	4b83      	ldr	r3, [pc, #524]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005390:	4a82      	ldr	r2, [pc, #520]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	6713      	str	r3, [r2, #112]	@ 0x70
 8005398:	4b80      	ldr	r3, [pc, #512]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539c:	4a7f      	ldr	r2, [pc, #508]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053a4:	e00b      	b.n	80053be <HAL_RCC_OscConfig+0x4e6>
 80053a6:	4b7d      	ldr	r3, [pc, #500]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	4a7c      	ldr	r2, [pc, #496]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b2:	4b7a      	ldr	r3, [pc, #488]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b6:	4a79      	ldr	r2, [pc, #484]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d015      	beq.n	80053f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fc f961 	bl	800168c <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fc f95d 	bl	800168c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e14b      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053e4:	4b6d      	ldr	r3, [pc, #436]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCC_OscConfig+0x4f6>
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fc f94b 	bl	800168c <HAL_GetTick>
 80053f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fc f947 	bl	800168c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e135      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005410:	4b62      	ldr	r3, [pc, #392]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1ee      	bne.n	80053fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 812a 	beq.w	800567a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005426:	4b5d      	ldr	r3, [pc, #372]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800542e:	2b18      	cmp	r3, #24
 8005430:	f000 80ba 	beq.w	80055a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	2b02      	cmp	r3, #2
 800543a:	f040 8095 	bne.w	8005568 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b57      	ldr	r3, [pc, #348]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a56      	ldr	r2, [pc, #344]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005444:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544a:	f7fc f91f 	bl	800168c <HAL_GetTick>
 800544e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fc f91b 	bl	800168c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e10b      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005464:	4b4d      	ldr	r3, [pc, #308]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f0      	bne.n	8005452 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005470:	4b4a      	ldr	r3, [pc, #296]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005474:	4b4a      	ldr	r3, [pc, #296]	@ (80055a0 <HAL_RCC_OscConfig+0x6c8>)
 8005476:	4013      	ands	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005480:	0112      	lsls	r2, r2, #4
 8005482:	430a      	orrs	r2, r1
 8005484:	4945      	ldr	r1, [pc, #276]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005486:	4313      	orrs	r3, r2
 8005488:	628b      	str	r3, [r1, #40]	@ 0x28
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	3b01      	subs	r3, #1
 8005490:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005498:	3b01      	subs	r3, #1
 800549a:	025b      	lsls	r3, r3, #9
 800549c:	b29b      	uxth	r3, r3
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	3b01      	subs	r3, #1
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	3b01      	subs	r3, #1
 80054b4:	061b      	lsls	r3, r3, #24
 80054b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054ba:	4938      	ldr	r1, [pc, #224]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80054c0:	4b36      	ldr	r3, [pc, #216]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	4a35      	ldr	r2, [pc, #212]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054cc:	4b33      	ldr	r3, [pc, #204]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054d0:	4b34      	ldr	r3, [pc, #208]	@ (80055a4 <HAL_RCC_OscConfig+0x6cc>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80054d8:	00d2      	lsls	r2, r2, #3
 80054da:	4930      	ldr	r1, [pc, #192]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80054e0:	4b2e      	ldr	r3, [pc, #184]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e4:	f023 020c 	bic.w	r2, r3, #12
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ec:	492b      	ldr	r1, [pc, #172]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054f2:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	f023 0202 	bic.w	r2, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	4927      	ldr	r1, [pc, #156]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005500:	4313      	orrs	r3, r2
 8005502:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005504:	4b25      	ldr	r3, [pc, #148]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005508:	4a24      	ldr	r2, [pc, #144]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800550a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800550e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005510:	4b22      	ldr	r3, [pc, #136]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4a21      	ldr	r2, [pc, #132]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005516:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800551a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800551c:	4b1f      	ldr	r3, [pc, #124]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800551e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005520:	4a1e      	ldr	r2, [pc, #120]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005528:	4b1c      	ldr	r3, [pc, #112]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005534:	4b19      	ldr	r3, [pc, #100]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a18      	ldr	r2, [pc, #96]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800553a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800553e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc f8a4 	bl	800168c <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005548:	f7fc f8a0 	bl	800168c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e090      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x670>
 8005566:	e088      	b.n	800567a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0b      	ldr	r2, [pc, #44]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 800556e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005574:	f7fc f88a 	bl	800168c <HAL_GetTick>
 8005578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fc f886 	bl	800168c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e076      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800558e:	4b03      	ldr	r3, [pc, #12]	@ (800559c <HAL_RCC_OscConfig+0x6c4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x6a4>
 800559a:	e06e      	b.n	800567a <HAL_RCC_OscConfig+0x7a2>
 800559c:	58024400 	.word	0x58024400
 80055a0:	fffffc0c 	.word	0xfffffc0c
 80055a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055a8:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055ae:	4b35      	ldr	r3, [pc, #212]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d031      	beq.n	8005620 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 0203 	and.w	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d12a      	bne.n	8005620 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d122      	bne.n	8005620 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d11a      	bne.n	8005620 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	0a5b      	lsrs	r3, r3, #9
 80055ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d111      	bne.n	8005620 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d108      	bne.n	8005620 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0e1b      	lsrs	r3, r3, #24
 8005612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e02b      	b.n	800567c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005624:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 8005626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800562e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	429a      	cmp	r2, r3
 8005638:	d01f      	beq.n	800567a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005646:	f7fc f821 	bl	800168c <HAL_GetTick>
 800564a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800564c:	bf00      	nop
 800564e:	f7fc f81d 	bl	800168c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	4293      	cmp	r3, r2
 8005658:	d0f9      	beq.n	800564e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 800565c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800565e:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <HAL_RCC_OscConfig+0x7b0>)
 8005660:	4013      	ands	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005666:	00d2      	lsls	r2, r2, #3
 8005668:	4906      	ldr	r1, [pc, #24]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 800566a:	4313      	orrs	r3, r2
 800566c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800566e:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	4a04      	ldr	r2, [pc, #16]	@ (8005684 <HAL_RCC_OscConfig+0x7ac>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3730      	adds	r7, #48	@ 0x30
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	58024400 	.word	0x58024400
 8005688:	ffff0007 	.word	0xffff0007

0800568c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e19c      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b8a      	ldr	r3, [pc, #552]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d910      	bls.n	80056d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b87      	ldr	r3, [pc, #540]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 020f 	bic.w	r2, r3, #15
 80056b6:	4985      	ldr	r1, [pc, #532]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056be:	4b83      	ldr	r3, [pc, #524]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e184      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	4b7b      	ldr	r3, [pc, #492]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d908      	bls.n	80056fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056ec:	4b78      	ldr	r3, [pc, #480]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4975      	ldr	r1, [pc, #468]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	4b70      	ldr	r3, [pc, #448]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005716:	429a      	cmp	r2, r3
 8005718:	d908      	bls.n	800572c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800571a:	4b6d      	ldr	r3, [pc, #436]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	496a      	ldr	r1, [pc, #424]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005728:	4313      	orrs	r3, r2
 800572a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	4b64      	ldr	r3, [pc, #400]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005744:	429a      	cmp	r2, r3
 8005746:	d908      	bls.n	800575a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005748:	4b61      	ldr	r3, [pc, #388]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	495e      	ldr	r1, [pc, #376]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005756:	4313      	orrs	r3, r2
 8005758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d010      	beq.n	8005788 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	4b59      	ldr	r3, [pc, #356]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005772:	429a      	cmp	r2, r3
 8005774:	d908      	bls.n	8005788 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005776:	4b56      	ldr	r3, [pc, #344]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	4953      	ldr	r1, [pc, #332]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005784:	4313      	orrs	r3, r2
 8005786:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d010      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	4b4d      	ldr	r3, [pc, #308]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d908      	bls.n	80057b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a4:	4b4a      	ldr	r3, [pc, #296]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f023 020f 	bic.w	r2, r3, #15
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4947      	ldr	r1, [pc, #284]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d055      	beq.n	800586e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057c2:	4b43      	ldr	r3, [pc, #268]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	4940      	ldr	r1, [pc, #256]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d107      	bne.n	80057ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057dc:	4b3c      	ldr	r3, [pc, #240]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d121      	bne.n	800582c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0f6      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d107      	bne.n	8005804 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057f4:	4b36      	ldr	r3, [pc, #216]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d115      	bne.n	800582c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0ea      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d107      	bne.n	800581c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800580c:	4b30      	ldr	r3, [pc, #192]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e0de      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800581c:	4b2c      	ldr	r3, [pc, #176]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0d6      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800582c:	4b28      	ldr	r3, [pc, #160]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f023 0207 	bic.w	r2, r3, #7
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4925      	ldr	r1, [pc, #148]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800583a:	4313      	orrs	r3, r2
 800583c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fb ff25 	bl	800168c <HAL_GetTick>
 8005842:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005844:	e00a      	b.n	800585c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005846:	f7fb ff21 	bl	800168c <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005854:	4293      	cmp	r3, r2
 8005856:	d901      	bls.n	800585c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e0be      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585c:	4b1c      	ldr	r3, [pc, #112]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	429a      	cmp	r2, r3
 800586c:	d1eb      	bne.n	8005846 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d010      	beq.n	800589c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	4b14      	ldr	r3, [pc, #80]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	429a      	cmp	r2, r3
 8005888:	d208      	bcs.n	800589c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588a:	4b11      	ldr	r3, [pc, #68]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f023 020f 	bic.w	r2, r3, #15
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	490e      	ldr	r1, [pc, #56]	@ (80058d0 <HAL_RCC_ClockConfig+0x244>)
 8005898:	4313      	orrs	r3, r2
 800589a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d214      	bcs.n	80058d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 020f 	bic.w	r2, r3, #15
 80058b2:	4906      	ldr	r1, [pc, #24]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <HAL_RCC_ClockConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d005      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e086      	b.n	80059da <HAL_RCC_ClockConfig+0x34e>
 80058cc:	52002000 	.word	0x52002000
 80058d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	4b3f      	ldr	r3, [pc, #252]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d208      	bcs.n	8005902 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058f0:	4b3c      	ldr	r3, [pc, #240]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	4939      	ldr	r1, [pc, #228]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d010      	beq.n	8005930 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	4b34      	ldr	r3, [pc, #208]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800591a:	429a      	cmp	r2, r3
 800591c:	d208      	bcs.n	8005930 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800591e:	4b31      	ldr	r3, [pc, #196]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	492e      	ldr	r1, [pc, #184]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 800592c:	4313      	orrs	r3, r2
 800592e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	d010      	beq.n	800595e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	4b28      	ldr	r3, [pc, #160]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005948:	429a      	cmp	r2, r3
 800594a:	d208      	bcs.n	800595e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800594c:	4b25      	ldr	r3, [pc, #148]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	4922      	ldr	r1, [pc, #136]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 800595a:	4313      	orrs	r3, r2
 800595c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005976:	429a      	cmp	r2, r3
 8005978:	d208      	bcs.n	800598c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800597a:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	4917      	ldr	r1, [pc, #92]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 8005988:	4313      	orrs	r3, r2
 800598a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800598c:	f000 f834 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8005990:	4602      	mov	r2, r0
 8005992:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	4912      	ldr	r1, [pc, #72]	@ (80059e8 <HAL_RCC_ClockConfig+0x35c>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
 80059a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059aa:	4b0e      	ldr	r3, [pc, #56]	@ (80059e4 <HAL_RCC_ClockConfig+0x358>)
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	4a0d      	ldr	r2, [pc, #52]	@ (80059e8 <HAL_RCC_ClockConfig+0x35c>)
 80059b4:	5cd3      	ldrb	r3, [r2, r3]
 80059b6:	f003 031f 	and.w	r3, r3, #31
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
 80059c0:	4a0a      	ldr	r2, [pc, #40]	@ (80059ec <HAL_RCC_ClockConfig+0x360>)
 80059c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c4:	4a0a      	ldr	r2, [pc, #40]	@ (80059f0 <HAL_RCC_ClockConfig+0x364>)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80059ca:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <HAL_RCC_ClockConfig+0x368>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fb fe12 	bl	80015f8 <HAL_InitTick>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	58024400 	.word	0x58024400
 80059e8:	0800b020 	.word	0x0800b020
 80059ec:	24000008 	.word	0x24000008
 80059f0:	24000004 	.word	0x24000004
 80059f4:	2400000c 	.word	0x2400000c

080059f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	@ 0x24
 80059fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059fe:	4bb3      	ldr	r3, [pc, #716]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a06:	2b18      	cmp	r3, #24
 8005a08:	f200 8155 	bhi.w	8005cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a12:	bf00      	nop
 8005a14:	08005a79 	.word	0x08005a79
 8005a18:	08005cb7 	.word	0x08005cb7
 8005a1c:	08005cb7 	.word	0x08005cb7
 8005a20:	08005cb7 	.word	0x08005cb7
 8005a24:	08005cb7 	.word	0x08005cb7
 8005a28:	08005cb7 	.word	0x08005cb7
 8005a2c:	08005cb7 	.word	0x08005cb7
 8005a30:	08005cb7 	.word	0x08005cb7
 8005a34:	08005a9f 	.word	0x08005a9f
 8005a38:	08005cb7 	.word	0x08005cb7
 8005a3c:	08005cb7 	.word	0x08005cb7
 8005a40:	08005cb7 	.word	0x08005cb7
 8005a44:	08005cb7 	.word	0x08005cb7
 8005a48:	08005cb7 	.word	0x08005cb7
 8005a4c:	08005cb7 	.word	0x08005cb7
 8005a50:	08005cb7 	.word	0x08005cb7
 8005a54:	08005aa5 	.word	0x08005aa5
 8005a58:	08005cb7 	.word	0x08005cb7
 8005a5c:	08005cb7 	.word	0x08005cb7
 8005a60:	08005cb7 	.word	0x08005cb7
 8005a64:	08005cb7 	.word	0x08005cb7
 8005a68:	08005cb7 	.word	0x08005cb7
 8005a6c:	08005cb7 	.word	0x08005cb7
 8005a70:	08005cb7 	.word	0x08005cb7
 8005a74:	08005aab 	.word	0x08005aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a78:	4b94      	ldr	r3, [pc, #592]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a84:	4b91      	ldr	r3, [pc, #580]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	08db      	lsrs	r3, r3, #3
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	4a90      	ldr	r2, [pc, #576]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a96:	e111      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a98:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a9a:	61bb      	str	r3, [r7, #24]
      break;
 8005a9c:	e10e      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005aa0:	61bb      	str	r3, [r7, #24]
      break;
 8005aa2:	e10b      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005aa6:	61bb      	str	r3, [r7, #24]
      break;
 8005aa8:	e108      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aaa:	4b88      	ldr	r3, [pc, #544]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005ab4:	4b85      	ldr	r3, [pc, #532]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005abe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ac0:	4b82      	ldr	r3, [pc, #520]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005aca:	4b80      	ldr	r3, [pc, #512]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ace:	08db      	lsrs	r3, r3, #3
 8005ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80e1 	beq.w	8005cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f000 8083 	beq.w	8005bfc <HAL_RCC_GetSysClockFreq+0x204>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	f200 80a1 	bhi.w	8005c40 <HAL_RCC_GetSysClockFreq+0x248>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x114>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d056      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b0a:	e099      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02d      	beq.n	8005b74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b18:	4b6c      	ldr	r3, [pc, #432]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	08db      	lsrs	r3, r3, #3
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	4a6b      	ldr	r2, [pc, #428]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	ee07 3a90 	vmov	s15, r3
 8005b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b62      	ldr	r3, [pc, #392]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005b72:	e087      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b86:	4b51      	ldr	r3, [pc, #324]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bb6:	e065      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bca:	4b40      	ldr	r3, [pc, #256]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bfa:	e043      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c3e:	e021      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c84:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c88:	0a5b      	lsrs	r3, r3, #9
 8005c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c8e:	3301      	adds	r3, #1
 8005c90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ca8:	ee17 3a90 	vmov	r3, s15
 8005cac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005cae:	e005      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61bb      	str	r3, [r7, #24]
      break;
 8005cb4:	e002      	b.n	8005cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005cb6:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cb8:	61bb      	str	r3, [r7, #24]
      break;
 8005cba:	bf00      	nop
  }

  return sysclockfreq;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3724      	adds	r7, #36	@ 0x24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	03d09000 	.word	0x03d09000
 8005cd4:	003d0900 	.word	0x003d0900
 8005cd8:	017d7840 	.word	0x017d7840
 8005cdc:	46000000 	.word	0x46000000
 8005ce0:	4c742400 	.word	0x4c742400
 8005ce4:	4a742400 	.word	0x4a742400
 8005ce8:	4bbebc20 	.word	0x4bbebc20

08005cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005cf2:	f7ff fe81 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b10      	ldr	r3, [pc, #64]	@ (8005d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	490f      	ldr	r1, [pc, #60]	@ (8005d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d04:	5ccb      	ldrb	r3, [r1, r3]
 8005d06:	f003 031f 	and.w	r3, r3, #31
 8005d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 030f 	and.w	r3, r3, #15
 8005d18:	4a09      	ldr	r2, [pc, #36]	@ (8005d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d1a:	5cd3      	ldrb	r3, [r2, r3]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	fa22 f303 	lsr.w	r3, r2, r3
 8005d26:	4a07      	ldr	r2, [pc, #28]	@ (8005d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d2a:	4a07      	ldr	r2, [pc, #28]	@ (8005d48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d30:	4b04      	ldr	r3, [pc, #16]	@ (8005d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	0800b020 	.word	0x0800b020
 8005d44:	24000008 	.word	0x24000008
 8005d48:	24000004 	.word	0x24000004

08005d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d50:	f7ff ffcc 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 8005d54:	4602      	mov	r2, r0
 8005d56:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	4904      	ldr	r1, [pc, #16]	@ (8005d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d62:	5ccb      	ldrb	r3, [r1, r3]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	58024400 	.word	0x58024400
 8005d74:	0800b020 	.word	0x0800b020

08005d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d7c:	f7ff ffb6 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 8005d80:	4602      	mov	r2, r0
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	4904      	ldr	r1, [pc, #16]	@ (8005da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d8e:	5ccb      	ldrb	r3, [r1, r3]
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	0800b020 	.word	0x0800b020

08005da4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da8:	b0c6      	sub	sp, #280	@ 0x118
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005db6:	2300      	movs	r3, #0
 8005db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005dc8:	2500      	movs	r5, #0
 8005dca:	ea54 0305 	orrs.w	r3, r4, r5
 8005dce:	d049      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005dda:	d02f      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ddc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005de0:	d828      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005de6:	d01a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dec:	d822      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df6:	d007      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005df8:	e01c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dfa:	4bab      	ldr	r3, [pc, #684]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfe:	4aaa      	ldr	r2, [pc, #680]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e06:	e01a      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	2102      	movs	r1, #2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fc25 	bl	8007660 <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e1c:	e00f      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e22:	3328      	adds	r3, #40	@ 0x28
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fccc 	bl	80077c4 <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e32:	e004      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e46:	4b98      	ldr	r3, [pc, #608]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e54:	4a94      	ldr	r2, [pc, #592]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e56:	430b      	orrs	r3, r1
 8005e58:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e5a:	e003      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005e70:	f04f 0900 	mov.w	r9, #0
 8005e74:	ea58 0309 	orrs.w	r3, r8, r9
 8005e78:	d047      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d82a      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e84:	a201      	add	r2, pc, #4	@ (adr r2, 8005e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8a:	bf00      	nop
 8005e8c:	08005ea1 	.word	0x08005ea1
 8005e90:	08005eaf 	.word	0x08005eaf
 8005e94:	08005ec5 	.word	0x08005ec5
 8005e98:	08005ee3 	.word	0x08005ee3
 8005e9c:	08005ee3 	.word	0x08005ee3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea0:	4b81      	ldr	r3, [pc, #516]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	4a80      	ldr	r2, [pc, #512]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eac:	e01a      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fbd2 	bl	8007660 <RCCEx_PLL2_Config>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ec2:	e00f      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	3328      	adds	r3, #40	@ 0x28
 8005eca:	2100      	movs	r1, #0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fc79 	bl	80077c4 <RCCEx_PLL3_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005eec:	4b6e      	ldr	r3, [pc, #440]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	f023 0107 	bic.w	r1, r3, #7
 8005ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efa:	4a6b      	ldr	r2, [pc, #428]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005f16:	f04f 0b00 	mov.w	fp, #0
 8005f1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f1e:	d05b      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f28:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f2c:	d03b      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005f2e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f32:	d834      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f38:	d037      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005f3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f3e:	d82e      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f44:	d033      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f4a:	d828      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f50:	d01a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005f52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f56:	d822      	bhi.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f60:	d007      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005f62:	e01c      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f64:	4b50      	ldr	r3, [pc, #320]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	4a4f      	ldr	r2, [pc, #316]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f70:	e01e      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f76:	3308      	adds	r3, #8
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fb70 	bl	8007660 <RCCEx_PLL2_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f86:	e013      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8c:	3328      	adds	r3, #40	@ 0x28
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fc17 	bl	80077c4 <RCCEx_PLL3_Config>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fa4:	e004      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fa6:	bf00      	nop
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005faa:	bf00      	nop
 8005fac:	e000      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fc8:	4a37      	ldr	r2, [pc, #220]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fce:	e003      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005fee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d05d      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006000:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006004:	d03b      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006006:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800600a:	d834      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800600c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006010:	d037      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006012:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006016:	d82e      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006018:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800601c:	d033      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800601e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006022:	d828      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006024:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006028:	d01a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800602a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800602e:	d822      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006038:	d007      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800603a:	e01c      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603c:	4b1a      	ldr	r3, [pc, #104]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	4a19      	ldr	r2, [pc, #100]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006048:	e01e      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800604a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800604e:	3308      	adds	r3, #8
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f001 fb04 	bl	8007660 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800605e:	e013      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	3328      	adds	r3, #40	@ 0x28
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fbab 	bl	80077c4 <RCCEx_PLL3_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006074:	e008      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800607c:	e004      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800607e:	bf00      	nop
 8006080:	e002      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006082:	bf00      	nop
 8006084:	e000      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10d      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006094:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060a0:	4a01      	ldr	r2, [pc, #4]	@ (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a6:	e005      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80060a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80060c4:	2300      	movs	r3, #0
 80060c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80060ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4313      	orrs	r3, r2
 80060d2:	d03a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060da:	2b30      	cmp	r3, #48	@ 0x30
 80060dc:	d01f      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80060de:	2b30      	cmp	r3, #48	@ 0x30
 80060e0:	d819      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d00c      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d815      	bhi.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d019      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d111      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f2:	4baa      	ldr	r3, [pc, #680]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	4aa9      	ldr	r2, [pc, #676]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060fe:	e011      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006104:	3308      	adds	r3, #8
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 faa9 	bl	8007660 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006114:	e006      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800611c:	e002      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006122:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800612c:	4b9b      	ldr	r3, [pc, #620]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800612e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006130:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800613a:	4a98      	ldr	r2, [pc, #608]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800613c:	430b      	orrs	r3, r1
 800613e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006146:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800614a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006156:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006160:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d051      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006174:	d035      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800617a:	d82e      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800617c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006180:	d031      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006182:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006186:	d828      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618c:	d01a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800618e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006192:	d822      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619c:	d007      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800619e:	e01c      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4b7e      	ldr	r3, [pc, #504]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4a7d      	ldr	r2, [pc, #500]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ac:	e01c      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	3308      	adds	r3, #8
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 fa52 	bl	8007660 <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061c2:	e011      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	3328      	adds	r3, #40	@ 0x28
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 faf9 	bl	80077c4 <RCCEx_PLL3_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061d8:	e006      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061e0:	e002      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80061e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061f0:	4b6a      	ldr	r3, [pc, #424]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061fe:	4a67      	ldr	r2, [pc, #412]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006200:	430b      	orrs	r3, r1
 8006202:	6513      	str	r3, [r2, #80]	@ 0x50
 8006204:	e003      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800620a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800621a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800621e:	2300      	movs	r3, #0
 8006220:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006224:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d053      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006238:	d033      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800623a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800623e:	d82c      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006240:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006244:	d02f      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006246:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800624a:	d826      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800624c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006250:	d02b      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006252:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006256:	d820      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006258:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800625c:	d012      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800625e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006262:	d81a      	bhi.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d022      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d115      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	3308      	adds	r3, #8
 8006274:	2101      	movs	r1, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f001 f9f2 	bl	8007660 <RCCEx_PLL2_Config>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006282:	e015      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	3328      	adds	r3, #40	@ 0x28
 800628a:	2101      	movs	r1, #1
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fa99 	bl	80077c4 <RCCEx_PLL3_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006298:	e00a      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062a0:	e006      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062a2:	bf00      	nop
 80062a4:	e004      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062b8:	4b38      	ldr	r3, [pc, #224]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c6:	4a35      	ldr	r2, [pc, #212]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80062cc:	e003      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80062e6:	2300      	movs	r3, #0
 80062e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80062f0:	460b      	mov	r3, r1
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d058      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006302:	d033      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006308:	d82c      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630e:	d02f      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006314:	d826      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800631a:	d02b      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800631c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006320:	d820      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006326:	d012      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800632c:	d81a      	bhi.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d022      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006336:	d115      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633c:	3308      	adds	r3, #8
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f001 f98d 	bl	8007660 <RCCEx_PLL2_Config>
 8006346:	4603      	mov	r3, r0
 8006348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800634c:	e015      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800634e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006352:	3328      	adds	r3, #40	@ 0x28
 8006354:	2101      	movs	r1, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f001 fa34 	bl	80077c4 <RCCEx_PLL3_Config>
 800635c:	4603      	mov	r3, r0
 800635e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006362:	e00a      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800636a:	e006      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800636c:	bf00      	nop
 800636e:	e004      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006370:	bf00      	nop
 8006372:	e002      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10e      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006382:	4b06      	ldr	r3, [pc, #24]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006386:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800638a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006392:	4a02      	ldr	r2, [pc, #8]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006394:	430b      	orrs	r3, r1
 8006396:	6593      	str	r3, [r2, #88]	@ 0x58
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4313      	orrs	r3, r2
 80063c6:	d037      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d2:	d00e      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80063d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063d8:	d816      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d018      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80063de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063e2:	d111      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e4:	4bc4      	ldr	r3, [pc, #784]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	4ac3      	ldr	r2, [pc, #780]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063f0:	e00f      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	3308      	adds	r3, #8
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 f930 	bl	8007660 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800641a:	4bb7      	ldr	r3, [pc, #732]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006428:	4ab3      	ldr	r2, [pc, #716]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6513      	str	r3, [r2, #80]	@ 0x50
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800644e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d039      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645e:	2b03      	cmp	r3, #3
 8006460:	d81c      	bhi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006462:	a201      	add	r2, pc, #4	@ (adr r2, 8006468 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	080064a5 	.word	0x080064a5
 800646c:	08006479 	.word	0x08006479
 8006470:	08006487 	.word	0x08006487
 8006474:	080064a5 	.word	0x080064a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b9f      	ldr	r3, [pc, #636]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	4a9e      	ldr	r2, [pc, #632]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006484:	e00f      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648a:	3308      	adds	r3, #8
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f001 f8e6 	bl	8007660 <RCCEx_PLL2_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800649a:	e004      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064a2:	e000      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80064a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064ae:	4b92      	ldr	r3, [pc, #584]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b2:	f023 0103 	bic.w	r1, r3, #3
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064bc:	4a8e      	ldr	r2, [pc, #568]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064be:	430b      	orrs	r3, r1
 80064c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064c2:	e003      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064dc:	2300      	movs	r3, #0
 80064de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f000 8099 	beq.w	8006620 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ee:	4b83      	ldr	r3, [pc, #524]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a82      	ldr	r2, [pc, #520]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064fa:	f7fb f8c7 	bl	800168c <HAL_GetTick>
 80064fe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006502:	e00b      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006504:	f7fb f8c2 	bl	800168c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b64      	cmp	r3, #100	@ 0x64
 8006512:	d903      	bls.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800651a:	e005      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800651c:	4b77      	ldr	r3, [pc, #476]	@ (80066fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0ed      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006528:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800652c:	2b00      	cmp	r3, #0
 800652e:	d173      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006530:	4b71      	ldr	r3, [pc, #452]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006532:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800653c:	4053      	eors	r3, r2
 800653e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006546:	4b6c      	ldr	r3, [pc, #432]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800654e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006552:	4b69      	ldr	r3, [pc, #420]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	4a68      	ldr	r2, [pc, #416]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800655c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800655e:	4b66      	ldr	r3, [pc, #408]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006562:	4a65      	ldr	r2, [pc, #404]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006568:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800656a:	4a63      	ldr	r2, [pc, #396]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800656c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006570:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800657a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800657e:	d118      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006580:	f7fb f884 	bl	800168c <HAL_GetTick>
 8006584:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006588:	e00d      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658a:	f7fb f87f 	bl	800168c <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	f241 3388 	movw	r3, #5000	@ 0x1388
 800659a:	429a      	cmp	r2, r3
 800659c:	d903      	bls.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80065a4:	e005      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a6:	4b54      	ldr	r3, [pc, #336]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0eb      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80065b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d129      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ca:	d10e      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x846>
 80065cc:	4b4a      	ldr	r3, [pc, #296]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065dc:	091a      	lsrs	r2, r3, #4
 80065de:	4b48      	ldr	r3, [pc, #288]	@ (8006700 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	4a45      	ldr	r2, [pc, #276]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6113      	str	r3, [r2, #16]
 80065e8:	e005      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80065ea:	4b43      	ldr	r3, [pc, #268]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	4a42      	ldr	r2, [pc, #264]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065f4:	6113      	str	r3, [r2, #16]
 80065f6:	4b40      	ldr	r3, [pc, #256]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006606:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006608:	430b      	orrs	r3, r1
 800660a:	6713      	str	r3, [r2, #112]	@ 0x70
 800660c:	e008      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800660e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006612:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006616:	e003      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800661c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f002 0301 	and.w	r3, r2, #1
 800662c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006636:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800663a:	460b      	mov	r3, r1
 800663c:	4313      	orrs	r3, r2
 800663e:	f000 808f 	beq.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006646:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006648:	2b28      	cmp	r3, #40	@ 0x28
 800664a:	d871      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800664c:	a201      	add	r2, pc, #4	@ (adr r2, 8006654 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	08006739 	.word	0x08006739
 8006658:	08006731 	.word	0x08006731
 800665c:	08006731 	.word	0x08006731
 8006660:	08006731 	.word	0x08006731
 8006664:	08006731 	.word	0x08006731
 8006668:	08006731 	.word	0x08006731
 800666c:	08006731 	.word	0x08006731
 8006670:	08006731 	.word	0x08006731
 8006674:	08006705 	.word	0x08006705
 8006678:	08006731 	.word	0x08006731
 800667c:	08006731 	.word	0x08006731
 8006680:	08006731 	.word	0x08006731
 8006684:	08006731 	.word	0x08006731
 8006688:	08006731 	.word	0x08006731
 800668c:	08006731 	.word	0x08006731
 8006690:	08006731 	.word	0x08006731
 8006694:	0800671b 	.word	0x0800671b
 8006698:	08006731 	.word	0x08006731
 800669c:	08006731 	.word	0x08006731
 80066a0:	08006731 	.word	0x08006731
 80066a4:	08006731 	.word	0x08006731
 80066a8:	08006731 	.word	0x08006731
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006731 	.word	0x08006731
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006731 	.word	0x08006731
 80066bc:	08006731 	.word	0x08006731
 80066c0:	08006731 	.word	0x08006731
 80066c4:	08006731 	.word	0x08006731
 80066c8:	08006731 	.word	0x08006731
 80066cc:	08006731 	.word	0x08006731
 80066d0:	08006731 	.word	0x08006731
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006731 	.word	0x08006731
 80066dc:	08006731 	.word	0x08006731
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006731 	.word	0x08006731
 80066e8:	08006731 	.word	0x08006731
 80066ec:	08006731 	.word	0x08006731
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006739 	.word	0x08006739
 80066f8:	58024400 	.word	0x58024400
 80066fc:	58024800 	.word	0x58024800
 8006700:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006708:	3308      	adds	r3, #8
 800670a:	2101      	movs	r1, #1
 800670c:	4618      	mov	r0, r3
 800670e:	f000 ffa7 	bl	8007660 <RCCEx_PLL2_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006718:	e00f      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	3328      	adds	r3, #40	@ 0x28
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f84e 	bl	80077c4 <RCCEx_PLL3_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006742:	4bbf      	ldr	r3, [pc, #764]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006750:	4abb      	ldr	r2, [pc, #748]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006752:	430b      	orrs	r3, r1
 8006754:	6553      	str	r3, [r2, #84]	@ 0x54
 8006756:	e003      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800675c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f002 0302 	and.w	r3, r2, #2
 800676c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006776:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d041      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006786:	2b05      	cmp	r3, #5
 8006788:	d824      	bhi.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800678a:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067dd 	.word	0x080067dd
 8006794:	080067a9 	.word	0x080067a9
 8006798:	080067bf 	.word	0x080067bf
 800679c:	080067dd 	.word	0x080067dd
 80067a0:	080067dd 	.word	0x080067dd
 80067a4:	080067dd 	.word	0x080067dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	3308      	adds	r3, #8
 80067ae:	2101      	movs	r1, #1
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 ff55 	bl	8007660 <RCCEx_PLL2_Config>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067bc:	e00f      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	2101      	movs	r1, #1
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fffc 	bl	80077c4 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067d2:	e004      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80067dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067e6:	4b96      	ldr	r3, [pc, #600]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	f023 0107 	bic.w	r1, r3, #7
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f4:	4a92      	ldr	r2, [pc, #584]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f002 0304 	and.w	r3, r2, #4
 8006810:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800681a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d044      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682c:	2b05      	cmp	r3, #5
 800682e:	d825      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006830:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006885 	.word	0x08006885
 800683c:	08006851 	.word	0x08006851
 8006840:	08006867 	.word	0x08006867
 8006844:	08006885 	.word	0x08006885
 8006848:	08006885 	.word	0x08006885
 800684c:	08006885 	.word	0x08006885
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	3308      	adds	r3, #8
 8006856:	2101      	movs	r1, #1
 8006858:	4618      	mov	r0, r3
 800685a:	f000 ff01 	bl	8007660 <RCCEx_PLL2_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006864:	e00f      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	3328      	adds	r3, #40	@ 0x28
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f000 ffa8 	bl	80077c4 <RCCEx_PLL3_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800688e:	4b6c      	ldr	r3, [pc, #432]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006892:	f023 0107 	bic.w	r1, r3, #7
 8006896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689e:	4a68      	ldr	r2, [pc, #416]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068a4:	e003      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f002 0320 	and.w	r3, r2, #32
 80068ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068be:	2300      	movs	r3, #0
 80068c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d055      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068da:	d033      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80068dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068e0:	d82c      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e6:	d02f      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ec:	d826      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068f2:	d02b      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80068f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068f8:	d820      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068fe:	d012      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006904:	d81a      	bhi.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d022      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800690a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800690e:	d115      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006914:	3308      	adds	r3, #8
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fea1 	bl	8007660 <RCCEx_PLL2_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006924:	e015      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692a:	3328      	adds	r3, #40	@ 0x28
 800692c:	2102      	movs	r1, #2
 800692e:	4618      	mov	r0, r3
 8006930:	f000 ff48 	bl	80077c4 <RCCEx_PLL3_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800693a:	e00a      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006942:	e006      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006944:	bf00      	nop
 8006946:	e004      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006948:	bf00      	nop
 800694a:	e002      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006952:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800695a:	4b39      	ldr	r3, [pc, #228]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800695e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800696a:	4a35      	ldr	r2, [pc, #212]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800696c:	430b      	orrs	r3, r1
 800696e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006976:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006986:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800698a:	2300      	movs	r3, #0
 800698c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006990:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d058      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069a6:	d033      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80069a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069ac:	d82c      	bhi.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b2:	d02f      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b8:	d826      	bhi.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069be:	d02b      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80069c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069c4:	d820      	bhi.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ca:	d012      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d0:	d81a      	bhi.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d022      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069da:	d115      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	3308      	adds	r3, #8
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 fe3b 	bl	8007660 <RCCEx_PLL2_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069f0:	e015      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f6:	3328      	adds	r3, #40	@ 0x28
 80069f8:	2102      	movs	r1, #2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fee2 	bl	80077c4 <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a06:	e00a      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a0e:	e006      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a10:	bf00      	nop
 8006a12:	e004      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a14:	bf00      	nop
 8006a16:	e002      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a18:	bf00      	nop
 8006a1a:	e000      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10e      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a26:	4b06      	ldr	r3, [pc, #24]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a36:	4a02      	ldr	r2, [pc, #8]	@ (8006a40 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a3c:	e006      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a62:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a66:	460b      	mov	r3, r1
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	d055      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a74:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a78:	d033      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006a7a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a7e:	d82c      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a84:	d02f      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006a86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a8a:	d826      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a8c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a90:	d02b      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006a92:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a96:	d820      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a9c:	d012      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006a9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aa2:	d81a      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d022      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aac:	d115      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fdd2 	bl	8007660 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e015      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2102      	movs	r1, #2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fe79 	bl	80077c4 <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ae0:	e006      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006af8:	4ba0      	ldr	r3, [pc, #640]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b08:	4a9c      	ldr	r2, [pc, #624]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f002 0308 	and.w	r3, r2, #8
 8006b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b2e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d01e      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4a:	3328      	adds	r3, #40	@ 0x28
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fe38 	bl	80077c4 <RCCEx_PLL3_Config>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006b60:	4b86      	ldr	r3, [pc, #536]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b64:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b70:	4a82      	ldr	r2, [pc, #520]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f002 0310 	and.w	r3, r2, #16
 8006b82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b8c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b90:	460b      	mov	r3, r1
 8006b92:	4313      	orrs	r3, r2
 8006b94:	d01e      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba8:	3328      	adds	r3, #40	@ 0x28
 8006baa:	2102      	movs	r1, #2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fe09 	bl	80077c4 <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bce:	4a6b      	ldr	r2, [pc, #428]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006be0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006be2:	2300      	movs	r3, #0
 8006be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006be6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006bea:	460b      	mov	r3, r1
 8006bec:	4313      	orrs	r3, r2
 8006bee:	d03e      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bfc:	d022      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006bfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c02:	d81b      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d00b      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006c0e:	e015      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	3308      	adds	r3, #8
 8006c16:	2100      	movs	r1, #0
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fd21 	bl	8007660 <RCCEx_PLL2_Config>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c24:	e00f      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	3328      	adds	r3, #40	@ 0x28
 8006c2c:	2102      	movs	r1, #2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fdc8 	bl	80077c4 <RCCEx_PLL3_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c3a:	e004      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c42:	e000      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10b      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c5e:	4a47      	ldr	r2, [pc, #284]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c64:	e003      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c96:	d01f      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006c98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c9c:	d818      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca2:	d003      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006ca4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ca8:	d007      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006caa:	e011      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b33      	ldr	r3, [pc, #204]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	4a32      	ldr	r2, [pc, #200]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cb8:	e00f      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cbe:	3328      	adds	r3, #40	@ 0x28
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fd7e 	bl	80077c4 <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ce2:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf2:	4a22      	ldr	r2, [pc, #136]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006cf8:	e003      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d10:	2300      	movs	r3, #0
 8006d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d14:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	d034      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2c:	d007      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006d2e:	e011      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4b12      	ldr	r3, [pc, #72]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4a11      	ldr	r2, [pc, #68]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d3c:	e00e      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	3308      	adds	r3, #8
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fc8a 	bl	8007660 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d52:	e003      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10d      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d72:	4a02      	ldr	r2, [pc, #8]	@ (8006d7c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d96:	2300      	movs	r3, #0
 8006d98:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d9a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d00c      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	3328      	adds	r3, #40	@ 0x28
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fd09 	bl	80077c4 <RCCEx_PLL3_Config>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006dca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dcc:	2300      	movs	r3, #0
 8006dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dd0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	d036      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de4:	d018      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dea:	d811      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df0:	d014      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df6:	d80b      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d011      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e02:	4bb7      	ldr	r3, [pc, #732]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	4ab6      	ldr	r2, [pc, #728]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e0e:	e008      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e16:	e004      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e18:	bf00      	nop
 8006e1a:	e002      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e2a:	4bad      	ldr	r3, [pc, #692]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e38:	4aa9      	ldr	r2, [pc, #676]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e3e:	e003      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e56:	2300      	movs	r3, #0
 8006e58:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e5a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4313      	orrs	r3, r2
 8006e62:	d009      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e64:	4b9e      	ldr	r3, [pc, #632]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e72:	4a9b      	ldr	r2, [pc, #620]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e86:	2300      	movs	r3, #0
 8006e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e8a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d009      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e94:	4b92      	ldr	r3, [pc, #584]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e98:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea2:	4a8f      	ldr	r2, [pc, #572]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ec4:	4b86      	ldr	r3, [pc, #536]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	4a85      	ldr	r2, [pc, #532]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ece:	6113      	str	r3, [r2, #16]
 8006ed0:	4b83      	ldr	r3, [pc, #524]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed2:	6919      	ldr	r1, [r3, #16]
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006edc:	4a80      	ldr	r2, [pc, #512]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ef8:	460b      	mov	r3, r1
 8006efa:	4313      	orrs	r3, r2
 8006efc:	d009      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006efe:	4b78      	ldr	r3, [pc, #480]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0c:	4a74      	ldr	r2, [pc, #464]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f0e:	430b      	orrs	r3, r1
 8006f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f20:	2300      	movs	r3, #0
 8006f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f32:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3e:	4a68      	ldr	r2, [pc, #416]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f40:	430b      	orrs	r3, r1
 8006f42:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f56:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	d011      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f64:	3308      	adds	r3, #8
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fb79 	bl	8007660 <RCCEx_PLL2_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6239      	str	r1, [r7, #32]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d011      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fb59 	bl	8007660 <RCCEx_PLL2_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	61b9      	str	r1, [r7, #24]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d011      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	2102      	movs	r1, #2
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb39 	bl	8007660 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	2100      	movs	r1, #0
 800700e:	6139      	str	r1, [r7, #16]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800701a:	460b      	mov	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	d011      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007024:	3328      	adds	r3, #40	@ 0x28
 8007026:	2100      	movs	r1, #0
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fbcb 	bl	80077c4 <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	2100      	movs	r1, #0
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d011      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007064:	3328      	adds	r3, #40	@ 0x28
 8007066:	2101      	movs	r1, #1
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fbab 	bl	80077c4 <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	2100      	movs	r1, #0
 800708e:	6039      	str	r1, [r7, #0]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	e9d7 1200 	ldrd	r1, r2, [r7]
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d011      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	3328      	adds	r3, #40	@ 0x28
 80070a6:	2102      	movs	r1, #2
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fb8b 	bl	80077c4 <RCCEx_PLL3_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80070c4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e000      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80070d8:	46bd      	mov	sp, r7
 80070da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070de:	bf00      	nop
 80070e0:	58024400 	.word	0x58024400

080070e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070e8:	f7fe fe00 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	091b      	lsrs	r3, r3, #4
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4904      	ldr	r1, [pc, #16]	@ (800710c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	58024400 	.word	0x58024400
 800710c:	0800b020 	.word	0x0800b020

08007110 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	@ 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007118:	4ba1      	ldr	r3, [pc, #644]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007122:	4b9f      	ldr	r3, [pc, #636]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	0b1b      	lsrs	r3, r3, #12
 8007128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800712c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800712e:	4b9c      	ldr	r3, [pc, #624]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800713a:	4b99      	ldr	r3, [pc, #612]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713e:	08db      	lsrs	r3, r3, #3
 8007140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	fb02 f303 	mul.w	r3, r2, r3
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8111 	beq.w	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b02      	cmp	r3, #2
 8007162:	f000 8083 	beq.w	800726c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b02      	cmp	r3, #2
 800716a:	f200 80a1 	bhi.w	80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d056      	beq.n	8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800717a:	e099      	b.n	80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800717c:	4b88      	ldr	r3, [pc, #544]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02d      	beq.n	80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007188:	4b85      	ldr	r3, [pc, #532]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	08db      	lsrs	r3, r3, #3
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	4a84      	ldr	r2, [pc, #528]	@ (80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007194:	fa22 f303 	lsr.w	r3, r2, r3
 8007198:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b2:	4b7b      	ldr	r3, [pc, #492]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071e2:	e087      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	4b6a      	ldr	r3, [pc, #424]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007206:	ed97 6a03 	vldr	s12, [r7, #12]
 800720a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007226:	e065      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007232:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723a:	4b59      	ldr	r3, [pc, #356]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724a:	ed97 6a03 	vldr	s12, [r7, #12]
 800724e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800726a:	e043      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b48      	ldr	r3, [pc, #288]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007292:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ae:	e021      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b37      	ldr	r3, [pc, #220]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80072f4:	4b2a      	ldr	r3, [pc, #168]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	0a5b      	lsrs	r3, r3, #9
 80072fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800730a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800730e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731a:	ee17 2a90 	vmov	r2, s15
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007322:	4b1f      	ldr	r3, [pc, #124]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	0c1b      	lsrs	r3, r3, #16
 8007328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800732c:	ee07 3a90 	vmov	s15, r3
 8007330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800733c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007348:	ee17 2a90 	vmov	r2, s15
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007350:	4b13      	ldr	r3, [pc, #76]	@ (80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007354:	0e1b      	lsrs	r3, r3, #24
 8007356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800736a:	edd7 6a07 	vldr	s13, [r7, #28]
 800736e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007376:	ee17 2a90 	vmov	r2, s15
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800737e:	e008      	b.n	8007392 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	609a      	str	r2, [r3, #8]
}
 8007392:	bf00      	nop
 8007394:	3724      	adds	r7, #36	@ 0x24
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	58024400 	.word	0x58024400
 80073a4:	03d09000 	.word	0x03d09000
 80073a8:	46000000 	.word	0x46000000
 80073ac:	4c742400 	.word	0x4c742400
 80073b0:	4a742400 	.word	0x4a742400
 80073b4:	4bbebc20 	.word	0x4bbebc20

080073b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b089      	sub	sp, #36	@ 0x24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ce:	0d1b      	lsrs	r3, r3, #20
 80073d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073e2:	4b99      	ldr	r3, [pc, #612]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	08db      	lsrs	r3, r3, #3
 80073e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 8111 	beq.w	8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b02      	cmp	r3, #2
 800740a:	f000 8083 	beq.w	8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b02      	cmp	r3, #2
 8007412:	f200 80a1 	bhi.w	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d056      	beq.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007422:	e099      	b.n	8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007424:	4b88      	ldr	r3, [pc, #544]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d02d      	beq.n	800748c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007430:	4b85      	ldr	r3, [pc, #532]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	08db      	lsrs	r3, r3, #3
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	4a84      	ldr	r2, [pc, #528]	@ (800764c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
 8007440:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745a:	4b7b      	ldr	r3, [pc, #492]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746a:	ed97 6a03 	vldr	s12, [r7, #12]
 800746e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800748a:	e087      	b.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007654 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	4b6a      	ldr	r3, [pc, #424]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ce:	e065      	b.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e2:	4b59      	ldr	r3, [pc, #356]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007512:	e043      	b.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800765c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007526:	4b48      	ldr	r3, [pc, #288]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007536:	ed97 6a03 	vldr	s12, [r7, #12]
 800753a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800753e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800754a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007556:	e021      	b.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007562:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800756a:	4b37      	ldr	r3, [pc, #220]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757a:	ed97 6a03 	vldr	s12, [r7, #12]
 800757e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800758a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800758e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800759a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800759c:	4b2a      	ldr	r3, [pc, #168]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a0:	0a5b      	lsrs	r3, r3, #9
 80075a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c2:	ee17 2a90 	vmov	r2, s15
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ce:	0c1b      	lsrs	r3, r3, #16
 80075d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f0:	ee17 2a90 	vmov	r2, s15
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075f8:	4b13      	ldr	r3, [pc, #76]	@ (8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fc:	0e1b      	lsrs	r3, r3, #24
 80075fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800760e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007612:	edd7 6a07 	vldr	s13, [r7, #28]
 8007616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761e:	ee17 2a90 	vmov	r2, s15
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007626:	e008      	b.n	800763a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	609a      	str	r2, [r3, #8]
}
 800763a:	bf00      	nop
 800763c:	3724      	adds	r7, #36	@ 0x24
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	58024400 	.word	0x58024400
 800764c:	03d09000 	.word	0x03d09000
 8007650:	46000000 	.word	0x46000000
 8007654:	4c742400 	.word	0x4c742400
 8007658:	4a742400 	.word	0x4a742400
 800765c:	4bbebc20 	.word	0x4bbebc20

08007660 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800766e:	4b53      	ldr	r3, [pc, #332]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b03      	cmp	r3, #3
 8007678:	d101      	bne.n	800767e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e099      	b.n	80077b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800767e:	4b4f      	ldr	r3, [pc, #316]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a4e      	ldr	r2, [pc, #312]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007684:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768a:	f7f9 ffff 	bl	800168c <HAL_GetTick>
 800768e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007690:	e008      	b.n	80076a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007692:	f7f9 fffb 	bl	800168c <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	2b02      	cmp	r3, #2
 800769e:	d901      	bls.n	80076a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e086      	b.n	80077b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076a4:	4b45      	ldr	r3, [pc, #276]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f0      	bne.n	8007692 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076b0:	4b42      	ldr	r3, [pc, #264]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	031b      	lsls	r3, r3, #12
 80076be:	493f      	ldr	r1, [pc, #252]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	025b      	lsls	r3, r3, #9
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	3b01      	subs	r3, #1
 80076e0:	041b      	lsls	r3, r3, #16
 80076e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	061b      	lsls	r3, r3, #24
 80076f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076f4:	4931      	ldr	r1, [pc, #196]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076fa:	4b30      	ldr	r3, [pc, #192]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 80076fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	492d      	ldr	r1, [pc, #180]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800770c:	4b2b      	ldr	r3, [pc, #172]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	f023 0220 	bic.w	r2, r3, #32
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	4928      	ldr	r1, [pc, #160]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800771e:	4b27      	ldr	r3, [pc, #156]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007722:	4a26      	ldr	r2, [pc, #152]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007724:	f023 0310 	bic.w	r3, r3, #16
 8007728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800772a:	4b24      	ldr	r3, [pc, #144]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 800772c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800772e:	4b24      	ldr	r3, [pc, #144]	@ (80077c0 <RCCEx_PLL2_Config+0x160>)
 8007730:	4013      	ands	r3, r2
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	69d2      	ldr	r2, [r2, #28]
 8007736:	00d2      	lsls	r2, r2, #3
 8007738:	4920      	ldr	r1, [pc, #128]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 800773a:	4313      	orrs	r3, r2
 800773c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800773e:	4b1f      	ldr	r3, [pc, #124]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	4a1e      	ldr	r2, [pc, #120]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007744:	f043 0310 	orr.w	r3, r3, #16
 8007748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007750:	4b1a      	ldr	r3, [pc, #104]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	4a19      	ldr	r2, [pc, #100]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800775a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800775c:	e00f      	b.n	800777e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d106      	bne.n	8007772 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007764:	4b15      	ldr	r3, [pc, #84]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007768:	4a14      	ldr	r2, [pc, #80]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 800776a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800776e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007770:	e005      	b.n	800777e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007772:	4b12      	ldr	r3, [pc, #72]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	4a11      	ldr	r2, [pc, #68]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007778:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800777c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800777e:	4b0f      	ldr	r3, [pc, #60]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a0e      	ldr	r2, [pc, #56]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 8007784:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800778a:	f7f9 ff7f 	bl	800168c <HAL_GetTick>
 800778e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007790:	e008      	b.n	80077a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007792:	f7f9 ff7b 	bl	800168c <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e006      	b.n	80077b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077a4:	4b05      	ldr	r3, [pc, #20]	@ (80077bc <RCCEx_PLL2_Config+0x15c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0f0      	beq.n	8007792 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
 80077c0:	ffff0007 	.word	0xffff0007

080077c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077d2:	4b53      	ldr	r3, [pc, #332]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d101      	bne.n	80077e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e099      	b.n	8007916 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80077e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ee:	f7f9 ff4d 	bl	800168c <HAL_GetTick>
 80077f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077f4:	e008      	b.n	8007808 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077f6:	f7f9 ff49 	bl	800168c <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e086      	b.n	8007916 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007808:	4b45      	ldr	r3, [pc, #276]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f0      	bne.n	80077f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007814:	4b42      	ldr	r3, [pc, #264]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007818:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	051b      	lsls	r3, r3, #20
 8007822:	493f      	ldr	r1, [pc, #252]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007824:	4313      	orrs	r3, r2
 8007826:	628b      	str	r3, [r1, #40]	@ 0x28
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	3b01      	subs	r3, #1
 800782e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	3b01      	subs	r3, #1
 8007838:	025b      	lsls	r3, r3, #9
 800783a:	b29b      	uxth	r3, r3
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	3b01      	subs	r3, #1
 8007844:	041b      	lsls	r3, r3, #16
 8007846:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800784a:	431a      	orrs	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	3b01      	subs	r3, #1
 8007852:	061b      	lsls	r3, r3, #24
 8007854:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007858:	4931      	ldr	r1, [pc, #196]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800785e:	4b30      	ldr	r3, [pc, #192]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	492d      	ldr	r1, [pc, #180]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 800786c:	4313      	orrs	r3, r2
 800786e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007870:	4b2b      	ldr	r3, [pc, #172]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	4928      	ldr	r1, [pc, #160]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007882:	4b27      	ldr	r3, [pc, #156]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	4a26      	ldr	r2, [pc, #152]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800788c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800788e:	4b24      	ldr	r3, [pc, #144]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 8007890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007892:	4b24      	ldr	r3, [pc, #144]	@ (8007924 <RCCEx_PLL3_Config+0x160>)
 8007894:	4013      	ands	r3, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	69d2      	ldr	r2, [r2, #28]
 800789a:	00d2      	lsls	r2, r2, #3
 800789c:	4920      	ldr	r1, [pc, #128]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b8:	4a19      	ldr	r2, [pc, #100]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078c0:	e00f      	b.n	80078e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d106      	bne.n	80078d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078c8:	4b15      	ldr	r3, [pc, #84]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	4a14      	ldr	r2, [pc, #80]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078d4:	e005      	b.n	80078e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078d6:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	4a11      	ldr	r2, [pc, #68]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ee:	f7f9 fecd 	bl	800168c <HAL_GetTick>
 80078f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078f4:	e008      	b.n	8007908 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078f6:	f7f9 fec9 	bl	800168c <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e006      	b.n	8007916 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007908:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <RCCEx_PLL3_Config+0x15c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0f0      	beq.n	80078f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	58024400 	.word	0x58024400
 8007924:	ffff0007 	.word	0xffff0007

08007928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e049      	b.n	80079ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d106      	bne.n	8007954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7f9 fb40 	bl	8000fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f000 fc58 	bl	800821c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d001      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e05e      	b.n	8007aae <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007abc <HAL_TIM_Base_Start_IT+0xe4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d02c      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a1a:	d027      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a27      	ldr	r2, [pc, #156]	@ (8007ac0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d022      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a26      	ldr	r2, [pc, #152]	@ (8007ac4 <HAL_TIM_Base_Start_IT+0xec>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01d      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a24      	ldr	r2, [pc, #144]	@ (8007ac8 <HAL_TIM_Base_Start_IT+0xf0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d018      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a23      	ldr	r2, [pc, #140]	@ (8007acc <HAL_TIM_Base_Start_IT+0xf4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a21      	ldr	r2, [pc, #132]	@ (8007ad0 <HAL_TIM_Base_Start_IT+0xf8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a20      	ldr	r2, [pc, #128]	@ (8007ad4 <HAL_TIM_Base_Start_IT+0xfc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d009      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad8 <HAL_TIM_Base_Start_IT+0x100>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x94>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1d      	ldr	r2, [pc, #116]	@ (8007adc <HAL_TIM_Base_Start_IT+0x104>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d115      	bne.n	8007a98 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <HAL_TIM_Base_Start_IT+0x108>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b06      	cmp	r3, #6
 8007a7c:	d015      	beq.n	8007aaa <HAL_TIM_Base_Start_IT+0xd2>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a84:	d011      	beq.n	8007aaa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0201 	orr.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a96:	e008      	b.n	8007aaa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	e000      	b.n	8007aac <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	40000800 	.word	0x40000800
 8007ac8:	40000c00 	.word	0x40000c00
 8007acc:	40010400 	.word	0x40010400
 8007ad0:	40001800 	.word	0x40001800
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	4000e000 	.word	0x4000e000
 8007adc:	4000e400 	.word	0x4000e400
 8007ae0:	00010007 	.word	0x00010007

08007ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e049      	b.n	8007b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f841 	bl	8007b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f000 fb7a 	bl	800821c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d020      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01b      	beq.n	8007c0a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f06f 0202 	mvn.w	r2, #2
 8007bda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 faf5 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007bf6:	e005      	b.n	8007c04 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fae7 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 faf8 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d020      	beq.n	8007c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01b      	beq.n	8007c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f06f 0204 	mvn.w	r2, #4
 8007c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 facf 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007c42:	e005      	b.n	8007c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fac1 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fad2 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01b      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f06f 0208 	mvn.w	r2, #8
 8007c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2204      	movs	r2, #4
 8007c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	f003 0303 	and.w	r3, r3, #3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 faa9 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007c8e:	e005      	b.n	8007c9c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fa9b 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 faac 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d020      	beq.n	8007cee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01b      	beq.n	8007cee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f06f 0210 	mvn.w	r2, #16
 8007cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa83 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007cda:	e005      	b.n	8007ce8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fa75 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa86 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00c      	beq.n	8007d12 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f06f 0201 	mvn.w	r2, #1
 8007d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7f9 f85f 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00c      	beq.n	8007d40 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 ff3a 	bl	8008bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 ff32 	bl	8008bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00c      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa40 	bl	8008208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00c      	beq.n	8007dac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0220 	mvn.w	r2, #32
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fefa 	bl	8008ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e0ff      	b.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b14      	cmp	r3, #20
 8007dde:	f200 80f0 	bhi.w	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e3d 	.word	0x08007e3d
 8007dec:	08007fc3 	.word	0x08007fc3
 8007df0:	08007fc3 	.word	0x08007fc3
 8007df4:	08007fc3 	.word	0x08007fc3
 8007df8:	08007e7d 	.word	0x08007e7d
 8007dfc:	08007fc3 	.word	0x08007fc3
 8007e00:	08007fc3 	.word	0x08007fc3
 8007e04:	08007fc3 	.word	0x08007fc3
 8007e08:	08007ebf 	.word	0x08007ebf
 8007e0c:	08007fc3 	.word	0x08007fc3
 8007e10:	08007fc3 	.word	0x08007fc3
 8007e14:	08007fc3 	.word	0x08007fc3
 8007e18:	08007eff 	.word	0x08007eff
 8007e1c:	08007fc3 	.word	0x08007fc3
 8007e20:	08007fc3 	.word	0x08007fc3
 8007e24:	08007fc3 	.word	0x08007fc3
 8007e28:	08007f41 	.word	0x08007f41
 8007e2c:	08007fc3 	.word	0x08007fc3
 8007e30:	08007fc3 	.word	0x08007fc3
 8007e34:	08007fc3 	.word	0x08007fc3
 8007e38:	08007f81 	.word	0x08007f81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fa9c 	bl	8008380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0208 	orr.w	r2, r2, #8
 8007e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0204 	bic.w	r2, r2, #4
 8007e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6999      	ldr	r1, [r3, #24]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	619a      	str	r2, [r3, #24]
      break;
 8007e7a:	e0a5      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fb0c 	bl	80084a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6999      	ldr	r1, [r3, #24]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	021a      	lsls	r2, r3, #8
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	619a      	str	r2, [r3, #24]
      break;
 8007ebc:	e084      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fb75 	bl	80085b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0208 	orr.w	r2, r2, #8
 8007ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0204 	bic.w	r2, r2, #4
 8007ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69d9      	ldr	r1, [r3, #28]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	61da      	str	r2, [r3, #28]
      break;
 8007efc:	e064      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fbdd 	bl	80086c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69d9      	ldr	r1, [r3, #28]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	021a      	lsls	r2, r3, #8
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	61da      	str	r2, [r3, #28]
      break;
 8007f3e:	e043      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fc26 	bl	8008798 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0208 	orr.w	r2, r2, #8
 8007f5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0204 	bic.w	r2, r2, #4
 8007f6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f7e:	e023      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fc6a 	bl	8008860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007faa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	021a      	lsls	r2, r3, #8
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007fc0:	e002      	b.n	8007fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop

08007fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d101      	bne.n	8007ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	e0dc      	b.n	80081b2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	4b6a      	ldr	r3, [pc, #424]	@ (80081bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008014:	4013      	ands	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800801e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a64      	ldr	r2, [pc, #400]	@ (80081c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	f000 80a9 	beq.w	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 8008034:	4a62      	ldr	r2, [pc, #392]	@ (80081c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	f200 80ae 	bhi.w	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 800803c:	4a61      	ldr	r2, [pc, #388]	@ (80081c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	f000 80a1 	beq.w	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 8008044:	4a5f      	ldr	r2, [pc, #380]	@ (80081c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	f200 80a6 	bhi.w	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 800804c:	4a5e      	ldr	r2, [pc, #376]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800804e:	4293      	cmp	r3, r2
 8008050:	f000 8099 	beq.w	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 8008054:	4a5c      	ldr	r2, [pc, #368]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008056:	4293      	cmp	r3, r2
 8008058:	f200 809e 	bhi.w	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 800805c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008060:	f000 8091 	beq.w	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 8008064:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008068:	f200 8096 	bhi.w	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 800806c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008070:	f000 8089 	beq.w	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 8008074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008078:	f200 808e 	bhi.w	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 800807c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008080:	d03e      	beq.n	8008100 <HAL_TIM_ConfigClockSource+0x124>
 8008082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008086:	f200 8087 	bhi.w	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 800808a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800808e:	f000 8086 	beq.w	800819e <HAL_TIM_ConfigClockSource+0x1c2>
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008096:	d87f      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 8008098:	2b70      	cmp	r3, #112	@ 0x70
 800809a:	d01a      	beq.n	80080d2 <HAL_TIM_ConfigClockSource+0xf6>
 800809c:	2b70      	cmp	r3, #112	@ 0x70
 800809e:	d87b      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a0:	2b60      	cmp	r3, #96	@ 0x60
 80080a2:	d050      	beq.n	8008146 <HAL_TIM_ConfigClockSource+0x16a>
 80080a4:	2b60      	cmp	r3, #96	@ 0x60
 80080a6:	d877      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a8:	2b50      	cmp	r3, #80	@ 0x50
 80080aa:	d03c      	beq.n	8008126 <HAL_TIM_ConfigClockSource+0x14a>
 80080ac:	2b50      	cmp	r3, #80	@ 0x50
 80080ae:	d873      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b0:	2b40      	cmp	r3, #64	@ 0x40
 80080b2:	d058      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x18a>
 80080b4:	2b40      	cmp	r3, #64	@ 0x40
 80080b6:	d86f      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b8:	2b30      	cmp	r3, #48	@ 0x30
 80080ba:	d064      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 80080bc:	2b30      	cmp	r3, #48	@ 0x30
 80080be:	d86b      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d060      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d867      	bhi.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d05c      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 80080cc:	2b10      	cmp	r3, #16
 80080ce:	d05a      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x1aa>
 80080d0:	e062      	b.n	8008198 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080e2:	f000 fca1 	bl	8008a28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	609a      	str	r2, [r3, #8]
      break;
 80080fe:	e04f      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008110:	f000 fc8a 	bl	8008a28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689a      	ldr	r2, [r3, #8]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008122:	609a      	str	r2, [r3, #8]
      break;
 8008124:	e03c      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	461a      	mov	r2, r3
 8008134:	f000 fbfa 	bl	800892c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2150      	movs	r1, #80	@ 0x50
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fc54 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 8008144:	e02c      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008152:	461a      	mov	r2, r3
 8008154:	f000 fc19 	bl	800898a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2160      	movs	r1, #96	@ 0x60
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fc44 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 8008164:	e01c      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	461a      	mov	r2, r3
 8008174:	f000 fbda 	bl	800892c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2140      	movs	r1, #64	@ 0x40
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fc34 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 8008184:	e00c      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	4610      	mov	r0, r2
 8008192:	f000 fc2b 	bl	80089ec <TIM_ITRx_SetConfig>
      break;
 8008196:	e003      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
      break;
 800819c:	e000      	b.n	80081a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800819e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	ffceff88 	.word	0xffceff88
 80081c0:	00100040 	.word	0x00100040
 80081c4:	00100030 	.word	0x00100030
 80081c8:	00100020 	.word	0x00100020

080081cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a4a      	ldr	r2, [pc, #296]	@ (8008358 <TIM_Base_SetConfig+0x13c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823a:	d00f      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a47      	ldr	r2, [pc, #284]	@ (800835c <TIM_Base_SetConfig+0x140>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00b      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a46      	ldr	r2, [pc, #280]	@ (8008360 <TIM_Base_SetConfig+0x144>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d007      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a45      	ldr	r2, [pc, #276]	@ (8008364 <TIM_Base_SetConfig+0x148>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d003      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a44      	ldr	r2, [pc, #272]	@ (8008368 <TIM_Base_SetConfig+0x14c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d108      	bne.n	800826e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a39      	ldr	r2, [pc, #228]	@ (8008358 <TIM_Base_SetConfig+0x13c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d027      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800827c:	d023      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a36      	ldr	r2, [pc, #216]	@ (800835c <TIM_Base_SetConfig+0x140>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d01f      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a35      	ldr	r2, [pc, #212]	@ (8008360 <TIM_Base_SetConfig+0x144>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01b      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a34      	ldr	r2, [pc, #208]	@ (8008364 <TIM_Base_SetConfig+0x148>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d017      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a33      	ldr	r2, [pc, #204]	@ (8008368 <TIM_Base_SetConfig+0x14c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a32      	ldr	r2, [pc, #200]	@ (800836c <TIM_Base_SetConfig+0x150>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00f      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a31      	ldr	r2, [pc, #196]	@ (8008370 <TIM_Base_SetConfig+0x154>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00b      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a30      	ldr	r2, [pc, #192]	@ (8008374 <TIM_Base_SetConfig+0x158>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d007      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a2f      	ldr	r2, [pc, #188]	@ (8008378 <TIM_Base_SetConfig+0x15c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_Base_SetConfig+0xaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a2e      	ldr	r2, [pc, #184]	@ (800837c <TIM_Base_SetConfig+0x160>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d108      	bne.n	80082d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a16      	ldr	r2, [pc, #88]	@ (8008358 <TIM_Base_SetConfig+0x13c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00f      	beq.n	8008324 <TIM_Base_SetConfig+0x108>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a18      	ldr	r2, [pc, #96]	@ (8008368 <TIM_Base_SetConfig+0x14c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_Base_SetConfig+0x108>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a17      	ldr	r2, [pc, #92]	@ (800836c <TIM_Base_SetConfig+0x150>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_Base_SetConfig+0x108>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a16      	ldr	r2, [pc, #88]	@ (8008370 <TIM_Base_SetConfig+0x154>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_Base_SetConfig+0x108>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a15      	ldr	r2, [pc, #84]	@ (8008374 <TIM_Base_SetConfig+0x158>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d103      	bne.n	800832c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	691a      	ldr	r2, [r3, #16]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b01      	cmp	r3, #1
 800833c:	d105      	bne.n	800834a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f023 0201 	bic.w	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	611a      	str	r2, [r3, #16]
  }
}
 800834a:	bf00      	nop
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	40010000 	.word	0x40010000
 800835c:	40000400 	.word	0x40000400
 8008360:	40000800 	.word	0x40000800
 8008364:	40000c00 	.word	0x40000c00
 8008368:	40010400 	.word	0x40010400
 800836c:	40014000 	.word	0x40014000
 8008370:	40014400 	.word	0x40014400
 8008374:	40014800 	.word	0x40014800
 8008378:	4000e000 	.word	0x4000e000
 800837c:	4000e400 	.word	0x4000e400

08008380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	f023 0201 	bic.w	r2, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4b37      	ldr	r3, [pc, #220]	@ (8008488 <TIM_OC1_SetConfig+0x108>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f023 0302 	bic.w	r3, r3, #2
 80083c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a2d      	ldr	r2, [pc, #180]	@ (800848c <TIM_OC1_SetConfig+0x10c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d00f      	beq.n	80083fc <TIM_OC1_SetConfig+0x7c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a2c      	ldr	r2, [pc, #176]	@ (8008490 <TIM_OC1_SetConfig+0x110>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00b      	beq.n	80083fc <TIM_OC1_SetConfig+0x7c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a2b      	ldr	r2, [pc, #172]	@ (8008494 <TIM_OC1_SetConfig+0x114>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d007      	beq.n	80083fc <TIM_OC1_SetConfig+0x7c>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008498 <TIM_OC1_SetConfig+0x118>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d003      	beq.n	80083fc <TIM_OC1_SetConfig+0x7c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a29      	ldr	r2, [pc, #164]	@ (800849c <TIM_OC1_SetConfig+0x11c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d10c      	bne.n	8008416 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f023 0308 	bic.w	r3, r3, #8
 8008402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f023 0304 	bic.w	r3, r3, #4
 8008414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <TIM_OC1_SetConfig+0x10c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00f      	beq.n	800843e <TIM_OC1_SetConfig+0xbe>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <TIM_OC1_SetConfig+0x110>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00b      	beq.n	800843e <TIM_OC1_SetConfig+0xbe>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1a      	ldr	r2, [pc, #104]	@ (8008494 <TIM_OC1_SetConfig+0x114>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d007      	beq.n	800843e <TIM_OC1_SetConfig+0xbe>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a19      	ldr	r2, [pc, #100]	@ (8008498 <TIM_OC1_SetConfig+0x118>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d003      	beq.n	800843e <TIM_OC1_SetConfig+0xbe>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a18      	ldr	r2, [pc, #96]	@ (800849c <TIM_OC1_SetConfig+0x11c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d111      	bne.n	8008462 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800844c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	621a      	str	r2, [r3, #32]
}
 800847c:	bf00      	nop
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	fffeff8f 	.word	0xfffeff8f
 800848c:	40010000 	.word	0x40010000
 8008490:	40010400 	.word	0x40010400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800

080084a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f023 0210 	bic.w	r2, r3, #16
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4b34      	ldr	r3, [pc, #208]	@ (800859c <TIM_OC2_SetConfig+0xfc>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	f023 0320 	bic.w	r3, r3, #32
 80084ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a29      	ldr	r2, [pc, #164]	@ (80085a0 <TIM_OC2_SetConfig+0x100>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC2_SetConfig+0x68>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a28      	ldr	r2, [pc, #160]	@ (80085a4 <TIM_OC2_SetConfig+0x104>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d10d      	bne.n	8008524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800850e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a1e      	ldr	r2, [pc, #120]	@ (80085a0 <TIM_OC2_SetConfig+0x100>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00f      	beq.n	800854c <TIM_OC2_SetConfig+0xac>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a1d      	ldr	r2, [pc, #116]	@ (80085a4 <TIM_OC2_SetConfig+0x104>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00b      	beq.n	800854c <TIM_OC2_SetConfig+0xac>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a1c      	ldr	r2, [pc, #112]	@ (80085a8 <TIM_OC2_SetConfig+0x108>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d007      	beq.n	800854c <TIM_OC2_SetConfig+0xac>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a1b      	ldr	r2, [pc, #108]	@ (80085ac <TIM_OC2_SetConfig+0x10c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d003      	beq.n	800854c <TIM_OC2_SetConfig+0xac>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a1a      	ldr	r2, [pc, #104]	@ (80085b0 <TIM_OC2_SetConfig+0x110>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d113      	bne.n	8008574 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800855a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	4313      	orrs	r3, r2
 8008566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	621a      	str	r2, [r3, #32]
}
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	feff8fff 	.word	0xfeff8fff
 80085a0:	40010000 	.word	0x40010000
 80085a4:	40010400 	.word	0x40010400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800

080085b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4b33      	ldr	r3, [pc, #204]	@ (80086ac <TIM_OC3_SetConfig+0xf8>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	021b      	lsls	r3, r3, #8
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a28      	ldr	r2, [pc, #160]	@ (80086b0 <TIM_OC3_SetConfig+0xfc>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_OC3_SetConfig+0x66>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a27      	ldr	r2, [pc, #156]	@ (80086b4 <TIM_OC3_SetConfig+0x100>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d10d      	bne.n	8008636 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	4313      	orrs	r3, r2
 800862c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <TIM_OC3_SetConfig+0xfc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00f      	beq.n	800865e <TIM_OC3_SetConfig+0xaa>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a1c      	ldr	r2, [pc, #112]	@ (80086b4 <TIM_OC3_SetConfig+0x100>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00b      	beq.n	800865e <TIM_OC3_SetConfig+0xaa>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1b      	ldr	r2, [pc, #108]	@ (80086b8 <TIM_OC3_SetConfig+0x104>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d007      	beq.n	800865e <TIM_OC3_SetConfig+0xaa>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1a      	ldr	r2, [pc, #104]	@ (80086bc <TIM_OC3_SetConfig+0x108>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d003      	beq.n	800865e <TIM_OC3_SetConfig+0xaa>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a19      	ldr	r2, [pc, #100]	@ (80086c0 <TIM_OC3_SetConfig+0x10c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d113      	bne.n	8008686 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800866c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	621a      	str	r2, [r3, #32]
}
 80086a0:	bf00      	nop
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	fffeff8f 	.word	0xfffeff8f
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40010400 	.word	0x40010400
 80086b8:	40014000 	.word	0x40014000
 80086bc:	40014400 	.word	0x40014400
 80086c0:	40014800 	.word	0x40014800

080086c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4b24      	ldr	r3, [pc, #144]	@ (8008780 <TIM_OC4_SetConfig+0xbc>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800870e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	031b      	lsls	r3, r3, #12
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	4313      	orrs	r3, r2
 800871a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a19      	ldr	r2, [pc, #100]	@ (8008784 <TIM_OC4_SetConfig+0xc0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d00f      	beq.n	8008744 <TIM_OC4_SetConfig+0x80>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a18      	ldr	r2, [pc, #96]	@ (8008788 <TIM_OC4_SetConfig+0xc4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00b      	beq.n	8008744 <TIM_OC4_SetConfig+0x80>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a17      	ldr	r2, [pc, #92]	@ (800878c <TIM_OC4_SetConfig+0xc8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d007      	beq.n	8008744 <TIM_OC4_SetConfig+0x80>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a16      	ldr	r2, [pc, #88]	@ (8008790 <TIM_OC4_SetConfig+0xcc>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_OC4_SetConfig+0x80>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a15      	ldr	r2, [pc, #84]	@ (8008794 <TIM_OC4_SetConfig+0xd0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d109      	bne.n	8008758 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800874a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	019b      	lsls	r3, r3, #6
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	4313      	orrs	r3, r2
 8008756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	621a      	str	r2, [r3, #32]
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	feff8fff 	.word	0xfeff8fff
 8008784:	40010000 	.word	0x40010000
 8008788:	40010400 	.word	0x40010400
 800878c:	40014000 	.word	0x40014000
 8008790:	40014400 	.word	0x40014400
 8008794:	40014800 	.word	0x40014800

08008798 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
 80087ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <TIM_OC5_SetConfig+0xb0>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80087d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a18      	ldr	r2, [pc, #96]	@ (800884c <TIM_OC5_SetConfig+0xb4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00f      	beq.n	800880e <TIM_OC5_SetConfig+0x76>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a17      	ldr	r2, [pc, #92]	@ (8008850 <TIM_OC5_SetConfig+0xb8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00b      	beq.n	800880e <TIM_OC5_SetConfig+0x76>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a16      	ldr	r2, [pc, #88]	@ (8008854 <TIM_OC5_SetConfig+0xbc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d007      	beq.n	800880e <TIM_OC5_SetConfig+0x76>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a15      	ldr	r2, [pc, #84]	@ (8008858 <TIM_OC5_SetConfig+0xc0>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d003      	beq.n	800880e <TIM_OC5_SetConfig+0x76>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a14      	ldr	r2, [pc, #80]	@ (800885c <TIM_OC5_SetConfig+0xc4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d109      	bne.n	8008822 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	4313      	orrs	r3, r2
 8008820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	621a      	str	r2, [r3, #32]
}
 800883c:	bf00      	nop
 800883e:	371c      	adds	r7, #28
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	fffeff8f 	.word	0xfffeff8f
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400
 8008854:	40014000 	.word	0x40014000
 8008858:	40014400 	.word	0x40014400
 800885c:	40014800 	.word	0x40014800

08008860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4b22      	ldr	r3, [pc, #136]	@ (8008914 <TIM_OC6_SetConfig+0xb4>)
 800888c:	4013      	ands	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	051b      	lsls	r3, r3, #20
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a19      	ldr	r2, [pc, #100]	@ (8008918 <TIM_OC6_SetConfig+0xb8>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00f      	beq.n	80088d8 <TIM_OC6_SetConfig+0x78>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a18      	ldr	r2, [pc, #96]	@ (800891c <TIM_OC6_SetConfig+0xbc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d00b      	beq.n	80088d8 <TIM_OC6_SetConfig+0x78>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a17      	ldr	r2, [pc, #92]	@ (8008920 <TIM_OC6_SetConfig+0xc0>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d007      	beq.n	80088d8 <TIM_OC6_SetConfig+0x78>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a16      	ldr	r2, [pc, #88]	@ (8008924 <TIM_OC6_SetConfig+0xc4>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d003      	beq.n	80088d8 <TIM_OC6_SetConfig+0x78>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a15      	ldr	r2, [pc, #84]	@ (8008928 <TIM_OC6_SetConfig+0xc8>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d109      	bne.n	80088ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	621a      	str	r2, [r3, #32]
}
 8008906:	bf00      	nop
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	feff8fff 	.word	0xfeff8fff
 8008918:	40010000 	.word	0x40010000
 800891c:	40010400 	.word	0x40010400
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800

0800892c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f023 0201 	bic.w	r2, r3, #1
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f023 030a 	bic.w	r3, r3, #10
 8008968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	621a      	str	r2, [r3, #32]
}
 800897e:	bf00      	nop
 8008980:	371c      	adds	r7, #28
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800898a:	b480      	push	{r7}
 800898c:	b087      	sub	sp, #28
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	f023 0210 	bic.w	r2, r3, #16
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	031b      	lsls	r3, r3, #12
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	011b      	lsls	r3, r3, #4
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	621a      	str	r2, [r3, #32]
}
 80089de:	bf00      	nop
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
	...

080089ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4b09      	ldr	r3, [pc, #36]	@ (8008a24 <TIM_ITRx_SetConfig+0x38>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f043 0307 	orr.w	r3, r3, #7
 8008a0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	609a      	str	r2, [r3, #8]
}
 8008a16:	bf00      	nop
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	ffcfff8f 	.word	0xffcfff8f

08008a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	021a      	lsls	r2, r3, #8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	609a      	str	r2, [r3, #8]
}
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e077      	b.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a35      	ldr	r2, [pc, #212]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a34      	ldr	r2, [pc, #208]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d108      	bne.n	8008ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a25      	ldr	r2, [pc, #148]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d02c      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af2:	d027      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a22      	ldr	r2, [pc, #136]	@ (8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d022      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a21      	ldr	r2, [pc, #132]	@ (8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d01d      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d018      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1a      	ldr	r2, [pc, #104]	@ (8008b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1b      	ldr	r2, [pc, #108]	@ (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00e      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d009      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a18      	ldr	r2, [pc, #96]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a17      	ldr	r2, [pc, #92]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d10c      	bne.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	40010000 	.word	0x40010000
 8008b80:	40010400 	.word	0x40010400
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	40001800 	.word	0x40001800
 8008b94:	40014000 	.word	0x40014000
 8008b98:	4000e000 	.word	0x4000e000
 8008b9c:	4000e400 	.word	0x4000e400

08008ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e04a      	b.n	8008c84 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7f8 fa0d 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2224      	movs	r2, #36	@ 0x24
 8008c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0201 	bic.w	r2, r2, #1
 8008c1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 fba6 	bl	800a378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fd37 	bl	80096a0 <UART_SetConfig>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e023      	b.n	8008c84 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008c5a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f042 0208 	orr.w	r2, r2, #8
 8008c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f042 0201 	orr.w	r2, r2, #1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f001 fc1d 	bl	800a4bc <UART_CheckIdleState>
 8008c82:	4603      	mov	r3, r0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	@ 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4613      	mov	r3, r2
 8008c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d167      	bne.n	8008d74 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <HAL_UART_Transmit_DMA+0x24>
 8008caa:	88fb      	ldrh	r3, [r7, #6]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e060      	b.n	8008d76 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	88fa      	ldrh	r2, [r7, #6]
 8008cc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2221      	movs	r2, #33	@ 0x21
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d028      	beq.n	8008d34 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ce6:	4a26      	ldr	r2, [pc, #152]	@ (8008d80 <HAL_UART_Transmit_DMA+0xf4>)
 8008ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cee:	4a25      	ldr	r2, [pc, #148]	@ (8008d84 <HAL_UART_Transmit_DMA+0xf8>)
 8008cf0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cf6:	4a24      	ldr	r2, [pc, #144]	@ (8008d88 <HAL_UART_Transmit_DMA+0xfc>)
 8008cf8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cfe:	2200      	movs	r2, #0
 8008d00:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3328      	adds	r3, #40	@ 0x28
 8008d12:	461a      	mov	r2, r3
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	f7f9 fbcf 	bl	80024b8 <HAL_DMA_Start_IT>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2210      	movs	r2, #16
 8008d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e020      	b.n	8008d76 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2240      	movs	r2, #64	@ 0x40
 8008d3a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d5c:	623a      	str	r2, [r7, #32]
 8008d5e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	6a3a      	ldr	r2, [r7, #32]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e5      	bne.n	8008d3c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3728      	adds	r7, #40	@ 0x28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	0800a989 	.word	0x0800a989
 8008d84:	0800aa1f 	.word	0x0800aa1f
 8008d88:	0800aba1 	.word	0x0800aba1

08008d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008db2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008db6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008dba:	4013      	ands	r3, r2
 8008dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d11b      	bne.n	8008e00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d015      	beq.n	8008e00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d009      	beq.n	8008e00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 8377 	beq.w	80094e4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
      }
      return;
 8008dfe:	e371      	b.n	80094e4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8123 	beq.w	8009050 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8009044 <HAL_UART_IRQHandler+0x2b8>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8009048 <HAL_UART_IRQHandler+0x2bc>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8116 	beq.w	8009050 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d011      	beq.n	8008e54 <HAL_UART_IRQHandler+0xc8>
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2201      	movs	r2, #1
 8008e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d011      	beq.n	8008e84 <HAL_UART_IRQHandler+0xf8>
 8008e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2202      	movs	r2, #2
 8008e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e7a:	f043 0204 	orr.w	r2, r3, #4
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d011      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x128>
 8008e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eaa:	f043 0202 	orr.w	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d017      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ecc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ed0:	4b5c      	ldr	r3, [pc, #368]	@ (8009044 <HAL_UART_IRQHandler+0x2b8>)
 8008ed2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2208      	movs	r2, #8
 8008ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee6:	f043 0208 	orr.w	r2, r3, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d012      	beq.n	8008f22 <HAL_UART_IRQHandler+0x196>
 8008efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f18:	f043 0220 	orr.w	r2, r3, #32
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 82dd 	beq.w	80094e8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d013      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d007      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f76:	2b40      	cmp	r3, #64	@ 0x40
 8008f78:	d005      	beq.n	8008f86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d054      	beq.n	8009030 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fc98 	bl	800a8bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f96:	2b40      	cmp	r3, #64	@ 0x40
 8008f98:	d146      	bne.n	8009028 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1d9      	bne.n	8008f9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff6:	4a15      	ldr	r2, [pc, #84]	@ (800904c <HAL_UART_IRQHandler+0x2c0>)
 8008ff8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009000:	4618      	mov	r0, r3
 8009002:	f7f9 ffe1 	bl	8002fc8 <HAL_DMA_Abort_IT>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d019      	beq.n	8009040 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800901a:	4610      	mov	r0, r2
 800901c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901e:	e00f      	b.n	8009040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa8b 	bl	800953c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009026:	e00b      	b.n	8009040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fa87 	bl	800953c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902e:	e007      	b.n	8009040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa83 	bl	800953c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800903e:	e253      	b.n	80094e8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	bf00      	nop
    return;
 8009042:	e251      	b.n	80094e8 <HAL_UART_IRQHandler+0x75c>
 8009044:	10000001 	.word	0x10000001
 8009048:	04000120 	.word	0x04000120
 800904c:	0800ac21 	.word	0x0800ac21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009054:	2b01      	cmp	r3, #1
 8009056:	f040 81e7 	bne.w	8009428 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800905a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 81e0 	beq.w	8009428 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 81d9 	beq.w	8009428 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2210      	movs	r2, #16
 800907c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009088:	2b40      	cmp	r3, #64	@ 0x40
 800908a:	f040 8151 	bne.w	8009330 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a96      	ldr	r2, [pc, #600]	@ (80092f0 <HAL_UART_IRQHandler+0x564>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d068      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a93      	ldr	r2, [pc, #588]	@ (80092f4 <HAL_UART_IRQHandler+0x568>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d061      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a91      	ldr	r2, [pc, #580]	@ (80092f8 <HAL_UART_IRQHandler+0x56c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d05a      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a8e      	ldr	r2, [pc, #568]	@ (80092fc <HAL_UART_IRQHandler+0x570>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d053      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a8c      	ldr	r2, [pc, #560]	@ (8009300 <HAL_UART_IRQHandler+0x574>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d04c      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a89      	ldr	r2, [pc, #548]	@ (8009304 <HAL_UART_IRQHandler+0x578>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d045      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a87      	ldr	r2, [pc, #540]	@ (8009308 <HAL_UART_IRQHandler+0x57c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d03e      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a84      	ldr	r2, [pc, #528]	@ (800930c <HAL_UART_IRQHandler+0x580>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d037      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a82      	ldr	r2, [pc, #520]	@ (8009310 <HAL_UART_IRQHandler+0x584>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d030      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a7f      	ldr	r2, [pc, #508]	@ (8009314 <HAL_UART_IRQHandler+0x588>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d029      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a7d      	ldr	r2, [pc, #500]	@ (8009318 <HAL_UART_IRQHandler+0x58c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d022      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a7a      	ldr	r2, [pc, #488]	@ (800931c <HAL_UART_IRQHandler+0x590>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d01b      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a78      	ldr	r2, [pc, #480]	@ (8009320 <HAL_UART_IRQHandler+0x594>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d014      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a75      	ldr	r2, [pc, #468]	@ (8009324 <HAL_UART_IRQHandler+0x598>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00d      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a73      	ldr	r2, [pc, #460]	@ (8009328 <HAL_UART_IRQHandler+0x59c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d006      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a70      	ldr	r2, [pc, #448]	@ (800932c <HAL_UART_IRQHandler+0x5a0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d106      	bne.n	800917c <HAL_UART_IRQHandler+0x3f0>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	b29b      	uxth	r3, r3
 800917a:	e005      	b.n	8009188 <HAL_UART_IRQHandler+0x3fc>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800918c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 81ab 	beq.w	80094ec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800919c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091a0:	429a      	cmp	r2, r3
 80091a2:	f080 81a3 	bcs.w	80094ec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091bc:	f000 8087 	beq.w	80092ce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80091ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1da      	bne.n	80091c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800921a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800922e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009232:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009236:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e1      	bne.n	800920a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800925c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800926a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800926c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009270:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e3      	bne.n	8009246 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800929a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800929c:	f023 0310 	bic.w	r3, r3, #16
 80092a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e4      	bne.n	800928c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f9 fb5f 	bl	800298c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2202      	movs	r2, #2
 80092d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7f7 fde7 	bl	8000ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092ee:	e0fd      	b.n	80094ec <HAL_UART_IRQHandler+0x760>
 80092f0:	40020010 	.word	0x40020010
 80092f4:	40020028 	.word	0x40020028
 80092f8:	40020040 	.word	0x40020040
 80092fc:	40020058 	.word	0x40020058
 8009300:	40020070 	.word	0x40020070
 8009304:	40020088 	.word	0x40020088
 8009308:	400200a0 	.word	0x400200a0
 800930c:	400200b8 	.word	0x400200b8
 8009310:	40020410 	.word	0x40020410
 8009314:	40020428 	.word	0x40020428
 8009318:	40020440 	.word	0x40020440
 800931c:	40020458 	.word	0x40020458
 8009320:	40020470 	.word	0x40020470
 8009324:	40020488 	.word	0x40020488
 8009328:	400204a0 	.word	0x400204a0
 800932c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800933c:	b29b      	uxth	r3, r3
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800934a:	b29b      	uxth	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80cf 	beq.w	80094f0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80ca 	beq.w	80094f0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800936a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800936c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800937e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009380:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800938c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e4      	bne.n	800935c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	623b      	str	r3, [r7, #32]
   return(result);
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	4b55      	ldr	r3, [pc, #340]	@ (80094fc <HAL_UART_IRQHandler+0x770>)
 80093a6:	4013      	ands	r3, r2
 80093a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80093b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0310 	bic.w	r3, r3, #16
 80093f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	69b9      	ldr	r1, [r7, #24]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	617b      	str	r3, [r7, #20]
   return(result);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e4      	bne.n	80093de <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800941a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7f7 fd4b 	bl	8000ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009426:	e063      	b.n	80094f0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800942c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00e      	beq.n	8009452 <HAL_UART_IRQHandler+0x6c6>
 8009434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fc29 	bl	800aca2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009450:	e051      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945a:	2b00      	cmp	r3, #0
 800945c:	d014      	beq.n	8009488 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800945e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800946a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800946e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d008      	beq.n	8009488 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800947a:	2b00      	cmp	r3, #0
 800947c:	d03a      	beq.n	80094f4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
    }
    return;
 8009486:	e035      	b.n	80094f4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800948c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <HAL_UART_IRQHandler+0x71c>
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 fbd3 	bl	800ac4c <UART_EndTransmit_IT>
    return;
 80094a6:	e026      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <HAL_UART_IRQHandler+0x73c>
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 fc02 	bl	800acca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094c6:	e016      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d010      	beq.n	80094f6 <HAL_UART_IRQHandler+0x76a>
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da0c      	bge.n	80094f6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fbea 	bl	800acb6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094e2:	e008      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80094e4:	bf00      	nop
 80094e6:	e006      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
    return;
 80094e8:	bf00      	nop
 80094ea:	e004      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
    return;
 80094f4:	bf00      	nop
  }
}
 80094f6:	37e8      	adds	r7, #232	@ 0xe8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	effffffe 	.word	0xeffffffe

08009500 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b08f      	sub	sp, #60	@ 0x3c
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8009562:	2302      	movs	r3, #2
 8009564:	e042      	b.n	80095ec <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2224      	movs	r2, #36	@ 0x24
 8009572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	61fb      	str	r3, [r7, #28]
   return(result);
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	f023 030c 	bic.w	r3, r3, #12
 800958a:	637b      	str	r3, [r7, #52]	@ 0x34
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009596:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800959a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e6      	bne.n	8009576 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	e853 3f00 	ldrex	r3, [r3]
 80095b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	f043 0308 	orr.w	r3, r3, #8
 80095bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	61bb      	str	r3, [r7, #24]
 80095c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ca:	6979      	ldr	r1, [r7, #20]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	e841 2300 	strex	r3, r2, [r1]
 80095d2:	613b      	str	r3, [r7, #16]
   return(result);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e6      	bne.n	80095a8 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	373c      	adds	r7, #60	@ 0x3c
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b08f      	sub	sp, #60	@ 0x3c
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009606:	2b01      	cmp	r3, #1
 8009608:	d101      	bne.n	800960e <HAL_HalfDuplex_EnableReceiver+0x16>
 800960a:	2302      	movs	r3, #2
 800960c:	e042      	b.n	8009694 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2224      	movs	r2, #36	@ 0x24
 800961a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	61fb      	str	r3, [r7, #28]
   return(result);
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f023 030c 	bic.w	r3, r3, #12
 8009632:	637b      	str	r3, [r7, #52]	@ 0x34
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800963e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e6      	bne.n	800961e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	60bb      	str	r3, [r7, #8]
   return(result);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f043 0304 	orr.w	r3, r3, #4
 8009664:	633b      	str	r3, [r7, #48]	@ 0x30
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	61bb      	str	r3, [r7, #24]
 8009670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6979      	ldr	r1, [r7, #20]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	613b      	str	r3, [r7, #16]
   return(result);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e6      	bne.n	8009650 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	373c      	adds	r7, #60	@ 0x3c
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096a4:	b092      	sub	sp, #72	@ 0x48
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	431a      	orrs	r2, r3
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	431a      	orrs	r2, r3
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4bbe      	ldr	r3, [pc, #760]	@ (80099c8 <UART_SetConfig+0x328>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	6812      	ldr	r2, [r2, #0]
 80096d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096d8:	430b      	orrs	r3, r1
 80096da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4ab3      	ldr	r2, [pc, #716]	@ (80099cc <UART_SetConfig+0x32c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d004      	beq.n	800970c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009708:	4313      	orrs	r3, r2
 800970a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	4baf      	ldr	r3, [pc, #700]	@ (80099d0 <UART_SetConfig+0x330>)
 8009714:	4013      	ands	r3, r2
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	6812      	ldr	r2, [r2, #0]
 800971a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800971c:	430b      	orrs	r3, r1
 800971e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	f023 010f 	bic.w	r1, r3, #15
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4aa6      	ldr	r2, [pc, #664]	@ (80099d4 <UART_SetConfig+0x334>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d177      	bne.n	8009830 <UART_SetConfig+0x190>
 8009740:	4ba5      	ldr	r3, [pc, #660]	@ (80099d8 <UART_SetConfig+0x338>)
 8009742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009744:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009748:	2b28      	cmp	r3, #40	@ 0x28
 800974a:	d86d      	bhi.n	8009828 <UART_SetConfig+0x188>
 800974c:	a201      	add	r2, pc, #4	@ (adr r2, 8009754 <UART_SetConfig+0xb4>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	080097f9 	.word	0x080097f9
 8009758:	08009829 	.word	0x08009829
 800975c:	08009829 	.word	0x08009829
 8009760:	08009829 	.word	0x08009829
 8009764:	08009829 	.word	0x08009829
 8009768:	08009829 	.word	0x08009829
 800976c:	08009829 	.word	0x08009829
 8009770:	08009829 	.word	0x08009829
 8009774:	08009801 	.word	0x08009801
 8009778:	08009829 	.word	0x08009829
 800977c:	08009829 	.word	0x08009829
 8009780:	08009829 	.word	0x08009829
 8009784:	08009829 	.word	0x08009829
 8009788:	08009829 	.word	0x08009829
 800978c:	08009829 	.word	0x08009829
 8009790:	08009829 	.word	0x08009829
 8009794:	08009809 	.word	0x08009809
 8009798:	08009829 	.word	0x08009829
 800979c:	08009829 	.word	0x08009829
 80097a0:	08009829 	.word	0x08009829
 80097a4:	08009829 	.word	0x08009829
 80097a8:	08009829 	.word	0x08009829
 80097ac:	08009829 	.word	0x08009829
 80097b0:	08009829 	.word	0x08009829
 80097b4:	08009811 	.word	0x08009811
 80097b8:	08009829 	.word	0x08009829
 80097bc:	08009829 	.word	0x08009829
 80097c0:	08009829 	.word	0x08009829
 80097c4:	08009829 	.word	0x08009829
 80097c8:	08009829 	.word	0x08009829
 80097cc:	08009829 	.word	0x08009829
 80097d0:	08009829 	.word	0x08009829
 80097d4:	08009819 	.word	0x08009819
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009829 	.word	0x08009829
 80097e0:	08009829 	.word	0x08009829
 80097e4:	08009829 	.word	0x08009829
 80097e8:	08009829 	.word	0x08009829
 80097ec:	08009829 	.word	0x08009829
 80097f0:	08009829 	.word	0x08009829
 80097f4:	08009821 	.word	0x08009821
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e326      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009800:	2304      	movs	r3, #4
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e322      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009808:	2308      	movs	r3, #8
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e31e      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009810:	2310      	movs	r3, #16
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e31a      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009818:	2320      	movs	r3, #32
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e316      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009820:	2340      	movs	r3, #64	@ 0x40
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e312      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e30e      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a69      	ldr	r2, [pc, #420]	@ (80099dc <UART_SetConfig+0x33c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d130      	bne.n	800989c <UART_SetConfig+0x1fc>
 800983a:	4b67      	ldr	r3, [pc, #412]	@ (80099d8 <UART_SetConfig+0x338>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	2b05      	cmp	r3, #5
 8009844:	d826      	bhi.n	8009894 <UART_SetConfig+0x1f4>
 8009846:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <UART_SetConfig+0x1ac>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	08009865 	.word	0x08009865
 8009850:	0800986d 	.word	0x0800986d
 8009854:	08009875 	.word	0x08009875
 8009858:	0800987d 	.word	0x0800987d
 800985c:	08009885 	.word	0x08009885
 8009860:	0800988d 	.word	0x0800988d
 8009864:	2300      	movs	r3, #0
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e2f0      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e2ec      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e2e8      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e2e4      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009884:	2320      	movs	r3, #32
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e2e0      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800988c:	2340      	movs	r3, #64	@ 0x40
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e2dc      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009894:	2380      	movs	r3, #128	@ 0x80
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e2d8      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a4f      	ldr	r2, [pc, #316]	@ (80099e0 <UART_SetConfig+0x340>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d130      	bne.n	8009908 <UART_SetConfig+0x268>
 80098a6:	4b4c      	ldr	r3, [pc, #304]	@ (80099d8 <UART_SetConfig+0x338>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d826      	bhi.n	8009900 <UART_SetConfig+0x260>
 80098b2:	a201      	add	r2, pc, #4	@ (adr r2, 80098b8 <UART_SetConfig+0x218>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	080098d1 	.word	0x080098d1
 80098bc:	080098d9 	.word	0x080098d9
 80098c0:	080098e1 	.word	0x080098e1
 80098c4:	080098e9 	.word	0x080098e9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	2300      	movs	r3, #0
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e2ba      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80098d8:	2304      	movs	r3, #4
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e2b6      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80098e0:	2308      	movs	r3, #8
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e2b2      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80098e8:	2310      	movs	r3, #16
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e2ae      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80098f0:	2320      	movs	r3, #32
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e2aa      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80098f8:	2340      	movs	r3, #64	@ 0x40
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e2a6      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009900:	2380      	movs	r3, #128	@ 0x80
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e2a2      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a35      	ldr	r2, [pc, #212]	@ (80099e4 <UART_SetConfig+0x344>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d130      	bne.n	8009974 <UART_SetConfig+0x2d4>
 8009912:	4b31      	ldr	r3, [pc, #196]	@ (80099d8 <UART_SetConfig+0x338>)
 8009914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b05      	cmp	r3, #5
 800991c:	d826      	bhi.n	800996c <UART_SetConfig+0x2cc>
 800991e:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <UART_SetConfig+0x284>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	0800993d 	.word	0x0800993d
 8009928:	08009945 	.word	0x08009945
 800992c:	0800994d 	.word	0x0800994d
 8009930:	08009955 	.word	0x08009955
 8009934:	0800995d 	.word	0x0800995d
 8009938:	08009965 	.word	0x08009965
 800993c:	2300      	movs	r3, #0
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009942:	e284      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009944:	2304      	movs	r3, #4
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994a:	e280      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800994c:	2308      	movs	r3, #8
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e27c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009954:	2310      	movs	r3, #16
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e278      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800995c:	2320      	movs	r3, #32
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e274      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009964:	2340      	movs	r3, #64	@ 0x40
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e270      	b.n	8009e4e <UART_SetConfig+0x7ae>
 800996c:	2380      	movs	r3, #128	@ 0x80
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009972:	e26c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a1b      	ldr	r2, [pc, #108]	@ (80099e8 <UART_SetConfig+0x348>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d142      	bne.n	8009a04 <UART_SetConfig+0x364>
 800997e:	4b16      	ldr	r3, [pc, #88]	@ (80099d8 <UART_SetConfig+0x338>)
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	f003 0307 	and.w	r3, r3, #7
 8009986:	2b05      	cmp	r3, #5
 8009988:	d838      	bhi.n	80099fc <UART_SetConfig+0x35c>
 800998a:	a201      	add	r2, pc, #4	@ (adr r2, 8009990 <UART_SetConfig+0x2f0>)
 800998c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009990:	080099a9 	.word	0x080099a9
 8009994:	080099b1 	.word	0x080099b1
 8009998:	080099b9 	.word	0x080099b9
 800999c:	080099c1 	.word	0x080099c1
 80099a0:	080099ed 	.word	0x080099ed
 80099a4:	080099f5 	.word	0x080099f5
 80099a8:	2300      	movs	r3, #0
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e24e      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80099b0:	2304      	movs	r3, #4
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e24a      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80099b8:	2308      	movs	r3, #8
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e246      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80099c0:	2310      	movs	r3, #16
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e242      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80099c8:	cfff69f3 	.word	0xcfff69f3
 80099cc:	58000c00 	.word	0x58000c00
 80099d0:	11fff4ff 	.word	0x11fff4ff
 80099d4:	40011000 	.word	0x40011000
 80099d8:	58024400 	.word	0x58024400
 80099dc:	40004400 	.word	0x40004400
 80099e0:	40004800 	.word	0x40004800
 80099e4:	40004c00 	.word	0x40004c00
 80099e8:	40005000 	.word	0x40005000
 80099ec:	2320      	movs	r3, #32
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f2:	e22c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80099f4:	2340      	movs	r3, #64	@ 0x40
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e228      	b.n	8009e4e <UART_SetConfig+0x7ae>
 80099fc:	2380      	movs	r3, #128	@ 0x80
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a02:	e224      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4ab1      	ldr	r2, [pc, #708]	@ (8009cd0 <UART_SetConfig+0x630>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d176      	bne.n	8009afc <UART_SetConfig+0x45c>
 8009a0e:	4bb1      	ldr	r3, [pc, #708]	@ (8009cd4 <UART_SetConfig+0x634>)
 8009a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a16:	2b28      	cmp	r3, #40	@ 0x28
 8009a18:	d86c      	bhi.n	8009af4 <UART_SetConfig+0x454>
 8009a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <UART_SetConfig+0x380>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009ac5 	.word	0x08009ac5
 8009a24:	08009af5 	.word	0x08009af5
 8009a28:	08009af5 	.word	0x08009af5
 8009a2c:	08009af5 	.word	0x08009af5
 8009a30:	08009af5 	.word	0x08009af5
 8009a34:	08009af5 	.word	0x08009af5
 8009a38:	08009af5 	.word	0x08009af5
 8009a3c:	08009af5 	.word	0x08009af5
 8009a40:	08009acd 	.word	0x08009acd
 8009a44:	08009af5 	.word	0x08009af5
 8009a48:	08009af5 	.word	0x08009af5
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009af5 	.word	0x08009af5
 8009a54:	08009af5 	.word	0x08009af5
 8009a58:	08009af5 	.word	0x08009af5
 8009a5c:	08009af5 	.word	0x08009af5
 8009a60:	08009ad5 	.word	0x08009ad5
 8009a64:	08009af5 	.word	0x08009af5
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009af5 	.word	0x08009af5
 8009a70:	08009af5 	.word	0x08009af5
 8009a74:	08009af5 	.word	0x08009af5
 8009a78:	08009af5 	.word	0x08009af5
 8009a7c:	08009af5 	.word	0x08009af5
 8009a80:	08009add 	.word	0x08009add
 8009a84:	08009af5 	.word	0x08009af5
 8009a88:	08009af5 	.word	0x08009af5
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009af5 	.word	0x08009af5
 8009a94:	08009af5 	.word	0x08009af5
 8009a98:	08009af5 	.word	0x08009af5
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009ae5 	.word	0x08009ae5
 8009aa4:	08009af5 	.word	0x08009af5
 8009aa8:	08009af5 	.word	0x08009af5
 8009aac:	08009af5 	.word	0x08009af5
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009af5 	.word	0x08009af5
 8009ab8:	08009af5 	.word	0x08009af5
 8009abc:	08009af5 	.word	0x08009af5
 8009ac0:	08009aed 	.word	0x08009aed
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aca:	e1c0      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009acc:	2304      	movs	r3, #4
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ad2:	e1bc      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e1b8      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009adc:	2310      	movs	r3, #16
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e1b4      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e1b0      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009aec:	2340      	movs	r3, #64	@ 0x40
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e1ac      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009af4:	2380      	movs	r3, #128	@ 0x80
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e1a8      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a75      	ldr	r2, [pc, #468]	@ (8009cd8 <UART_SetConfig+0x638>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d130      	bne.n	8009b68 <UART_SetConfig+0x4c8>
 8009b06:	4b73      	ldr	r3, [pc, #460]	@ (8009cd4 <UART_SetConfig+0x634>)
 8009b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	d826      	bhi.n	8009b60 <UART_SetConfig+0x4c0>
 8009b12:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <UART_SetConfig+0x478>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b31 	.word	0x08009b31
 8009b1c:	08009b39 	.word	0x08009b39
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009b49 	.word	0x08009b49
 8009b28:	08009b51 	.word	0x08009b51
 8009b2c:	08009b59 	.word	0x08009b59
 8009b30:	2300      	movs	r3, #0
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b36:	e18a      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3e:	e186      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b40:	2308      	movs	r3, #8
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e182      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e17e      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b50:	2320      	movs	r3, #32
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e17a      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b58:	2340      	movs	r3, #64	@ 0x40
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e176      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b60:	2380      	movs	r3, #128	@ 0x80
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e172      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a5b      	ldr	r2, [pc, #364]	@ (8009cdc <UART_SetConfig+0x63c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d130      	bne.n	8009bd4 <UART_SetConfig+0x534>
 8009b72:	4b58      	ldr	r3, [pc, #352]	@ (8009cd4 <UART_SetConfig+0x634>)
 8009b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b76:	f003 0307 	and.w	r3, r3, #7
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	d826      	bhi.n	8009bcc <UART_SetConfig+0x52c>
 8009b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <UART_SetConfig+0x4e4>)
 8009b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b84:	08009b9d 	.word	0x08009b9d
 8009b88:	08009ba5 	.word	0x08009ba5
 8009b8c:	08009bad 	.word	0x08009bad
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bc5 	.word	0x08009bc5
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e154      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009ba4:	2304      	movs	r3, #4
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e150      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009bac:	2308      	movs	r3, #8
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e14c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009bb4:	2310      	movs	r3, #16
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bba:	e148      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009bbc:	2320      	movs	r3, #32
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bc2:	e144      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009bc4:	2340      	movs	r3, #64	@ 0x40
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bca:	e140      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009bcc:	2380      	movs	r3, #128	@ 0x80
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bd2:	e13c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a41      	ldr	r2, [pc, #260]	@ (8009ce0 <UART_SetConfig+0x640>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	f040 8082 	bne.w	8009ce4 <UART_SetConfig+0x644>
 8009be0:	4b3c      	ldr	r3, [pc, #240]	@ (8009cd4 <UART_SetConfig+0x634>)
 8009be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009be4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009be8:	2b28      	cmp	r3, #40	@ 0x28
 8009bea:	d86d      	bhi.n	8009cc8 <UART_SetConfig+0x628>
 8009bec:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <UART_SetConfig+0x554>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c99 	.word	0x08009c99
 8009bf8:	08009cc9 	.word	0x08009cc9
 8009bfc:	08009cc9 	.word	0x08009cc9
 8009c00:	08009cc9 	.word	0x08009cc9
 8009c04:	08009cc9 	.word	0x08009cc9
 8009c08:	08009cc9 	.word	0x08009cc9
 8009c0c:	08009cc9 	.word	0x08009cc9
 8009c10:	08009cc9 	.word	0x08009cc9
 8009c14:	08009ca1 	.word	0x08009ca1
 8009c18:	08009cc9 	.word	0x08009cc9
 8009c1c:	08009cc9 	.word	0x08009cc9
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cc9 	.word	0x08009cc9
 8009c28:	08009cc9 	.word	0x08009cc9
 8009c2c:	08009cc9 	.word	0x08009cc9
 8009c30:	08009cc9 	.word	0x08009cc9
 8009c34:	08009ca9 	.word	0x08009ca9
 8009c38:	08009cc9 	.word	0x08009cc9
 8009c3c:	08009cc9 	.word	0x08009cc9
 8009c40:	08009cc9 	.word	0x08009cc9
 8009c44:	08009cc9 	.word	0x08009cc9
 8009c48:	08009cc9 	.word	0x08009cc9
 8009c4c:	08009cc9 	.word	0x08009cc9
 8009c50:	08009cc9 	.word	0x08009cc9
 8009c54:	08009cb1 	.word	0x08009cb1
 8009c58:	08009cc9 	.word	0x08009cc9
 8009c5c:	08009cc9 	.word	0x08009cc9
 8009c60:	08009cc9 	.word	0x08009cc9
 8009c64:	08009cc9 	.word	0x08009cc9
 8009c68:	08009cc9 	.word	0x08009cc9
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cc9 	.word	0x08009cc9
 8009c7c:	08009cc9 	.word	0x08009cc9
 8009c80:	08009cc9 	.word	0x08009cc9
 8009c84:	08009cc9 	.word	0x08009cc9
 8009c88:	08009cc9 	.word	0x08009cc9
 8009c8c:	08009cc9 	.word	0x08009cc9
 8009c90:	08009cc9 	.word	0x08009cc9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e0d6      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e0d2      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e0ce      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e0ca      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009cb8:	2320      	movs	r3, #32
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e0c6      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009cc0:	2340      	movs	r3, #64	@ 0x40
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e0c2      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009cc8:	2380      	movs	r3, #128	@ 0x80
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e0be      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009cd0:	40011400 	.word	0x40011400
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	40007800 	.word	0x40007800
 8009cdc:	40007c00 	.word	0x40007c00
 8009ce0:	40011800 	.word	0x40011800
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4aad      	ldr	r2, [pc, #692]	@ (8009fa0 <UART_SetConfig+0x900>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d176      	bne.n	8009ddc <UART_SetConfig+0x73c>
 8009cee:	4bad      	ldr	r3, [pc, #692]	@ (8009fa4 <UART_SetConfig+0x904>)
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009cf6:	2b28      	cmp	r3, #40	@ 0x28
 8009cf8:	d86c      	bhi.n	8009dd4 <UART_SetConfig+0x734>
 8009cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009d00 <UART_SetConfig+0x660>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009da5 	.word	0x08009da5
 8009d04:	08009dd5 	.word	0x08009dd5
 8009d08:	08009dd5 	.word	0x08009dd5
 8009d0c:	08009dd5 	.word	0x08009dd5
 8009d10:	08009dd5 	.word	0x08009dd5
 8009d14:	08009dd5 	.word	0x08009dd5
 8009d18:	08009dd5 	.word	0x08009dd5
 8009d1c:	08009dd5 	.word	0x08009dd5
 8009d20:	08009dad 	.word	0x08009dad
 8009d24:	08009dd5 	.word	0x08009dd5
 8009d28:	08009dd5 	.word	0x08009dd5
 8009d2c:	08009dd5 	.word	0x08009dd5
 8009d30:	08009dd5 	.word	0x08009dd5
 8009d34:	08009dd5 	.word	0x08009dd5
 8009d38:	08009dd5 	.word	0x08009dd5
 8009d3c:	08009dd5 	.word	0x08009dd5
 8009d40:	08009db5 	.word	0x08009db5
 8009d44:	08009dd5 	.word	0x08009dd5
 8009d48:	08009dd5 	.word	0x08009dd5
 8009d4c:	08009dd5 	.word	0x08009dd5
 8009d50:	08009dd5 	.word	0x08009dd5
 8009d54:	08009dd5 	.word	0x08009dd5
 8009d58:	08009dd5 	.word	0x08009dd5
 8009d5c:	08009dd5 	.word	0x08009dd5
 8009d60:	08009dbd 	.word	0x08009dbd
 8009d64:	08009dd5 	.word	0x08009dd5
 8009d68:	08009dd5 	.word	0x08009dd5
 8009d6c:	08009dd5 	.word	0x08009dd5
 8009d70:	08009dd5 	.word	0x08009dd5
 8009d74:	08009dd5 	.word	0x08009dd5
 8009d78:	08009dd5 	.word	0x08009dd5
 8009d7c:	08009dd5 	.word	0x08009dd5
 8009d80:	08009dc5 	.word	0x08009dc5
 8009d84:	08009dd5 	.word	0x08009dd5
 8009d88:	08009dd5 	.word	0x08009dd5
 8009d8c:	08009dd5 	.word	0x08009dd5
 8009d90:	08009dd5 	.word	0x08009dd5
 8009d94:	08009dd5 	.word	0x08009dd5
 8009d98:	08009dd5 	.word	0x08009dd5
 8009d9c:	08009dd5 	.word	0x08009dd5
 8009da0:	08009dcd 	.word	0x08009dcd
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009daa:	e050      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009dac:	2304      	movs	r3, #4
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db2:	e04c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009db4:	2308      	movs	r3, #8
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e048      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009dbc:	2310      	movs	r3, #16
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e044      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e040      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009dcc:	2340      	movs	r3, #64	@ 0x40
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e03c      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009dd4:	2380      	movs	r3, #128	@ 0x80
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e038      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a71      	ldr	r2, [pc, #452]	@ (8009fa8 <UART_SetConfig+0x908>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d130      	bne.n	8009e48 <UART_SetConfig+0x7a8>
 8009de6:	4b6f      	ldr	r3, [pc, #444]	@ (8009fa4 <UART_SetConfig+0x904>)
 8009de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	2b05      	cmp	r3, #5
 8009df0:	d826      	bhi.n	8009e40 <UART_SetConfig+0x7a0>
 8009df2:	a201      	add	r2, pc, #4	@ (adr r2, 8009df8 <UART_SetConfig+0x758>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e11 	.word	0x08009e11
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e21 	.word	0x08009e21
 8009e04:	08009e29 	.word	0x08009e29
 8009e08:	08009e31 	.word	0x08009e31
 8009e0c:	08009e39 	.word	0x08009e39
 8009e10:	2302      	movs	r3, #2
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e16:	e01a      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1e:	e016      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e20:	2308      	movs	r3, #8
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e26:	e012      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e00e      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e30:	2320      	movs	r3, #32
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e00a      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e38:	2340      	movs	r3, #64	@ 0x40
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e006      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e40:	2380      	movs	r3, #128	@ 0x80
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e46:	e002      	b.n	8009e4e <UART_SetConfig+0x7ae>
 8009e48:	2380      	movs	r3, #128	@ 0x80
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a55      	ldr	r2, [pc, #340]	@ (8009fa8 <UART_SetConfig+0x908>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	f040 80f8 	bne.w	800a04a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	2b20      	cmp	r3, #32
 8009e60:	dc46      	bgt.n	8009ef0 <UART_SetConfig+0x850>
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	db75      	blt.n	8009f52 <UART_SetConfig+0x8b2>
 8009e66:	3b02      	subs	r3, #2
 8009e68:	2b1e      	cmp	r3, #30
 8009e6a:	d872      	bhi.n	8009f52 <UART_SetConfig+0x8b2>
 8009e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <UART_SetConfig+0x7d4>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	08009ef7 	.word	0x08009ef7
 8009e78:	08009f53 	.word	0x08009f53
 8009e7c:	08009eff 	.word	0x08009eff
 8009e80:	08009f53 	.word	0x08009f53
 8009e84:	08009f53 	.word	0x08009f53
 8009e88:	08009f53 	.word	0x08009f53
 8009e8c:	08009f0f 	.word	0x08009f0f
 8009e90:	08009f53 	.word	0x08009f53
 8009e94:	08009f53 	.word	0x08009f53
 8009e98:	08009f53 	.word	0x08009f53
 8009e9c:	08009f53 	.word	0x08009f53
 8009ea0:	08009f53 	.word	0x08009f53
 8009ea4:	08009f53 	.word	0x08009f53
 8009ea8:	08009f53 	.word	0x08009f53
 8009eac:	08009f1f 	.word	0x08009f1f
 8009eb0:	08009f53 	.word	0x08009f53
 8009eb4:	08009f53 	.word	0x08009f53
 8009eb8:	08009f53 	.word	0x08009f53
 8009ebc:	08009f53 	.word	0x08009f53
 8009ec0:	08009f53 	.word	0x08009f53
 8009ec4:	08009f53 	.word	0x08009f53
 8009ec8:	08009f53 	.word	0x08009f53
 8009ecc:	08009f53 	.word	0x08009f53
 8009ed0:	08009f53 	.word	0x08009f53
 8009ed4:	08009f53 	.word	0x08009f53
 8009ed8:	08009f53 	.word	0x08009f53
 8009edc:	08009f53 	.word	0x08009f53
 8009ee0:	08009f53 	.word	0x08009f53
 8009ee4:	08009f53 	.word	0x08009f53
 8009ee8:	08009f53 	.word	0x08009f53
 8009eec:	08009f45 	.word	0x08009f45
 8009ef0:	2b40      	cmp	r3, #64	@ 0x40
 8009ef2:	d02a      	beq.n	8009f4a <UART_SetConfig+0x8aa>
 8009ef4:	e02d      	b.n	8009f52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ef6:	f7fd f8f5 	bl	80070e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009efc:	e02f      	b.n	8009f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fd f904 	bl	8007110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f0c:	e027      	b.n	8009f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f0e:	f107 0318 	add.w	r3, r7, #24
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fa50 	bl	80073b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f1c:	e01f      	b.n	8009f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f1e:	4b21      	ldr	r3, [pc, #132]	@ (8009fa4 <UART_SetConfig+0x904>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fa4 <UART_SetConfig+0x904>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	08db      	lsrs	r3, r3, #3
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	4a1d      	ldr	r2, [pc, #116]	@ (8009fac <UART_SetConfig+0x90c>)
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f3c:	e00f      	b.n	8009f5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fac <UART_SetConfig+0x90c>)
 8009f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f42:	e00c      	b.n	8009f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f44:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb0 <UART_SetConfig+0x910>)
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	e009      	b.n	8009f5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f50:	e005      	b.n	8009f5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 81ee 	beq.w	800a342 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6a:	4a12      	ldr	r2, [pc, #72]	@ (8009fb4 <UART_SetConfig+0x914>)
 8009f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4413      	add	r3, r2
 8009f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d305      	bcc.n	8009f96 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d910      	bls.n	8009fb8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f9c:	e1d1      	b.n	800a342 <UART_SetConfig+0xca2>
 8009f9e:	bf00      	nop
 8009fa0:	40011c00 	.word	0x40011c00
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	58000c00 	.word	0x58000c00
 8009fac:	03d09000 	.word	0x03d09000
 8009fb0:	003d0900 	.word	0x003d0900
 8009fb4:	0800b038 	.word	0x0800b038
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fba:	2200      	movs	r2, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
 8009fbe:	60fa      	str	r2, [r7, #12]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc4:	4ac0      	ldr	r2, [pc, #768]	@ (800a2c8 <UART_SetConfig+0xc28>)
 8009fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	2200      	movs	r2, #0
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009fda:	f7f6 f997 	bl	800030c <__aeabi_uldivmod>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	f04f 0300 	mov.w	r3, #0
 8009fee:	020b      	lsls	r3, r1, #8
 8009ff0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ff4:	0202      	lsls	r2, r0, #8
 8009ff6:	6979      	ldr	r1, [r7, #20]
 8009ff8:	6849      	ldr	r1, [r1, #4]
 8009ffa:	0849      	lsrs	r1, r1, #1
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	460c      	mov	r4, r1
 800a000:	4605      	mov	r5, r0
 800a002:	eb12 0804 	adds.w	r8, r2, r4
 800a006:	eb43 0905 	adc.w	r9, r3, r5
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	469a      	mov	sl, r3
 800a012:	4693      	mov	fp, r2
 800a014:	4652      	mov	r2, sl
 800a016:	465b      	mov	r3, fp
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 f976 	bl	800030c <__aeabi_uldivmod>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4613      	mov	r3, r2
 800a026:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a02e:	d308      	bcc.n	800a042 <UART_SetConfig+0x9a2>
 800a030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a036:	d204      	bcs.n	800a042 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a03e:	60da      	str	r2, [r3, #12]
 800a040:	e17f      	b.n	800a342 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a048:	e17b      	b.n	800a342 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a052:	f040 80bd 	bne.w	800a1d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a056:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	dc48      	bgt.n	800a0f0 <UART_SetConfig+0xa50>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	db7b      	blt.n	800a15a <UART_SetConfig+0xaba>
 800a062:	2b20      	cmp	r3, #32
 800a064:	d879      	bhi.n	800a15a <UART_SetConfig+0xaba>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <UART_SetConfig+0x9cc>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a0f7 	.word	0x0800a0f7
 800a070:	0800a0ff 	.word	0x0800a0ff
 800a074:	0800a15b 	.word	0x0800a15b
 800a078:	0800a15b 	.word	0x0800a15b
 800a07c:	0800a107 	.word	0x0800a107
 800a080:	0800a15b 	.word	0x0800a15b
 800a084:	0800a15b 	.word	0x0800a15b
 800a088:	0800a15b 	.word	0x0800a15b
 800a08c:	0800a117 	.word	0x0800a117
 800a090:	0800a15b 	.word	0x0800a15b
 800a094:	0800a15b 	.word	0x0800a15b
 800a098:	0800a15b 	.word	0x0800a15b
 800a09c:	0800a15b 	.word	0x0800a15b
 800a0a0:	0800a15b 	.word	0x0800a15b
 800a0a4:	0800a15b 	.word	0x0800a15b
 800a0a8:	0800a15b 	.word	0x0800a15b
 800a0ac:	0800a127 	.word	0x0800a127
 800a0b0:	0800a15b 	.word	0x0800a15b
 800a0b4:	0800a15b 	.word	0x0800a15b
 800a0b8:	0800a15b 	.word	0x0800a15b
 800a0bc:	0800a15b 	.word	0x0800a15b
 800a0c0:	0800a15b 	.word	0x0800a15b
 800a0c4:	0800a15b 	.word	0x0800a15b
 800a0c8:	0800a15b 	.word	0x0800a15b
 800a0cc:	0800a15b 	.word	0x0800a15b
 800a0d0:	0800a15b 	.word	0x0800a15b
 800a0d4:	0800a15b 	.word	0x0800a15b
 800a0d8:	0800a15b 	.word	0x0800a15b
 800a0dc:	0800a15b 	.word	0x0800a15b
 800a0e0:	0800a15b 	.word	0x0800a15b
 800a0e4:	0800a15b 	.word	0x0800a15b
 800a0e8:	0800a15b 	.word	0x0800a15b
 800a0ec:	0800a14d 	.word	0x0800a14d
 800a0f0:	2b40      	cmp	r3, #64	@ 0x40
 800a0f2:	d02e      	beq.n	800a152 <UART_SetConfig+0xab2>
 800a0f4:	e031      	b.n	800a15a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0f6:	f7fb fe29 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 800a0fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0fc:	e033      	b.n	800a166 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0fe:	f7fb fe3b 	bl	8005d78 <HAL_RCC_GetPCLK2Freq>
 800a102:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a104:	e02f      	b.n	800a166 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fd f800 	bl	8007110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a114:	e027      	b.n	800a166 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a116:	f107 0318 	add.w	r3, r7, #24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fd f94c 	bl	80073b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a124:	e01f      	b.n	800a166 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a126:	4b69      	ldr	r3, [pc, #420]	@ (800a2cc <UART_SetConfig+0xc2c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0320 	and.w	r3, r3, #32
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d009      	beq.n	800a146 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a132:	4b66      	ldr	r3, [pc, #408]	@ (800a2cc <UART_SetConfig+0xc2c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	08db      	lsrs	r3, r3, #3
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	4a64      	ldr	r2, [pc, #400]	@ (800a2d0 <UART_SetConfig+0xc30>)
 800a13e:	fa22 f303 	lsr.w	r3, r2, r3
 800a142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a144:	e00f      	b.n	800a166 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a146:	4b62      	ldr	r3, [pc, #392]	@ (800a2d0 <UART_SetConfig+0xc30>)
 800a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14a:	e00c      	b.n	800a166 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a14c:	4b61      	ldr	r3, [pc, #388]	@ (800a2d4 <UART_SetConfig+0xc34>)
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a150:	e009      	b.n	800a166 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a158:	e005      	b.n	800a166 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 80ea 	beq.w	800a342 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a172:	4a55      	ldr	r2, [pc, #340]	@ (800a2c8 <UART_SetConfig+0xc28>)
 800a174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a178:	461a      	mov	r2, r3
 800a17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a17c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a180:	005a      	lsls	r2, r3, #1
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	085b      	lsrs	r3, r3, #1
 800a188:	441a      	add	r2, r3
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a192:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	2b0f      	cmp	r3, #15
 800a198:	d916      	bls.n	800a1c8 <UART_SetConfig+0xb28>
 800a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1a0:	d212      	bcs.n	800a1c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	f023 030f 	bic.w	r3, r3, #15
 800a1aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ae:	085b      	lsrs	r3, r3, #1
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a1c4:	60da      	str	r2, [r3, #12]
 800a1c6:	e0bc      	b.n	800a342 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1ce:	e0b8      	b.n	800a342 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a1d4:	2b20      	cmp	r3, #32
 800a1d6:	dc4b      	bgt.n	800a270 <UART_SetConfig+0xbd0>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f2c0 8087 	blt.w	800a2ec <UART_SetConfig+0xc4c>
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	f200 8084 	bhi.w	800a2ec <UART_SetConfig+0xc4c>
 800a1e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <UART_SetConfig+0xb4c>)
 800a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ea:	bf00      	nop
 800a1ec:	0800a277 	.word	0x0800a277
 800a1f0:	0800a27f 	.word	0x0800a27f
 800a1f4:	0800a2ed 	.word	0x0800a2ed
 800a1f8:	0800a2ed 	.word	0x0800a2ed
 800a1fc:	0800a287 	.word	0x0800a287
 800a200:	0800a2ed 	.word	0x0800a2ed
 800a204:	0800a2ed 	.word	0x0800a2ed
 800a208:	0800a2ed 	.word	0x0800a2ed
 800a20c:	0800a297 	.word	0x0800a297
 800a210:	0800a2ed 	.word	0x0800a2ed
 800a214:	0800a2ed 	.word	0x0800a2ed
 800a218:	0800a2ed 	.word	0x0800a2ed
 800a21c:	0800a2ed 	.word	0x0800a2ed
 800a220:	0800a2ed 	.word	0x0800a2ed
 800a224:	0800a2ed 	.word	0x0800a2ed
 800a228:	0800a2ed 	.word	0x0800a2ed
 800a22c:	0800a2a7 	.word	0x0800a2a7
 800a230:	0800a2ed 	.word	0x0800a2ed
 800a234:	0800a2ed 	.word	0x0800a2ed
 800a238:	0800a2ed 	.word	0x0800a2ed
 800a23c:	0800a2ed 	.word	0x0800a2ed
 800a240:	0800a2ed 	.word	0x0800a2ed
 800a244:	0800a2ed 	.word	0x0800a2ed
 800a248:	0800a2ed 	.word	0x0800a2ed
 800a24c:	0800a2ed 	.word	0x0800a2ed
 800a250:	0800a2ed 	.word	0x0800a2ed
 800a254:	0800a2ed 	.word	0x0800a2ed
 800a258:	0800a2ed 	.word	0x0800a2ed
 800a25c:	0800a2ed 	.word	0x0800a2ed
 800a260:	0800a2ed 	.word	0x0800a2ed
 800a264:	0800a2ed 	.word	0x0800a2ed
 800a268:	0800a2ed 	.word	0x0800a2ed
 800a26c:	0800a2df 	.word	0x0800a2df
 800a270:	2b40      	cmp	r3, #64	@ 0x40
 800a272:	d037      	beq.n	800a2e4 <UART_SetConfig+0xc44>
 800a274:	e03a      	b.n	800a2ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a276:	f7fb fd69 	bl	8005d4c <HAL_RCC_GetPCLK1Freq>
 800a27a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a27c:	e03c      	b.n	800a2f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a27e:	f7fb fd7b 	bl	8005d78 <HAL_RCC_GetPCLK2Freq>
 800a282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a284:	e038      	b.n	800a2f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fc ff40 	bl	8007110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a294:	e030      	b.n	800a2f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a296:	f107 0318 	add.w	r3, r7, #24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fd f88c 	bl	80073b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e028      	b.n	800a2f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a6:	4b09      	ldr	r3, [pc, #36]	@ (800a2cc <UART_SetConfig+0xc2c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d012      	beq.n	800a2d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2b2:	4b06      	ldr	r3, [pc, #24]	@ (800a2cc <UART_SetConfig+0xc2c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	08db      	lsrs	r3, r3, #3
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	4a04      	ldr	r2, [pc, #16]	@ (800a2d0 <UART_SetConfig+0xc30>)
 800a2be:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c4:	e018      	b.n	800a2f8 <UART_SetConfig+0xc58>
 800a2c6:	bf00      	nop
 800a2c8:	0800b038 	.word	0x0800b038
 800a2cc:	58024400 	.word	0x58024400
 800a2d0:	03d09000 	.word	0x03d09000
 800a2d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a2d8:	4b24      	ldr	r3, [pc, #144]	@ (800a36c <UART_SetConfig+0xccc>)
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2dc:	e00c      	b.n	800a2f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2de:	4b24      	ldr	r3, [pc, #144]	@ (800a370 <UART_SetConfig+0xcd0>)
 800a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e2:	e009      	b.n	800a2f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ea:	e005      	b.n	800a2f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a2f6:	bf00      	nop
    }

    if (pclk != 0U)
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d021      	beq.n	800a342 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a302:	4a1c      	ldr	r2, [pc, #112]	@ (800a374 <UART_SetConfig+0xcd4>)
 800a304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a308:	461a      	mov	r2, r3
 800a30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a30c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	441a      	add	r2, r3
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a320:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a324:	2b0f      	cmp	r3, #15
 800a326:	d909      	bls.n	800a33c <UART_SetConfig+0xc9c>
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a32e:	d205      	bcs.n	800a33c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	b29a      	uxth	r2, r3
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60da      	str	r2, [r3, #12]
 800a33a:	e002      	b.n	800a342 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2201      	movs	r2, #1
 800a346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2200      	movs	r2, #0
 800a356:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	2200      	movs	r2, #0
 800a35c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a35e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a362:	4618      	mov	r0, r3
 800a364:	3748      	adds	r7, #72	@ 0x48
 800a366:	46bd      	mov	sp, r7
 800a368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a36c:	03d09000 	.word	0x03d09000
 800a370:	003d0900 	.word	0x003d0900
 800a374:	0800b038 	.word	0x0800b038

0800a378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00a      	beq.n	800a3a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42e:	f003 0320 	and.w	r3, r3, #32
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01a      	beq.n	800a48e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a476:	d10a      	bne.n	800a48e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	605a      	str	r2, [r3, #4]
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b098      	sub	sp, #96	@ 0x60
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4cc:	f7f7 f8de 	bl	800168c <HAL_GetTick>
 800a4d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	d12f      	bne.n	800a540 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f88e 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d022      	beq.n	800a540 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a502:	e853 3f00 	ldrex	r3, [r3]
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a50e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a518:	647b      	str	r3, [r7, #68]	@ 0x44
 800a51a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a51e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a520:	e841 2300 	strex	r3, r2, [r1]
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e6      	bne.n	800a4fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e063      	b.n	800a608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d149      	bne.n	800a5e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a54e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a556:	2200      	movs	r2, #0
 800a558:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f857 	bl	800a610 <UART_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d03c      	beq.n	800a5e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	623b      	str	r3, [r7, #32]
   return(result);
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a586:	633b      	str	r3, [r7, #48]	@ 0x30
 800a588:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a58c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e6      	bne.n	800a568 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3308      	adds	r3, #8
 800a5a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	e853 3f00 	ldrex	r3, [r3]
 800a5a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f023 0301 	bic.w	r3, r3, #1
 800a5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5ba:	61fa      	str	r2, [r7, #28]
 800a5bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5be:	69b9      	ldr	r1, [r7, #24]
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	e841 2300 	strex	r3, r2, [r1]
 800a5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e5      	bne.n	800a59a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e012      	b.n	800a608 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3758      	adds	r7, #88	@ 0x58
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	4613      	mov	r3, r2
 800a61e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a620:	e04f      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d04b      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62a:	f7f7 f82f 	bl	800168c <HAL_GetTick>
 800a62e:	4602      	mov	r2, r0
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	429a      	cmp	r2, r3
 800a638:	d302      	bcc.n	800a640 <UART_WaitOnFlagUntilTimeout+0x30>
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e04e      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0304 	and.w	r3, r3, #4
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d037      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b80      	cmp	r3, #128	@ 0x80
 800a656:	d034      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	d031      	beq.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69db      	ldr	r3, [r3, #28]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d110      	bne.n	800a68e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2208      	movs	r2, #8
 800a672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f000 f921 	bl	800a8bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2208      	movs	r2, #8
 800a67e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e029      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a69c:	d111      	bne.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 f907 	bl	800a8bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e00f      	b.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69da      	ldr	r2, [r3, #28]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	bf0c      	ite	eq
 800a6d2:	2301      	moveq	r3, #1
 800a6d4:	2300      	movne	r3, #0
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	461a      	mov	r2, r3
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d0a0      	beq.n	800a622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b096      	sub	sp, #88	@ 0x58
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	88fa      	ldrh	r2, [r7, #6]
 800a704:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2222      	movs	r2, #34	@ 0x22
 800a714:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d02d      	beq.n	800a77e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a728:	4a40      	ldr	r2, [pc, #256]	@ (800a82c <UART_Start_Receive_DMA+0x140>)
 800a72a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a732:	4a3f      	ldr	r2, [pc, #252]	@ (800a830 <UART_Start_Receive_DMA+0x144>)
 800a734:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a73c:	4a3d      	ldr	r2, [pc, #244]	@ (800a834 <UART_Start_Receive_DMA+0x148>)
 800a73e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a746:	2200      	movs	r2, #0
 800a748:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3324      	adds	r3, #36	@ 0x24
 800a756:	4619      	mov	r1, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a75c:	461a      	mov	r2, r3
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	f7f7 feaa 	bl	80024b8 <HAL_DMA_Start_IT>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2210      	movs	r2, #16
 800a76e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e051      	b.n	800a822 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d018      	beq.n	800a7b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a78e:	e853 3f00 	ldrex	r3, [r3]
 800a792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a79a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7ac:	e841 2300 	strex	r3, r2, [r1]
 800a7b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1e6      	bne.n	800a786 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	f043 0301 	orr.w	r3, r3, #1
 800a7ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a7d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a7da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e5      	bne.n	800a7b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a80c:	623a      	str	r2, [r7, #32]
 800a80e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	69f9      	ldr	r1, [r7, #28]
 800a812:	6a3a      	ldr	r2, [r7, #32]
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	61bb      	str	r3, [r7, #24]
   return(result);
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e5      	bne.n	800a7ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3758      	adds	r7, #88	@ 0x58
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	0800aa3b 	.word	0x0800aa3b
 800a830:	0800ab63 	.word	0x0800ab63
 800a834:	0800aba1 	.word	0x0800aba1

0800a838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a838:	b480      	push	{r7}
 800a83a:	b08f      	sub	sp, #60	@ 0x3c
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a860:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e6      	bne.n	800a840 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3308      	adds	r3, #8
 800a878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	60bb      	str	r3, [r7, #8]
   return(result);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a888:	633b      	str	r3, [r7, #48]	@ 0x30
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a892:	61ba      	str	r2, [r7, #24]
 800a894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	6979      	ldr	r1, [r7, #20]
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e5      	bne.n	800a872 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8ae:	bf00      	nop
 800a8b0:	373c      	adds	r7, #60	@ 0x3c
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
	...

0800a8bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b095      	sub	sp, #84	@ 0x54
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a8e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e6      	bne.n	800a8c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	61fb      	str	r3, [r7, #28]
   return(result);
 800a906:	69fa      	ldr	r2, [r7, #28]
 800a908:	4b1e      	ldr	r3, [pc, #120]	@ (800a984 <UART_EndRxTransfer+0xc8>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3308      	adds	r3, #8
 800a914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a91c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a91e:	e841 2300 	strex	r3, r2, [r1]
 800a922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1e5      	bne.n	800a8f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d118      	bne.n	800a964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f023 0310 	bic.w	r3, r3, #16
 800a946:	647b      	str	r3, [r7, #68]	@ 0x44
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	461a      	mov	r2, r3
 800a94e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a950:	61bb      	str	r3, [r7, #24]
 800a952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6979      	ldr	r1, [r7, #20]
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	613b      	str	r3, [r7, #16]
   return(result);
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e6      	bne.n	800a932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2220      	movs	r2, #32
 800a968:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a978:	bf00      	nop
 800a97a:	3754      	adds	r7, #84	@ 0x54
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	effffffe 	.word	0xeffffffe

0800a988 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b090      	sub	sp, #64	@ 0x40
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a99e:	d037      	beq.n	800aa10 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	623b      	str	r3, [r7, #32]
   return(result);
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9c8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e5      	bne.n	800a9a8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fe:	69b9      	ldr	r1, [r7, #24]
 800aa00:	69fa      	ldr	r2, [r7, #28]
 800aa02:	e841 2300 	strex	r3, r2, [r1]
 800aa06:	617b      	str	r3, [r7, #20]
   return(result);
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1e6      	bne.n	800a9dc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa0e:	e002      	b.n	800aa16 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800aa10:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa12:	f7f6 fa49 	bl	8000ea8 <HAL_UART_TxCpltCallback>
}
 800aa16:	bf00      	nop
 800aa18:	3740      	adds	r7, #64	@ 0x40
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7fe fd67 	bl	8009500 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b09c      	sub	sp, #112	@ 0x70
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa46:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa50:	d071      	beq.n	800ab36 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aa52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa54:	2200      	movs	r2, #0
 800aa56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa96:	e853 3f00 	ldrex	r3, [r3]
 800aa9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa9e:	f023 0301 	bic.w	r3, r3, #1
 800aaa2:	667b      	str	r3, [r7, #100]	@ 0x64
 800aaa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aaac:	647a      	str	r2, [r7, #68]	@ 0x44
 800aaae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e5      	bne.n	800aa8c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3308      	adds	r3, #8
 800aac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	623b      	str	r3, [r7, #32]
   return(result);
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aad6:	663b      	str	r3, [r7, #96]	@ 0x60
 800aad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3308      	adds	r3, #8
 800aade:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aae0:	633a      	str	r2, [r7, #48]	@ 0x30
 800aae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e5      	bne.n	800aac0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aaf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aafc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aafe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d118      	bne.n	800ab36 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
 800ab10:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f023 0310 	bic.w	r3, r3, #16
 800ab18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab22:	61fb      	str	r3, [r7, #28]
 800ab24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab26:	69b9      	ldr	r1, [r7, #24]
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	617b      	str	r3, [r7, #20]
   return(result);
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1e6      	bne.n	800ab04 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab38:	2200      	movs	r2, #0
 800ab3a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d107      	bne.n	800ab54 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab4e:	f7f6 f9b5 	bl	8000ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab52:	e002      	b.n	800ab5a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ab54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab56:	f7fe fcdd 	bl	8009514 <HAL_UART_RxCpltCallback>
}
 800ab5a:	bf00      	nop
 800ab5c:	3770      	adds	r7, #112	@ 0x70
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2201      	movs	r2, #1
 800ab74:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d109      	bne.n	800ab92 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab84:	085b      	lsrs	r3, r3, #1
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	4619      	mov	r1, r3
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7f6 f996 	bl	8000ebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab90:	e002      	b.n	800ab98 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f7fe fcc8 	bl	8009528 <HAL_UART_RxHalfCpltCallback>
}
 800ab98:	bf00      	nop
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abb4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc8:	2b80      	cmp	r3, #128	@ 0x80
 800abca:	d109      	bne.n	800abe0 <UART_DMAError+0x40>
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	2b21      	cmp	r3, #33	@ 0x21
 800abd0:	d106      	bne.n	800abe0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff fe2c 	bl	800a838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abea:	2b40      	cmp	r3, #64	@ 0x40
 800abec:	d109      	bne.n	800ac02 <UART_DMAError+0x62>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b22      	cmp	r3, #34	@ 0x22
 800abf2:	d106      	bne.n	800ac02 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800abfc:	6978      	ldr	r0, [r7, #20]
 800abfe:	f7ff fe5d 	bl	800a8bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac08:	f043 0210 	orr.w	r2, r3, #16
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac12:	6978      	ldr	r0, [r7, #20]
 800ac14:	f7fe fc92 	bl	800953c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac18:	bf00      	nop
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7fe fc7c 	bl	800953c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac44:	bf00      	nop
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	e853 3f00 	ldrex	r3, [r3]
 800ac60:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	61bb      	str	r3, [r7, #24]
 800ac74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac76:	6979      	ldr	r1, [r7, #20]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	e841 2300 	strex	r3, r2, [r1]
 800ac7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1e6      	bne.n	800ac54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2220      	movs	r2, #32
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7f6 f907 	bl	8000ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac9a:	bf00      	nop
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acbe:	bf00      	nop
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800acd2:	bf00      	nop
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800acde:	b480      	push	{r7}
 800ace0:	b085      	sub	sp, #20
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acec:	2b01      	cmp	r3, #1
 800acee:	d101      	bne.n	800acf4 <HAL_UARTEx_DisableFifoMode+0x16>
 800acf0:	2302      	movs	r3, #2
 800acf2:	e027      	b.n	800ad44 <HAL_UARTEx_DisableFifoMode+0x66>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2224      	movs	r2, #36	@ 0x24
 800ad00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e02d      	b.n	800adc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2224      	movs	r2, #36	@ 0x24
 800ad74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 0201 	bic.w	r2, r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f8a3 	bl	800aef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2220      	movs	r2, #32
 800adb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800addc:	2b01      	cmp	r3, #1
 800adde:	d101      	bne.n	800ade4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ade0:	2302      	movs	r3, #2
 800ade2:	e02d      	b.n	800ae40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2224      	movs	r2, #36	@ 0x24
 800adf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f022 0201 	bic.w	r2, r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f865 	bl	800aef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2220      	movs	r2, #32
 800ae32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b08c      	sub	sp, #48	@ 0x30
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	4613      	mov	r3, r2
 800ae54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae5c:	2b20      	cmp	r3, #32
 800ae5e:	d142      	bne.n	800aee6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ae66:	88fb      	ldrh	r3, [r7, #6]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e03b      	b.n	800aee8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2201      	movs	r2, #1
 800ae74:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7ff fc32 	bl	800a6ec <UART_Start_Receive_DMA>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ae8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d124      	bne.n	800aee0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d11d      	bne.n	800aeda <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2210      	movs	r2, #16
 800aea4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	e853 3f00 	ldrex	r3, [r3]
 800aeb2:	617b      	str	r3, [r7, #20]
   return(result);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	f043 0310 	orr.w	r3, r3, #16
 800aeba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec8:	6a39      	ldr	r1, [r7, #32]
 800aeca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aecc:	e841 2300 	strex	r3, r2, [r1]
 800aed0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e6      	bne.n	800aea6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800aed8:	e002      	b.n	800aee0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800aee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aee4:	e000      	b.n	800aee8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aee6:	2302      	movs	r3, #2
  }
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3730      	adds	r7, #48	@ 0x30
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d108      	bne.n	800af12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af10:	e031      	b.n	800af76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af12:	2310      	movs	r3, #16
 800af14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af16:	2310      	movs	r3, #16
 800af18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	0e5b      	lsrs	r3, r3, #25
 800af22:	b2db      	uxtb	r3, r3
 800af24:	f003 0307 	and.w	r3, r3, #7
 800af28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	0f5b      	lsrs	r3, r3, #29
 800af32:	b2db      	uxtb	r3, r3
 800af34:	f003 0307 	and.w	r3, r3, #7
 800af38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
 800af3c:	7b3a      	ldrb	r2, [r7, #12]
 800af3e:	4911      	ldr	r1, [pc, #68]	@ (800af84 <UARTEx_SetNbDataToProcess+0x94>)
 800af40:	5c8a      	ldrb	r2, [r1, r2]
 800af42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af46:	7b3a      	ldrb	r2, [r7, #12]
 800af48:	490f      	ldr	r1, [pc, #60]	@ (800af88 <UARTEx_SetNbDataToProcess+0x98>)
 800af4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af50:	b29a      	uxth	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	7b7a      	ldrb	r2, [r7, #13]
 800af5c:	4909      	ldr	r1, [pc, #36]	@ (800af84 <UARTEx_SetNbDataToProcess+0x94>)
 800af5e:	5c8a      	ldrb	r2, [r1, r2]
 800af60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af64:	7b7a      	ldrb	r2, [r7, #13]
 800af66:	4908      	ldr	r1, [pc, #32]	@ (800af88 <UARTEx_SetNbDataToProcess+0x98>)
 800af68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af6e:	b29a      	uxth	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af76:	bf00      	nop
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	0800b050 	.word	0x0800b050
 800af88:	0800b058 	.word	0x0800b058

0800af8c <memset>:
 800af8c:	4402      	add	r2, r0
 800af8e:	4603      	mov	r3, r0
 800af90:	4293      	cmp	r3, r2
 800af92:	d100      	bne.n	800af96 <memset+0xa>
 800af94:	4770      	bx	lr
 800af96:	f803 1b01 	strb.w	r1, [r3], #1
 800af9a:	e7f9      	b.n	800af90 <memset+0x4>

0800af9c <__libc_init_array>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	4d0d      	ldr	r5, [pc, #52]	@ (800afd4 <__libc_init_array+0x38>)
 800afa0:	4c0d      	ldr	r4, [pc, #52]	@ (800afd8 <__libc_init_array+0x3c>)
 800afa2:	1b64      	subs	r4, r4, r5
 800afa4:	10a4      	asrs	r4, r4, #2
 800afa6:	2600      	movs	r6, #0
 800afa8:	42a6      	cmp	r6, r4
 800afaa:	d109      	bne.n	800afc0 <__libc_init_array+0x24>
 800afac:	4d0b      	ldr	r5, [pc, #44]	@ (800afdc <__libc_init_array+0x40>)
 800afae:	4c0c      	ldr	r4, [pc, #48]	@ (800afe0 <__libc_init_array+0x44>)
 800afb0:	f000 f826 	bl	800b000 <_init>
 800afb4:	1b64      	subs	r4, r4, r5
 800afb6:	10a4      	asrs	r4, r4, #2
 800afb8:	2600      	movs	r6, #0
 800afba:	42a6      	cmp	r6, r4
 800afbc:	d105      	bne.n	800afca <__libc_init_array+0x2e>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afc4:	4798      	blx	r3
 800afc6:	3601      	adds	r6, #1
 800afc8:	e7ee      	b.n	800afa8 <__libc_init_array+0xc>
 800afca:	f855 3b04 	ldr.w	r3, [r5], #4
 800afce:	4798      	blx	r3
 800afd0:	3601      	adds	r6, #1
 800afd2:	e7f2      	b.n	800afba <__libc_init_array+0x1e>
 800afd4:	0800b068 	.word	0x0800b068
 800afd8:	0800b068 	.word	0x0800b068
 800afdc:	0800b068 	.word	0x0800b068
 800afe0:	0800b06c 	.word	0x0800b06c

0800afe4 <memcpy>:
 800afe4:	440a      	add	r2, r1
 800afe6:	4291      	cmp	r1, r2
 800afe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800afec:	d100      	bne.n	800aff0 <memcpy+0xc>
 800afee:	4770      	bx	lr
 800aff0:	b510      	push	{r4, lr}
 800aff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800affa:	4291      	cmp	r1, r2
 800affc:	d1f9      	bne.n	800aff2 <memcpy+0xe>
 800affe:	bd10      	pop	{r4, pc}

0800b000 <_init>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr

0800b00c <_fini>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	bf00      	nop
 800b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b012:	bc08      	pop	{r3}
 800b014:	469e      	mov	lr, r3
 800b016:	4770      	bx	lr
