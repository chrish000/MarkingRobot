
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a83c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800ab08  0800ab08  0000bb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab50  0800ab50  0000bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab58  0800ab58  0000bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab5c  0800ab5c  0000bb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800ab60  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e8  24000014  0800ab74  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002fc  0800ab74  0000c2fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016a4b  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a63  00000000  00000000  00022a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a0  00000000  00000000  000254f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dca  00000000  00000000  00026690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000034df  00000000  00000000  0002745a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019033  00000000  00000000  0002a939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cd1b  00000000  00000000  0004396c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00190687  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004aa4  00000000  00000000  001906cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  00195170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800aaf0 	.word	0x0800aaf0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800aaf0 	.word	0x0800aaf0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000602:	f000 fb83 	bl	8000d0c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fe77 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f853 	bl	80006b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fa37 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000612:	f000 fa0d 	bl	8000a30 <MX_DMA_Init>
  MX_UART8_Init();
 8000616:	f000 f973 	bl	8000900 <MX_UART8_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f9bd 	bl	8000998 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800061e:	f000 f8b9 	bl	8000794 <MX_CRC_Init>
  MX_TIM2_Init();
 8000622:	f000 f8f7 	bl	8000814 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	/* CLK Konfiguration */
	HAL_TIM_Base_Start_IT(&htim2);
 8000626:	4819      	ldr	r0, [pc, #100]	@ (800068c <main+0x90>)
 8000628:	f007 f892 	bl	8007750 <HAL_TIM_Base_Start_IT>

	/* GPIO Konfiguration */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	@ 0x40
 8000630:	4817      	ldr	r0, [pc, #92]	@ (8000690 <main+0x94>)
 8000632:	f004 fa85 	bl	8004b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	4816      	ldr	r0, [pc, #88]	@ (8000694 <main+0x98>)
 800063c:	f004 fa80 	bl	8004b40 <HAL_GPIO_WritePin>

	/* UART Konfiguration */
	HAL_HalfDuplex_EnableReceiver(&huart2);
 8000640:	4815      	ldr	r0, [pc, #84]	@ (8000698 <main+0x9c>)
 8000642:	f008 fdb7 	bl	80091b4 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000646:	2220      	movs	r2, #32
 8000648:	4914      	ldr	r1, [pc, #80]	@ (800069c <main+0xa0>)
 800064a:	4813      	ldr	r0, [pc, #76]	@ (8000698 <main+0x9c>)
 800064c:	f00a f981 	bl	800a952 <HAL_UARTEx_ReceiveToIdle_DMA>

	//########################### Uart X (Uart2)
	uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
 8000650:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <main+0xa4>)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000658:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <main+0xa8>)
 800065e:	603b      	str	r3, [r7, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <main+0xac>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <main+0x7e>
			//TODO gebe leeren Batteriestand auf Display aus
			//TODO Code in Interrupt stecken
			if (Move_To_Pos(HomePos))
 800066a:	4810      	ldr	r0, [pc, #64]	@ (80006ac <main+0xb0>)
 800066c:	f000 fb8a 	bl	8000d84 <Move_To_Pos>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <main+0x7e>
				Error_Handler();
 8000676:	f000 fb75 	bl	8000d64 <Error_Handler>
		}
		//*********************************************************************************************
		uint32_t crcValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)write, sizeof(write)-1);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2207      	movs	r2, #7
 800067e:	4619      	mov	r1, r3
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <main+0xb4>)
 8000682:	f001 f8db 	bl	800183c <HAL_CRC_Calculate>
 8000686:	60f8      	str	r0, [r7, #12]
	while (1) {
 8000688:	e7ea      	b.n	8000660 <main+0x64>
 800068a:	bf00      	nop
 800068c:	24000054 	.word	0x24000054
 8000690:	58020c00 	.word	0x58020c00
 8000694:	58021000 	.word	0x58021000
 8000698:	24000134 	.word	0x24000134
 800069c:	240002b8 	.word	0x240002b8
 80006a0:	0800ab08 	.word	0x0800ab08
 80006a4:	8f020005 	.word	0x8f020005
 80006a8:	240002d8 	.word	0x240002d8
 80006ac:	240002dc 	.word	0x240002dc
 80006b0:	24000030 	.word	0x24000030

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09c      	sub	sp, #112	@ 0x70
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006be:	224c      	movs	r2, #76	@ 0x4c
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00a f9e8 	bl	800aa98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2220      	movs	r2, #32
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f00a f9e2 	bl	800aa98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d4:	2002      	movs	r0, #2
 80006d6:	f004 fa81 	bl	8004bdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <SystemClock_Config+0xdc>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000790 <SystemClock_Config+0xdc>)
 80006e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e8:	6193      	str	r3, [r2, #24]
 80006ea:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <SystemClock_Config+0xdc>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f6:	bf00      	nop
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <SystemClock_Config+0xdc>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000704:	d1f8      	bne.n	80006f8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000706:	2302      	movs	r3, #2
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800070a:	2301      	movs	r3, #1
 800070c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000716:	2300      	movs	r3, #0
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800071e:	2322      	movs	r3, #34	@ 0x22
 8000720:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000726:	2303      	movs	r3, #3
 8000728:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800072e:	230c      	movs	r3, #12
 8000730:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000732:	2300      	movs	r3, #0
 8000734:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000736:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800073a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000740:	4618      	mov	r0, r3
 8000742:	f004 fa85 	bl	8004c50 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800074c:	f000 fb0a 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	233f      	movs	r3, #63	@ 0x3f
 8000752:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2303      	movs	r3, #3
 8000756:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800075c:	2308      	movs	r3, #8
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000760:	2340      	movs	r3, #64	@ 0x40
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000764:	2340      	movs	r3, #64	@ 0x40
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000768:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800076c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800076e:	2340      	movs	r3, #64	@ 0x40
 8000770:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2103      	movs	r1, #3
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fe44 	bl	8005404 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000782:	f000 faef 	bl	8000d64 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3770      	adds	r7, #112	@ 0x70
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	58024800 	.word	0x58024800

08000794 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 800079a:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_CRC_Init+0x74>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a0:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <MX_CRC_Init+0x74>)
 80007a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_CRC_Init+0x74>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_CRC_Init+0x78>)
 80007ba:	4a15      	ldr	r2, [pc, #84]	@ (8000810 <MX_CRC_Init+0x7c>)
 80007bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_CRC_Init+0x78>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_CRC_Init+0x78>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_CRC_Init+0x78>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_CRC_Init+0x78>)
 80007d2:	2210      	movs	r2, #16
 80007d4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_CRC_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_CRC_Init+0x78>)
 80007de:	2220      	movs	r2, #32
 80007e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_CRC_Init+0x78>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_CRC_Init+0x78>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ee:	4807      	ldr	r0, [pc, #28]	@ (800080c <MX_CRC_Init+0x78>)
 80007f0:	f000 ffc0 	bl	8001774 <HAL_CRC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_CRC_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 fab3 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400
 800080c:	24000030 	.word	0x24000030
 8000810:	58024c00 	.word	0x58024c00

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000846:	4b2d      	ldr	r3, [pc, #180]	@ (80008fc <MX_TIM2_Init+0xe8>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 800084e:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_TIM2_Init+0xe8>)
 8000850:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <MX_TIM2_Init+0xe8>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <MX_TIM2_Init+0xe8>)
 800085e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <MX_TIM2_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <MX_TIM2_Init+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000870:	4822      	ldr	r0, [pc, #136]	@ (80008fc <MX_TIM2_Init+0xe8>)
 8000872:	f006 ff15 	bl	80076a0 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800087c:	f000 fa72 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800088a:	4619      	mov	r1, r3
 800088c:	481b      	ldr	r0, [pc, #108]	@ (80008fc <MX_TIM2_Init+0xe8>)
 800088e:	f007 fa61 	bl	8007d54 <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000898:	f000 fa64 	bl	8000d64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800089c:	4817      	ldr	r0, [pc, #92]	@ (80008fc <MX_TIM2_Init+0xe8>)
 800089e:	f006 ffdd 	bl	800785c <HAL_TIM_PWM_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008a8:	f000 fa5c 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	@ (80008fc <MX_TIM2_Init+0xe8>)
 80008bc:	f007 ff90 	bl	80087e0 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008c6:	f000 fa4d 	bl	8000d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ca:	2360      	movs	r3, #96	@ 0x60
 80008cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80008ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_TIM2_Init+0xe8>)
 80008e4:	f007 f922 	bl	8007b2c <HAL_TIM_PWM_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80008ee:	f000 fa39 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3738      	adds	r7, #56	@ 0x38
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000054 	.word	0x24000054

08000900 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_UART8_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_UART8_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_UART8_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_UART8_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_UART8_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_UART8_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_UART8_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_UART8_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_UART8_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_UART8_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_UART8_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_UART8_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_UART8_Init+0x90>)
 800094a:	f008 f803 	bl	8008954 <HAL_HalfDuplex_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 fa06 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_UART8_Init+0x90>)
 800095c:	f009 ff7d 	bl	800a85a <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f9fd 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_UART8_Init+0x90>)
 800096e:	f009 ffb2 	bl	800a8d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f9f4 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_UART8_Init+0x90>)
 800097e:	f009 ff33 	bl	800a7e8 <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f9ec 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	240000a0 	.word	0x240000a0
 8000994:	40007c00 	.word	0x40007c00

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART2_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009e2:	f007 ffb7 	bl	8008954 <HAL_HalfDuplex_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f9ba 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 80009f4:	f009 ff31 	bl	800a85a <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f9b1 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 8000a06:	f009 ff66 	bl	800a8d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f9a8 	bl	8000d64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART2_UART_Init+0x90>)
 8000a16:	f009 fee7 	bl	800a7e8 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f9a0 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000134 	.word	0x24000134
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_DMA_Init+0x4c>)
 8000a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <MX_DMA_Init+0x4c>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a46:	4b0d      	ldr	r3, [pc, #52]	@ (8000a7c <MX_DMA_Init+0x4c>)
 8000a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	200b      	movs	r0, #11
 8000a5a:	f000 fdde 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a5e:	200b      	movs	r0, #11
 8000a60:	f000 fdf5 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	200c      	movs	r0, #12
 8000a6a:	f000 fdd6 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f000 fded 	bl	800164e <HAL_NVIC_EnableIRQ>

}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58024400 	.word	0x58024400

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a96:	4b52      	ldr	r3, [pc, #328]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a50      	ldr	r2, [pc, #320]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a49      	ldr	r2, [pc, #292]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b46      	ldr	r3, [pc, #280]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	4b43      	ldr	r3, [pc, #268]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a41      	ldr	r2, [pc, #260]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b3b      	ldr	r3, [pc, #236]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	4a3a      	ldr	r2, [pc, #232]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b00:	4b37      	ldr	r3, [pc, #220]	@ (8000be0 <MX_GPIO_Init+0x160>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	210c      	movs	r1, #12
 8000b12:	4834      	ldr	r0, [pc, #208]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000b14:	f004 f814 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2118      	movs	r1, #24
 8000b1c:	4832      	ldr	r0, [pc, #200]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b1e:	f004 f80f 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	4830      	ldr	r0, [pc, #192]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000b28:	f004 f80a 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	482e      	ldr	r0, [pc, #184]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b32:	f004 f805 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	482a      	ldr	r0, [pc, #168]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000b3c:	f004 f800 	bl	8004b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
  GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 8000b40:	230d      	movs	r3, #13
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4823      	ldr	r0, [pc, #140]	@ (8000be4 <MX_GPIO_Init+0x164>)
 8000b58:	f003 fe4a 	bl	80047f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRDET_Pin */
  GPIO_InitStruct.Pin = PWRDET_Pin;
 8000b5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	481f      	ldr	r0, [pc, #124]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b74:	f003 fe3c 	bl	80047f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
  GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4819      	ldr	r0, [pc, #100]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b8c:	f003 fe30 	bl	80047f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000b90:	2358      	movs	r3, #88	@ 0x58
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4810      	ldr	r0, [pc, #64]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ba8:	f003 fe22 	bl	80047f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HE0_PWM_Pin */
  GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000bac:	2308      	movs	r3, #8
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480a      	ldr	r0, [pc, #40]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000bc4:	f003 fe14 	bl	80047f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2028      	movs	r0, #40	@ 0x28
 8000bce:	f000 fd24 	bl	800161a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd2:	2028      	movs	r0, #40	@ 0x28
 8000bd4:	f000 fd3b 	bl	800164e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58021000 	.word	0x58021000
 8000be8:	58020c00 	.word	0x58020c00
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58020800 	.word	0x58020800

08000bf4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c04:	d102      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	240002d8 	.word	0x240002d8

08000c1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c2c:	d13d      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x8e>
		if (PWMEnabledX) {
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d038      	beq.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x8e>
			PWMCounterX++;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c44:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d307      	bcc.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x4a>
				PWMCounterX = 0;
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a17      	ldr	r2, [pc, #92]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c64:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d205      	bcs.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x66>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000c76:	2201      	movs	r2, #1
 8000c78:	2110      	movs	r1, #16
 8000c7a:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c7c:	f003 ff60 	bl	8004b40 <HAL_GPIO_WritePin>
 8000c80:	e004      	b.n	8000c8c <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	4810      	ldr	r0, [pc, #64]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c88:	f003 ff5a 	bl	8004b40 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d307      	bcc.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x8e>
				PWMEnabledX = false;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ca6:	f003 ff4b 	bl	8004b40 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	240002f4 	.word	0x240002f4
 8000cb8:	240002ec 	.word	0x240002ec
 8000cbc:	24000000 	.word	0x24000000
 8000cc0:	240002e8 	.word	0x240002e8
 8000cc4:	24000002 	.word	0x24000002
 8000cc8:	58020c00 	.word	0x58020c00
 8000ccc:	240002f0 	.word	0x240002f0

08000cd0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {

	}
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	4904      	ldr	r1, [pc, #16]	@ (8000d04 <HAL_UARTEx_RxEventCallback+0x20>)
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <HAL_UARTEx_RxEventCallback+0x24>)
 8000cf6:	f009 fe2c 	bl	800a952 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	240002b8 	.word	0x240002b8
 8000d08:	24000134 	.word	0x24000134

08000d0c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d1e:	f000 fcb1 	bl	8001684 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d2e:	231f      	movs	r3, #31
 8000d30:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d32:	2387      	movs	r3, #135	@ 0x87
 8000d34:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d42:	2301      	movs	r3, #1
 8000d44:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fccf 	bl	80016f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d56:	2004      	movs	r0, #4
 8000d58:	f000 fcac 	bl	80016b4 <HAL_MPU_Enable>

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4804      	ldr	r0, [pc, #16]	@ (8000d80 <Error_Handler+0x1c>)
 8000d70:	f003 feff 	bl	8004b72 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d74:	2064      	movs	r0, #100	@ 0x64
 8000d76:	f000 fb51 	bl	800141c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000d7a:	bf00      	nop
 8000d7c:	e7f6      	b.n	8000d6c <Error_Handler+0x8>
 8000d7e:	bf00      	nop
 8000d80:	58020400 	.word	0x58020400

08000d84 <Move_To_Pos>:
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, (Dir == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	PWMEnabledX = true; // Start Bewegung
}

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	if(NextPosition[0] != PosX && NextPosition[1] != PosY)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <Move_To_Pos+0x38>)
 8000d9a:	edd3 7a00 	vldr	s15, [r3]
 8000d9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da6:	d001      	beq.n	8000dac <Move_To_Pos+0x28>
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <Move_To_Pos+0x3c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
	{
		//TODO Logik für Bewegung zu nächstem Punkt
	}
	return true;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	240002e0 	.word	0x240002e0
 8000dc0:	240002e4 	.word	0x240002e4

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_MspInit+0x30>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd0:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_MspInit+0x30>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	58024400 	.word	0x58024400

08000df8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	@ (8000e34 <HAL_CRC_MspInit+0x3c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10e      	bne.n	8000e28 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_CRC_MspInit+0x40>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a09      	ldr	r2, [pc, #36]	@ (8000e38 <HAL_CRC_MspInit+0x40>)
 8000e12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <HAL_CRC_MspInit+0x40>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024c00 	.word	0x58024c00
 8000e38:	58024400 	.word	0x58024400

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e4c:	d116      	bne.n	8000e7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e54:	4a0b      	ldr	r2, [pc, #44]	@ (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	201c      	movs	r0, #28
 8000e72:	f000 fbd2 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e76:	201c      	movs	r0, #28
 8000e78:	f000 fbe9 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	22b8      	movs	r2, #184	@ 0xb8
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f009 fdf5 	bl	800aa98 <memset>
  if(huart->Instance==UART8)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a82      	ldr	r2, [pc, #520]	@ (80010bc <HAL_UART_MspInit+0x234>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d14e      	bne.n	8000f56 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000eb8:	f04f 0202 	mov.w	r2, #2
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fe24 	bl	8005b1c <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eda:	f7ff ff43 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ede:	4b78      	ldr	r3, [pc, #480]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee4:	4a76      	ldr	r2, [pc, #472]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000ee6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000eea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eee:	4b74      	ldr	r3, [pc, #464]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efc:	4b70      	ldr	r3, [pc, #448]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	4a6f      	ldr	r2, [pc, #444]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000f04:	f043 0310 	orr.w	r3, r3, #16
 8000f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f32:	2308      	movs	r3, #8
 8000f34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4861      	ldr	r0, [pc, #388]	@ (80010c4 <HAL_UART_MspInit+0x23c>)
 8000f40:	f003 fc56 	bl	80047f0 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2053      	movs	r0, #83	@ 0x53
 8000f4a:	f000 fb66 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000f4e:	2053      	movs	r0, #83	@ 0x53
 8000f50:	f000 fb7d 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f54:	e0ae      	b.n	80010b4 <HAL_UART_MspInit+0x22c>
  else if(huart->Instance==USART2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80010c8 <HAL_UART_MspInit+0x240>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f040 80a9 	bne.w	80010b4 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f62:	f04f 0202 	mov.w	r2, #2
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fdcf 	bl	8005b1c <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000f84:	f7ff feee 	bl	8000d64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f88:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f8e:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f98:	4b49      	ldr	r3, [pc, #292]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000f9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa6:	4b46      	ldr	r3, [pc, #280]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fac:	4a44      	ldr	r2, [pc, #272]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb6:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <HAL_UART_MspInit+0x238>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4838      	ldr	r0, [pc, #224]	@ (80010cc <HAL_UART_MspInit+0x244>)
 8000fea:	f003 fc01 	bl	80047f0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 8000fee:	4b38      	ldr	r3, [pc, #224]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8000ff0:	4a38      	ldr	r2, [pc, #224]	@ (80010d4 <HAL_UART_MspInit+0x24c>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000ff4:	4b36      	ldr	r3, [pc, #216]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8000ff6:	222c      	movs	r2, #44	@ 0x2c
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ffa:	4b35      	ldr	r3, [pc, #212]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8000ffc:	2240      	movs	r2, #64	@ 0x40
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b32      	ldr	r3, [pc, #200]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b30      	ldr	r3, [pc, #192]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b2e      	ldr	r3, [pc, #184]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800101a:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001020:	4b2b      	ldr	r3, [pc, #172]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001026:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800102c:	4828      	ldr	r0, [pc, #160]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 800102e:	f000 fda7 	bl	8001b80 <HAL_DMA_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8001038:	f7ff fe94 	bl	8000d64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001040:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001042:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <HAL_UART_MspInit+0x248>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001048:	4b23      	ldr	r3, [pc, #140]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 800104a:	4a24      	ldr	r2, [pc, #144]	@ (80010dc <HAL_UART_MspInit+0x254>)
 800104c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800104e:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001050:	222b      	movs	r2, #43	@ 0x2b
 8001052:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001066:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001068:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001074:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001086:	4814      	ldr	r0, [pc, #80]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 8001088:	f000 fd7a 	bl	8001b80 <HAL_DMA_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_UART_MspInit+0x20e>
      Error_Handler();
 8001092:	f7ff fe67 	bl	8000d64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 800109a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_UART_MspInit+0x250>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2026      	movs	r0, #38	@ 0x26
 80010aa:	f000 fab6 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ae:	2026      	movs	r0, #38	@ 0x26
 80010b0:	f000 facd 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 80010b4:	bf00      	nop
 80010b6:	37e8      	adds	r7, #232	@ 0xe8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40007c00 	.word	0x40007c00
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58021000 	.word	0x58021000
 80010c8:	40004400 	.word	0x40004400
 80010cc:	58020c00 	.word	0x58020c00
 80010d0:	240001c8 	.word	0x240001c8
 80010d4:	40020010 	.word	0x40020010
 80010d8:	24000240 	.word	0x24000240
 80010dc:	40020028 	.word	0x40020028

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 f951 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001144:	4802      	ldr	r0, [pc, #8]	@ (8001150 <DMA1_Stream0_IRQHandler+0x10>)
 8001146:	f002 f841 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	240001c8 	.word	0x240001c8

08001154 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <DMA1_Stream1_IRQHandler+0x10>)
 800115a:	f002 f837 	bl	80031cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	24000240 	.word	0x24000240

08001168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <TIM2_IRQHandler+0x10>)
 800116e:	f006 fbd6 	bl	800791e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000054 	.word	0x24000054

0800117c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <USART2_IRQHandler+0x10>)
 8001182:	f007 fc3f 	bl	8008a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000134 	.word	0x24000134

08001190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001194:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001198:	f003 fd05 	bl	8004ba6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <UART8_IRQHandler+0x10>)
 80011a6:	f007 fc2d 	bl	8008a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240000a0 	.word	0x240000a0

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b8:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <SystemInit+0xd0>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011be:	4a31      	ldr	r2, [pc, #196]	@ (8001284 <SystemInit+0xd0>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <SystemInit+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d807      	bhi.n	80011e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001288 <SystemInit+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 030f 	bic.w	r3, r3, #15
 80011dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <SystemInit+0xd4>)
 80011de:	f043 0307 	orr.w	r3, r3, #7
 80011e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <SystemInit+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a28      	ldr	r2, [pc, #160]	@ (800128c <SystemInit+0xd8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <SystemInit+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f6:	4b25      	ldr	r3, [pc, #148]	@ (800128c <SystemInit+0xd8>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4924      	ldr	r1, [pc, #144]	@ (800128c <SystemInit+0xd8>)
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <SystemInit+0xdc>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <SystemInit+0xd4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <SystemInit+0xd4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 030f 	bic.w	r3, r3, #15
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <SystemInit+0xd4>)
 8001218:	f043 0307 	orr.w	r3, r3, #7
 800121c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <SystemInit+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <SystemInit+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <SystemInit+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <SystemInit+0xd8>)
 8001232:	4a18      	ldr	r2, [pc, #96]	@ (8001294 <SystemInit+0xe0>)
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <SystemInit+0xd8>)
 8001238:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <SystemInit+0xe4>)
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <SystemInit+0xd8>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <SystemInit+0xe8>)
 8001240:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <SystemInit+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <SystemInit+0xd8>)
 800124a:	4a14      	ldr	r2, [pc, #80]	@ (800129c <SystemInit+0xe8>)
 800124c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124e:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <SystemInit+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <SystemInit+0xd8>)
 8001256:	4a11      	ldr	r2, [pc, #68]	@ (800129c <SystemInit+0xe8>)
 8001258:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <SystemInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <SystemInit+0xd8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	@ (800128c <SystemInit+0xd8>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800126a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <SystemInit+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <SystemInit+0xec>)
 8001274:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001278:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00
 8001288:	52002000 	.word	0x52002000
 800128c:	58024400 	.word	0x58024400
 8001290:	eaf6ed7f 	.word	0xeaf6ed7f
 8001294:	02020200 	.word	0x02020200
 8001298:	01ff0000 	.word	0x01ff0000
 800129c:	01010280 	.word	0x01010280
 80012a0:	52004000 	.word	0x52004000

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a8:	f7ff ff84 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ae:	490d      	ldr	r1, [pc, #52]	@ (80012e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c4:	4c0a      	ldr	r4, [pc, #40]	@ (80012f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012d2:	f009 fbe9 	bl	800aaa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f991 	bl	80005fc <main>
  bx  lr
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80012e8:	0800ab60 	.word	0x0800ab60
  ldr r2, =_sbss
 80012ec:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80012f0:	240002fc 	.word	0x240002fc

080012f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC3_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
 8001300:	f000 f980 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001304:	f004 fa34 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_Init+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	4913      	ldr	r1, [pc, #76]	@ (8001364 <HAL_Init+0x6c>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a0e      	ldr	r2, [pc, #56]	@ (8001364 <HAL_Init+0x6c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <HAL_Init+0x70>)
 800133a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800133c:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <HAL_Init+0x74>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f814 	bl	8001370 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e002      	b.n	8001358 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001352:	f7ff fd37 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58024400 	.word	0x58024400
 8001364:	0800ab10 	.word	0x0800ab10
 8001368:	24000008 	.word	0x24000008
 800136c:	24000004 	.word	0x24000004

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e021      	b.n	80013c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <HAL_InitTick+0x64>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_InitTick+0x60>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f965 	bl	800166a <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 f92f 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <HAL_InitTick+0x68>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	24000010 	.word	0x24000010
 80013d4:	24000004 	.word	0x24000004
 80013d8:	2400000c 	.word	0x2400000c

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	24000010 	.word	0x24000010
 8001400:	240002f8 	.word	0x240002f8

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	240002f8 	.word	0x240002f8

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	24000010 	.word	0x24000010

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	4313      	orrs	r3, r2
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00
 80014a8:	05fa0000 	.word	0x05fa0000

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	@ (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff29 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff40 	bl	80014ac <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff33 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa4 	bl	80015c0 <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001688:	f3bf 8f5f 	dmb	sy
}
 800168c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_MPU_Disable+0x28>)
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_MPU_Disable+0x28>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_MPU_Disable+0x2c>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	e000ed90 	.word	0xe000ed90

080016b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_MPU_Enable+0x38>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <HAL_MPU_Enable+0x3c>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <HAL_MPU_Enable+0x3c>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016d2:	f3bf 8f4f 	dsb	sy
}
 80016d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016d8:	f3bf 8f6f 	isb	sy
}
 80016dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed90 	.word	0xe000ed90
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	785a      	ldrb	r2, [r3, #1]
 8001700:	4b1b      	ldr	r3, [pc, #108]	@ (8001770 <HAL_MPU_ConfigRegion+0x7c>)
 8001702:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_MPU_ConfigRegion+0x7c>)
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <HAL_MPU_ConfigRegion+0x7c>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001710:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <HAL_MPU_ConfigRegion+0x7c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7b1b      	ldrb	r3, [r3, #12]
 800171c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7adb      	ldrb	r3, [r3, #11]
 8001722:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7a9b      	ldrb	r3, [r3, #10]
 800172a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800172c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7b5b      	ldrb	r3, [r3, #13]
 8001732:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001734:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7b9b      	ldrb	r3, [r3, #14]
 800173a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800173c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7bdb      	ldrb	r3, [r3, #15]
 8001742:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001744:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7a5b      	ldrb	r3, [r3, #9]
 800174a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800174c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7a1b      	ldrb	r3, [r3, #8]
 8001752:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001754:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	7812      	ldrb	r2, [r2, #0]
 800175a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800175e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001760:	6113      	str	r3, [r2, #16]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed90 	.word	0xe000ed90

08001774 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e054      	b.n	8001830 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7f5b      	ldrb	r3, [r3, #29]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fb2e 	bl	8000df8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <HAL_CRC_Init+0xc4>)
 80017b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0218 	bic.w	r2, r2, #24
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	e00c      	b.n	80017de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6899      	ldr	r1, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	461a      	mov	r2, r3
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f948 	bl	8001a64 <HAL_CRCEx_Polynomial_Set>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e028      	b.n	8001830 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	795b      	ldrb	r3, [r3, #5]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f04f 32ff 	mov.w	r2, #4294967295
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	e004      	b.n	80017fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6912      	ldr	r2, [r2, #16]
 80017fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	04c11db7 	.word	0x04c11db7

0800183c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2202      	movs	r2, #2
 8001850:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d006      	beq.n	8001878 <HAL_CRC_Calculate+0x3c>
 800186a:	2b03      	cmp	r3, #3
 800186c:	d829      	bhi.n	80018c2 <HAL_CRC_Calculate+0x86>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d019      	beq.n	80018a6 <HAL_CRC_Calculate+0x6a>
 8001872:	2b02      	cmp	r3, #2
 8001874:	d01e      	beq.n	80018b4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001876:	e024      	b.n	80018c2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	441a      	add	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d3f0      	bcc.n	800187e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
      break;
 80018a4:	e00e      	b.n	80018c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f812 	bl	80018d4 <CRC_Handle_8>
 80018b0:	6138      	str	r0, [r7, #16]
      break;
 80018b2:	e007      	b.n	80018c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 f899 	bl	80019f0 <CRC_Handle_16>
 80018be:	6138      	str	r0, [r7, #16]
      break;
 80018c0:	e000      	b.n	80018c4 <HAL_CRC_Calculate+0x88>
      break;
 80018c2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80018ca:	693b      	ldr	r3, [r7, #16]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	e023      	b.n	800192e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	3301      	adds	r3, #1
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	440b      	add	r3, r1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001900:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	68b9      	ldr	r1, [r7, #8]
 800190a:	440b      	add	r3, r1
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001910:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	3303      	adds	r3, #3
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	440b      	add	r3, r1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001924:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	3301      	adds	r3, #1
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3d6      	bcc.n	80018e6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04d      	beq.n	80019de <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4413      	add	r3, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d116      	bne.n	8001994 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b21a      	sxth	r2, r3
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	3301      	adds	r3, #1
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	440b      	add	r3, r1
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	b21b      	sxth	r3, r3
 8001982:	4313      	orrs	r3, r2
 8001984:	b21b      	sxth	r3, r3
 8001986:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	8b7a      	ldrh	r2, [r7, #26]
 8001992:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b03      	cmp	r3, #3
 800199c:	d11f      	bne.n	80019de <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	3301      	adds	r3, #1
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	440b      	add	r3, r1
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b21b      	sxth	r3, r3
 80019be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	8b7a      	ldrh	r2, [r7, #26]
 80019ca:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	4413      	add	r3, r2
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3724      	adds	r7, #36	@ 0x24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e013      	b.n	8001a2a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	4413      	add	r3, r2
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	041a      	lsls	r2, r3, #16
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	440b      	add	r3, r1
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3e6      	bcc.n	8001a02 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	881a      	ldrh	r2, [r3, #0]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a74:	231f      	movs	r3, #31
 8001a76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
 8001a86:	e063      	b.n	8001b50 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a88:	bf00      	nop
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	613a      	str	r2, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <HAL_CRCEx_Polynomial_Set+0x44>
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b18      	cmp	r3, #24
 8001aac:	d846      	bhi.n	8001b3c <HAL_CRCEx_Polynomial_Set+0xd8>
 8001aae:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab4 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001b43 	.word	0x08001b43
 8001ab8:	08001b3d 	.word	0x08001b3d
 8001abc:	08001b3d 	.word	0x08001b3d
 8001ac0:	08001b3d 	.word	0x08001b3d
 8001ac4:	08001b3d 	.word	0x08001b3d
 8001ac8:	08001b3d 	.word	0x08001b3d
 8001acc:	08001b3d 	.word	0x08001b3d
 8001ad0:	08001b3d 	.word	0x08001b3d
 8001ad4:	08001b31 	.word	0x08001b31
 8001ad8:	08001b3d 	.word	0x08001b3d
 8001adc:	08001b3d 	.word	0x08001b3d
 8001ae0:	08001b3d 	.word	0x08001b3d
 8001ae4:	08001b3d 	.word	0x08001b3d
 8001ae8:	08001b3d 	.word	0x08001b3d
 8001aec:	08001b3d 	.word	0x08001b3d
 8001af0:	08001b3d 	.word	0x08001b3d
 8001af4:	08001b25 	.word	0x08001b25
 8001af8:	08001b3d 	.word	0x08001b3d
 8001afc:	08001b3d 	.word	0x08001b3d
 8001b00:	08001b3d 	.word	0x08001b3d
 8001b04:	08001b3d 	.word	0x08001b3d
 8001b08:	08001b3d 	.word	0x08001b3d
 8001b0c:	08001b3d 	.word	0x08001b3d
 8001b10:	08001b3d 	.word	0x08001b3d
 8001b14:	08001b19 	.word	0x08001b19
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d913      	bls.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b22:	e010      	b.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2b07      	cmp	r3, #7
 8001b28:	d90f      	bls.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b2e:	e00c      	b.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d90b      	bls.n	8001b4e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b3a:	e008      	b.n	8001b4e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	75fb      	strb	r3, [r7, #23]
        break;
 8001b40:	e006      	b.n	8001b50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b42:	bf00      	nop
 8001b44:	e004      	b.n	8001b50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b46:	bf00      	nop
 8001b48:	e002      	b.n	8001b50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b4a:	bf00      	nop
 8001b4c:	e000      	b.n	8001b50 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b4e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 0118 	bic.w	r1, r3, #24
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fc3c 	bl	8001404 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e312      	b.n	80021be <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a66      	ldr	r2, [pc, #408]	@ (8001d38 <HAL_DMA_Init+0x1b8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04a      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a65      	ldr	r2, [pc, #404]	@ (8001d3c <HAL_DMA_Init+0x1bc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d045      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a63      	ldr	r2, [pc, #396]	@ (8001d40 <HAL_DMA_Init+0x1c0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d040      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a62      	ldr	r2, [pc, #392]	@ (8001d44 <HAL_DMA_Init+0x1c4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d03b      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a60      	ldr	r2, [pc, #384]	@ (8001d48 <HAL_DMA_Init+0x1c8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d036      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a5f      	ldr	r2, [pc, #380]	@ (8001d4c <HAL_DMA_Init+0x1cc>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d031      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001d50 <HAL_DMA_Init+0x1d0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d02c      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5c      	ldr	r2, [pc, #368]	@ (8001d54 <HAL_DMA_Init+0x1d4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d027      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5a      	ldr	r2, [pc, #360]	@ (8001d58 <HAL_DMA_Init+0x1d8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d022      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a59      	ldr	r2, [pc, #356]	@ (8001d5c <HAL_DMA_Init+0x1dc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01d      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a57      	ldr	r2, [pc, #348]	@ (8001d60 <HAL_DMA_Init+0x1e0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d018      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_DMA_Init+0x1e4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a54      	ldr	r2, [pc, #336]	@ (8001d68 <HAL_DMA_Init+0x1e8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00e      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a53      	ldr	r2, [pc, #332]	@ (8001d6c <HAL_DMA_Init+0x1ec>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a51      	ldr	r2, [pc, #324]	@ (8001d70 <HAL_DMA_Init+0x1f0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_DMA_Init+0xb8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a50      	ldr	r2, [pc, #320]	@ (8001d74 <HAL_DMA_Init+0x1f4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA_Init+0xbc>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_DMA_Init+0xbe>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 813c 	beq.w	8001ebc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a37      	ldr	r2, [pc, #220]	@ (8001d38 <HAL_DMA_Init+0x1b8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a36      	ldr	r2, [pc, #216]	@ (8001d3c <HAL_DMA_Init+0x1bc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d045      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a34      	ldr	r2, [pc, #208]	@ (8001d40 <HAL_DMA_Init+0x1c0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d040      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a33      	ldr	r2, [pc, #204]	@ (8001d44 <HAL_DMA_Init+0x1c4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d03b      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a31      	ldr	r2, [pc, #196]	@ (8001d48 <HAL_DMA_Init+0x1c8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d036      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a30      	ldr	r2, [pc, #192]	@ (8001d4c <HAL_DMA_Init+0x1cc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d031      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2e      	ldr	r2, [pc, #184]	@ (8001d50 <HAL_DMA_Init+0x1d0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02c      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <HAL_DMA_Init+0x1d4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d027      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d58 <HAL_DMA_Init+0x1d8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d022      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <HAL_DMA_Init+0x1dc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d01d      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a28      	ldr	r2, [pc, #160]	@ (8001d60 <HAL_DMA_Init+0x1e0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d018      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <HAL_DMA_Init+0x1e4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <HAL_DMA_Init+0x1e8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a24      	ldr	r2, [pc, #144]	@ (8001d6c <HAL_DMA_Init+0x1ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a22      	ldr	r2, [pc, #136]	@ (8001d70 <HAL_DMA_Init+0x1f0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Init+0x174>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <HAL_DMA_Init+0x1f4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d108      	bne.n	8001d06 <HAL_DMA_Init+0x186>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e007      	b.n	8001d16 <HAL_DMA_Init+0x196>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d16:	e02f      	b.n	8001d78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d18:	f7ff fb74 	bl	8001404 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d928      	bls.n	8001d78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e242      	b.n	80021be <HAL_DMA_Init+0x63e>
 8001d38:	40020010 	.word	0x40020010
 8001d3c:	40020028 	.word	0x40020028
 8001d40:	40020040 	.word	0x40020040
 8001d44:	40020058 	.word	0x40020058
 8001d48:	40020070 	.word	0x40020070
 8001d4c:	40020088 	.word	0x40020088
 8001d50:	400200a0 	.word	0x400200a0
 8001d54:	400200b8 	.word	0x400200b8
 8001d58:	40020410 	.word	0x40020410
 8001d5c:	40020428 	.word	0x40020428
 8001d60:	40020440 	.word	0x40020440
 8001d64:	40020458 	.word	0x40020458
 8001d68:	40020470 	.word	0x40020470
 8001d6c:	40020488 	.word	0x40020488
 8001d70:	400204a0 	.word	0x400204a0
 8001d74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1c8      	bne.n	8001d18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4b83      	ldr	r3, [pc, #524]	@ (8001fa0 <HAL_DMA_Init+0x420>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001d9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001daa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d107      	bne.n	8001ddc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b28      	cmp	r3, #40	@ 0x28
 8001de2:	d903      	bls.n	8001dec <HAL_DMA_Init+0x26c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dea:	d91f      	bls.n	8001e2c <HAL_DMA_Init+0x2ac>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001df2:	d903      	bls.n	8001dfc <HAL_DMA_Init+0x27c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b42      	cmp	r3, #66	@ 0x42
 8001dfa:	d917      	bls.n	8001e2c <HAL_DMA_Init+0x2ac>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b46      	cmp	r3, #70	@ 0x46
 8001e02:	d903      	bls.n	8001e0c <HAL_DMA_Init+0x28c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b48      	cmp	r3, #72	@ 0x48
 8001e0a:	d90f      	bls.n	8001e2c <HAL_DMA_Init+0x2ac>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e12:	d903      	bls.n	8001e1c <HAL_DMA_Init+0x29c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b52      	cmp	r3, #82	@ 0x52
 8001e1a:	d907      	bls.n	8001e2c <HAL_DMA_Init+0x2ac>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b73      	cmp	r3, #115	@ 0x73
 8001e22:	d905      	bls.n	8001e30 <HAL_DMA_Init+0x2b0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b77      	cmp	r3, #119	@ 0x77
 8001e2a:	d801      	bhi.n	8001e30 <HAL_DMA_Init+0x2b0>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_DMA_Init+0x2b2>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e3c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f023 0307 	bic.w	r3, r3, #7
 8001e54:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d117      	bne.n	8001e98 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00e      	beq.n	8001e98 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f002 fb2e 	bl	80044dc <DMA_CheckFifoParam>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2240      	movs	r2, #64	@ 0x40
 8001e8a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e192      	b.n	80021be <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 fa69 	bl	8004378 <DMA_CalcBaseAndBitshift>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	223f      	movs	r2, #63	@ 0x3f
 8001eb4:	409a      	lsls	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	e0c8      	b.n	800204e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a38      	ldr	r2, [pc, #224]	@ (8001fa4 <HAL_DMA_Init+0x424>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d022      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a37      	ldr	r2, [pc, #220]	@ (8001fa8 <HAL_DMA_Init+0x428>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d01d      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a35      	ldr	r2, [pc, #212]	@ (8001fac <HAL_DMA_Init+0x42c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d018      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_DMA_Init+0x430>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a32      	ldr	r2, [pc, #200]	@ (8001fb4 <HAL_DMA_Init+0x434>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a31      	ldr	r2, [pc, #196]	@ (8001fb8 <HAL_DMA_Init+0x438>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2f      	ldr	r2, [pc, #188]	@ (8001fbc <HAL_DMA_Init+0x43c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_DMA_Init+0x38c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <HAL_DMA_Init+0x440>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d101      	bne.n	8001f10 <HAL_DMA_Init+0x390>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_DMA_Init+0x392>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8092 	beq.w	800203c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a21      	ldr	r2, [pc, #132]	@ (8001fa4 <HAL_DMA_Init+0x424>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d021      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a20      	ldr	r2, [pc, #128]	@ (8001fa8 <HAL_DMA_Init+0x428>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01c      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <HAL_DMA_Init+0x42c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d017      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <HAL_DMA_Init+0x430>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d012      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_DMA_Init+0x434>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb8 <HAL_DMA_Init+0x438>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a18      	ldr	r2, [pc, #96]	@ (8001fbc <HAL_DMA_Init+0x43c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <HAL_DMA_Init+0x3e6>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <HAL_DMA_Init+0x440>)
 8001f64:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_DMA_Init+0x444>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b40      	cmp	r3, #64	@ 0x40
 8001f8c:	d01c      	beq.n	8001fc8 <HAL_DMA_Init+0x448>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b80      	cmp	r3, #128	@ 0x80
 8001f94:	d102      	bne.n	8001f9c <HAL_DMA_Init+0x41c>
 8001f96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f9a:	e016      	b.n	8001fca <HAL_DMA_Init+0x44a>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e014      	b.n	8001fca <HAL_DMA_Init+0x44a>
 8001fa0:	fe10803f 	.word	0xfe10803f
 8001fa4:	58025408 	.word	0x58025408
 8001fa8:	5802541c 	.word	0x5802541c
 8001fac:	58025430 	.word	0x58025430
 8001fb0:	58025444 	.word	0x58025444
 8001fb4:	58025458 	.word	0x58025458
 8001fb8:	5802546c 	.word	0x5802546c
 8001fbc:	58025480 	.word	0x58025480
 8001fc0:	58025494 	.word	0x58025494
 8001fc4:	fffe000f 	.word	0xfffe000f
 8001fc8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68d2      	ldr	r2, [r2, #12]
 8001fce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fe0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fe8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ff8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b6e      	ldr	r3, [pc, #440]	@ (80021c8 <HAL_DMA_Init+0x648>)
 8002010:	4413      	add	r3, r2
 8002012:	4a6e      	ldr	r2, [pc, #440]	@ (80021cc <HAL_DMA_Init+0x64c>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	009a      	lsls	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f002 f9a9 	bl	8004378 <DMA_CalcBaseAndBitshift>
 8002026:	4603      	mov	r3, r0
 8002028:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2201      	movs	r2, #1
 8002034:	409a      	lsls	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e008      	b.n	800204e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2240      	movs	r2, #64	@ 0x40
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0b7      	b.n	80021be <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a5f      	ldr	r2, [pc, #380]	@ (80021d0 <HAL_DMA_Init+0x650>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d072      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a5d      	ldr	r2, [pc, #372]	@ (80021d4 <HAL_DMA_Init+0x654>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d06d      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5c      	ldr	r2, [pc, #368]	@ (80021d8 <HAL_DMA_Init+0x658>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d068      	beq.n	800213e <HAL_DMA_Init+0x5be>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a5a      	ldr	r2, [pc, #360]	@ (80021dc <HAL_DMA_Init+0x65c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d063      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a59      	ldr	r2, [pc, #356]	@ (80021e0 <HAL_DMA_Init+0x660>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d05e      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a57      	ldr	r2, [pc, #348]	@ (80021e4 <HAL_DMA_Init+0x664>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d059      	beq.n	800213e <HAL_DMA_Init+0x5be>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a56      	ldr	r2, [pc, #344]	@ (80021e8 <HAL_DMA_Init+0x668>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d054      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a54      	ldr	r2, [pc, #336]	@ (80021ec <HAL_DMA_Init+0x66c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d04f      	beq.n	800213e <HAL_DMA_Init+0x5be>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a53      	ldr	r2, [pc, #332]	@ (80021f0 <HAL_DMA_Init+0x670>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d04a      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a51      	ldr	r2, [pc, #324]	@ (80021f4 <HAL_DMA_Init+0x674>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d045      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a50      	ldr	r2, [pc, #320]	@ (80021f8 <HAL_DMA_Init+0x678>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d040      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	@ (80021fc <HAL_DMA_Init+0x67c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d03b      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002200 <HAL_DMA_Init+0x680>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d036      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002204 <HAL_DMA_Init+0x684>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d031      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_DMA_Init+0x688>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d02c      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a48      	ldr	r2, [pc, #288]	@ (800220c <HAL_DMA_Init+0x68c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d027      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <HAL_DMA_Init+0x690>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d022      	beq.n	800213e <HAL_DMA_Init+0x5be>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a45      	ldr	r2, [pc, #276]	@ (8002214 <HAL_DMA_Init+0x694>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01d      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a44      	ldr	r2, [pc, #272]	@ (8002218 <HAL_DMA_Init+0x698>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d018      	beq.n	800213e <HAL_DMA_Init+0x5be>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a42      	ldr	r2, [pc, #264]	@ (800221c <HAL_DMA_Init+0x69c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a41      	ldr	r2, [pc, #260]	@ (8002220 <HAL_DMA_Init+0x6a0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a3f      	ldr	r2, [pc, #252]	@ (8002224 <HAL_DMA_Init+0x6a4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_DMA_Init+0x5be>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3e      	ldr	r2, [pc, #248]	@ (8002228 <HAL_DMA_Init+0x6a8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Init+0x5be>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <HAL_DMA_Init+0x6ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_DMA_Init+0x5c2>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_DMA_Init+0x5c4>
 8002142:	2300      	movs	r3, #0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d032      	beq.n	80021ae <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f002 fa43 	bl	80045d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b80      	cmp	r3, #128	@ 0x80
 8002154:	d102      	bne.n	800215c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002170:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_DMA_Init+0x61c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b08      	cmp	r3, #8
 8002180:	d80c      	bhi.n	800219c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f002 fac0 	bl	8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	e008      	b.n	80021ae <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	a7fdabf8 	.word	0xa7fdabf8
 80021cc:	cccccccd 	.word	0xcccccccd
 80021d0:	40020010 	.word	0x40020010
 80021d4:	40020028 	.word	0x40020028
 80021d8:	40020040 	.word	0x40020040
 80021dc:	40020058 	.word	0x40020058
 80021e0:	40020070 	.word	0x40020070
 80021e4:	40020088 	.word	0x40020088
 80021e8:	400200a0 	.word	0x400200a0
 80021ec:	400200b8 	.word	0x400200b8
 80021f0:	40020410 	.word	0x40020410
 80021f4:	40020428 	.word	0x40020428
 80021f8:	40020440 	.word	0x40020440
 80021fc:	40020458 	.word	0x40020458
 8002200:	40020470 	.word	0x40020470
 8002204:	40020488 	.word	0x40020488
 8002208:	400204a0 	.word	0x400204a0
 800220c:	400204b8 	.word	0x400204b8
 8002210:	58025408 	.word	0x58025408
 8002214:	5802541c 	.word	0x5802541c
 8002218:	58025430 	.word	0x58025430
 800221c:	58025444 	.word	0x58025444
 8002220:	58025458 	.word	0x58025458
 8002224:	5802546c 	.word	0x5802546c
 8002228:	58025480 	.word	0x58025480
 800222c:	58025494 	.word	0x58025494

08002230 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e226      	b.n	800269a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_DMA_Start_IT+0x2a>
 8002256:	2302      	movs	r3, #2
 8002258:	e21f      	b.n	800269a <HAL_DMA_Start_IT+0x46a>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 820a 	bne.w	8002684 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a68      	ldr	r2, [pc, #416]	@ (8002424 <HAL_DMA_Start_IT+0x1f4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d04a      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a66      	ldr	r2, [pc, #408]	@ (8002428 <HAL_DMA_Start_IT+0x1f8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d045      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a65      	ldr	r2, [pc, #404]	@ (800242c <HAL_DMA_Start_IT+0x1fc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d040      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a63      	ldr	r2, [pc, #396]	@ (8002430 <HAL_DMA_Start_IT+0x200>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d03b      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a62      	ldr	r2, [pc, #392]	@ (8002434 <HAL_DMA_Start_IT+0x204>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d036      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a60      	ldr	r2, [pc, #384]	@ (8002438 <HAL_DMA_Start_IT+0x208>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a5f      	ldr	r2, [pc, #380]	@ (800243c <HAL_DMA_Start_IT+0x20c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d02c      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002440 <HAL_DMA_Start_IT+0x210>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d027      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002444 <HAL_DMA_Start_IT+0x214>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d022      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002448 <HAL_DMA_Start_IT+0x218>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01d      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a59      	ldr	r2, [pc, #356]	@ (800244c <HAL_DMA_Start_IT+0x21c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d018      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <HAL_DMA_Start_IT+0x220>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a56      	ldr	r2, [pc, #344]	@ (8002454 <HAL_DMA_Start_IT+0x224>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00e      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a54      	ldr	r2, [pc, #336]	@ (8002458 <HAL_DMA_Start_IT+0x228>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a53      	ldr	r2, [pc, #332]	@ (800245c <HAL_DMA_Start_IT+0x22c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_DMA_Start_IT+0xee>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a51      	ldr	r2, [pc, #324]	@ (8002460 <HAL_DMA_Start_IT+0x230>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d108      	bne.n	8002330 <HAL_DMA_Start_IT+0x100>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e007      	b.n	8002340 <HAL_DMA_Start_IT+0x110>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f001 fe6a 	bl	8004020 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a34      	ldr	r2, [pc, #208]	@ (8002424 <HAL_DMA_Start_IT+0x1f4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d04a      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a33      	ldr	r2, [pc, #204]	@ (8002428 <HAL_DMA_Start_IT+0x1f8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d045      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a31      	ldr	r2, [pc, #196]	@ (800242c <HAL_DMA_Start_IT+0x1fc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d040      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a30      	ldr	r2, [pc, #192]	@ (8002430 <HAL_DMA_Start_IT+0x200>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d03b      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2e      	ldr	r2, [pc, #184]	@ (8002434 <HAL_DMA_Start_IT+0x204>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d036      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2d      	ldr	r2, [pc, #180]	@ (8002438 <HAL_DMA_Start_IT+0x208>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d031      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_DMA_Start_IT+0x20c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02c      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2a      	ldr	r2, [pc, #168]	@ (8002440 <HAL_DMA_Start_IT+0x210>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d027      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <HAL_DMA_Start_IT+0x214>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d022      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a27      	ldr	r2, [pc, #156]	@ (8002448 <HAL_DMA_Start_IT+0x218>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d01d      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a25      	ldr	r2, [pc, #148]	@ (800244c <HAL_DMA_Start_IT+0x21c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d018      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <HAL_DMA_Start_IT+0x220>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_DMA_Start_IT+0x224>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00e      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <HAL_DMA_Start_IT+0x228>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1f      	ldr	r2, [pc, #124]	@ (800245c <HAL_DMA_Start_IT+0x22c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_Start_IT+0x1bc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002460 <HAL_DMA_Start_IT+0x230>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Start_IT+0x1c0>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_DMA_Start_IT+0x1c2>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d036      	beq.n	8002464 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 021e 	bic.w	r2, r3, #30
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0216 	orr.w	r2, r2, #22
 8002408:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03e      	beq.n	8002490 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e035      	b.n	8002490 <HAL_DMA_Start_IT+0x260>
 8002424:	40020010 	.word	0x40020010
 8002428:	40020028 	.word	0x40020028
 800242c:	40020040 	.word	0x40020040
 8002430:	40020058 	.word	0x40020058
 8002434:	40020070 	.word	0x40020070
 8002438:	40020088 	.word	0x40020088
 800243c:	400200a0 	.word	0x400200a0
 8002440:	400200b8 	.word	0x400200b8
 8002444:	40020410 	.word	0x40020410
 8002448:	40020428 	.word	0x40020428
 800244c:	40020440 	.word	0x40020440
 8002450:	40020458 	.word	0x40020458
 8002454:	40020470 	.word	0x40020470
 8002458:	40020488 	.word	0x40020488
 800245c:	400204a0 	.word	0x400204a0
 8002460:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020e 	bic.w	r2, r3, #14
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 020a 	orr.w	r2, r2, #10
 8002476:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0204 	orr.w	r2, r2, #4
 800248e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a83      	ldr	r2, [pc, #524]	@ (80026a4 <HAL_DMA_Start_IT+0x474>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d072      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a82      	ldr	r2, [pc, #520]	@ (80026a8 <HAL_DMA_Start_IT+0x478>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d06d      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a80      	ldr	r2, [pc, #512]	@ (80026ac <HAL_DMA_Start_IT+0x47c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d068      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7f      	ldr	r2, [pc, #508]	@ (80026b0 <HAL_DMA_Start_IT+0x480>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d063      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a7d      	ldr	r2, [pc, #500]	@ (80026b4 <HAL_DMA_Start_IT+0x484>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d05e      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7c      	ldr	r2, [pc, #496]	@ (80026b8 <HAL_DMA_Start_IT+0x488>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d059      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a7a      	ldr	r2, [pc, #488]	@ (80026bc <HAL_DMA_Start_IT+0x48c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d054      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a79      	ldr	r2, [pc, #484]	@ (80026c0 <HAL_DMA_Start_IT+0x490>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d04f      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a77      	ldr	r2, [pc, #476]	@ (80026c4 <HAL_DMA_Start_IT+0x494>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d04a      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a76      	ldr	r2, [pc, #472]	@ (80026c8 <HAL_DMA_Start_IT+0x498>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d045      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a74      	ldr	r2, [pc, #464]	@ (80026cc <HAL_DMA_Start_IT+0x49c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d040      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a73      	ldr	r2, [pc, #460]	@ (80026d0 <HAL_DMA_Start_IT+0x4a0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d03b      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a71      	ldr	r2, [pc, #452]	@ (80026d4 <HAL_DMA_Start_IT+0x4a4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d036      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a70      	ldr	r2, [pc, #448]	@ (80026d8 <HAL_DMA_Start_IT+0x4a8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d031      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6e      	ldr	r2, [pc, #440]	@ (80026dc <HAL_DMA_Start_IT+0x4ac>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02c      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6d      	ldr	r2, [pc, #436]	@ (80026e0 <HAL_DMA_Start_IT+0x4b0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d027      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6b      	ldr	r2, [pc, #428]	@ (80026e4 <HAL_DMA_Start_IT+0x4b4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d022      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6a      	ldr	r2, [pc, #424]	@ (80026e8 <HAL_DMA_Start_IT+0x4b8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d01d      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a68      	ldr	r2, [pc, #416]	@ (80026ec <HAL_DMA_Start_IT+0x4bc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d018      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a67      	ldr	r2, [pc, #412]	@ (80026f0 <HAL_DMA_Start_IT+0x4c0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d013      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a65      	ldr	r2, [pc, #404]	@ (80026f4 <HAL_DMA_Start_IT+0x4c4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00e      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a64      	ldr	r2, [pc, #400]	@ (80026f8 <HAL_DMA_Start_IT+0x4c8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a62      	ldr	r2, [pc, #392]	@ (80026fc <HAL_DMA_Start_IT+0x4cc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_DMA_Start_IT+0x350>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a61      	ldr	r2, [pc, #388]	@ (8002700 <HAL_DMA_Start_IT+0x4d0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Start_IT+0x354>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_DMA_Start_IT+0x356>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01a      	beq.n	80025c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a37      	ldr	r2, [pc, #220]	@ (80026a4 <HAL_DMA_Start_IT+0x474>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d04a      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <HAL_DMA_Start_IT+0x478>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d045      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a34      	ldr	r2, [pc, #208]	@ (80026ac <HAL_DMA_Start_IT+0x47c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d040      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a33      	ldr	r2, [pc, #204]	@ (80026b0 <HAL_DMA_Start_IT+0x480>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d03b      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a31      	ldr	r2, [pc, #196]	@ (80026b4 <HAL_DMA_Start_IT+0x484>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d036      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a30      	ldr	r2, [pc, #192]	@ (80026b8 <HAL_DMA_Start_IT+0x488>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d031      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2e      	ldr	r2, [pc, #184]	@ (80026bc <HAL_DMA_Start_IT+0x48c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02c      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <HAL_DMA_Start_IT+0x490>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d027      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2b      	ldr	r2, [pc, #172]	@ (80026c4 <HAL_DMA_Start_IT+0x494>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d022      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a2a      	ldr	r2, [pc, #168]	@ (80026c8 <HAL_DMA_Start_IT+0x498>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d01d      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a28      	ldr	r2, [pc, #160]	@ (80026cc <HAL_DMA_Start_IT+0x49c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d018      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a27      	ldr	r2, [pc, #156]	@ (80026d0 <HAL_DMA_Start_IT+0x4a0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a25      	ldr	r2, [pc, #148]	@ (80026d4 <HAL_DMA_Start_IT+0x4a4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a24      	ldr	r2, [pc, #144]	@ (80026d8 <HAL_DMA_Start_IT+0x4a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_DMA_Start_IT+0x4ac>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_DMA_Start_IT+0x430>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_DMA_Start_IT+0x4b0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <HAL_DMA_Start_IT+0x442>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e012      	b.n	8002698 <HAL_DMA_Start_IT+0x468>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e009      	b.n	8002698 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	40020058 	.word	0x40020058
 80026b4:	40020070 	.word	0x40020070
 80026b8:	40020088 	.word	0x40020088
 80026bc:	400200a0 	.word	0x400200a0
 80026c0:	400200b8 	.word	0x400200b8
 80026c4:	40020410 	.word	0x40020410
 80026c8:	40020428 	.word	0x40020428
 80026cc:	40020440 	.word	0x40020440
 80026d0:	40020458 	.word	0x40020458
 80026d4:	40020470 	.word	0x40020470
 80026d8:	40020488 	.word	0x40020488
 80026dc:	400204a0 	.word	0x400204a0
 80026e0:	400204b8 	.word	0x400204b8
 80026e4:	58025408 	.word	0x58025408
 80026e8:	5802541c 	.word	0x5802541c
 80026ec:	58025430 	.word	0x58025430
 80026f0:	58025444 	.word	0x58025444
 80026f4:	58025458 	.word	0x58025458
 80026f8:	5802546c 	.word	0x5802546c
 80026fc:	58025480 	.word	0x58025480
 8002700:	58025494 	.word	0x58025494

08002704 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800270c:	f7fe fe7a 	bl	8001404 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e2dc      	b.n	8002cd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d008      	beq.n	800273a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e2cd      	b.n	8002cd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a76      	ldr	r2, [pc, #472]	@ (8002918 <HAL_DMA_Abort+0x214>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04a      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a74      	ldr	r2, [pc, #464]	@ (800291c <HAL_DMA_Abort+0x218>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d045      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a73      	ldr	r2, [pc, #460]	@ (8002920 <HAL_DMA_Abort+0x21c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d040      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a71      	ldr	r2, [pc, #452]	@ (8002924 <HAL_DMA_Abort+0x220>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d03b      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a70      	ldr	r2, [pc, #448]	@ (8002928 <HAL_DMA_Abort+0x224>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d036      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6e      	ldr	r2, [pc, #440]	@ (800292c <HAL_DMA_Abort+0x228>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d031      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6d      	ldr	r2, [pc, #436]	@ (8002930 <HAL_DMA_Abort+0x22c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d02c      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a6b      	ldr	r2, [pc, #428]	@ (8002934 <HAL_DMA_Abort+0x230>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d027      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a6a      	ldr	r2, [pc, #424]	@ (8002938 <HAL_DMA_Abort+0x234>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d022      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a68      	ldr	r2, [pc, #416]	@ (800293c <HAL_DMA_Abort+0x238>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d01d      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a67      	ldr	r2, [pc, #412]	@ (8002940 <HAL_DMA_Abort+0x23c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d018      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a65      	ldr	r2, [pc, #404]	@ (8002944 <HAL_DMA_Abort+0x240>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a64      	ldr	r2, [pc, #400]	@ (8002948 <HAL_DMA_Abort+0x244>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00e      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a62      	ldr	r2, [pc, #392]	@ (800294c <HAL_DMA_Abort+0x248>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d009      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a61      	ldr	r2, [pc, #388]	@ (8002950 <HAL_DMA_Abort+0x24c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_DMA_Abort+0xd6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a5f      	ldr	r2, [pc, #380]	@ (8002954 <HAL_DMA_Abort+0x250>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_DMA_Abort+0xda>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_Abort+0xdc>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 021e 	bic.w	r2, r2, #30
 80027f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002802:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e00a      	b.n	8002822 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 020e 	bic.w	r2, r2, #14
 800281a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a3c      	ldr	r2, [pc, #240]	@ (8002918 <HAL_DMA_Abort+0x214>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d072      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a3a      	ldr	r2, [pc, #232]	@ (800291c <HAL_DMA_Abort+0x218>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d06d      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a39      	ldr	r2, [pc, #228]	@ (8002920 <HAL_DMA_Abort+0x21c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d068      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a37      	ldr	r2, [pc, #220]	@ (8002924 <HAL_DMA_Abort+0x220>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d063      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a36      	ldr	r2, [pc, #216]	@ (8002928 <HAL_DMA_Abort+0x224>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d05e      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a34      	ldr	r2, [pc, #208]	@ (800292c <HAL_DMA_Abort+0x228>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d059      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a33      	ldr	r2, [pc, #204]	@ (8002930 <HAL_DMA_Abort+0x22c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d054      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a31      	ldr	r2, [pc, #196]	@ (8002934 <HAL_DMA_Abort+0x230>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d04f      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a30      	ldr	r2, [pc, #192]	@ (8002938 <HAL_DMA_Abort+0x234>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d04a      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2e      	ldr	r2, [pc, #184]	@ (800293c <HAL_DMA_Abort+0x238>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d045      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2d      	ldr	r2, [pc, #180]	@ (8002940 <HAL_DMA_Abort+0x23c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d040      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2b      	ldr	r2, [pc, #172]	@ (8002944 <HAL_DMA_Abort+0x240>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d03b      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2a      	ldr	r2, [pc, #168]	@ (8002948 <HAL_DMA_Abort+0x244>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d036      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a28      	ldr	r2, [pc, #160]	@ (800294c <HAL_DMA_Abort+0x248>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d031      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a27      	ldr	r2, [pc, #156]	@ (8002950 <HAL_DMA_Abort+0x24c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d02c      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a25      	ldr	r2, [pc, #148]	@ (8002954 <HAL_DMA_Abort+0x250>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d027      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a24      	ldr	r2, [pc, #144]	@ (8002958 <HAL_DMA_Abort+0x254>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a22      	ldr	r2, [pc, #136]	@ (800295c <HAL_DMA_Abort+0x258>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01d      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	@ (8002960 <HAL_DMA_Abort+0x25c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d018      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002964 <HAL_DMA_Abort+0x260>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002968 <HAL_DMA_Abort+0x264>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00e      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	@ (800296c <HAL_DMA_Abort+0x268>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_DMA_Abort+0x26c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d004      	beq.n	8002912 <HAL_DMA_Abort+0x20e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	@ (8002974 <HAL_DMA_Abort+0x270>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d132      	bne.n	8002978 <HAL_DMA_Abort+0x274>
 8002912:	2301      	movs	r3, #1
 8002914:	e031      	b.n	800297a <HAL_DMA_Abort+0x276>
 8002916:	bf00      	nop
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	40020040 	.word	0x40020040
 8002924:	40020058 	.word	0x40020058
 8002928:	40020070 	.word	0x40020070
 800292c:	40020088 	.word	0x40020088
 8002930:	400200a0 	.word	0x400200a0
 8002934:	400200b8 	.word	0x400200b8
 8002938:	40020410 	.word	0x40020410
 800293c:	40020428 	.word	0x40020428
 8002940:	40020440 	.word	0x40020440
 8002944:	40020458 	.word	0x40020458
 8002948:	40020470 	.word	0x40020470
 800294c:	40020488 	.word	0x40020488
 8002950:	400204a0 	.word	0x400204a0
 8002954:	400204b8 	.word	0x400204b8
 8002958:	58025408 	.word	0x58025408
 800295c:	5802541c 	.word	0x5802541c
 8002960:	58025430 	.word	0x58025430
 8002964:	58025444 	.word	0x58025444
 8002968:	58025458 	.word	0x58025458
 800296c:	5802546c 	.word	0x5802546c
 8002970:	58025480 	.word	0x58025480
 8002974:	58025494 	.word	0x58025494
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800298c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6d      	ldr	r2, [pc, #436]	@ (8002b48 <HAL_DMA_Abort+0x444>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04a      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6b      	ldr	r2, [pc, #428]	@ (8002b4c <HAL_DMA_Abort+0x448>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d045      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002b50 <HAL_DMA_Abort+0x44c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a68      	ldr	r2, [pc, #416]	@ (8002b54 <HAL_DMA_Abort+0x450>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d03b      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a67      	ldr	r2, [pc, #412]	@ (8002b58 <HAL_DMA_Abort+0x454>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d036      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a65      	ldr	r2, [pc, #404]	@ (8002b5c <HAL_DMA_Abort+0x458>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a64      	ldr	r2, [pc, #400]	@ (8002b60 <HAL_DMA_Abort+0x45c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d02c      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a62      	ldr	r2, [pc, #392]	@ (8002b64 <HAL_DMA_Abort+0x460>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a61      	ldr	r2, [pc, #388]	@ (8002b68 <HAL_DMA_Abort+0x464>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a5f      	ldr	r2, [pc, #380]	@ (8002b6c <HAL_DMA_Abort+0x468>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b70 <HAL_DMA_Abort+0x46c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5c      	ldr	r2, [pc, #368]	@ (8002b74 <HAL_DMA_Abort+0x470>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002b78 <HAL_DMA_Abort+0x474>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a59      	ldr	r2, [pc, #356]	@ (8002b7c <HAL_DMA_Abort+0x478>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a58      	ldr	r2, [pc, #352]	@ (8002b80 <HAL_DMA_Abort+0x47c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort+0x32a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a56      	ldr	r2, [pc, #344]	@ (8002b84 <HAL_DMA_Abort+0x480>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <HAL_DMA_Abort+0x33c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e007      	b.n	8002a50 <HAL_DMA_Abort+0x34c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a50:	e013      	b.n	8002a7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a52:	f7fe fcd7 	bl	8001404 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b05      	cmp	r3, #5
 8002a5e:	d90c      	bls.n	8002a7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e12d      	b.n	8002cd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e5      	bne.n	8002a52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b48 <HAL_DMA_Abort+0x444>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d04a      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2d      	ldr	r2, [pc, #180]	@ (8002b4c <HAL_DMA_Abort+0x448>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d045      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b50 <HAL_DMA_Abort+0x44c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d040      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <HAL_DMA_Abort+0x450>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d03b      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a29      	ldr	r2, [pc, #164]	@ (8002b58 <HAL_DMA_Abort+0x454>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d036      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a27      	ldr	r2, [pc, #156]	@ (8002b5c <HAL_DMA_Abort+0x458>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d031      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a26      	ldr	r2, [pc, #152]	@ (8002b60 <HAL_DMA_Abort+0x45c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d02c      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a24      	ldr	r2, [pc, #144]	@ (8002b64 <HAL_DMA_Abort+0x460>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d027      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a23      	ldr	r2, [pc, #140]	@ (8002b68 <HAL_DMA_Abort+0x464>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <HAL_DMA_Abort+0x468>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01d      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a20      	ldr	r2, [pc, #128]	@ (8002b70 <HAL_DMA_Abort+0x46c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d018      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_DMA_Abort+0x470>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1d      	ldr	r2, [pc, #116]	@ (8002b78 <HAL_DMA_Abort+0x474>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b7c <HAL_DMA_Abort+0x478>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <HAL_DMA_Abort+0x47c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_Abort+0x422>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <HAL_DMA_Abort+0x480>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d101      	bne.n	8002b2a <HAL_DMA_Abort+0x426>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_Abort+0x428>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d02b      	beq.n	8002b88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	223f      	movs	r2, #63	@ 0x3f
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	e02a      	b.n	8002b9e <HAL_DMA_Abort+0x49a>
 8002b48:	40020010 	.word	0x40020010
 8002b4c:	40020028 	.word	0x40020028
 8002b50:	40020040 	.word	0x40020040
 8002b54:	40020058 	.word	0x40020058
 8002b58:	40020070 	.word	0x40020070
 8002b5c:	40020088 	.word	0x40020088
 8002b60:	400200a0 	.word	0x400200a0
 8002b64:	400200b8 	.word	0x400200b8
 8002b68:	40020410 	.word	0x40020410
 8002b6c:	40020428 	.word	0x40020428
 8002b70:	40020440 	.word	0x40020440
 8002b74:	40020458 	.word	0x40020458
 8002b78:	40020470 	.word	0x40020470
 8002b7c:	40020488 	.word	0x40020488
 8002b80:	400204a0 	.word	0x400204a0
 8002b84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2201      	movs	r2, #1
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce0 <HAL_DMA_Abort+0x5dc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d072      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce4 <HAL_DMA_Abort+0x5e0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d06d      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce8 <HAL_DMA_Abort+0x5e4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d068      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002cec <HAL_DMA_Abort+0x5e8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d063      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a49      	ldr	r2, [pc, #292]	@ (8002cf0 <HAL_DMA_Abort+0x5ec>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d05e      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a47      	ldr	r2, [pc, #284]	@ (8002cf4 <HAL_DMA_Abort+0x5f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d059      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a46      	ldr	r2, [pc, #280]	@ (8002cf8 <HAL_DMA_Abort+0x5f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d054      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a44      	ldr	r2, [pc, #272]	@ (8002cfc <HAL_DMA_Abort+0x5f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d04f      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a43      	ldr	r2, [pc, #268]	@ (8002d00 <HAL_DMA_Abort+0x5fc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04a      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a41      	ldr	r2, [pc, #260]	@ (8002d04 <HAL_DMA_Abort+0x600>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d045      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a40      	ldr	r2, [pc, #256]	@ (8002d08 <HAL_DMA_Abort+0x604>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d040      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3e      	ldr	r2, [pc, #248]	@ (8002d0c <HAL_DMA_Abort+0x608>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d03b      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d10 <HAL_DMA_Abort+0x60c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d036      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a3b      	ldr	r2, [pc, #236]	@ (8002d14 <HAL_DMA_Abort+0x610>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d031      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d18 <HAL_DMA_Abort+0x614>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02c      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a38      	ldr	r2, [pc, #224]	@ (8002d1c <HAL_DMA_Abort+0x618>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d027      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a37      	ldr	r2, [pc, #220]	@ (8002d20 <HAL_DMA_Abort+0x61c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a35      	ldr	r2, [pc, #212]	@ (8002d24 <HAL_DMA_Abort+0x620>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a34      	ldr	r2, [pc, #208]	@ (8002d28 <HAL_DMA_Abort+0x624>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a32      	ldr	r2, [pc, #200]	@ (8002d2c <HAL_DMA_Abort+0x628>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a31      	ldr	r2, [pc, #196]	@ (8002d30 <HAL_DMA_Abort+0x62c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2f      	ldr	r2, [pc, #188]	@ (8002d34 <HAL_DMA_Abort+0x630>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d38 <HAL_DMA_Abort+0x634>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_DMA_Abort+0x58a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <HAL_DMA_Abort+0x638>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA_Abort+0x58e>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_Abort+0x590>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ca0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40020010 	.word	0x40020010
 8002ce4:	40020028 	.word	0x40020028
 8002ce8:	40020040 	.word	0x40020040
 8002cec:	40020058 	.word	0x40020058
 8002cf0:	40020070 	.word	0x40020070
 8002cf4:	40020088 	.word	0x40020088
 8002cf8:	400200a0 	.word	0x400200a0
 8002cfc:	400200b8 	.word	0x400200b8
 8002d00:	40020410 	.word	0x40020410
 8002d04:	40020428 	.word	0x40020428
 8002d08:	40020440 	.word	0x40020440
 8002d0c:	40020458 	.word	0x40020458
 8002d10:	40020470 	.word	0x40020470
 8002d14:	40020488 	.word	0x40020488
 8002d18:	400204a0 	.word	0x400204a0
 8002d1c:	400204b8 	.word	0x400204b8
 8002d20:	58025408 	.word	0x58025408
 8002d24:	5802541c 	.word	0x5802541c
 8002d28:	58025430 	.word	0x58025430
 8002d2c:	58025444 	.word	0x58025444
 8002d30:	58025458 	.word	0x58025458
 8002d34:	5802546c 	.word	0x5802546c
 8002d38:	58025480 	.word	0x58025480
 8002d3c:	58025494 	.word	0x58025494

08002d40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e237      	b.n	80031c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d004      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2280      	movs	r2, #128	@ 0x80
 8002d62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e22c      	b.n	80031c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1a0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d04a      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ee4 <HAL_DMA_Abort_IT+0x1a4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d045      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a59      	ldr	r2, [pc, #356]	@ (8002ee8 <HAL_DMA_Abort_IT+0x1a8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d040      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_DMA_Abort_IT+0x1ac>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d03b      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a56      	ldr	r2, [pc, #344]	@ (8002ef0 <HAL_DMA_Abort_IT+0x1b0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d036      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a55      	ldr	r2, [pc, #340]	@ (8002ef4 <HAL_DMA_Abort_IT+0x1b4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d031      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a53      	ldr	r2, [pc, #332]	@ (8002ef8 <HAL_DMA_Abort_IT+0x1b8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02c      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <HAL_DMA_Abort_IT+0x1bc>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d027      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a50      	ldr	r2, [pc, #320]	@ (8002f00 <HAL_DMA_Abort_IT+0x1c0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d022      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f04 <HAL_DMA_Abort_IT+0x1c4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d01d      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_DMA_Abort_IT+0x1c8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_DMA_Abort_IT+0x1cc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d013      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	@ (8002f10 <HAL_DMA_Abort_IT+0x1d0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_DMA_Abort_IT+0x1d4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a47      	ldr	r2, [pc, #284]	@ (8002f18 <HAL_DMA_Abort_IT+0x1d8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_DMA_Abort_IT+0xc8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a46      	ldr	r2, [pc, #280]	@ (8002f1c <HAL_DMA_Abort_IT+0x1dc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d101      	bne.n	8002e0c <HAL_DMA_Abort_IT+0xcc>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_DMA_Abort_IT+0xce>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8086 	beq.w	8002f20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2204      	movs	r2, #4
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1a0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d04a      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee4 <HAL_DMA_Abort_IT+0x1a4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d045      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee8 <HAL_DMA_Abort_IT+0x1a8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d040      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <HAL_DMA_Abort_IT+0x1ac>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d03b      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a29      	ldr	r2, [pc, #164]	@ (8002ef0 <HAL_DMA_Abort_IT+0x1b0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d036      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a28      	ldr	r2, [pc, #160]	@ (8002ef4 <HAL_DMA_Abort_IT+0x1b4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d031      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ef8 <HAL_DMA_Abort_IT+0x1b8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02c      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a25      	ldr	r2, [pc, #148]	@ (8002efc <HAL_DMA_Abort_IT+0x1bc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d027      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a23      	ldr	r2, [pc, #140]	@ (8002f00 <HAL_DMA_Abort_IT+0x1c0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a22      	ldr	r2, [pc, #136]	@ (8002f04 <HAL_DMA_Abort_IT+0x1c4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a20      	ldr	r2, [pc, #128]	@ (8002f08 <HAL_DMA_Abort_IT+0x1c8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8002f0c <HAL_DMA_Abort_IT+0x1cc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_DMA_Abort_IT+0x1d0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_DMA_Abort_IT+0x1d4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1a      	ldr	r2, [pc, #104]	@ (8002f18 <HAL_DMA_Abort_IT+0x1d8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x17c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <HAL_DMA_Abort_IT+0x1dc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_Abort_IT+0x18e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e178      	b.n	80031c0 <HAL_DMA_Abort_IT+0x480>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e16f      	b.n	80031c0 <HAL_DMA_Abort_IT+0x480>
 8002ee0:	40020010 	.word	0x40020010
 8002ee4:	40020028 	.word	0x40020028
 8002ee8:	40020040 	.word	0x40020040
 8002eec:	40020058 	.word	0x40020058
 8002ef0:	40020070 	.word	0x40020070
 8002ef4:	40020088 	.word	0x40020088
 8002ef8:	400200a0 	.word	0x400200a0
 8002efc:	400200b8 	.word	0x400200b8
 8002f00:	40020410 	.word	0x40020410
 8002f04:	40020428 	.word	0x40020428
 8002f08:	40020440 	.word	0x40020440
 8002f0c:	40020458 	.word	0x40020458
 8002f10:	40020470 	.word	0x40020470
 8002f14:	40020488 	.word	0x40020488
 8002f18:	400204a0 	.word	0x400204a0
 8002f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 020e 	bic.w	r2, r2, #14
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6c      	ldr	r2, [pc, #432]	@ (80030e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d04a      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6b      	ldr	r2, [pc, #428]	@ (80030ec <HAL_DMA_Abort_IT+0x3ac>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d045      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a69      	ldr	r2, [pc, #420]	@ (80030f0 <HAL_DMA_Abort_IT+0x3b0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d040      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a68      	ldr	r2, [pc, #416]	@ (80030f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d03b      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a66      	ldr	r2, [pc, #408]	@ (80030f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d036      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a65      	ldr	r2, [pc, #404]	@ (80030fc <HAL_DMA_Abort_IT+0x3bc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d031      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a63      	ldr	r2, [pc, #396]	@ (8003100 <HAL_DMA_Abort_IT+0x3c0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02c      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a62      	ldr	r2, [pc, #392]	@ (8003104 <HAL_DMA_Abort_IT+0x3c4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d027      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a60      	ldr	r2, [pc, #384]	@ (8003108 <HAL_DMA_Abort_IT+0x3c8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800310c <HAL_DMA_Abort_IT+0x3cc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d01d      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5d      	ldr	r2, [pc, #372]	@ (8003110 <HAL_DMA_Abort_IT+0x3d0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d018      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5c      	ldr	r2, [pc, #368]	@ (8003114 <HAL_DMA_Abort_IT+0x3d4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5a      	ldr	r2, [pc, #360]	@ (8003118 <HAL_DMA_Abort_IT+0x3d8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a59      	ldr	r2, [pc, #356]	@ (800311c <HAL_DMA_Abort_IT+0x3dc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a57      	ldr	r2, [pc, #348]	@ (8003120 <HAL_DMA_Abort_IT+0x3e0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x290>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a56      	ldr	r2, [pc, #344]	@ (8003124 <HAL_DMA_Abort_IT+0x3e4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <HAL_DMA_Abort_IT+0x2a2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	e007      	b.n	8002ff2 <HAL_DMA_Abort_IT+0x2b2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a3c      	ldr	r2, [pc, #240]	@ (80030e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d072      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3a      	ldr	r2, [pc, #232]	@ (80030ec <HAL_DMA_Abort_IT+0x3ac>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d06d      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a39      	ldr	r2, [pc, #228]	@ (80030f0 <HAL_DMA_Abort_IT+0x3b0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d068      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a37      	ldr	r2, [pc, #220]	@ (80030f4 <HAL_DMA_Abort_IT+0x3b4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d063      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a36      	ldr	r2, [pc, #216]	@ (80030f8 <HAL_DMA_Abort_IT+0x3b8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d05e      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a34      	ldr	r2, [pc, #208]	@ (80030fc <HAL_DMA_Abort_IT+0x3bc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d059      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a33      	ldr	r2, [pc, #204]	@ (8003100 <HAL_DMA_Abort_IT+0x3c0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d054      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a31      	ldr	r2, [pc, #196]	@ (8003104 <HAL_DMA_Abort_IT+0x3c4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d04f      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a30      	ldr	r2, [pc, #192]	@ (8003108 <HAL_DMA_Abort_IT+0x3c8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d04a      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2e      	ldr	r2, [pc, #184]	@ (800310c <HAL_DMA_Abort_IT+0x3cc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d045      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2d      	ldr	r2, [pc, #180]	@ (8003110 <HAL_DMA_Abort_IT+0x3d0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d040      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2b      	ldr	r2, [pc, #172]	@ (8003114 <HAL_DMA_Abort_IT+0x3d4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d03b      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2a      	ldr	r2, [pc, #168]	@ (8003118 <HAL_DMA_Abort_IT+0x3d8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d036      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a28      	ldr	r2, [pc, #160]	@ (800311c <HAL_DMA_Abort_IT+0x3dc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d031      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a27      	ldr	r2, [pc, #156]	@ (8003120 <HAL_DMA_Abort_IT+0x3e0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d02c      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a25      	ldr	r2, [pc, #148]	@ (8003124 <HAL_DMA_Abort_IT+0x3e4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d027      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a24      	ldr	r2, [pc, #144]	@ (8003128 <HAL_DMA_Abort_IT+0x3e8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a22      	ldr	r2, [pc, #136]	@ (800312c <HAL_DMA_Abort_IT+0x3ec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a21      	ldr	r2, [pc, #132]	@ (8003130 <HAL_DMA_Abort_IT+0x3f0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003134 <HAL_DMA_Abort_IT+0x3f4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	@ (8003138 <HAL_DMA_Abort_IT+0x3f8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	@ (800313c <HAL_DMA_Abort_IT+0x3fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003140 <HAL_DMA_Abort_IT+0x400>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x3a2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a19      	ldr	r2, [pc, #100]	@ (8003144 <HAL_DMA_Abort_IT+0x404>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d132      	bne.n	8003148 <HAL_DMA_Abort_IT+0x408>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e031      	b.n	800314a <HAL_DMA_Abort_IT+0x40a>
 80030e6:	bf00      	nop
 80030e8:	40020010 	.word	0x40020010
 80030ec:	40020028 	.word	0x40020028
 80030f0:	40020040 	.word	0x40020040
 80030f4:	40020058 	.word	0x40020058
 80030f8:	40020070 	.word	0x40020070
 80030fc:	40020088 	.word	0x40020088
 8003100:	400200a0 	.word	0x400200a0
 8003104:	400200b8 	.word	0x400200b8
 8003108:	40020410 	.word	0x40020410
 800310c:	40020428 	.word	0x40020428
 8003110:	40020440 	.word	0x40020440
 8003114:	40020458 	.word	0x40020458
 8003118:	40020470 	.word	0x40020470
 800311c:	40020488 	.word	0x40020488
 8003120:	400204a0 	.word	0x400204a0
 8003124:	400204b8 	.word	0x400204b8
 8003128:	58025408 	.word	0x58025408
 800312c:	5802541c 	.word	0x5802541c
 8003130:	58025430 	.word	0x58025430
 8003134:	58025444 	.word	0x58025444
 8003138:	58025458 	.word	0x58025458
 800313c:	5802546c 	.word	0x5802546c
 8003140:	58025480 	.word	0x58025480
 8003144:	58025494 	.word	0x58025494
 8003148:	2300      	movs	r3, #0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d028      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800315c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800317c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003194:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800319e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop

080031cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	@ 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031d8:	4b67      	ldr	r3, [pc, #412]	@ (8003378 <HAL_DMA_IRQHandler+0x1ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a67      	ldr	r2, [pc, #412]	@ (800337c <HAL_DMA_IRQHandler+0x1b0>)
 80031de:	fba2 2303 	umull	r2, r3, r2, r3
 80031e2:	0a9b      	lsrs	r3, r3, #10
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5f      	ldr	r2, [pc, #380]	@ (8003380 <HAL_DMA_IRQHandler+0x1b4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a5d      	ldr	r2, [pc, #372]	@ (8003384 <HAL_DMA_IRQHandler+0x1b8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_DMA_IRQHandler+0x1bc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a5a      	ldr	r2, [pc, #360]	@ (800338c <HAL_DMA_IRQHandler+0x1c0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a59      	ldr	r2, [pc, #356]	@ (8003390 <HAL_DMA_IRQHandler+0x1c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a57      	ldr	r2, [pc, #348]	@ (8003394 <HAL_DMA_IRQHandler+0x1c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a56      	ldr	r2, [pc, #344]	@ (8003398 <HAL_DMA_IRQHandler+0x1cc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a54      	ldr	r2, [pc, #336]	@ (800339c <HAL_DMA_IRQHandler+0x1d0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a53      	ldr	r2, [pc, #332]	@ (80033a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a51      	ldr	r2, [pc, #324]	@ (80033a4 <HAL_DMA_IRQHandler+0x1d8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a50      	ldr	r2, [pc, #320]	@ (80033a8 <HAL_DMA_IRQHandler+0x1dc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4e      	ldr	r2, [pc, #312]	@ (80033ac <HAL_DMA_IRQHandler+0x1e0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4d      	ldr	r2, [pc, #308]	@ (80033b0 <HAL_DMA_IRQHandler+0x1e4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a4b      	ldr	r2, [pc, #300]	@ (80033b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a4a      	ldr	r2, [pc, #296]	@ (80033b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_IRQHandler+0xd2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a48      	ldr	r2, [pc, #288]	@ (80033bc <HAL_DMA_IRQHandler+0x1f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_IRQHandler+0xd6>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_IRQHandler+0xd8>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 842b 	beq.w	8003b00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80a2 	beq.w	8003404 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003380 <HAL_DMA_IRQHandler+0x1b4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d04a      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003384 <HAL_DMA_IRQHandler+0x1b8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d045      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003388 <HAL_DMA_IRQHandler+0x1bc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d040      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2a      	ldr	r2, [pc, #168]	@ (800338c <HAL_DMA_IRQHandler+0x1c0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d03b      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <HAL_DMA_IRQHandler+0x1c4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d036      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <HAL_DMA_IRQHandler+0x1c8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d031      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a25      	ldr	r2, [pc, #148]	@ (8003398 <HAL_DMA_IRQHandler+0x1cc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02c      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a24      	ldr	r2, [pc, #144]	@ (800339c <HAL_DMA_IRQHandler+0x1d0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d027      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a21      	ldr	r2, [pc, #132]	@ (80033a4 <HAL_DMA_IRQHandler+0x1d8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01d      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a1f      	ldr	r2, [pc, #124]	@ (80033a8 <HAL_DMA_IRQHandler+0x1dc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1e      	ldr	r2, [pc, #120]	@ (80033ac <HAL_DMA_IRQHandler+0x1e0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_DMA_IRQHandler+0x1e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1b      	ldr	r2, [pc, #108]	@ (80033b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_DMA_IRQHandler+0x194>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_DMA_IRQHandler+0x1f0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d12f      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x1f4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	bf14      	ite	ne
 800336e:	2301      	movne	r3, #1
 8003370:	2300      	moveq	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e02e      	b.n	80033d4 <HAL_DMA_IRQHandler+0x208>
 8003376:	bf00      	nop
 8003378:	24000004 	.word	0x24000004
 800337c:	1b4e81b5 	.word	0x1b4e81b5
 8003380:	40020010 	.word	0x40020010
 8003384:	40020028 	.word	0x40020028
 8003388:	40020040 	.word	0x40020040
 800338c:	40020058 	.word	0x40020058
 8003390:	40020070 	.word	0x40020070
 8003394:	40020088 	.word	0x40020088
 8003398:	400200a0 	.word	0x400200a0
 800339c:	400200b8 	.word	0x400200b8
 80033a0:	40020410 	.word	0x40020410
 80033a4:	40020428 	.word	0x40020428
 80033a8:	40020440 	.word	0x40020440
 80033ac:	40020458 	.word	0x40020458
 80033b0:	40020470 	.word	0x40020470
 80033b4:	40020488 	.word	0x40020488
 80033b8:	400204a0 	.word	0x400204a0
 80033bc:	400204b8 	.word	0x400204b8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0204 	bic.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2208      	movs	r2, #8
 80033f2:	409a      	lsls	r2, r3
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06e      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a69      	ldr	r2, [pc, #420]	@ (80035c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d04a      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a67      	ldr	r2, [pc, #412]	@ (80035c8 <HAL_DMA_IRQHandler+0x3fc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d045      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a66      	ldr	r2, [pc, #408]	@ (80035cc <HAL_DMA_IRQHandler+0x400>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d040      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a64      	ldr	r2, [pc, #400]	@ (80035d0 <HAL_DMA_IRQHandler+0x404>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d03b      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a63      	ldr	r2, [pc, #396]	@ (80035d4 <HAL_DMA_IRQHandler+0x408>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d036      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a61      	ldr	r2, [pc, #388]	@ (80035d8 <HAL_DMA_IRQHandler+0x40c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d031      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a60      	ldr	r2, [pc, #384]	@ (80035dc <HAL_DMA_IRQHandler+0x410>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d02c      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5e      	ldr	r2, [pc, #376]	@ (80035e0 <HAL_DMA_IRQHandler+0x414>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d027      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5d      	ldr	r2, [pc, #372]	@ (80035e4 <HAL_DMA_IRQHandler+0x418>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d022      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5b      	ldr	r2, [pc, #364]	@ (80035e8 <HAL_DMA_IRQHandler+0x41c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01d      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5a      	ldr	r2, [pc, #360]	@ (80035ec <HAL_DMA_IRQHandler+0x420>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a58      	ldr	r2, [pc, #352]	@ (80035f0 <HAL_DMA_IRQHandler+0x424>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a57      	ldr	r2, [pc, #348]	@ (80035f4 <HAL_DMA_IRQHandler+0x428>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a55      	ldr	r2, [pc, #340]	@ (80035f8 <HAL_DMA_IRQHandler+0x42c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a54      	ldr	r2, [pc, #336]	@ (80035fc <HAL_DMA_IRQHandler+0x430>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_DMA_IRQHandler+0x2ee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a52      	ldr	r2, [pc, #328]	@ (8003600 <HAL_DMA_IRQHandler+0x434>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10a      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x304>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	e003      	b.n	80034d8 <HAL_DMA_IRQHandler+0x30c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2201      	movs	r2, #1
 80034e6:	409a      	lsls	r2, r3
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	f043 0202 	orr.w	r2, r3, #2
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2204      	movs	r2, #4
 8003502:	409a      	lsls	r2, r3
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 808f 	beq.w	800362c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2c      	ldr	r2, [pc, #176]	@ (80035c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d04a      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <HAL_DMA_IRQHandler+0x3fc>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d045      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <HAL_DMA_IRQHandler+0x400>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d040      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a27      	ldr	r2, [pc, #156]	@ (80035d0 <HAL_DMA_IRQHandler+0x404>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d03b      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a26      	ldr	r2, [pc, #152]	@ (80035d4 <HAL_DMA_IRQHandler+0x408>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d036      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a24      	ldr	r2, [pc, #144]	@ (80035d8 <HAL_DMA_IRQHandler+0x40c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a23      	ldr	r2, [pc, #140]	@ (80035dc <HAL_DMA_IRQHandler+0x410>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d02c      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a21      	ldr	r2, [pc, #132]	@ (80035e0 <HAL_DMA_IRQHandler+0x414>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d027      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a20      	ldr	r2, [pc, #128]	@ (80035e4 <HAL_DMA_IRQHandler+0x418>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d022      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1e      	ldr	r2, [pc, #120]	@ (80035e8 <HAL_DMA_IRQHandler+0x41c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d01d      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <HAL_DMA_IRQHandler+0x420>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d018      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1b      	ldr	r2, [pc, #108]	@ (80035f0 <HAL_DMA_IRQHandler+0x424>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1a      	ldr	r2, [pc, #104]	@ (80035f4 <HAL_DMA_IRQHandler+0x428>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <HAL_DMA_IRQHandler+0x42c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_DMA_IRQHandler+0x430>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_DMA_IRQHandler+0x3e2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <HAL_DMA_IRQHandler+0x434>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12a      	bne.n	8003604 <HAL_DMA_IRQHandler+0x438>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e023      	b.n	800360c <HAL_DMA_IRQHandler+0x440>
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00d      	beq.n	800362c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	2204      	movs	r2, #4
 800361a:	409a      	lsls	r2, r3
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2210      	movs	r2, #16
 8003636:	409a      	lsls	r2, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a6 	beq.w	800378e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a85      	ldr	r2, [pc, #532]	@ (800385c <HAL_DMA_IRQHandler+0x690>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d04a      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a83      	ldr	r2, [pc, #524]	@ (8003860 <HAL_DMA_IRQHandler+0x694>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d045      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a82      	ldr	r2, [pc, #520]	@ (8003864 <HAL_DMA_IRQHandler+0x698>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d040      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a80      	ldr	r2, [pc, #512]	@ (8003868 <HAL_DMA_IRQHandler+0x69c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d03b      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7f      	ldr	r2, [pc, #508]	@ (800386c <HAL_DMA_IRQHandler+0x6a0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d036      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a7d      	ldr	r2, [pc, #500]	@ (8003870 <HAL_DMA_IRQHandler+0x6a4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d031      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7c      	ldr	r2, [pc, #496]	@ (8003874 <HAL_DMA_IRQHandler+0x6a8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d02c      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a7a      	ldr	r2, [pc, #488]	@ (8003878 <HAL_DMA_IRQHandler+0x6ac>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d027      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a79      	ldr	r2, [pc, #484]	@ (800387c <HAL_DMA_IRQHandler+0x6b0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a77      	ldr	r2, [pc, #476]	@ (8003880 <HAL_DMA_IRQHandler+0x6b4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01d      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a76      	ldr	r2, [pc, #472]	@ (8003884 <HAL_DMA_IRQHandler+0x6b8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d018      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a74      	ldr	r2, [pc, #464]	@ (8003888 <HAL_DMA_IRQHandler+0x6bc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a73      	ldr	r2, [pc, #460]	@ (800388c <HAL_DMA_IRQHandler+0x6c0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a71      	ldr	r2, [pc, #452]	@ (8003890 <HAL_DMA_IRQHandler+0x6c4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d009      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a70      	ldr	r2, [pc, #448]	@ (8003894 <HAL_DMA_IRQHandler+0x6c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x516>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003898 <HAL_DMA_IRQHandler+0x6cc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10a      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x52c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e009      	b.n	800370c <HAL_DMA_IRQHandler+0x540>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d03e      	beq.n	800378e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2210      	movs	r2, #16
 800371a:	409a      	lsls	r2, r3
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d108      	bne.n	800374e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d024      	beq.n	800378e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
 800374c:	e01f      	b.n	800378e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003752:	2b00      	cmp	r3, #0
 8003754:	d01b      	beq.n	800378e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
 800375e:	e016      	b.n	800378e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0208 	bic.w	r2, r2, #8
 800377c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2220      	movs	r2, #32
 8003798:	409a      	lsls	r2, r3
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8110 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2c      	ldr	r2, [pc, #176]	@ (800385c <HAL_DMA_IRQHandler+0x690>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003860 <HAL_DMA_IRQHandler+0x694>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d045      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a29      	ldr	r2, [pc, #164]	@ (8003864 <HAL_DMA_IRQHandler+0x698>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a28      	ldr	r2, [pc, #160]	@ (8003868 <HAL_DMA_IRQHandler+0x69c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03b      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a26      	ldr	r2, [pc, #152]	@ (800386c <HAL_DMA_IRQHandler+0x6a0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d036      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <HAL_DMA_IRQHandler+0x6a4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d031      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a23      	ldr	r2, [pc, #140]	@ (8003874 <HAL_DMA_IRQHandler+0x6a8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a22      	ldr	r2, [pc, #136]	@ (8003878 <HAL_DMA_IRQHandler+0x6ac>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d027      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a20      	ldr	r2, [pc, #128]	@ (800387c <HAL_DMA_IRQHandler+0x6b0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1f      	ldr	r2, [pc, #124]	@ (8003880 <HAL_DMA_IRQHandler+0x6b4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1d      	ldr	r2, [pc, #116]	@ (8003884 <HAL_DMA_IRQHandler+0x6b8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1c      	ldr	r2, [pc, #112]	@ (8003888 <HAL_DMA_IRQHandler+0x6bc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1a      	ldr	r2, [pc, #104]	@ (800388c <HAL_DMA_IRQHandler+0x6c0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a19      	ldr	r2, [pc, #100]	@ (8003890 <HAL_DMA_IRQHandler+0x6c4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a17      	ldr	r2, [pc, #92]	@ (8003894 <HAL_DMA_IRQHandler+0x6c8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_IRQHandler+0x678>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a16      	ldr	r2, [pc, #88]	@ (8003898 <HAL_DMA_IRQHandler+0x6cc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d12b      	bne.n	800389c <HAL_DMA_IRQHandler+0x6d0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	e02a      	b.n	80038b0 <HAL_DMA_IRQHandler+0x6e4>
 800385a:	bf00      	nop
 800385c:	40020010 	.word	0x40020010
 8003860:	40020028 	.word	0x40020028
 8003864:	40020040 	.word	0x40020040
 8003868:	40020058 	.word	0x40020058
 800386c:	40020070 	.word	0x40020070
 8003870:	40020088 	.word	0x40020088
 8003874:	400200a0 	.word	0x400200a0
 8003878:	400200b8 	.word	0x400200b8
 800387c:	40020410 	.word	0x40020410
 8003880:	40020428 	.word	0x40020428
 8003884:	40020440 	.word	0x40020440
 8003888:	40020458 	.word	0x40020458
 800388c:	40020470 	.word	0x40020470
 8003890:	40020488 	.word	0x40020488
 8003894:	400204a0 	.word	0x400204a0
 8003898:	400204b8 	.word	0x400204b8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8087 	beq.w	80039c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2220      	movs	r2, #32
 80038c0:	409a      	lsls	r2, r3
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d139      	bne.n	8003946 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0216 	bic.w	r2, r2, #22
 80038e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <HAL_DMA_IRQHandler+0x736>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0208 	bic.w	r2, r2, #8
 8003910:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	223f      	movs	r2, #63	@ 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 834a 	beq.w	8003fd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
          }
          return;
 8003944:	e344      	b.n	8003fd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d108      	bne.n	8003974 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	2b00      	cmp	r3, #0
 8003968:	d02c      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	e027      	b.n	80039c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d023      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
 8003984:	e01e      	b.n	80039c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10f      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0210 	bic.w	r2, r2, #16
 80039a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8306 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8088 	beq.w	8003aec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2204      	movs	r2, #4
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7a      	ldr	r2, [pc, #488]	@ (8003bd4 <HAL_DMA_IRQHandler+0xa08>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d04a      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a79      	ldr	r2, [pc, #484]	@ (8003bd8 <HAL_DMA_IRQHandler+0xa0c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d045      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a77      	ldr	r2, [pc, #476]	@ (8003bdc <HAL_DMA_IRQHandler+0xa10>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d040      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a76      	ldr	r2, [pc, #472]	@ (8003be0 <HAL_DMA_IRQHandler+0xa14>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d03b      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a74      	ldr	r2, [pc, #464]	@ (8003be4 <HAL_DMA_IRQHandler+0xa18>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d036      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a73      	ldr	r2, [pc, #460]	@ (8003be8 <HAL_DMA_IRQHandler+0xa1c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d031      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a71      	ldr	r2, [pc, #452]	@ (8003bec <HAL_DMA_IRQHandler+0xa20>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02c      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a70      	ldr	r2, [pc, #448]	@ (8003bf0 <HAL_DMA_IRQHandler+0xa24>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d027      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf4 <HAL_DMA_IRQHandler+0xa28>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d022      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6d      	ldr	r2, [pc, #436]	@ (8003bf8 <HAL_DMA_IRQHandler+0xa2c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d01d      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003bfc <HAL_DMA_IRQHandler+0xa30>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d018      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6a      	ldr	r2, [pc, #424]	@ (8003c00 <HAL_DMA_IRQHandler+0xa34>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a68      	ldr	r2, [pc, #416]	@ (8003c04 <HAL_DMA_IRQHandler+0xa38>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00e      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a67      	ldr	r2, [pc, #412]	@ (8003c08 <HAL_DMA_IRQHandler+0xa3c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a65      	ldr	r2, [pc, #404]	@ (8003c0c <HAL_DMA_IRQHandler+0xa40>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x8b8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a64      	ldr	r2, [pc, #400]	@ (8003c10 <HAL_DMA_IRQHandler+0xa44>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d108      	bne.n	8003a96 <HAL_DMA_IRQHandler+0x8ca>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e007      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x8da>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d307      	bcc.n	8003ac2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f2      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x8da>
 8003ac0:	e000      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ac2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ada:	e003      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8272 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
 8003afe:	e26c      	b.n	8003fda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a43      	ldr	r2, [pc, #268]	@ (8003c14 <HAL_DMA_IRQHandler+0xa48>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a42      	ldr	r2, [pc, #264]	@ (8003c18 <HAL_DMA_IRQHandler+0xa4c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d01d      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a40      	ldr	r2, [pc, #256]	@ (8003c1c <HAL_DMA_IRQHandler+0xa50>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3f      	ldr	r2, [pc, #252]	@ (8003c20 <HAL_DMA_IRQHandler+0xa54>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c24 <HAL_DMA_IRQHandler+0xa58>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a3c      	ldr	r2, [pc, #240]	@ (8003c28 <HAL_DMA_IRQHandler+0xa5c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a3a      	ldr	r2, [pc, #232]	@ (8003c2c <HAL_DMA_IRQHandler+0xa60>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x984>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a39      	ldr	r2, [pc, #228]	@ (8003c30 <HAL_DMA_IRQHandler+0xa64>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x988>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_DMA_IRQHandler+0x98a>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 823f 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 80cd 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xb48>
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80c7 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2204      	movs	r2, #4
 8003b90:	409a      	lsls	r2, r3
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d049      	beq.n	8003c34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8210 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbc:	e20a      	b.n	8003fd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8206 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd0:	e200      	b.n	8003fd4 <HAL_DMA_IRQHandler+0xe08>
 8003bd2:	bf00      	nop
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020040 	.word	0x40020040
 8003be0:	40020058 	.word	0x40020058
 8003be4:	40020070 	.word	0x40020070
 8003be8:	40020088 	.word	0x40020088
 8003bec:	400200a0 	.word	0x400200a0
 8003bf0:	400200b8 	.word	0x400200b8
 8003bf4:	40020410 	.word	0x40020410
 8003bf8:	40020428 	.word	0x40020428
 8003bfc:	40020440 	.word	0x40020440
 8003c00:	40020458 	.word	0x40020458
 8003c04:	40020470 	.word	0x40020470
 8003c08:	40020488 	.word	0x40020488
 8003c0c:	400204a0 	.word	0x400204a0
 8003c10:	400204b8 	.word	0x400204b8
 8003c14:	58025408 	.word	0x58025408
 8003c18:	5802541c 	.word	0x5802541c
 8003c1c:	58025430 	.word	0x58025430
 8003c20:	58025444 	.word	0x58025444
 8003c24:	58025458 	.word	0x58025458
 8003c28:	5802546c 	.word	0x5802546c
 8003c2c:	58025480 	.word	0x58025480
 8003c30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d160      	bne.n	8003d00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7f      	ldr	r2, [pc, #508]	@ (8003e40 <HAL_DMA_IRQHandler+0xc74>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e44 <HAL_DMA_IRQHandler+0xc78>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7c      	ldr	r2, [pc, #496]	@ (8003e48 <HAL_DMA_IRQHandler+0xc7c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a7a      	ldr	r2, [pc, #488]	@ (8003e4c <HAL_DMA_IRQHandler+0xc80>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a79      	ldr	r2, [pc, #484]	@ (8003e50 <HAL_DMA_IRQHandler+0xc84>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a77      	ldr	r2, [pc, #476]	@ (8003e54 <HAL_DMA_IRQHandler+0xc88>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a76      	ldr	r2, [pc, #472]	@ (8003e58 <HAL_DMA_IRQHandler+0xc8c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a74      	ldr	r2, [pc, #464]	@ (8003e5c <HAL_DMA_IRQHandler+0xc90>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a73      	ldr	r2, [pc, #460]	@ (8003e60 <HAL_DMA_IRQHandler+0xc94>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a71      	ldr	r2, [pc, #452]	@ (8003e64 <HAL_DMA_IRQHandler+0xc98>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a70      	ldr	r2, [pc, #448]	@ (8003e68 <HAL_DMA_IRQHandler+0xc9c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e6c <HAL_DMA_IRQHandler+0xca0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a6d      	ldr	r2, [pc, #436]	@ (8003e70 <HAL_DMA_IRQHandler+0xca4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8003e74 <HAL_DMA_IRQHandler+0xca8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6a      	ldr	r2, [pc, #424]	@ (8003e78 <HAL_DMA_IRQHandler+0xcac>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb12>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a68      	ldr	r2, [pc, #416]	@ (8003e7c <HAL_DMA_IRQHandler+0xcb0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0xb24>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb34>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8165 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d12:	e15f      	b.n	8003fd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80c5 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0xce8>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80bf 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2202      	movs	r2, #2
 8003d40:	409a      	lsls	r2, r3
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d018      	beq.n	8003d82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 813a 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6c:	e134      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8130 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d80:	e12a      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f040 8089 	bne.w	8003ea0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <HAL_DMA_IRQHandler+0xc74>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d04a      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <HAL_DMA_IRQHandler+0xc78>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d045      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a28      	ldr	r2, [pc, #160]	@ (8003e48 <HAL_DMA_IRQHandler+0xc7c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d040      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	@ (8003e4c <HAL_DMA_IRQHandler+0xc80>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d03b      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a25      	ldr	r2, [pc, #148]	@ (8003e50 <HAL_DMA_IRQHandler+0xc84>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d036      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	@ (8003e54 <HAL_DMA_IRQHandler+0xc88>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d031      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a22      	ldr	r2, [pc, #136]	@ (8003e58 <HAL_DMA_IRQHandler+0xc8c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d02c      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a20      	ldr	r2, [pc, #128]	@ (8003e5c <HAL_DMA_IRQHandler+0xc90>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d027      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e60 <HAL_DMA_IRQHandler+0xc94>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	@ (8003e64 <HAL_DMA_IRQHandler+0xc98>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e68 <HAL_DMA_IRQHandler+0xc9c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1a      	ldr	r2, [pc, #104]	@ (8003e6c <HAL_DMA_IRQHandler+0xca0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a19      	ldr	r2, [pc, #100]	@ (8003e70 <HAL_DMA_IRQHandler+0xca4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a17      	ldr	r2, [pc, #92]	@ (8003e74 <HAL_DMA_IRQHandler+0xca8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a16      	ldr	r2, [pc, #88]	@ (8003e78 <HAL_DMA_IRQHandler+0xcac>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_IRQHandler+0xc62>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a14      	ldr	r2, [pc, #80]	@ (8003e7c <HAL_DMA_IRQHandler+0xcb0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d128      	bne.n	8003e80 <HAL_DMA_IRQHandler+0xcb4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0214 	bic.w	r2, r2, #20
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e027      	b.n	8003e90 <HAL_DMA_IRQHandler+0xcc4>
 8003e40:	40020010 	.word	0x40020010
 8003e44:	40020028 	.word	0x40020028
 8003e48:	40020040 	.word	0x40020040
 8003e4c:	40020058 	.word	0x40020058
 8003e50:	40020070 	.word	0x40020070
 8003e54:	40020088 	.word	0x40020088
 8003e58:	400200a0 	.word	0x400200a0
 8003e5c:	400200b8 	.word	0x400200b8
 8003e60:	40020410 	.word	0x40020410
 8003e64:	40020428 	.word	0x40020428
 8003e68:	40020440 	.word	0x40020440
 8003e6c:	40020458 	.word	0x40020458
 8003e70:	40020470 	.word	0x40020470
 8003e74:	40020488 	.word	0x40020488
 8003e78:	400204a0 	.word	0x400204a0
 8003e7c:	400204b8 	.word	0x400204b8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 020a 	bic.w	r2, r2, #10
 8003e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8097 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eb2:	e091      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8088 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe0e>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8082 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a41      	ldr	r2, [pc, #260]	@ (8003fe0 <HAL_DMA_IRQHandler+0xe14>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8003fe4 <HAL_DMA_IRQHandler+0xe18>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3e      	ldr	r2, [pc, #248]	@ (8003fe8 <HAL_DMA_IRQHandler+0xe1c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fec <HAL_DMA_IRQHandler+0xe20>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff0 <HAL_DMA_IRQHandler+0xe24>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a39      	ldr	r2, [pc, #228]	@ (8003ff4 <HAL_DMA_IRQHandler+0xe28>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a38      	ldr	r2, [pc, #224]	@ (8003ff8 <HAL_DMA_IRQHandler+0xe2c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a36      	ldr	r2, [pc, #216]	@ (8003ffc <HAL_DMA_IRQHandler+0xe30>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <HAL_DMA_IRQHandler+0xe34>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a33      	ldr	r2, [pc, #204]	@ (8004004 <HAL_DMA_IRQHandler+0xe38>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <HAL_DMA_IRQHandler+0xe3c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a30      	ldr	r2, [pc, #192]	@ (800400c <HAL_DMA_IRQHandler+0xe40>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2f      	ldr	r2, [pc, #188]	@ (8004010 <HAL_DMA_IRQHandler+0xe44>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <HAL_DMA_IRQHandler+0xe48>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2c      	ldr	r2, [pc, #176]	@ (8004018 <HAL_DMA_IRQHandler+0xe4c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xdaa>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <HAL_DMA_IRQHandler+0xe50>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_IRQHandler+0xdbc>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 021c 	bic.w	r2, r2, #28
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e007      	b.n	8003f98 <HAL_DMA_IRQHandler+0xdcc>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 020e 	bic.w	r2, r2, #14
 8003f96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
 8003fce:	e004      	b.n	8003fda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003fd0:	bf00      	nop
 8003fd2:	e002      	b.n	8003fda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fda:	3728      	adds	r7, #40	@ 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40020010 	.word	0x40020010
 8003fe4:	40020028 	.word	0x40020028
 8003fe8:	40020040 	.word	0x40020040
 8003fec:	40020058 	.word	0x40020058
 8003ff0:	40020070 	.word	0x40020070
 8003ff4:	40020088 	.word	0x40020088
 8003ff8:	400200a0 	.word	0x400200a0
 8003ffc:	400200b8 	.word	0x400200b8
 8004000:	40020410 	.word	0x40020410
 8004004:	40020428 	.word	0x40020428
 8004008:	40020440 	.word	0x40020440
 800400c:	40020458 	.word	0x40020458
 8004010:	40020470 	.word	0x40020470
 8004014:	40020488 	.word	0x40020488
 8004018:	400204a0 	.word	0x400204a0
 800401c:	400204b8 	.word	0x400204b8

08004020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004032:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a7f      	ldr	r2, [pc, #508]	@ (800423c <DMA_SetConfig+0x21c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d072      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a7d      	ldr	r2, [pc, #500]	@ (8004240 <DMA_SetConfig+0x220>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d06d      	beq.n	800412a <DMA_SetConfig+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7c      	ldr	r2, [pc, #496]	@ (8004244 <DMA_SetConfig+0x224>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d068      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a7a      	ldr	r2, [pc, #488]	@ (8004248 <DMA_SetConfig+0x228>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d063      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a79      	ldr	r2, [pc, #484]	@ (800424c <DMA_SetConfig+0x22c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d05e      	beq.n	800412a <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a77      	ldr	r2, [pc, #476]	@ (8004250 <DMA_SetConfig+0x230>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d059      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a76      	ldr	r2, [pc, #472]	@ (8004254 <DMA_SetConfig+0x234>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d054      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a74      	ldr	r2, [pc, #464]	@ (8004258 <DMA_SetConfig+0x238>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d04f      	beq.n	800412a <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a73      	ldr	r2, [pc, #460]	@ (800425c <DMA_SetConfig+0x23c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d04a      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a71      	ldr	r2, [pc, #452]	@ (8004260 <DMA_SetConfig+0x240>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d045      	beq.n	800412a <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a70      	ldr	r2, [pc, #448]	@ (8004264 <DMA_SetConfig+0x244>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d040      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004268 <DMA_SetConfig+0x248>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03b      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6d      	ldr	r2, [pc, #436]	@ (800426c <DMA_SetConfig+0x24c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d036      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6b      	ldr	r2, [pc, #428]	@ (8004270 <DMA_SetConfig+0x250>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004274 <DMA_SetConfig+0x254>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d02c      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a68      	ldr	r2, [pc, #416]	@ (8004278 <DMA_SetConfig+0x258>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d027      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a67      	ldr	r2, [pc, #412]	@ (800427c <DMA_SetConfig+0x25c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a65      	ldr	r2, [pc, #404]	@ (8004280 <DMA_SetConfig+0x260>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a64      	ldr	r2, [pc, #400]	@ (8004284 <DMA_SetConfig+0x264>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a62      	ldr	r2, [pc, #392]	@ (8004288 <DMA_SetConfig+0x268>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a61      	ldr	r2, [pc, #388]	@ (800428c <DMA_SetConfig+0x26c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5f      	ldr	r2, [pc, #380]	@ (8004290 <DMA_SetConfig+0x270>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a5e      	ldr	r2, [pc, #376]	@ (8004294 <DMA_SetConfig+0x274>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5c      	ldr	r2, [pc, #368]	@ (8004298 <DMA_SetConfig+0x278>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <DMA_SetConfig+0x10e>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <DMA_SetConfig+0x110>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800413c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800414e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a39      	ldr	r2, [pc, #228]	@ (800423c <DMA_SetConfig+0x21c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d04a      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a38      	ldr	r2, [pc, #224]	@ (8004240 <DMA_SetConfig+0x220>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d045      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a36      	ldr	r2, [pc, #216]	@ (8004244 <DMA_SetConfig+0x224>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d040      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a35      	ldr	r2, [pc, #212]	@ (8004248 <DMA_SetConfig+0x228>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d03b      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a33      	ldr	r2, [pc, #204]	@ (800424c <DMA_SetConfig+0x22c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d036      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a32      	ldr	r2, [pc, #200]	@ (8004250 <DMA_SetConfig+0x230>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d031      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a30      	ldr	r2, [pc, #192]	@ (8004254 <DMA_SetConfig+0x234>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02c      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a2f      	ldr	r2, [pc, #188]	@ (8004258 <DMA_SetConfig+0x238>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d027      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <DMA_SetConfig+0x23c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <DMA_SetConfig+0x240>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01d      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004264 <DMA_SetConfig+0x244>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a29      	ldr	r2, [pc, #164]	@ (8004268 <DMA_SetConfig+0x248>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a27      	ldr	r2, [pc, #156]	@ (800426c <DMA_SetConfig+0x24c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <DMA_SetConfig+0x250>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a24      	ldr	r2, [pc, #144]	@ (8004274 <DMA_SetConfig+0x254>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a23      	ldr	r2, [pc, #140]	@ (8004278 <DMA_SetConfig+0x258>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <DMA_SetConfig+0x1d4>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <DMA_SetConfig+0x1d6>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d059      	beq.n	80042ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	223f      	movs	r2, #63	@ 0x3f
 8004204:	409a      	lsls	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004218:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b40      	cmp	r3, #64	@ 0x40
 8004228:	d138      	bne.n	800429c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800423a:	e086      	b.n	800434a <DMA_SetConfig+0x32a>
 800423c:	40020010 	.word	0x40020010
 8004240:	40020028 	.word	0x40020028
 8004244:	40020040 	.word	0x40020040
 8004248:	40020058 	.word	0x40020058
 800424c:	40020070 	.word	0x40020070
 8004250:	40020088 	.word	0x40020088
 8004254:	400200a0 	.word	0x400200a0
 8004258:	400200b8 	.word	0x400200b8
 800425c:	40020410 	.word	0x40020410
 8004260:	40020428 	.word	0x40020428
 8004264:	40020440 	.word	0x40020440
 8004268:	40020458 	.word	0x40020458
 800426c:	40020470 	.word	0x40020470
 8004270:	40020488 	.word	0x40020488
 8004274:	400204a0 	.word	0x400204a0
 8004278:	400204b8 	.word	0x400204b8
 800427c:	58025408 	.word	0x58025408
 8004280:	5802541c 	.word	0x5802541c
 8004284:	58025430 	.word	0x58025430
 8004288:	58025444 	.word	0x58025444
 800428c:	58025458 	.word	0x58025458
 8004290:	5802546c 	.word	0x5802546c
 8004294:	58025480 	.word	0x58025480
 8004298:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
}
 80042ac:	e04d      	b.n	800434a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a29      	ldr	r2, [pc, #164]	@ (8004358 <DMA_SetConfig+0x338>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d022      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a27      	ldr	r2, [pc, #156]	@ (800435c <DMA_SetConfig+0x33c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01d      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a26      	ldr	r2, [pc, #152]	@ (8004360 <DMA_SetConfig+0x340>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d018      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a24      	ldr	r2, [pc, #144]	@ (8004364 <DMA_SetConfig+0x344>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a23      	ldr	r2, [pc, #140]	@ (8004368 <DMA_SetConfig+0x348>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a21      	ldr	r2, [pc, #132]	@ (800436c <DMA_SetConfig+0x34c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a20      	ldr	r2, [pc, #128]	@ (8004370 <DMA_SetConfig+0x350>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <DMA_SetConfig+0x2de>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004374 <DMA_SetConfig+0x354>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <DMA_SetConfig+0x2e2>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <DMA_SetConfig+0x2e4>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2201      	movs	r2, #1
 8004312:	409a      	lsls	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d108      	bne.n	800433a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	60da      	str	r2, [r3, #12]
}
 8004338:	e007      	b.n	800434a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	60da      	str	r2, [r3, #12]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494

08004378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a42      	ldr	r2, [pc, #264]	@ (8004490 <DMA_CalcBaseAndBitshift+0x118>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d04a      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a41      	ldr	r2, [pc, #260]	@ (8004494 <DMA_CalcBaseAndBitshift+0x11c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d045      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3f      	ldr	r2, [pc, #252]	@ (8004498 <DMA_CalcBaseAndBitshift+0x120>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d040      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3e      	ldr	r2, [pc, #248]	@ (800449c <DMA_CalcBaseAndBitshift+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d03b      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3c      	ldr	r2, [pc, #240]	@ (80044a0 <DMA_CalcBaseAndBitshift+0x128>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d036      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3b      	ldr	r2, [pc, #236]	@ (80044a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d031      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a39      	ldr	r2, [pc, #228]	@ (80044a8 <DMA_CalcBaseAndBitshift+0x130>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02c      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a38      	ldr	r2, [pc, #224]	@ (80044ac <DMA_CalcBaseAndBitshift+0x134>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d027      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a36      	ldr	r2, [pc, #216]	@ (80044b0 <DMA_CalcBaseAndBitshift+0x138>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d022      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a35      	ldr	r2, [pc, #212]	@ (80044b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01d      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	@ (80044b8 <DMA_CalcBaseAndBitshift+0x140>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a32      	ldr	r2, [pc, #200]	@ (80044bc <DMA_CalcBaseAndBitshift+0x144>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	@ (80044c0 <DMA_CalcBaseAndBitshift+0x148>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	@ (80044c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	@ (80044c8 <DMA_CalcBaseAndBitshift+0x150>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2c      	ldr	r2, [pc, #176]	@ (80044cc <DMA_CalcBaseAndBitshift+0x154>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <DMA_CalcBaseAndBitshift+0xac>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <DMA_CalcBaseAndBitshift+0xae>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d024      	beq.n	8004474 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	3b10      	subs	r3, #16
 8004432:	4a27      	ldr	r2, [pc, #156]	@ (80044d0 <DMA_CalcBaseAndBitshift+0x158>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	4a24      	ldr	r2, [pc, #144]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d908      	bls.n	8004464 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x160>)
 800445a:	4013      	ands	r3, r2
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	659a      	str	r2, [r3, #88]	@ 0x58
 8004462:	e00d      	b.n	8004480 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x160>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6593      	str	r3, [r2, #88]	@ 0x58
 8004472:	e005      	b.n	8004480 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40020010 	.word	0x40020010
 8004494:	40020028 	.word	0x40020028
 8004498:	40020040 	.word	0x40020040
 800449c:	40020058 	.word	0x40020058
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40020088 	.word	0x40020088
 80044a8:	400200a0 	.word	0x400200a0
 80044ac:	400200b8 	.word	0x400200b8
 80044b0:	40020410 	.word	0x40020410
 80044b4:	40020428 	.word	0x40020428
 80044b8:	40020440 	.word	0x40020440
 80044bc:	40020458 	.word	0x40020458
 80044c0:	40020470 	.word	0x40020470
 80044c4:	40020488 	.word	0x40020488
 80044c8:	400204a0 	.word	0x400204a0
 80044cc:	400204b8 	.word	0x400204b8
 80044d0:	aaaaaaab 	.word	0xaaaaaaab
 80044d4:	0800ab20 	.word	0x0800ab20
 80044d8:	fffffc00 	.word	0xfffffc00

080044dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d120      	bne.n	8004532 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d858      	bhi.n	80045aa <DMA_CheckFifoParam+0xce>
 80044f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <DMA_CheckFifoParam+0x24>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004511 	.word	0x08004511
 8004504:	08004523 	.word	0x08004523
 8004508:	08004511 	.word	0x08004511
 800450c:	080045ab 	.word	0x080045ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d048      	beq.n	80045ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004520:	e045      	b.n	80045ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800452a:	d142      	bne.n	80045b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004530:	e03f      	b.n	80045b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800453a:	d123      	bne.n	8004584 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	2b03      	cmp	r3, #3
 8004542:	d838      	bhi.n	80045b6 <DMA_CheckFifoParam+0xda>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <DMA_CheckFifoParam+0x70>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004563 	.word	0x08004563
 8004554:	0800455d 	.word	0x0800455d
 8004558:	08004575 	.word	0x08004575
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
        break;
 8004560:	e030      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d025      	beq.n	80045ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004572:	e022      	b.n	80045ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800457c:	d11f      	bne.n	80045be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004582:	e01c      	b.n	80045be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <DMA_CheckFifoParam+0xb6>
 800458c:	2b03      	cmp	r3, #3
 800458e:	d003      	beq.n	8004598 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004590:	e018      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
        break;
 8004596:	e015      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
    break;
 80045a8:	e00b      	b.n	80045c2 <DMA_CheckFifoParam+0xe6>
        break;
 80045aa:	bf00      	nop
 80045ac:	e00a      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045ae:	bf00      	nop
 80045b0:	e008      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045b2:	bf00      	nop
 80045b4:	e006      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045b6:	bf00      	nop
 80045b8:	e004      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
    break;
 80045c2:	bf00      	nop
    }
  }

  return status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a38      	ldr	r2, [pc, #224]	@ (80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a36      	ldr	r2, [pc, #216]	@ (80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a35      	ldr	r2, [pc, #212]	@ (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a33      	ldr	r2, [pc, #204]	@ (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a32      	ldr	r2, [pc, #200]	@ (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a30      	ldr	r2, [pc, #192]	@ (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2f      	ldr	r2, [pc, #188]	@ (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01a      	beq.n	8004672 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3b08      	subs	r3, #8
 8004644:	4a28      	ldr	r2, [pc, #160]	@ (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4b26      	ldr	r3, [pc, #152]	@ (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a24      	ldr	r2, [pc, #144]	@ (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004660:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004670:	e024      	b.n	80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	3b10      	subs	r3, #16
 800467a:	4a1e      	ldr	r2, [pc, #120]	@ (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a1c      	ldr	r2, [pc, #112]	@ (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d806      	bhi.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a1b      	ldr	r2, [pc, #108]	@ (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d902      	bls.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3308      	adds	r3, #8
 8004698:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4b18      	ldr	r3, [pc, #96]	@ (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a16      	ldr	r2, [pc, #88]	@ (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	58025408 	.word	0x58025408
 80046cc:	5802541c 	.word	0x5802541c
 80046d0:	58025430 	.word	0x58025430
 80046d4:	58025444 	.word	0x58025444
 80046d8:	58025458 	.word	0x58025458
 80046dc:	5802546c 	.word	0x5802546c
 80046e0:	58025480 	.word	0x58025480
 80046e4:	58025494 	.word	0x58025494
 80046e8:	cccccccd 	.word	0xcccccccd
 80046ec:	16009600 	.word	0x16009600
 80046f0:	58025880 	.word	0x58025880
 80046f4:	aaaaaaab 	.word	0xaaaaaaab
 80046f8:	400204b8 	.word	0x400204b8
 80046fc:	4002040f 	.word	0x4002040f
 8004700:	10008200 	.word	0x10008200
 8004704:	40020880 	.word	0x40020880

08004708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04a      	beq.n	80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d847      	bhi.n	80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	@ (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d022      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a24      	ldr	r2, [pc, #144]	@ (80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d01d      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a22      	ldr	r2, [pc, #136]	@ (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a21      	ldr	r2, [pc, #132]	@ (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1e      	ldr	r2, [pc, #120]	@ (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1b      	ldr	r2, [pc, #108]	@ (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4b17      	ldr	r3, [pc, #92]	@ (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a15      	ldr	r2, [pc, #84]	@ (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004790:	671a      	str	r2, [r3, #112]	@ 0x70
 8004792:	e009      	b.n	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	2201      	movs	r2, #1
 80047ae:	409a      	lsls	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	58025408 	.word	0x58025408
 80047c4:	5802541c 	.word	0x5802541c
 80047c8:	58025430 	.word	0x58025430
 80047cc:	58025444 	.word	0x58025444
 80047d0:	58025458 	.word	0x58025458
 80047d4:	5802546c 	.word	0x5802546c
 80047d8:	58025480 	.word	0x58025480
 80047dc:	58025494 	.word	0x58025494
 80047e0:	1600963f 	.word	0x1600963f
 80047e4:	58025940 	.word	0x58025940
 80047e8:	1000823f 	.word	0x1000823f
 80047ec:	40020940 	.word	0x40020940

080047f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	@ 0x24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047fe:	4b86      	ldr	r3, [pc, #536]	@ (8004a18 <HAL_GPIO_Init+0x228>)
 8004800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004802:	e18c      	b.n	8004b1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2101      	movs	r1, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 817e 	beq.w	8004b18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d005      	beq.n	8004834 <HAL_GPIO_Init+0x44>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d130      	bne.n	8004896 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	2203      	movs	r2, #3
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800486a:	2201      	movs	r2, #1
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 0201 	and.w	r2, r3, #1
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d017      	beq.n	80048d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2203      	movs	r2, #3
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d123      	bne.n	8004926 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	08da      	lsrs	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3208      	adds	r2, #8
 80048e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	220f      	movs	r2, #15
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	08da      	lsrs	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3208      	adds	r2, #8
 8004920:	69b9      	ldr	r1, [r7, #24]
 8004922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	2203      	movs	r2, #3
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0203 	and.w	r2, r3, #3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80d8 	beq.w	8004b18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004968:	4b2c      	ldr	r3, [pc, #176]	@ (8004a1c <HAL_GPIO_Init+0x22c>)
 800496a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800496e:	4a2b      	ldr	r2, [pc, #172]	@ (8004a1c <HAL_GPIO_Init+0x22c>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004978:	4b28      	ldr	r3, [pc, #160]	@ (8004a1c <HAL_GPIO_Init+0x22c>)
 800497a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004986:	4a26      	ldr	r2, [pc, #152]	@ (8004a20 <HAL_GPIO_Init+0x230>)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3302      	adds	r3, #2
 800498e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4013      	ands	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <HAL_GPIO_Init+0x234>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d04a      	beq.n	8004a48 <HAL_GPIO_Init+0x258>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a28 <HAL_GPIO_Init+0x238>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02b      	beq.n	8004a12 <HAL_GPIO_Init+0x222>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a2c <HAL_GPIO_Init+0x23c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d025      	beq.n	8004a0e <HAL_GPIO_Init+0x21e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a30 <HAL_GPIO_Init+0x240>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01f      	beq.n	8004a0a <HAL_GPIO_Init+0x21a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <HAL_GPIO_Init+0x244>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d019      	beq.n	8004a06 <HAL_GPIO_Init+0x216>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <HAL_GPIO_Init+0x248>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_GPIO_Init+0x212>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a17      	ldr	r2, [pc, #92]	@ (8004a3c <HAL_GPIO_Init+0x24c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00d      	beq.n	80049fe <HAL_GPIO_Init+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a16      	ldr	r2, [pc, #88]	@ (8004a40 <HAL_GPIO_Init+0x250>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <HAL_GPIO_Init+0x20a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a15      	ldr	r2, [pc, #84]	@ (8004a44 <HAL_GPIO_Init+0x254>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d101      	bne.n	80049f6 <HAL_GPIO_Init+0x206>
 80049f2:	2309      	movs	r3, #9
 80049f4:	e029      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 80049f6:	230a      	movs	r3, #10
 80049f8:	e027      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 80049fa:	2307      	movs	r3, #7
 80049fc:	e025      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 80049fe:	2306      	movs	r3, #6
 8004a00:	e023      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e021      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 8004a06:	2304      	movs	r3, #4
 8004a08:	e01f      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e01d      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e01b      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e019      	b.n	8004a4a <HAL_GPIO_Init+0x25a>
 8004a16:	bf00      	nop
 8004a18:	58000080 	.word	0x58000080
 8004a1c:	58024400 	.word	0x58024400
 8004a20:	58000400 	.word	0x58000400
 8004a24:	58020000 	.word	0x58020000
 8004a28:	58020400 	.word	0x58020400
 8004a2c:	58020800 	.word	0x58020800
 8004a30:	58020c00 	.word	0x58020c00
 8004a34:	58021000 	.word	0x58021000
 8004a38:	58021400 	.word	0x58021400
 8004a3c:	58021800 	.word	0x58021800
 8004a40:	58021c00 	.word	0x58021c00
 8004a44:	58022400 	.word	0x58022400
 8004a48:	2300      	movs	r3, #0
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	f002 0203 	and.w	r2, r2, #3
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	4093      	lsls	r3, r2
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a5a:	4938      	ldr	r1, [pc, #224]	@ (8004b3c <HAL_GPIO_Init+0x34c>)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004abc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f ae6b 	bne.w	8004804 <HAL_GPIO_Init+0x14>
  }
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	3724      	adds	r7, #36	@ 0x24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	58000400 	.word	0x58000400

08004b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b5c:	e003      	b.n	8004b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	041a      	lsls	r2, r3, #16
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	619a      	str	r2, [r3, #24]
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b84:	887a      	ldrh	r2, [r7, #2]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	041a      	lsls	r2, r3, #16
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	43d9      	mvns	r1, r3
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	400b      	ands	r3, r1
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	619a      	str	r2, [r3, #24]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fc f811 	bl	8000bf4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004be4:	4b19      	ldr	r3, [pc, #100]	@ (8004c4c <HAL_PWREx_ConfigSupply+0x70>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d00a      	beq.n	8004c06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bf0:	4b16      	ldr	r3, [pc, #88]	@ (8004c4c <HAL_PWREx_ConfigSupply+0x70>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d001      	beq.n	8004c02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e01f      	b.n	8004c42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e01d      	b.n	8004c42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c06:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <HAL_PWREx_ConfigSupply+0x70>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f023 0207 	bic.w	r2, r3, #7
 8004c0e:	490f      	ldr	r1, [pc, #60]	@ (8004c4c <HAL_PWREx_ConfigSupply+0x70>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c16:	f7fc fbf5 	bl	8001404 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c1c:	e009      	b.n	8004c32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c1e:	f7fc fbf1 	bl	8001404 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c2c:	d901      	bls.n	8004c32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e007      	b.n	8004c42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <HAL_PWREx_ConfigSupply+0x70>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3e:	d1ee      	bne.n	8004c1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	58024800 	.word	0x58024800

08004c50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08c      	sub	sp, #48	@ 0x30
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e3c8      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8087 	beq.w	8004d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c70:	4b88      	ldr	r3, [pc, #544]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c7a:	4b86      	ldr	r3, [pc, #536]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d007      	beq.n	8004c96 <HAL_RCC_OscConfig+0x46>
 8004c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c88:	2b18      	cmp	r3, #24
 8004c8a:	d110      	bne.n	8004cae <HAL_RCC_OscConfig+0x5e>
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d10b      	bne.n	8004cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c96:	4b7f      	ldr	r3, [pc, #508]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d06c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x12c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d168      	bne.n	8004d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e3a2      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x76>
 8004cb8:	4b76      	ldr	r3, [pc, #472]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a75      	ldr	r2, [pc, #468]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e02e      	b.n	8004d24 <HAL_RCC_OscConfig+0xd4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x98>
 8004cce:	4b71      	ldr	r3, [pc, #452]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a70      	ldr	r2, [pc, #448]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b6e      	ldr	r3, [pc, #440]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a6d      	ldr	r2, [pc, #436]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004ce0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e01d      	b.n	8004d24 <HAL_RCC_OscConfig+0xd4>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0xbc>
 8004cf2:	4b68      	ldr	r3, [pc, #416]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a67      	ldr	r2, [pc, #412]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b65      	ldr	r3, [pc, #404]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a64      	ldr	r2, [pc, #400]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCC_OscConfig+0xd4>
 8004d0c:	4b61      	ldr	r3, [pc, #388]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a60      	ldr	r2, [pc, #384]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	4b5e      	ldr	r3, [pc, #376]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d013      	beq.n	8004d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc fb6a 	bl	8001404 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d34:	f7fc fb66 	bl	8001404 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b64      	cmp	r3, #100	@ 0x64
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e356      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d46:	4b53      	ldr	r3, [pc, #332]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0xe4>
 8004d52:	e014      	b.n	8004d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc fb56 	bl	8001404 <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fc fb52 	bl	8001404 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	@ 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e342      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6e:	4b49      	ldr	r3, [pc, #292]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x10c>
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 808c 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8c:	4b41      	ldr	r3, [pc, #260]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d96:	4b3f      	ldr	r3, [pc, #252]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_RCC_OscConfig+0x162>
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2b18      	cmp	r3, #24
 8004da6:	d137      	bne.n	8004e18 <HAL_RCC_OscConfig+0x1c8>
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d132      	bne.n	8004e18 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db2:	4b38      	ldr	r3, [pc, #224]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_RCC_OscConfig+0x17a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e314      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dca:	4b32      	ldr	r3, [pc, #200]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 0219 	bic.w	r2, r3, #25
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	492f      	ldr	r1, [pc, #188]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fc fb12 	bl	8001404 <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de4:	f7fc fb0e 	bl	8001404 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e2fe      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df6:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	4920      	ldr	r1, [pc, #128]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e16:	e045      	b.n	8004ea4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d026      	beq.n	8004e6e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e20:	4b1c      	ldr	r3, [pc, #112]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f023 0219 	bic.w	r2, r3, #25
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4919      	ldr	r1, [pc, #100]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e32:	f7fc fae7 	bl	8001404 <HAL_GetTick>
 8004e36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3a:	f7fc fae3 	bl	8001404 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e2d3      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4c:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e58:	4b0e      	ldr	r3, [pc, #56]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	061b      	lsls	r3, r3, #24
 8004e66:	490b      	ldr	r1, [pc, #44]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
 8004e6c:	e01a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6e:	4b09      	ldr	r3, [pc, #36]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a08      	ldr	r2, [pc, #32]	@ (8004e94 <HAL_RCC_OscConfig+0x244>)
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fc fac3 	bl	8001404 <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fc fabf 	bl	8001404 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d903      	bls.n	8004e98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e2af      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
 8004e94:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e98:	4b96      	ldr	r3, [pc, #600]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ee      	bne.n	8004e82 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d06a      	beq.n	8004f86 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb0:	4b90      	ldr	r3, [pc, #576]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004eba:	4b8e      	ldr	r3, [pc, #568]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d007      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x286>
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b18      	cmp	r3, #24
 8004eca:	d11b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2b4>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d116      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ed6:	4b87      	ldr	r3, [pc, #540]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_RCC_OscConfig+0x29e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b80      	cmp	r3, #128	@ 0x80
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e282      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eee:	4b81      	ldr	r3, [pc, #516]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	497d      	ldr	r1, [pc, #500]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f02:	e040      	b.n	8004f86 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d023      	beq.n	8004f54 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f0c:	4b79      	ldr	r3, [pc, #484]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a78      	ldr	r2, [pc, #480]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fc fa74 	bl	8001404 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f20:	f7fc fa70 	bl	8001404 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e260      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f32:	4b70      	ldr	r3, [pc, #448]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	4969      	ldr	r1, [pc, #420]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]
 8004f52:	e018      	b.n	8004f86 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f54:	4b67      	ldr	r3, [pc, #412]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a66      	ldr	r2, [pc, #408]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fc fa50 	bl	8001404 <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f68:	f7fc fa4c 	bl	8001404 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e23c      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d036      	beq.n	8005000 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d019      	beq.n	8004fce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9a:	4b56      	ldr	r3, [pc, #344]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9e:	4a55      	ldr	r2, [pc, #340]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	f7fc fa2d 	bl	8001404 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fae:	f7fc fa29 	bl	8001404 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e219      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x35e>
 8004fcc:	e018      	b.n	8005000 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fce:	4b49      	ldr	r3, [pc, #292]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd2:	4a48      	ldr	r2, [pc, #288]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fda:	f7fc fa13 	bl	8001404 <HAL_GetTick>
 8004fde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fc fa0f 	bl	8001404 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1ff      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d036      	beq.n	800507a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d019      	beq.n	8005048 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005014:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a36      	ldr	r2, [pc, #216]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 800501a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800501e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005020:	f7fc f9f0 	bl	8001404 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005028:	f7fc f9ec 	bl	8001404 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1dc      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800503a:	4b2e      	ldr	r3, [pc, #184]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x3d8>
 8005046:	e018      	b.n	800507a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005048:	4b2a      	ldr	r3, [pc, #168]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a29      	ldr	r2, [pc, #164]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 800504e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005052:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005054:	f7fc f9d6 	bl	8001404 <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505c:	f7fc f9d2 	bl	8001404 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e1c2      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800506e:	4b21      	ldr	r3, [pc, #132]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8086 	beq.w	8005194 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005088:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_RCC_OscConfig+0x4a8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <HAL_RCC_OscConfig+0x4a8>)
 800508e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005092:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005094:	f7fc f9b6 	bl	8001404 <HAL_GetTick>
 8005098:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fc f9b2 	bl	8001404 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	@ 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e1a2      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ae:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <HAL_RCC_OscConfig+0x4a8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x480>
 80050c2:	4b0c      	ldr	r3, [pc, #48]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	4a0b      	ldr	r2, [pc, #44]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ce:	e032      	b.n	8005136 <HAL_RCC_OscConfig+0x4e6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d111      	bne.n	80050fc <HAL_RCC_OscConfig+0x4ac>
 80050d8:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	4a05      	ldr	r2, [pc, #20]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e4:	4b03      	ldr	r3, [pc, #12]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a02      	ldr	r2, [pc, #8]	@ (80050f4 <HAL_RCC_OscConfig+0x4a4>)
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f0:	e021      	b.n	8005136 <HAL_RCC_OscConfig+0x4e6>
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
 80050f8:	58024800 	.word	0x58024800
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d10c      	bne.n	800511e <HAL_RCC_OscConfig+0x4ce>
 8005104:	4b83      	ldr	r3, [pc, #524]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	4a82      	ldr	r2, [pc, #520]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800510a:	f043 0304 	orr.w	r3, r3, #4
 800510e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005110:	4b80      	ldr	r3, [pc, #512]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005114:	4a7f      	ldr	r2, [pc, #508]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6713      	str	r3, [r2, #112]	@ 0x70
 800511c:	e00b      	b.n	8005136 <HAL_RCC_OscConfig+0x4e6>
 800511e:	4b7d      	ldr	r3, [pc, #500]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005122:	4a7c      	ldr	r2, [pc, #496]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005124:	f023 0301 	bic.w	r3, r3, #1
 8005128:	6713      	str	r3, [r2, #112]	@ 0x70
 800512a:	4b7a      	ldr	r3, [pc, #488]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512e:	4a79      	ldr	r2, [pc, #484]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005130:	f023 0304 	bic.w	r3, r3, #4
 8005134:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513e:	f7fc f961 	bl	8001404 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005144:	e00a      	b.n	800515c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fc f95d 	bl	8001404 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e14b      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800515c:	4b6d      	ldr	r3, [pc, #436]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0ee      	beq.n	8005146 <HAL_RCC_OscConfig+0x4f6>
 8005168:	e014      	b.n	8005194 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516a:	f7fc f94b 	bl	8001404 <HAL_GetTick>
 800516e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005170:	e00a      	b.n	8005188 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7fc f947 	bl	8001404 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005180:	4293      	cmp	r3, r2
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e135      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005188:	4b62      	ldr	r3, [pc, #392]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ee      	bne.n	8005172 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 812a 	beq.w	80053f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800519e:	4b5d      	ldr	r3, [pc, #372]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051a6:	2b18      	cmp	r3, #24
 80051a8:	f000 80ba 	beq.w	8005320 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f040 8095 	bne.w	80052e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b6:	4b57      	ldr	r3, [pc, #348]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a56      	ldr	r2, [pc, #344]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80051bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c2:	f7fc f91f 	bl	8001404 <HAL_GetTick>
 80051c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fc f91b 	bl	8001404 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e10b      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1f0      	bne.n	80051ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e8:	4b4a      	ldr	r3, [pc, #296]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80051ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005318 <HAL_RCC_OscConfig+0x6c8>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051f8:	0112      	lsls	r2, r2, #4
 80051fa:	430a      	orrs	r2, r1
 80051fc:	4945      	ldr	r1, [pc, #276]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	628b      	str	r3, [r1, #40]	@ 0x28
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	3b01      	subs	r3, #1
 8005208:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005210:	3b01      	subs	r3, #1
 8005212:	025b      	lsls	r3, r3, #9
 8005214:	b29b      	uxth	r3, r3
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	3b01      	subs	r3, #1
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522a:	3b01      	subs	r3, #1
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005232:	4938      	ldr	r1, [pc, #224]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005234:	4313      	orrs	r3, r2
 8005236:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005238:	4b36      	ldr	r3, [pc, #216]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	4a35      	ldr	r2, [pc, #212]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005244:	4b33      	ldr	r3, [pc, #204]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005248:	4b34      	ldr	r3, [pc, #208]	@ (800531c <HAL_RCC_OscConfig+0x6cc>)
 800524a:	4013      	ands	r3, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005250:	00d2      	lsls	r2, r2, #3
 8005252:	4930      	ldr	r1, [pc, #192]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005258:	4b2e      	ldr	r3, [pc, #184]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	f023 020c 	bic.w	r2, r3, #12
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	492b      	ldr	r1, [pc, #172]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800526a:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	f023 0202 	bic.w	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	4927      	ldr	r1, [pc, #156]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005278:	4313      	orrs	r3, r2
 800527a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800527c:	4b25      	ldr	r3, [pc, #148]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	4a24      	ldr	r2, [pc, #144]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005288:	4b22      	ldr	r3, [pc, #136]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	4a21      	ldr	r2, [pc, #132]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800528e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005294:	4b1f      	ldr	r3, [pc, #124]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 800529a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ac:	4b19      	ldr	r3, [pc, #100]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fc f8a4 	bl	8001404 <HAL_GetTick>
 80052bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fc f8a0 	bl	8001404 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e090      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052d2:	4b10      	ldr	r3, [pc, #64]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x670>
 80052de:	e088      	b.n	80053f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 80052e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fc f88a 	bl	8001404 <HAL_GetTick>
 80052f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fc f886 	bl	8001404 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e076      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005306:	4b03      	ldr	r3, [pc, #12]	@ (8005314 <HAL_RCC_OscConfig+0x6c4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x6a4>
 8005312:	e06e      	b.n	80053f2 <HAL_RCC_OscConfig+0x7a2>
 8005314:	58024400 	.word	0x58024400
 8005318:	fffffc0c 	.word	0xfffffc0c
 800531c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005320:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005326:	4b35      	ldr	r3, [pc, #212]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	2b01      	cmp	r3, #1
 8005332:	d031      	beq.n	8005398 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f003 0203 	and.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533e:	429a      	cmp	r2, r3
 8005340:	d12a      	bne.n	8005398 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	429a      	cmp	r2, r3
 8005350:	d122      	bne.n	8005398 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d11a      	bne.n	8005398 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	0a5b      	lsrs	r3, r3, #9
 8005366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d111      	bne.n	8005398 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d108      	bne.n	8005398 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0e1b      	lsrs	r3, r3, #24
 800538a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005392:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e02b      	b.n	80053f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800539c:	4b17      	ldr	r3, [pc, #92]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 800539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a0:	08db      	lsrs	r3, r3, #3
 80053a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d01f      	beq.n	80053f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053b2:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053be:	f7fc f821 	bl	8001404 <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80053c4:	bf00      	nop
 80053c6:	f7fc f81d 	bl	8001404 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d0f9      	beq.n	80053c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 80053d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <HAL_RCC_OscConfig+0x7b0>)
 80053d8:	4013      	ands	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053de:	00d2      	lsls	r2, r2, #3
 80053e0:	4906      	ldr	r1, [pc, #24]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053e6:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	4a04      	ldr	r2, [pc, #16]	@ (80053fc <HAL_RCC_OscConfig+0x7ac>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	@ 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	58024400 	.word	0x58024400
 8005400:	ffff0007 	.word	0xffff0007

08005404 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e19c      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005418:	4b8a      	ldr	r3, [pc, #552]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d910      	bls.n	8005448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005426:	4b87      	ldr	r3, [pc, #540]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f023 020f 	bic.w	r2, r3, #15
 800542e:	4985      	ldr	r1, [pc, #532]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b83      	ldr	r3, [pc, #524]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e184      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d010      	beq.n	8005476 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	4b7b      	ldr	r3, [pc, #492]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005460:	429a      	cmp	r2, r3
 8005462:	d908      	bls.n	8005476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005464:	4b78      	ldr	r3, [pc, #480]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	4975      	ldr	r1, [pc, #468]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005472:	4313      	orrs	r3, r2
 8005474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d010      	beq.n	80054a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	4b70      	ldr	r3, [pc, #448]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800548e:	429a      	cmp	r2, r3
 8005490:	d908      	bls.n	80054a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005492:	4b6d      	ldr	r3, [pc, #436]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	496a      	ldr	r1, [pc, #424]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d010      	beq.n	80054d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	4b64      	ldr	r3, [pc, #400]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054bc:	429a      	cmp	r2, r3
 80054be:	d908      	bls.n	80054d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054c0:	4b61      	ldr	r3, [pc, #388]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	495e      	ldr	r1, [pc, #376]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d908      	bls.n	8005500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ee:	4b56      	ldr	r3, [pc, #344]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4953      	ldr	r1, [pc, #332]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	4b4d      	ldr	r3, [pc, #308]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	429a      	cmp	r2, r3
 800551a:	d908      	bls.n	800552e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800551c:	4b4a      	ldr	r3, [pc, #296]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f023 020f 	bic.w	r2, r3, #15
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4947      	ldr	r1, [pc, #284]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 800552a:	4313      	orrs	r3, r2
 800552c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d055      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800553a:	4b43      	ldr	r3, [pc, #268]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	4940      	ldr	r1, [pc, #256]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005548:	4313      	orrs	r3, r2
 800554a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d107      	bne.n	8005564 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005554:	4b3c      	ldr	r3, [pc, #240]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d121      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0f6      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d107      	bne.n	800557c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800556c:	4b36      	ldr	r3, [pc, #216]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d115      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0ea      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d107      	bne.n	8005594 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005584:	4b30      	ldr	r3, [pc, #192]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d109      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0de      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005594:	4b2c      	ldr	r3, [pc, #176]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0d6      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055a4:	4b28      	ldr	r3, [pc, #160]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f023 0207 	bic.w	r2, r3, #7
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4925      	ldr	r1, [pc, #148]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b6:	f7fb ff25 	bl	8001404 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055be:	f7fb ff21 	bl	8001404 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e0be      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d1eb      	bne.n	80055be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d010      	beq.n	8005614 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	4b14      	ldr	r3, [pc, #80]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	429a      	cmp	r2, r3
 8005600:	d208      	bcs.n	8005614 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005602:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	f023 020f 	bic.w	r2, r3, #15
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	490e      	ldr	r1, [pc, #56]	@ (8005648 <HAL_RCC_ClockConfig+0x244>)
 8005610:	4313      	orrs	r3, r2
 8005612:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d214      	bcs.n	800564c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005622:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 020f 	bic.w	r2, r3, #15
 800562a:	4906      	ldr	r1, [pc, #24]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <HAL_RCC_ClockConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d005      	beq.n	800564c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e086      	b.n	8005752 <HAL_RCC_ClockConfig+0x34e>
 8005644:	52002000 	.word	0x52002000
 8005648:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	4b3f      	ldr	r3, [pc, #252]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005664:	429a      	cmp	r2, r3
 8005666:	d208      	bcs.n	800567a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005668:	4b3c      	ldr	r3, [pc, #240]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	4939      	ldr	r1, [pc, #228]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 8005676:	4313      	orrs	r3, r2
 8005678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d010      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	4b34      	ldr	r3, [pc, #208]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005692:	429a      	cmp	r2, r3
 8005694:	d208      	bcs.n	80056a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005696:	4b31      	ldr	r3, [pc, #196]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	492e      	ldr	r1, [pc, #184]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d010      	beq.n	80056d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	4b28      	ldr	r3, [pc, #160]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d208      	bcs.n	80056d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056c4:	4b25      	ldr	r3, [pc, #148]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	4922      	ldr	r1, [pc, #136]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d010      	beq.n	8005704 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	4b1d      	ldr	r3, [pc, #116]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d208      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056f2:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	4917      	ldr	r1, [pc, #92]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 8005700:	4313      	orrs	r3, r2
 8005702:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005704:	f000 f834 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b14      	ldr	r3, [pc, #80]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	4912      	ldr	r1, [pc, #72]	@ (8005760 <HAL_RCC_ClockConfig+0x35c>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005722:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <HAL_RCC_ClockConfig+0x358>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	4a0d      	ldr	r2, [pc, #52]	@ (8005760 <HAL_RCC_ClockConfig+0x35c>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <HAL_RCC_ClockConfig+0x360>)
 800573a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800573c:	4a0a      	ldr	r2, [pc, #40]	@ (8005768 <HAL_RCC_ClockConfig+0x364>)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005742:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <HAL_RCC_ClockConfig+0x368>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fe12 	bl	8001370 <HAL_InitTick>
 800574c:	4603      	mov	r3, r0
 800574e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	58024400 	.word	0x58024400
 8005760:	0800ab10 	.word	0x0800ab10
 8005764:	24000008 	.word	0x24000008
 8005768:	24000004 	.word	0x24000004
 800576c:	2400000c 	.word	0x2400000c

08005770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	@ 0x24
 8005774:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005776:	4bb3      	ldr	r3, [pc, #716]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800577e:	2b18      	cmp	r3, #24
 8005780:	f200 8155 	bhi.w	8005a2e <HAL_RCC_GetSysClockFreq+0x2be>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057f1 	.word	0x080057f1
 8005790:	08005a2f 	.word	0x08005a2f
 8005794:	08005a2f 	.word	0x08005a2f
 8005798:	08005a2f 	.word	0x08005a2f
 800579c:	08005a2f 	.word	0x08005a2f
 80057a0:	08005a2f 	.word	0x08005a2f
 80057a4:	08005a2f 	.word	0x08005a2f
 80057a8:	08005a2f 	.word	0x08005a2f
 80057ac:	08005817 	.word	0x08005817
 80057b0:	08005a2f 	.word	0x08005a2f
 80057b4:	08005a2f 	.word	0x08005a2f
 80057b8:	08005a2f 	.word	0x08005a2f
 80057bc:	08005a2f 	.word	0x08005a2f
 80057c0:	08005a2f 	.word	0x08005a2f
 80057c4:	08005a2f 	.word	0x08005a2f
 80057c8:	08005a2f 	.word	0x08005a2f
 80057cc:	0800581d 	.word	0x0800581d
 80057d0:	08005a2f 	.word	0x08005a2f
 80057d4:	08005a2f 	.word	0x08005a2f
 80057d8:	08005a2f 	.word	0x08005a2f
 80057dc:	08005a2f 	.word	0x08005a2f
 80057e0:	08005a2f 	.word	0x08005a2f
 80057e4:	08005a2f 	.word	0x08005a2f
 80057e8:	08005a2f 	.word	0x08005a2f
 80057ec:	08005823 	.word	0x08005823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f0:	4b94      	ldr	r3, [pc, #592]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057fc:	4b91      	ldr	r3, [pc, #580]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	08db      	lsrs	r3, r3, #3
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	4a90      	ldr	r2, [pc, #576]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800580e:	e111      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005810:	4b8d      	ldr	r3, [pc, #564]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005812:	61bb      	str	r3, [r7, #24]
      break;
 8005814:	e10e      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005816:	4b8d      	ldr	r3, [pc, #564]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005818:	61bb      	str	r3, [r7, #24]
      break;
 800581a:	e10b      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800581c:	4b8c      	ldr	r3, [pc, #560]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800581e:	61bb      	str	r3, [r7, #24]
      break;
 8005820:	e108      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005822:	4b88      	ldr	r3, [pc, #544]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800582c:	4b85      	ldr	r3, [pc, #532]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005836:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005838:	4b82      	ldr	r3, [pc, #520]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005842:	4b80      	ldr	r3, [pc, #512]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005846:	08db      	lsrs	r3, r3, #3
 8005848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800585a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80e1 	beq.w	8005a28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b02      	cmp	r3, #2
 800586a:	f000 8083 	beq.w	8005974 <HAL_RCC_GetSysClockFreq+0x204>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b02      	cmp	r3, #2
 8005872:	f200 80a1 	bhi.w	80059b8 <HAL_RCC_GetSysClockFreq+0x248>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_RCC_GetSysClockFreq+0x114>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d056      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005882:	e099      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005884:	4b6f      	ldr	r3, [pc, #444]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02d      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005890:	4b6c      	ldr	r3, [pc, #432]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	08db      	lsrs	r3, r3, #3
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	4a6b      	ldr	r2, [pc, #428]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
 80058a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	ee07 3a90 	vmov	s15, r3
 80058a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b62      	ldr	r3, [pc, #392]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058ea:	e087      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b51      	ldr	r3, [pc, #324]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005912:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800592e:	e065      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b40      	ldr	r3, [pc, #256]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a02 	vldr	s12, [r7, #8]
 8005956:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005972:	e043      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b2f      	ldr	r3, [pc, #188]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a02 	vldr	s12, [r7, #8]
 800599a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059b6:	e021      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 80059c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059da:	ed97 6a02 	vldr	s12, [r7, #8]
 80059de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059fc:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a00:	0a5b      	lsrs	r3, r3, #9
 8005a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a06:	3301      	adds	r3, #1
 8005a08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	ee07 3a90 	vmov	s15, r3
 8005a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a20:	ee17 3a90 	vmov	r3, s15
 8005a24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a26:	e005      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
      break;
 8005a2c:	e002      	b.n	8005a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a2e:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a30:	61bb      	str	r3, [r7, #24]
      break;
 8005a32:	bf00      	nop
  }

  return sysclockfreq;
 8005a34:	69bb      	ldr	r3, [r7, #24]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3724      	adds	r7, #36	@ 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	58024400 	.word	0x58024400
 8005a48:	03d09000 	.word	0x03d09000
 8005a4c:	003d0900 	.word	0x003d0900
 8005a50:	017d7840 	.word	0x017d7840
 8005a54:	46000000 	.word	0x46000000
 8005a58:	4c742400 	.word	0x4c742400
 8005a5c:	4a742400 	.word	0x4a742400
 8005a60:	4bbebc20 	.word	0x4bbebc20

08005a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a6a:	f7ff fe81 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	490f      	ldr	r1, [pc, #60]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a7c:	5ccb      	ldrb	r3, [r1, r3]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	fa22 f303 	lsr.w	r3, r2, r3
 8005a86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	4a09      	ldr	r2, [pc, #36]	@ (8005ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a92:	5cd3      	ldrb	r3, [r2, r3]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9e:	4a07      	ldr	r2, [pc, #28]	@ (8005abc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aa2:	4a07      	ldr	r2, [pc, #28]	@ (8005ac0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005aa8:	4b04      	ldr	r3, [pc, #16]	@ (8005abc <HAL_RCC_GetHCLKFreq+0x58>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	58024400 	.word	0x58024400
 8005ab8:	0800ab10 	.word	0x0800ab10
 8005abc:	24000008 	.word	0x24000008
 8005ac0:	24000004 	.word	0x24000004

08005ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ac8:	f7ff ffcc 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005acc:	4602      	mov	r2, r0
 8005ace:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	091b      	lsrs	r3, r3, #4
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	4904      	ldr	r1, [pc, #16]	@ (8005aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ada:	5ccb      	ldrb	r3, [r1, r3]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	0800ab10 	.word	0x0800ab10

08005af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005af4:	f7ff ffb6 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005af8:	4602      	mov	r2, r0
 8005afa:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	4904      	ldr	r1, [pc, #16]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b06:	5ccb      	ldrb	r3, [r1, r3]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	58024400 	.word	0x58024400
 8005b18:	0800ab10 	.word	0x0800ab10

08005b1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b20:	b0c6      	sub	sp, #280	@ 0x118
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b40:	2500      	movs	r5, #0
 8005b42:	ea54 0305 	orrs.w	r3, r4, r5
 8005b46:	d049      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b52:	d02f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b58:	d828      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b5e:	d01a      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005b60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b64:	d822      	bhi.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b6e:	d007      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b70:	e01c      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b72:	4bab      	ldr	r3, [pc, #684]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	4aaa      	ldr	r2, [pc, #680]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b7e:	e01a      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b84:	3308      	adds	r3, #8
 8005b86:	2102      	movs	r1, #2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fc25 	bl	80073d8 <RCCEx_PLL2_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005b94:	e00f      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b9a:	3328      	adds	r3, #40	@ 0x28
 8005b9c:	2102      	movs	r1, #2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 fccc 	bl	800753c <RCCEx_PLL3_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005baa:	e004      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bbe:	4b98      	ldr	r3, [pc, #608]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bcc:	4a94      	ldr	r2, [pc, #592]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd2:	e003      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005be8:	f04f 0900 	mov.w	r9, #0
 8005bec:	ea58 0309 	orrs.w	r3, r8, r9
 8005bf0:	d047      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d82a      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c19 	.word	0x08005c19
 8005c08:	08005c27 	.word	0x08005c27
 8005c0c:	08005c3d 	.word	0x08005c3d
 8005c10:	08005c5b 	.word	0x08005c5b
 8005c14:	08005c5b 	.word	0x08005c5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c18:	4b81      	ldr	r3, [pc, #516]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	4a80      	ldr	r2, [pc, #512]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c24:	e01a      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fbd2 	bl	80073d8 <RCCEx_PLL2_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c3a:	e00f      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c40:	3328      	adds	r3, #40	@ 0x28
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fc79 	bl	800753c <RCCEx_PLL3_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c50:	e004      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c58:	e000      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c64:	4b6e      	ldr	r3, [pc, #440]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c68:	f023 0107 	bic.w	r1, r3, #7
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	4a6b      	ldr	r2, [pc, #428]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005c8e:	f04f 0b00 	mov.w	fp, #0
 8005c92:	ea5a 030b 	orrs.w	r3, sl, fp
 8005c96:	d05b      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ca0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ca4:	d03b      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005ca6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005caa:	d834      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cb0:	d037      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cb6:	d82e      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cbc:	d033      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005cbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005cc2:	d828      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc8:	d01a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cce:	d822      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd8:	d007      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005cda:	e01c      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cdc:	4b50      	ldr	r3, [pc, #320]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	4a4f      	ldr	r2, [pc, #316]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ce8:	e01e      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 fb70 	bl	80073d8 <RCCEx_PLL2_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cfe:	e013      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d04:	3328      	adds	r3, #40	@ 0x28
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fc17 	bl	800753c <RCCEx_PLL3_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d14:	e008      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d1c:	e004      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e002      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d30:	4b3b      	ldr	r3, [pc, #236]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d34:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d40:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d42:	430b      	orrs	r3, r1
 8005d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d46:	e003      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d05d      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d7c:	d03b      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005d7e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d82:	d834      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d88:	d037      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005d8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d8e:	d82e      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d94:	d033      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005d96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d9a:	d828      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005da0:	d01a      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005da2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005da6:	d822      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db0:	d007      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005db2:	e01c      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	4a19      	ldr	r2, [pc, #100]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dc0:	e01e      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 fb04 	bl	80073d8 <RCCEx_PLL2_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005dd6:	e013      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	3328      	adds	r3, #40	@ 0x28
 8005dde:	2100      	movs	r1, #0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 fbab 	bl	800753c <RCCEx_PLL3_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dec:	e008      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005df4:	e004      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005df6:	bf00      	nop
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005dfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10d      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e18:	4a01      	ldr	r2, [pc, #4]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e1e:	e005      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e42:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d03a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	2b30      	cmp	r3, #48	@ 0x30
 8005e54:	d01f      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e56:	2b30      	cmp	r3, #48	@ 0x30
 8005e58:	d819      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d00c      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d815      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d019      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d111      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6a:	4baa      	ldr	r3, [pc, #680]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6e:	4aa9      	ldr	r2, [pc, #676]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e76:	e011      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	2102      	movs	r1, #2
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 faa9 	bl	80073d8 <RCCEx_PLL2_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ea4:	4b9b      	ldr	r3, [pc, #620]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb2:	4a98      	ldr	r2, [pc, #608]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ebe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ed8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d051      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eec:	d035      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ef2:	d82e      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ef4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ef8:	d031      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005efa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005efe:	d828      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f04:	d01a      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0a:	d822      	bhi.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f14:	d007      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f16:	e01c      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f18:	4b7e      	ldr	r3, [pc, #504]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f24:	e01c      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fa52 	bl	80073d8 <RCCEx_PLL2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f3a:	e011      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	3328      	adds	r3, #40	@ 0x28
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 faf9 	bl	800753c <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f68:	4b6a      	ldr	r3, [pc, #424]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f76:	4a67      	ldr	r2, [pc, #412]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f96:	2300      	movs	r3, #0
 8005f98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f9c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	d053      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fb0:	d033      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005fb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fb6:	d82c      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fbc:	d02f      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005fbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fc2:	d826      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fc8:	d02b      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005fca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fce:	d820      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fd4:	d012      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005fd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fda:	d81a      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe4:	d115      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fea:	3308      	adds	r3, #8
 8005fec:	2101      	movs	r1, #1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f9f2 	bl	80073d8 <RCCEx_PLL2_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e015      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006000:	3328      	adds	r3, #40	@ 0x28
 8006002:	2101      	movs	r1, #1
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fa99 	bl	800753c <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006010:	e00a      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800601a:	bf00      	nop
 800601c:	e004      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006030:	4b38      	ldr	r3, [pc, #224]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006034:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603e:	4a35      	ldr	r2, [pc, #212]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006040:	430b      	orrs	r3, r1
 8006042:	6513      	str	r3, [r2, #80]	@ 0x50
 8006044:	e003      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800604a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800605a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800605e:	2300      	movs	r3, #0
 8006060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006064:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006068:	460b      	mov	r3, r1
 800606a:	4313      	orrs	r3, r2
 800606c:	d058      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607a:	d033      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800607c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006080:	d82c      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006086:	d02f      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800608c:	d826      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800608e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006092:	d02b      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006094:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006098:	d820      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800609a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800609e:	d012      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80060a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060a4:	d81a      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d022      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ae:	d115      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b4:	3308      	adds	r3, #8
 80060b6:	2101      	movs	r1, #1
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f98d 	bl	80073d8 <RCCEx_PLL2_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060c4:	e015      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ca:	3328      	adds	r3, #40	@ 0x28
 80060cc:	2101      	movs	r1, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa34 	bl	800753c <RCCEx_PLL3_Config>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80060da:	e00a      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060e2:	e006      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e4:	bf00      	nop
 80060e6:	e004      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060e8:	bf00      	nop
 80060ea:	e002      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060ec:	bf00      	nop
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80060f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10e      	bne.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060fa:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800610a:	4a02      	ldr	r2, [pc, #8]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800610c:	430b      	orrs	r3, r1
 800610e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006110:	e006      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800611c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800612c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006130:	2300      	movs	r3, #0
 8006132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006136:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800613a:	460b      	mov	r3, r1
 800613c:	4313      	orrs	r3, r2
 800613e:	d037      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800614a:	d00e      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800614c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006150:	d816      	bhi.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d018      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800615a:	d111      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800615c:	4bc4      	ldr	r3, [pc, #784]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006160:	4ac3      	ldr	r2, [pc, #780]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006168:	e00f      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	3308      	adds	r3, #8
 8006170:	2101      	movs	r1, #1
 8006172:	4618      	mov	r0, r3
 8006174:	f001 f930 	bl	80073d8 <RCCEx_PLL2_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800617e:	e004      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006186:	e000      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006192:	4bb7      	ldr	r3, [pc, #732]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006196:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a0:	4ab3      	ldr	r2, [pc, #716]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a2:	430b      	orrs	r3, r1
 80061a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80061a6:	e003      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	d039      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80061d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d81c      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80061da:	a201      	add	r2, pc, #4	@ (adr r2, 80061e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	0800621d 	.word	0x0800621d
 80061e4:	080061f1 	.word	0x080061f1
 80061e8:	080061ff 	.word	0x080061ff
 80061ec:	0800621d 	.word	0x0800621d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f0:	4b9f      	ldr	r3, [pc, #636]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	4a9e      	ldr	r2, [pc, #632]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061fc:	e00f      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006202:	3308      	adds	r3, #8
 8006204:	2102      	movs	r1, #2
 8006206:	4618      	mov	r0, r3
 8006208:	f001 f8e6 	bl	80073d8 <RCCEx_PLL2_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006212:	e004      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006226:	4b92      	ldr	r3, [pc, #584]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622a:	f023 0103 	bic.w	r1, r3, #3
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006234:	4a8e      	ldr	r2, [pc, #568]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006236:	430b      	orrs	r3, r1
 8006238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800623a:	e003      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006250:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006254:	2300      	movs	r3, #0
 8006256:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800625a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800625e:	460b      	mov	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	f000 8099 	beq.w	8006398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006266:	4b83      	ldr	r3, [pc, #524]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a82      	ldr	r2, [pc, #520]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006272:	f7fb f8c7 	bl	8001404 <HAL_GetTick>
 8006276:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800627a:	e00b      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800627c:	f7fb f8c2 	bl	8001404 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b64      	cmp	r3, #100	@ 0x64
 800628a:	d903      	bls.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006292:	e005      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006294:	4b77      	ldr	r3, [pc, #476]	@ (8006474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0ed      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80062a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d173      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062a8:	4b71      	ldr	r3, [pc, #452]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062b4:	4053      	eors	r3, r2
 80062b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d015      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062be:	4b6c      	ldr	r3, [pc, #432]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062ca:	4b69      	ldr	r3, [pc, #420]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ce:	4a68      	ldr	r2, [pc, #416]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d6:	4b66      	ldr	r3, [pc, #408]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062da:	4a65      	ldr	r2, [pc, #404]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062e2:	4a63      	ldr	r2, [pc, #396]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80062e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f6:	d118      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fb f884 	bl	8001404 <HAL_GetTick>
 80062fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006300:	e00d      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006302:	f7fb f87f 	bl	8001404 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006312:	429a      	cmp	r2, r3
 8006314:	d903      	bls.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800631c:	e005      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800631e:	4b54      	ldr	r3, [pc, #336]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0eb      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800632a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800632e:	2b00      	cmp	r3, #0
 8006330:	d129      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800633a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006342:	d10e      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006344:	4b4a      	ldr	r3, [pc, #296]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006354:	091a      	lsrs	r2, r3, #4
 8006356:	4b48      	ldr	r3, [pc, #288]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006358:	4013      	ands	r3, r2
 800635a:	4a45      	ldr	r2, [pc, #276]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800635c:	430b      	orrs	r3, r1
 800635e:	6113      	str	r3, [r2, #16]
 8006360:	e005      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006362:	4b43      	ldr	r3, [pc, #268]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	4a42      	ldr	r2, [pc, #264]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006368:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800636c:	6113      	str	r3, [r2, #16]
 800636e:	4b40      	ldr	r3, [pc, #256]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006370:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800637a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800637e:	4a3c      	ldr	r2, [pc, #240]	@ (8006470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006380:	430b      	orrs	r3, r1
 8006382:	6713      	str	r3, [r2, #112]	@ 0x70
 8006384:	e008      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800638a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800638e:	e003      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006394:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f002 0301 	and.w	r3, r2, #1
 80063a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063a8:	2300      	movs	r3, #0
 80063aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f000 808f 	beq.w	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063c0:	2b28      	cmp	r3, #40	@ 0x28
 80063c2:	d871      	bhi.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80063c4:	a201      	add	r2, pc, #4	@ (adr r2, 80063cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080064b1 	.word	0x080064b1
 80063d0:	080064a9 	.word	0x080064a9
 80063d4:	080064a9 	.word	0x080064a9
 80063d8:	080064a9 	.word	0x080064a9
 80063dc:	080064a9 	.word	0x080064a9
 80063e0:	080064a9 	.word	0x080064a9
 80063e4:	080064a9 	.word	0x080064a9
 80063e8:	080064a9 	.word	0x080064a9
 80063ec:	0800647d 	.word	0x0800647d
 80063f0:	080064a9 	.word	0x080064a9
 80063f4:	080064a9 	.word	0x080064a9
 80063f8:	080064a9 	.word	0x080064a9
 80063fc:	080064a9 	.word	0x080064a9
 8006400:	080064a9 	.word	0x080064a9
 8006404:	080064a9 	.word	0x080064a9
 8006408:	080064a9 	.word	0x080064a9
 800640c:	08006493 	.word	0x08006493
 8006410:	080064a9 	.word	0x080064a9
 8006414:	080064a9 	.word	0x080064a9
 8006418:	080064a9 	.word	0x080064a9
 800641c:	080064a9 	.word	0x080064a9
 8006420:	080064a9 	.word	0x080064a9
 8006424:	080064a9 	.word	0x080064a9
 8006428:	080064a9 	.word	0x080064a9
 800642c:	080064b1 	.word	0x080064b1
 8006430:	080064a9 	.word	0x080064a9
 8006434:	080064a9 	.word	0x080064a9
 8006438:	080064a9 	.word	0x080064a9
 800643c:	080064a9 	.word	0x080064a9
 8006440:	080064a9 	.word	0x080064a9
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080064a9 	.word	0x080064a9
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064a9 	.word	0x080064a9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	080064a9 	.word	0x080064a9
 8006460:	080064a9 	.word	0x080064a9
 8006464:	080064a9 	.word	0x080064a9
 8006468:	080064a9 	.word	0x080064a9
 800646c:	080064b1 	.word	0x080064b1
 8006470:	58024400 	.word	0x58024400
 8006474:	58024800 	.word	0x58024800
 8006478:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	3308      	adds	r3, #8
 8006482:	2101      	movs	r1, #1
 8006484:	4618      	mov	r0, r3
 8006486:	f000 ffa7 	bl	80073d8 <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006490:	e00f      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006496:	3328      	adds	r3, #40	@ 0x28
 8006498:	2101      	movs	r1, #1
 800649a:	4618      	mov	r0, r3
 800649c:	f001 f84e 	bl	800753c <RCCEx_PLL3_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064a6:	e004      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ae:	e000      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064ba:	4bbf      	ldr	r3, [pc, #764]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c8:	4abb      	ldr	r2, [pc, #748]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ce:	e003      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f002 0302 	and.w	r3, r2, #2
 80064e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064e8:	2300      	movs	r3, #0
 80064ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d041      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064fe:	2b05      	cmp	r3, #5
 8006500:	d824      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006502:	a201      	add	r2, pc, #4	@ (adr r2, 8006508 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006555 	.word	0x08006555
 800650c:	08006521 	.word	0x08006521
 8006510:	08006537 	.word	0x08006537
 8006514:	08006555 	.word	0x08006555
 8006518:	08006555 	.word	0x08006555
 800651c:	08006555 	.word	0x08006555
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006524:	3308      	adds	r3, #8
 8006526:	2101      	movs	r1, #1
 8006528:	4618      	mov	r0, r3
 800652a:	f000 ff55 	bl	80073d8 <RCCEx_PLL2_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006534:	e00f      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653a:	3328      	adds	r3, #40	@ 0x28
 800653c:	2101      	movs	r1, #1
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fffc 	bl	800753c <RCCEx_PLL3_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800654a:	e004      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006552:	e000      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800655e:	4b96      	ldr	r3, [pc, #600]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006562:	f023 0107 	bic.w	r1, r3, #7
 8006566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656c:	4a92      	ldr	r2, [pc, #584]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800656e:	430b      	orrs	r3, r1
 8006570:	6553      	str	r3, [r2, #84]	@ 0x54
 8006572:	e003      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f002 0304 	and.w	r3, r2, #4
 8006588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800658c:	2300      	movs	r3, #0
 800658e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006592:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006596:	460b      	mov	r3, r1
 8006598:	4313      	orrs	r3, r2
 800659a:	d044      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800659c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a4:	2b05      	cmp	r3, #5
 80065a6:	d825      	bhi.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80065a8:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	080065fd 	.word	0x080065fd
 80065b4:	080065c9 	.word	0x080065c9
 80065b8:	080065df 	.word	0x080065df
 80065bc:	080065fd 	.word	0x080065fd
 80065c0:	080065fd 	.word	0x080065fd
 80065c4:	080065fd 	.word	0x080065fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065cc:	3308      	adds	r3, #8
 80065ce:	2101      	movs	r1, #1
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 ff01 	bl	80073d8 <RCCEx_PLL2_Config>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065dc:	e00f      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	3328      	adds	r3, #40	@ 0x28
 80065e4:	2101      	movs	r1, #1
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 ffa8 	bl	800753c <RCCEx_PLL3_Config>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80065f2:	e004      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065fa:	e000      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80065fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006606:	4b6c      	ldr	r3, [pc, #432]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660a:	f023 0107 	bic.w	r1, r3, #7
 800660e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	4a68      	ldr	r2, [pc, #416]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006618:	430b      	orrs	r3, r1
 800661a:	6593      	str	r3, [r2, #88]	@ 0x58
 800661c:	e003      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006622:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f002 0320 	and.w	r3, r2, #32
 8006632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006636:	2300      	movs	r3, #0
 8006638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800663c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006640:	460b      	mov	r3, r1
 8006642:	4313      	orrs	r3, r2
 8006644:	d055      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800664e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006652:	d033      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006654:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006658:	d82c      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800665e:	d02f      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006664:	d826      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006666:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800666a:	d02b      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800666c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006670:	d820      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006676:	d012      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006678:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800667c:	d81a      	bhi.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d022      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006682:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006686:	d115      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668c:	3308      	adds	r3, #8
 800668e:	2100      	movs	r1, #0
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fea1 	bl	80073d8 <RCCEx_PLL2_Config>
 8006696:	4603      	mov	r3, r0
 8006698:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800669c:	e015      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	3328      	adds	r3, #40	@ 0x28
 80066a4:	2102      	movs	r1, #2
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 ff48 	bl	800753c <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066b2:	e00a      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ba:	e006      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066bc:	bf00      	nop
 80066be:	e004      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066c0:	bf00      	nop
 80066c2:	e002      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066c4:	bf00      	nop
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80066c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10b      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066d2:	4b39      	ldr	r3, [pc, #228]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066e2:	4a35      	ldr	r2, [pc, #212]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80066e8:	e003      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006702:	2300      	movs	r3, #0
 8006704:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006708:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d058      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800671a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800671e:	d033      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006720:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006724:	d82c      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672a:	d02f      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800672c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006730:	d826      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006732:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006736:	d02b      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006738:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800673c:	d820      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800673e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006742:	d012      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006748:	d81a      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d022      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006752:	d115      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	3308      	adds	r3, #8
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fe3b 	bl	80073d8 <RCCEx_PLL2_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006768:	e015      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	3328      	adds	r3, #40	@ 0x28
 8006770:	2102      	movs	r1, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fee2 	bl	800753c <RCCEx_PLL3_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800677e:	e00a      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006786:	e006      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006788:	bf00      	nop
 800678a:	e004      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800678c:	bf00      	nop
 800678e:	e002      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006790:	bf00      	nop
 8006792:	e000      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800679e:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80067a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ae:	4a02      	ldr	r2, [pc, #8]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067b4:	e006      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80067d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067de:	460b      	mov	r3, r1
 80067e0:	4313      	orrs	r3, r2
 80067e2:	d055      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067f0:	d033      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80067f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80067f6:	d82c      	bhi.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80067f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067fc:	d02f      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80067fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006802:	d826      	bhi.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006804:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006808:	d02b      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800680a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800680e:	d820      	bhi.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006814:	d012      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006816:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800681a:	d81a      	bhi.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d022      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006824:	d115      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682a:	3308      	adds	r3, #8
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fdd2 	bl	80073d8 <RCCEx_PLL2_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800683a:	e015      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	3328      	adds	r3, #40	@ 0x28
 8006842:	2102      	movs	r1, #2
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fe79 	bl	800753c <RCCEx_PLL3_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006850:	e00a      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006858:	e006      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800685a:	bf00      	nop
 800685c:	e004      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800685e:	bf00      	nop
 8006860:	e002      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006862:	bf00      	nop
 8006864:	e000      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006870:	4ba0      	ldr	r3, [pc, #640]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006874:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006880:	4a9c      	ldr	r2, [pc, #624]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006882:	430b      	orrs	r3, r1
 8006884:	6593      	str	r3, [r2, #88]	@ 0x58
 8006886:	e003      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f002 0308 	and.w	r3, r2, #8
 800689c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068a0:	2300      	movs	r3, #0
 80068a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d01e      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068bc:	d10c      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c2:	3328      	adds	r3, #40	@ 0x28
 80068c4:	2102      	movs	r1, #2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fe38 	bl	800753c <RCCEx_PLL3_Config>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80068d8:	4b86      	ldr	r3, [pc, #536]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e8:	4a82      	ldr	r2, [pc, #520]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ea:	430b      	orrs	r3, r1
 80068ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f002 0310 	and.w	r3, r2, #16
 80068fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006904:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d01e      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691a:	d10c      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	3328      	adds	r3, #40	@ 0x28
 8006922:	2102      	movs	r1, #2
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe09 	bl	800753c <RCCEx_PLL3_Config>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006936:	4b6f      	ldr	r3, [pc, #444]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006946:	4a6b      	ldr	r2, [pc, #428]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006948:	430b      	orrs	r3, r1
 800694a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800695a:	2300      	movs	r3, #0
 800695c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800695e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006962:	460b      	mov	r3, r1
 8006964:	4313      	orrs	r3, r2
 8006966:	d03e      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006974:	d022      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800697a:	d81b      	bhi.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006984:	d00b      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006986:	e015      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698c:	3308      	adds	r3, #8
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fd21 	bl	80073d8 <RCCEx_PLL2_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800699c:	e00f      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800699e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a2:	3328      	adds	r3, #40	@ 0x28
 80069a4:	2102      	movs	r1, #2
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fdc8 	bl	800753c <RCCEx_PLL3_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069b2:	e004      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ba:	e000      	b.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80069bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10b      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069c6:	4b4b      	ldr	r3, [pc, #300]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069d6:	4a47      	ldr	r2, [pc, #284]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069d8:	430b      	orrs	r3, r1
 80069da:	6593      	str	r3, [r2, #88]	@ 0x58
 80069dc:	e003      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80069f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f4:	2300      	movs	r3, #0
 80069f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80069f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069fc:	460b      	mov	r3, r1
 80069fe:	4313      	orrs	r3, r2
 8006a00:	d03b      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a0e:	d01f      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a14:	d818      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a1a:	d003      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a20:	d007      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a24:	4b33      	ldr	r3, [pc, #204]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	4a32      	ldr	r2, [pc, #200]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a30:	e00f      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	3328      	adds	r3, #40	@ 0x28
 8006a38:	2101      	movs	r1, #1
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fd7e 	bl	800753c <RCCEx_PLL3_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a46:	e004      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a4e:	e000      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a5a:	4b26      	ldr	r3, [pc, #152]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a6a:	4a22      	ldr	r2, [pc, #136]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a6c:	430b      	orrs	r3, r1
 8006a6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a88:	2300      	movs	r3, #0
 8006a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a90:	460b      	mov	r3, r1
 8006a92:	4313      	orrs	r3, r2
 8006a94:	d034      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aa4:	d007      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006aa6:	e011      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa8:	4b12      	ldr	r3, [pc, #72]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	4a11      	ldr	r2, [pc, #68]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ab4:	e00e      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aba:	3308      	adds	r3, #8
 8006abc:	2102      	movs	r1, #2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fc8a 	bl	80073d8 <RCCEx_PLL2_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006aca:	e003      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10d      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006adc:	4b05      	ldr	r3, [pc, #20]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aea:	4a02      	ldr	r2, [pc, #8]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aec:	430b      	orrs	r3, r1
 8006aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006af0:	e006      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006af2:	bf00      	nop
 8006af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b0e:	2300      	movs	r3, #0
 8006b10:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b16:	460b      	mov	r3, r1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	d00c      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b20:	3328      	adds	r3, #40	@ 0x28
 8006b22:	2102      	movs	r1, #2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fd09 	bl	800753c <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b44:	2300      	movs	r3, #0
 8006b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b48:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	d036      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b5c:	d018      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b62:	d811      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b68:	d014      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b6e:	d80b      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d011      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b78:	d106      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7a:	4bb7      	ldr	r3, [pc, #732]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7e:	4ab6      	ldr	r2, [pc, #728]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b86:	e008      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b8e:	e004      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b90:	bf00      	nop
 8006b92:	e002      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ba2:	4bad      	ldr	r3, [pc, #692]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bb0:	4aa9      	ldr	r2, [pc, #676]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bce:	2300      	movs	r3, #0
 8006bd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bdc:	4b9e      	ldr	r3, [pc, #632]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bea:	4a9b      	ldr	r2, [pc, #620]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfe:	2300      	movs	r3, #0
 8006c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c02:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d009      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c0c:	4b92      	ldr	r3, [pc, #584]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c10:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c1a:	4a8f      	ldr	r2, [pc, #572]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c2e:	2300      	movs	r3, #0
 8006c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c36:	460b      	mov	r3, r1
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	d00e      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c3c:	4b86      	ldr	r3, [pc, #536]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	4a85      	ldr	r2, [pc, #532]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c46:	6113      	str	r3, [r2, #16]
 8006c48:	4b83      	ldr	r3, [pc, #524]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c4a:	6919      	ldr	r1, [r3, #16]
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c54:	4a80      	ldr	r2, [pc, #512]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c68:	2300      	movs	r3, #0
 8006c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c6c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c70:	460b      	mov	r3, r1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	d009      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c76:	4b78      	ldr	r3, [pc, #480]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c84:	4a74      	ldr	r2, [pc, #464]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c86:	430b      	orrs	r3, r1
 8006c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c98:	2300      	movs	r3, #0
 8006c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d00a      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	4a68      	ldr	r2, [pc, #416]	@ (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d011      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cdc:	3308      	adds	r3, #8
 8006cde:	2100      	movs	r1, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fb79 	bl	80073d8 <RCCEx_PLL2_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	2100      	movs	r1, #0
 8006d06:	6239      	str	r1, [r7, #32]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d12:	460b      	mov	r3, r1
 8006d14:	4313      	orrs	r3, r2
 8006d16:	d011      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	2101      	movs	r1, #1
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fb59 	bl	80073d8 <RCCEx_PLL2_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	2100      	movs	r1, #0
 8006d46:	61b9      	str	r1, [r7, #24]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d52:	460b      	mov	r3, r1
 8006d54:	4313      	orrs	r3, r2
 8006d56:	d011      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	2102      	movs	r1, #2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fb39 	bl	80073d8 <RCCEx_PLL2_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	2100      	movs	r1, #0
 8006d86:	6139      	str	r1, [r7, #16]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d92:	460b      	mov	r3, r1
 8006d94:	4313      	orrs	r3, r2
 8006d96:	d011      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9c:	3328      	adds	r3, #40	@ 0x28
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fbcb 	bl	800753c <RCCEx_PLL3_Config>
 8006da6:	4603      	mov	r3, r0
 8006da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d011      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ddc:	3328      	adds	r3, #40	@ 0x28
 8006dde:	2101      	movs	r1, #1
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fbab 	bl	800753c <RCCEx_PLL3_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	2100      	movs	r1, #0
 8006e06:	6039      	str	r1, [r7, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	607b      	str	r3, [r7, #4]
 8006e0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d011      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1c:	3328      	adds	r3, #40	@ 0x28
 8006e1e:	2102      	movs	r1, #2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fb8b 	bl	800753c <RCCEx_PLL3_Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006e3c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e000      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400

08006e5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e60:	f7fe fe00 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	091b      	lsrs	r3, r3, #4
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	4904      	ldr	r1, [pc, #16]	@ (8006e84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e72:	5ccb      	ldrb	r3, [r1, r3]
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	58024400 	.word	0x58024400
 8006e84:	0800ab10 	.word	0x0800ab10

08006e88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b089      	sub	sp, #36	@ 0x24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e90:	4ba1      	ldr	r3, [pc, #644]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	0b1b      	lsrs	r3, r3, #12
 8006ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ea4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	091b      	lsrs	r3, r3, #4
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006eb2:	4b99      	ldr	r3, [pc, #612]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	ee07 3a90 	vmov	s15, r3
 8006ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8111 	beq.w	80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	f000 8083 	beq.w	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f200 80a1 	bhi.w	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d056      	beq.n	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ef2:	e099      	b.n	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef4:	4b88      	ldr	r3, [pc, #544]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d02d      	beq.n	8006f5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f00:	4b85      	ldr	r3, [pc, #532]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	08db      	lsrs	r3, r3, #3
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	4a84      	ldr	r2, [pc, #528]	@ (800711c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	ee07 3a90 	vmov	s15, r3
 8006f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f5a:	e087      	b.n	800706c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9e:	e065      	b.n	800706c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b59      	ldr	r3, [pc, #356]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe2:	e043      	b.n	800706c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800712c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b48      	ldr	r3, [pc, #288]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a03 	vldr	s12, [r7, #12]
 800700a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007026:	e021      	b.n	800706c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703a:	4b37      	ldr	r3, [pc, #220]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a03 	vldr	s12, [r7, #12]
 800704e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800706a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800706c:	4b2a      	ldr	r3, [pc, #168]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	0a5b      	lsrs	r3, r3, #9
 8007072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007086:	edd7 6a07 	vldr	s13, [r7, #28]
 800708a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007092:	ee17 2a90 	vmov	r2, s15
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800709a:	4b1f      	ldr	r3, [pc, #124]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	0c1b      	lsrs	r3, r3, #16
 80070a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a4:	ee07 3a90 	vmov	s15, r3
 80070a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c0:	ee17 2a90 	vmov	r2, s15
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80070c8:	4b13      	ldr	r3, [pc, #76]	@ (8007118 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070cc:	0e1b      	lsrs	r3, r3, #24
 80070ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ee:	ee17 2a90 	vmov	r2, s15
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070f6:	e008      	b.n	800710a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
}
 800710a:	bf00      	nop
 800710c:	3724      	adds	r7, #36	@ 0x24
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	58024400 	.word	0x58024400
 800711c:	03d09000 	.word	0x03d09000
 8007120:	46000000 	.word	0x46000000
 8007124:	4c742400 	.word	0x4c742400
 8007128:	4a742400 	.word	0x4a742400
 800712c:	4bbebc20 	.word	0x4bbebc20

08007130 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007130:	b480      	push	{r7}
 8007132:	b089      	sub	sp, #36	@ 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007138:	4ba1      	ldr	r3, [pc, #644]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007142:	4b9f      	ldr	r3, [pc, #636]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007146:	0d1b      	lsrs	r3, r3, #20
 8007148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800714c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800714e:	4b9c      	ldr	r3, [pc, #624]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800715a:	4b99      	ldr	r3, [pc, #612]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800715c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715e:	08db      	lsrs	r3, r3, #3
 8007160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	fb02 f303 	mul.w	r3, r2, r3
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8111 	beq.w	80073a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b02      	cmp	r3, #2
 8007182:	f000 8083 	beq.w	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b02      	cmp	r3, #2
 800718a:	f200 80a1 	bhi.w	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d056      	beq.n	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800719a:	e099      	b.n	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800719c:	4b88      	ldr	r3, [pc, #544]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d02d      	beq.n	8007204 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a8:	4b85      	ldr	r3, [pc, #532]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	4a84      	ldr	r2, [pc, #528]	@ (80073c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071b4:	fa22 f303 	lsr.w	r3, r2, r3
 80071b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d2:	4b7b      	ldr	r3, [pc, #492]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007202:	e087      	b.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b6a      	ldr	r3, [pc, #424]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a03 	vldr	s12, [r7, #12]
 800722a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007246:	e065      	b.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b59      	ldr	r3, [pc, #356]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728a:	e043      	b.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b48      	ldr	r3, [pc, #288]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ce:	e021      	b.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b37      	ldr	r3, [pc, #220]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007312:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007314:	4b2a      	ldr	r3, [pc, #168]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007318:	0a5b      	lsrs	r3, r3, #9
 800731a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800732a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733a:	ee17 2a90 	vmov	r2, s15
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007342:	4b1f      	ldr	r3, [pc, #124]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007368:	ee17 2a90 	vmov	r2, s15
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007370:	4b13      	ldr	r3, [pc, #76]	@ (80073c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738a:	edd7 6a07 	vldr	s13, [r7, #28]
 800738e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007396:	ee17 2a90 	vmov	r2, s15
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800739e:	e008      	b.n	80073b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	609a      	str	r2, [r3, #8]
}
 80073b2:	bf00      	nop
 80073b4:	3724      	adds	r7, #36	@ 0x24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	58024400 	.word	0x58024400
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	46000000 	.word	0x46000000
 80073cc:	4c742400 	.word	0x4c742400
 80073d0:	4a742400 	.word	0x4a742400
 80073d4:	4bbebc20 	.word	0x4bbebc20

080073d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073e6:	4b53      	ldr	r3, [pc, #332]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d101      	bne.n	80073f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e099      	b.n	800752a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a4e      	ldr	r2, [pc, #312]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80073fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007402:	f7f9 ffff 	bl	8001404 <HAL_GetTick>
 8007406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007408:	e008      	b.n	800741c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800740a:	f7f9 fffb 	bl	8001404 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e086      	b.n	800752a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800741c:	4b45      	ldr	r3, [pc, #276]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007428:	4b42      	ldr	r3, [pc, #264]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	493f      	ldr	r1, [pc, #252]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007438:	4313      	orrs	r3, r2
 800743a:	628b      	str	r3, [r1, #40]	@ 0x28
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	3b01      	subs	r3, #1
 8007442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	3b01      	subs	r3, #1
 800744c:	025b      	lsls	r3, r3, #9
 800744e:	b29b      	uxth	r3, r3
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	3b01      	subs	r3, #1
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	3b01      	subs	r3, #1
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800746c:	4931      	ldr	r1, [pc, #196]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007472:	4b30      	ldr	r3, [pc, #192]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	492d      	ldr	r1, [pc, #180]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007480:	4313      	orrs	r3, r2
 8007482:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007484:	4b2b      	ldr	r3, [pc, #172]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f023 0220 	bic.w	r2, r3, #32
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	4928      	ldr	r1, [pc, #160]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007492:	4313      	orrs	r3, r2
 8007494:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007496:	4b27      	ldr	r3, [pc, #156]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	4a26      	ldr	r2, [pc, #152]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 800749c:	f023 0310 	bic.w	r3, r3, #16
 80074a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074a2:	4b24      	ldr	r3, [pc, #144]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074a6:	4b24      	ldr	r3, [pc, #144]	@ (8007538 <RCCEx_PLL2_Config+0x160>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	69d2      	ldr	r2, [r2, #28]
 80074ae:	00d2      	lsls	r2, r2, #3
 80074b0:	4920      	ldr	r1, [pc, #128]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	f043 0310 	orr.w	r3, r3, #16
 80074c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	4a19      	ldr	r2, [pc, #100]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074d4:	e00f      	b.n	80074f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d106      	bne.n	80074ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074dc:	4b15      	ldr	r3, [pc, #84]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	4a14      	ldr	r2, [pc, #80]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80074e8:	e005      	b.n	80074f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074ea:	4b12      	ldr	r3, [pc, #72]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	4a11      	ldr	r2, [pc, #68]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007502:	f7f9 ff7f 	bl	8001404 <HAL_GetTick>
 8007506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007508:	e008      	b.n	800751c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800750a:	f7f9 ff7b 	bl	8001404 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e006      	b.n	800752a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800751c:	4b05      	ldr	r3, [pc, #20]	@ (8007534 <RCCEx_PLL2_Config+0x15c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f0      	beq.n	800750a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	58024400 	.word	0x58024400
 8007538:	ffff0007 	.word	0xffff0007

0800753c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800754a:	4b53      	ldr	r3, [pc, #332]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b03      	cmp	r3, #3
 8007554:	d101      	bne.n	800755a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e099      	b.n	800768e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800755a:	4b4f      	ldr	r3, [pc, #316]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4e      	ldr	r2, [pc, #312]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007566:	f7f9 ff4d 	bl	8001404 <HAL_GetTick>
 800756a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800756c:	e008      	b.n	8007580 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800756e:	f7f9 ff49 	bl	8001404 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e086      	b.n	800768e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007580:	4b45      	ldr	r3, [pc, #276]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f0      	bne.n	800756e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800758c:	4b42      	ldr	r3, [pc, #264]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	051b      	lsls	r3, r3, #20
 800759a:	493f      	ldr	r1, [pc, #252]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	628b      	str	r3, [r1, #40]	@ 0x28
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	025b      	lsls	r3, r3, #9
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075d0:	4931      	ldr	r1, [pc, #196]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075d6:	4b30      	ldr	r3, [pc, #192]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	492d      	ldr	r1, [pc, #180]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	4928      	ldr	r1, [pc, #160]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075fa:	4b27      	ldr	r3, [pc, #156]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	4a26      	ldr	r2, [pc, #152]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007604:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007606:	4b24      	ldr	r3, [pc, #144]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800760a:	4b24      	ldr	r3, [pc, #144]	@ (800769c <RCCEx_PLL3_Config+0x160>)
 800760c:	4013      	ands	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	69d2      	ldr	r2, [r2, #28]
 8007612:	00d2      	lsls	r2, r2, #3
 8007614:	4920      	ldr	r1, [pc, #128]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800761a:	4b1f      	ldr	r3, [pc, #124]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	4a1e      	ldr	r2, [pc, #120]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007624:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800762c:	4b1a      	ldr	r3, [pc, #104]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800762e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007630:	4a19      	ldr	r2, [pc, #100]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007632:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007636:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007638:	e00f      	b.n	800765a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d106      	bne.n	800764e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007640:	4b15      	ldr	r3, [pc, #84]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	4a14      	ldr	r2, [pc, #80]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007646:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800764a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800764c:	e005      	b.n	800765a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800764e:	4b12      	ldr	r3, [pc, #72]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	4a11      	ldr	r2, [pc, #68]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007654:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007658:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800765a:	4b0f      	ldr	r3, [pc, #60]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a0e      	ldr	r2, [pc, #56]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007666:	f7f9 fecd 	bl	8001404 <HAL_GetTick>
 800766a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800766c:	e008      	b.n	8007680 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800766e:	f7f9 fec9 	bl	8001404 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e006      	b.n	800768e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007680:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f0      	beq.n	800766e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
 800769c:	ffff0007 	.word	0xffff0007

080076a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e049      	b.n	8007746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7f9 fbb8 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f000 fc58 	bl	8007f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d001      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e05e      	b.n	8007826 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a2b      	ldr	r2, [pc, #172]	@ (8007834 <HAL_TIM_Base_Start_IT+0xe4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d02c      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007792:	d027      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a27      	ldr	r2, [pc, #156]	@ (8007838 <HAL_TIM_Base_Start_IT+0xe8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d022      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a26      	ldr	r2, [pc, #152]	@ (800783c <HAL_TIM_Base_Start_IT+0xec>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d01d      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a24      	ldr	r2, [pc, #144]	@ (8007840 <HAL_TIM_Base_Start_IT+0xf0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d018      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a23      	ldr	r2, [pc, #140]	@ (8007844 <HAL_TIM_Base_Start_IT+0xf4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d013      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a21      	ldr	r2, [pc, #132]	@ (8007848 <HAL_TIM_Base_Start_IT+0xf8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00e      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a20      	ldr	r2, [pc, #128]	@ (800784c <HAL_TIM_Base_Start_IT+0xfc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007850 <HAL_TIM_Base_Start_IT+0x100>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d004      	beq.n	80077e4 <HAL_TIM_Base_Start_IT+0x94>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a1d      	ldr	r2, [pc, #116]	@ (8007854 <HAL_TIM_Base_Start_IT+0x104>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d115      	bne.n	8007810 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007858 <HAL_TIM_Base_Start_IT+0x108>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b06      	cmp	r3, #6
 80077f4:	d015      	beq.n	8007822 <HAL_TIM_Base_Start_IT+0xd2>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077fc:	d011      	beq.n	8007822 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800780e:	e008      	b.n	8007822 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	e000      	b.n	8007824 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	40010000 	.word	0x40010000
 8007838:	40000400 	.word	0x40000400
 800783c:	40000800 	.word	0x40000800
 8007840:	40000c00 	.word	0x40000c00
 8007844:	40010400 	.word	0x40010400
 8007848:	40001800 	.word	0x40001800
 800784c:	40014000 	.word	0x40014000
 8007850:	4000e000 	.word	0x4000e000
 8007854:	4000e400 	.word	0x4000e400
 8007858:	00010007 	.word	0x00010007

0800785c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e049      	b.n	8007902 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f841 	bl	800790a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f000 fb7a 	bl	8007f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800790a:	b480      	push	{r7}
 800790c:	b083      	sub	sp, #12
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007912:	bf00      	nop
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d020      	beq.n	8007982 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01b      	beq.n	8007982 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0202 	mvn.w	r2, #2
 8007952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 faf5 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 800796e:	e005      	b.n	800797c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fae7 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 faf8 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d020      	beq.n	80079ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01b      	beq.n	80079ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f06f 0204 	mvn.w	r2, #4
 800799e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 facf 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 80079ba:	e005      	b.n	80079c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fac1 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fad2 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d020      	beq.n	8007a1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01b      	beq.n	8007a1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f06f 0208 	mvn.w	r2, #8
 80079ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2204      	movs	r2, #4
 80079f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f003 0303 	and.w	r3, r3, #3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 faa9 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007a06:	e005      	b.n	8007a14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fa9b 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 faac 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d020      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f003 0310 	and.w	r3, r3, #16
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d01b      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f06f 0210 	mvn.w	r2, #16
 8007a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa83 	bl	8007f58 <HAL_TIM_IC_CaptureCallback>
 8007a52:	e005      	b.n	8007a60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fa75 	bl	8007f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa86 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00c      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f06f 0201 	mvn.w	r2, #1
 8007a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7f9 f8c9 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d104      	bne.n	8007a9e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00c      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 ff3a 	bl	800892c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00c      	beq.n	8007adc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 ff32 	bl	8008940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00c      	beq.n	8007b00 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa40 	bl	8007f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00c      	beq.n	8007b24 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0220 	mvn.w	r2, #32
 8007b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fefa 	bl	8008918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b24:	bf00      	nop
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e0ff      	b.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b14      	cmp	r3, #20
 8007b56:	f200 80f0 	bhi.w	8007d3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007bb5 	.word	0x08007bb5
 8007b64:	08007d3b 	.word	0x08007d3b
 8007b68:	08007d3b 	.word	0x08007d3b
 8007b6c:	08007d3b 	.word	0x08007d3b
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007d3b 	.word	0x08007d3b
 8007b78:	08007d3b 	.word	0x08007d3b
 8007b7c:	08007d3b 	.word	0x08007d3b
 8007b80:	08007c37 	.word	0x08007c37
 8007b84:	08007d3b 	.word	0x08007d3b
 8007b88:	08007d3b 	.word	0x08007d3b
 8007b8c:	08007d3b 	.word	0x08007d3b
 8007b90:	08007c77 	.word	0x08007c77
 8007b94:	08007d3b 	.word	0x08007d3b
 8007b98:	08007d3b 	.word	0x08007d3b
 8007b9c:	08007d3b 	.word	0x08007d3b
 8007ba0:	08007cb9 	.word	0x08007cb9
 8007ba4:	08007d3b 	.word	0x08007d3b
 8007ba8:	08007d3b 	.word	0x08007d3b
 8007bac:	08007d3b 	.word	0x08007d3b
 8007bb0:	08007cf9 	.word	0x08007cf9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fa9c 	bl	80080f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0208 	orr.w	r2, r2, #8
 8007bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0204 	bic.w	r2, r2, #4
 8007bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6999      	ldr	r1, [r3, #24]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	619a      	str	r2, [r3, #24]
      break;
 8007bf2:	e0a5      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fb0c 	bl	8008218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	619a      	str	r2, [r3, #24]
      break;
 8007c34:	e084      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fb75 	bl	800832c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0208 	orr.w	r2, r2, #8
 8007c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0204 	bic.w	r2, r2, #4
 8007c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69d9      	ldr	r1, [r3, #28]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	61da      	str	r2, [r3, #28]
      break;
 8007c74:	e064      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fbdd 	bl	800843c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69d9      	ldr	r1, [r3, #28]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	021a      	lsls	r2, r3, #8
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	61da      	str	r2, [r3, #28]
      break;
 8007cb6:	e043      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fc26 	bl	8008510 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0208 	orr.w	r2, r2, #8
 8007cd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0204 	bic.w	r2, r2, #4
 8007ce2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007cf6:	e023      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fc6a 	bl	80085d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	021a      	lsls	r2, r3, #8
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	430a      	orrs	r2, r1
 8007d36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d38:	e002      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop

08007d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d101      	bne.n	8007d70 <HAL_TIM_ConfigClockSource+0x1c>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e0dc      	b.n	8007f2a <HAL_TIM_ConfigClockSource+0x1d6>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8007f34 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a64      	ldr	r2, [pc, #400]	@ (8007f38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	f000 80a9 	beq.w	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007dac:	4a62      	ldr	r2, [pc, #392]	@ (8007f38 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	f200 80ae 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007db4:	4a61      	ldr	r2, [pc, #388]	@ (8007f3c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	f000 80a1 	beq.w	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8007f3c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	f200 80a6 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc4:	4a5e      	ldr	r2, [pc, #376]	@ (8007f40 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	f000 8099 	beq.w	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007dcc:	4a5c      	ldr	r2, [pc, #368]	@ (8007f40 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	f200 809e 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007dd8:	f000 8091 	beq.w	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007ddc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007de0:	f200 8096 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007de8:	f000 8089 	beq.w	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007df0:	f200 808e 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007df8:	d03e      	beq.n	8007e78 <HAL_TIM_ConfigClockSource+0x124>
 8007dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dfe:	f200 8087 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e06:	f000 8086 	beq.w	8007f16 <HAL_TIM_ConfigClockSource+0x1c2>
 8007e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0e:	d87f      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e10:	2b70      	cmp	r3, #112	@ 0x70
 8007e12:	d01a      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0xf6>
 8007e14:	2b70      	cmp	r3, #112	@ 0x70
 8007e16:	d87b      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e18:	2b60      	cmp	r3, #96	@ 0x60
 8007e1a:	d050      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x16a>
 8007e1c:	2b60      	cmp	r3, #96	@ 0x60
 8007e1e:	d877      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e20:	2b50      	cmp	r3, #80	@ 0x50
 8007e22:	d03c      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0x14a>
 8007e24:	2b50      	cmp	r3, #80	@ 0x50
 8007e26:	d873      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d058      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x18a>
 8007e2c:	2b40      	cmp	r3, #64	@ 0x40
 8007e2e:	d86f      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e30:	2b30      	cmp	r3, #48	@ 0x30
 8007e32:	d064      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007e34:	2b30      	cmp	r3, #48	@ 0x30
 8007e36:	d86b      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d060      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d867      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d05c      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d05a      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x1aa>
 8007e48:	e062      	b.n	8007f10 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e5a:	f000 fca1 	bl	80087a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	609a      	str	r2, [r3, #8]
      break;
 8007e76:	e04f      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e88:	f000 fc8a 	bl	80087a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e9a:	609a      	str	r2, [r3, #8]
      break;
 8007e9c:	e03c      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f000 fbfa 	bl	80086a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2150      	movs	r1, #80	@ 0x50
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fc54 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 8007ebc:	e02c      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f000 fc19 	bl	8008702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2160      	movs	r1, #96	@ 0x60
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 fc44 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 8007edc:	e01c      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 fbda 	bl	80086a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2140      	movs	r1, #64	@ 0x40
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fc34 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 8007efc:	e00c      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4619      	mov	r1, r3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	f000 fc2b 	bl	8008764 <TIM_ITRx_SetConfig>
      break;
 8007f0e:	e003      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
      break;
 8007f14:	e000      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	ffceff88 	.word	0xffceff88
 8007f38:	00100040 	.word	0x00100040
 8007f3c:	00100030 	.word	0x00100030
 8007f40:	00100020 	.word	0x00100020

08007f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb2:	d00f      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a47      	ldr	r2, [pc, #284]	@ (80080d4 <TIM_Base_SetConfig+0x140>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00b      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a46      	ldr	r2, [pc, #280]	@ (80080d8 <TIM_Base_SetConfig+0x144>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d007      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a45      	ldr	r2, [pc, #276]	@ (80080dc <TIM_Base_SetConfig+0x148>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a44      	ldr	r2, [pc, #272]	@ (80080e0 <TIM_Base_SetConfig+0x14c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a39      	ldr	r2, [pc, #228]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d027      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d023      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a36      	ldr	r2, [pc, #216]	@ (80080d4 <TIM_Base_SetConfig+0x140>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d01f      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a35      	ldr	r2, [pc, #212]	@ (80080d8 <TIM_Base_SetConfig+0x144>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01b      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a34      	ldr	r2, [pc, #208]	@ (80080dc <TIM_Base_SetConfig+0x148>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d017      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a33      	ldr	r2, [pc, #204]	@ (80080e0 <TIM_Base_SetConfig+0x14c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d013      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a32      	ldr	r2, [pc, #200]	@ (80080e4 <TIM_Base_SetConfig+0x150>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00f      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a31      	ldr	r2, [pc, #196]	@ (80080e8 <TIM_Base_SetConfig+0x154>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00b      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a30      	ldr	r2, [pc, #192]	@ (80080ec <TIM_Base_SetConfig+0x158>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d007      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a2f      	ldr	r2, [pc, #188]	@ (80080f0 <TIM_Base_SetConfig+0x15c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d003      	beq.n	800803e <TIM_Base_SetConfig+0xaa>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a2e      	ldr	r2, [pc, #184]	@ (80080f4 <TIM_Base_SetConfig+0x160>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d108      	bne.n	8008050 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a16      	ldr	r2, [pc, #88]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00f      	beq.n	800809c <TIM_Base_SetConfig+0x108>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a18      	ldr	r2, [pc, #96]	@ (80080e0 <TIM_Base_SetConfig+0x14c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00b      	beq.n	800809c <TIM_Base_SetConfig+0x108>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a17      	ldr	r2, [pc, #92]	@ (80080e4 <TIM_Base_SetConfig+0x150>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_Base_SetConfig+0x108>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a16      	ldr	r2, [pc, #88]	@ (80080e8 <TIM_Base_SetConfig+0x154>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_Base_SetConfig+0x108>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a15      	ldr	r2, [pc, #84]	@ (80080ec <TIM_Base_SetConfig+0x158>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d103      	bne.n	80080a4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	691a      	ldr	r2, [r3, #16]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d105      	bne.n	80080c2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f023 0201 	bic.w	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	611a      	str	r2, [r3, #16]
  }
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40000400 	.word	0x40000400
 80080d8:	40000800 	.word	0x40000800
 80080dc:	40000c00 	.word	0x40000c00
 80080e0:	40010400 	.word	0x40010400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800
 80080f0:	4000e000 	.word	0x4000e000
 80080f4:	4000e400 	.word	0x4000e400

080080f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	f023 0201 	bic.w	r2, r3, #1
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4b37      	ldr	r3, [pc, #220]	@ (8008200 <TIM_OC1_SetConfig+0x108>)
 8008124:	4013      	ands	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f023 0302 	bic.w	r3, r3, #2
 8008140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a2d      	ldr	r2, [pc, #180]	@ (8008204 <TIM_OC1_SetConfig+0x10c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00f      	beq.n	8008174 <TIM_OC1_SetConfig+0x7c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <TIM_OC1_SetConfig+0x110>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d00b      	beq.n	8008174 <TIM_OC1_SetConfig+0x7c>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a2b      	ldr	r2, [pc, #172]	@ (800820c <TIM_OC1_SetConfig+0x114>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d007      	beq.n	8008174 <TIM_OC1_SetConfig+0x7c>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a2a      	ldr	r2, [pc, #168]	@ (8008210 <TIM_OC1_SetConfig+0x118>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d003      	beq.n	8008174 <TIM_OC1_SetConfig+0x7c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a29      	ldr	r2, [pc, #164]	@ (8008214 <TIM_OC1_SetConfig+0x11c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d10c      	bne.n	800818e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f023 0308 	bic.w	r3, r3, #8
 800817a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f023 0304 	bic.w	r3, r3, #4
 800818c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a1c      	ldr	r2, [pc, #112]	@ (8008204 <TIM_OC1_SetConfig+0x10c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00f      	beq.n	80081b6 <TIM_OC1_SetConfig+0xbe>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a1b      	ldr	r2, [pc, #108]	@ (8008208 <TIM_OC1_SetConfig+0x110>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00b      	beq.n	80081b6 <TIM_OC1_SetConfig+0xbe>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a1a      	ldr	r2, [pc, #104]	@ (800820c <TIM_OC1_SetConfig+0x114>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d007      	beq.n	80081b6 <TIM_OC1_SetConfig+0xbe>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a19      	ldr	r2, [pc, #100]	@ (8008210 <TIM_OC1_SetConfig+0x118>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d003      	beq.n	80081b6 <TIM_OC1_SetConfig+0xbe>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a18      	ldr	r2, [pc, #96]	@ (8008214 <TIM_OC1_SetConfig+0x11c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d111      	bne.n	80081da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	621a      	str	r2, [r3, #32]
}
 80081f4:	bf00      	nop
 80081f6:	371c      	adds	r7, #28
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	fffeff8f 	.word	0xfffeff8f
 8008204:	40010000 	.word	0x40010000
 8008208:	40010400 	.word	0x40010400
 800820c:	40014000 	.word	0x40014000
 8008210:	40014400 	.word	0x40014400
 8008214:	40014800 	.word	0x40014800

08008218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	f023 0210 	bic.w	r2, r3, #16
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4b34      	ldr	r3, [pc, #208]	@ (8008314 <TIM_OC2_SetConfig+0xfc>)
 8008244:	4013      	ands	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800824e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 0320 	bic.w	r3, r3, #32
 8008262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4313      	orrs	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a29      	ldr	r2, [pc, #164]	@ (8008318 <TIM_OC2_SetConfig+0x100>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_OC2_SetConfig+0x68>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a28      	ldr	r2, [pc, #160]	@ (800831c <TIM_OC2_SetConfig+0x104>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d10d      	bne.n	800829c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800829a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a1e      	ldr	r2, [pc, #120]	@ (8008318 <TIM_OC2_SetConfig+0x100>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00f      	beq.n	80082c4 <TIM_OC2_SetConfig+0xac>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a1d      	ldr	r2, [pc, #116]	@ (800831c <TIM_OC2_SetConfig+0x104>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00b      	beq.n	80082c4 <TIM_OC2_SetConfig+0xac>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a1c      	ldr	r2, [pc, #112]	@ (8008320 <TIM_OC2_SetConfig+0x108>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d007      	beq.n	80082c4 <TIM_OC2_SetConfig+0xac>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008324 <TIM_OC2_SetConfig+0x10c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_OC2_SetConfig+0xac>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a1a      	ldr	r2, [pc, #104]	@ (8008328 <TIM_OC2_SetConfig+0x110>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d113      	bne.n	80082ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	feff8fff 	.word	0xfeff8fff
 8008318:	40010000 	.word	0x40010000
 800831c:	40010400 	.word	0x40010400
 8008320:	40014000 	.word	0x40014000
 8008324:	40014400 	.word	0x40014400
 8008328:	40014800 	.word	0x40014800

0800832c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800832c:	b480      	push	{r7}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4b33      	ldr	r3, [pc, #204]	@ (8008424 <TIM_OC3_SetConfig+0xf8>)
 8008358:	4013      	ands	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	021b      	lsls	r3, r3, #8
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a28      	ldr	r2, [pc, #160]	@ (8008428 <TIM_OC3_SetConfig+0xfc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_OC3_SetConfig+0x66>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a27      	ldr	r2, [pc, #156]	@ (800842c <TIM_OC3_SetConfig+0x100>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d10d      	bne.n	80083ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008428 <TIM_OC3_SetConfig+0xfc>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_OC3_SetConfig+0xaa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a1c      	ldr	r2, [pc, #112]	@ (800842c <TIM_OC3_SetConfig+0x100>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_OC3_SetConfig+0xaa>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008430 <TIM_OC3_SetConfig+0x104>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_OC3_SetConfig+0xaa>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008434 <TIM_OC3_SetConfig+0x108>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC3_SetConfig+0xaa>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a19      	ldr	r2, [pc, #100]	@ (8008438 <TIM_OC3_SetConfig+0x10c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d113      	bne.n	80083fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	621a      	str	r2, [r3, #32]
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	fffeff8f 	.word	0xfffeff8f
 8008428:	40010000 	.word	0x40010000
 800842c:	40010400 	.word	0x40010400
 8008430:	40014000 	.word	0x40014000
 8008434:	40014400 	.word	0x40014400
 8008438:	40014800 	.word	0x40014800

0800843c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4b24      	ldr	r3, [pc, #144]	@ (80084f8 <TIM_OC4_SetConfig+0xbc>)
 8008468:	4013      	ands	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	031b      	lsls	r3, r3, #12
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a19      	ldr	r2, [pc, #100]	@ (80084fc <TIM_OC4_SetConfig+0xc0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00f      	beq.n	80084bc <TIM_OC4_SetConfig+0x80>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a18      	ldr	r2, [pc, #96]	@ (8008500 <TIM_OC4_SetConfig+0xc4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00b      	beq.n	80084bc <TIM_OC4_SetConfig+0x80>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a17      	ldr	r2, [pc, #92]	@ (8008504 <TIM_OC4_SetConfig+0xc8>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_OC4_SetConfig+0x80>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a16      	ldr	r2, [pc, #88]	@ (8008508 <TIM_OC4_SetConfig+0xcc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_OC4_SetConfig+0x80>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a15      	ldr	r2, [pc, #84]	@ (800850c <TIM_OC4_SetConfig+0xd0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d109      	bne.n	80084d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	019b      	lsls	r3, r3, #6
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	621a      	str	r2, [r3, #32]
}
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	feff8fff 	.word	0xfeff8fff
 80084fc:	40010000 	.word	0x40010000
 8008500:	40010400 	.word	0x40010400
 8008504:	40014000 	.word	0x40014000
 8008508:	40014400 	.word	0x40014400
 800850c:	40014800 	.word	0x40014800

08008510 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4b21      	ldr	r3, [pc, #132]	@ (80085c0 <TIM_OC5_SetConfig+0xb0>)
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	041b      	lsls	r3, r3, #16
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a18      	ldr	r2, [pc, #96]	@ (80085c4 <TIM_OC5_SetConfig+0xb4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00f      	beq.n	8008586 <TIM_OC5_SetConfig+0x76>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a17      	ldr	r2, [pc, #92]	@ (80085c8 <TIM_OC5_SetConfig+0xb8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d00b      	beq.n	8008586 <TIM_OC5_SetConfig+0x76>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a16      	ldr	r2, [pc, #88]	@ (80085cc <TIM_OC5_SetConfig+0xbc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d007      	beq.n	8008586 <TIM_OC5_SetConfig+0x76>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a15      	ldr	r2, [pc, #84]	@ (80085d0 <TIM_OC5_SetConfig+0xc0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d003      	beq.n	8008586 <TIM_OC5_SetConfig+0x76>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a14      	ldr	r2, [pc, #80]	@ (80085d4 <TIM_OC5_SetConfig+0xc4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d109      	bne.n	800859a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800858c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	4313      	orrs	r3, r2
 8008598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	621a      	str	r2, [r3, #32]
}
 80085b4:	bf00      	nop
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	fffeff8f 	.word	0xfffeff8f
 80085c4:	40010000 	.word	0x40010000
 80085c8:	40010400 	.word	0x40010400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	40014400 	.word	0x40014400
 80085d4:	40014800 	.word	0x40014800

080085d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a1b      	ldr	r3, [r3, #32]
 80085ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4b22      	ldr	r3, [pc, #136]	@ (800868c <TIM_OC6_SetConfig+0xb4>)
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	021b      	lsls	r3, r3, #8
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800861a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	051b      	lsls	r3, r3, #20
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4313      	orrs	r3, r2
 8008626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a19      	ldr	r2, [pc, #100]	@ (8008690 <TIM_OC6_SetConfig+0xb8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00f      	beq.n	8008650 <TIM_OC6_SetConfig+0x78>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a18      	ldr	r2, [pc, #96]	@ (8008694 <TIM_OC6_SetConfig+0xbc>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00b      	beq.n	8008650 <TIM_OC6_SetConfig+0x78>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a17      	ldr	r2, [pc, #92]	@ (8008698 <TIM_OC6_SetConfig+0xc0>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d007      	beq.n	8008650 <TIM_OC6_SetConfig+0x78>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a16      	ldr	r2, [pc, #88]	@ (800869c <TIM_OC6_SetConfig+0xc4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d003      	beq.n	8008650 <TIM_OC6_SetConfig+0x78>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a15      	ldr	r2, [pc, #84]	@ (80086a0 <TIM_OC6_SetConfig+0xc8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d109      	bne.n	8008664 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	029b      	lsls	r3, r3, #10
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	621a      	str	r2, [r3, #32]
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	feff8fff 	.word	0xfeff8fff
 8008690:	40010000 	.word	0x40010000
 8008694:	40010400 	.word	0x40010400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f023 0201 	bic.w	r2, r3, #1
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	011b      	lsls	r3, r3, #4
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 030a 	bic.w	r3, r3, #10
 80086e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	621a      	str	r2, [r3, #32]
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008702:	b480      	push	{r7}
 8008704:	b087      	sub	sp, #28
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	f023 0210 	bic.w	r2, r3, #16
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800872c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	031b      	lsls	r3, r3, #12
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800873e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	621a      	str	r2, [r3, #32]
}
 8008756:	bf00      	nop
 8008758:	371c      	adds	r7, #28
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4b09      	ldr	r3, [pc, #36]	@ (800879c <TIM_ITRx_SetConfig+0x38>)
 8008778:	4013      	ands	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	f043 0307 	orr.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	609a      	str	r2, [r3, #8]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	ffcfff8f 	.word	0xffcfff8f

080087a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	021a      	lsls	r2, r3, #8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	431a      	orrs	r2, r3
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	609a      	str	r2, [r3, #8]
}
 80087d4:	bf00      	nop
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e077      	b.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a35      	ldr	r2, [pc, #212]	@ (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d004      	beq.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a34      	ldr	r2, [pc, #208]	@ (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d108      	bne.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008832:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008844:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a25      	ldr	r2, [pc, #148]	@ (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d02c      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800886a:	d027      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a22      	ldr	r2, [pc, #136]	@ (80088fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d022      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a21      	ldr	r2, [pc, #132]	@ (8008900 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d01d      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1f      	ldr	r2, [pc, #124]	@ (8008904 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a1a      	ldr	r2, [pc, #104]	@ (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1b      	ldr	r2, [pc, #108]	@ (8008908 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a1a      	ldr	r2, [pc, #104]	@ (800890c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a18      	ldr	r2, [pc, #96]	@ (8008910 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a17      	ldr	r2, [pc, #92]	@ (8008914 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d10c      	bne.n	80088d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	40010000 	.word	0x40010000
 80088f8:	40010400 	.word	0x40010400
 80088fc:	40000400 	.word	0x40000400
 8008900:	40000800 	.word	0x40000800
 8008904:	40000c00 	.word	0x40000c00
 8008908:	40001800 	.word	0x40001800
 800890c:	40014000 	.word	0x40014000
 8008910:	4000e000 	.word	0x4000e000
 8008914:	4000e400 	.word	0x4000e400

08008918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e04a      	b.n	80089fc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7f8 fa85 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2224      	movs	r2, #36	@ 0x24
 8008982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fac8 	bl	8009f34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc59 	bl	800925c <UART_SetConfig>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e023      	b.n	80089fc <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80089d2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0208 	orr.w	r2, r2, #8
 80089e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0201 	orr.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 fb3f 	bl	800a078 <UART_CheckIdleState>
 80089fa:	4603      	mov	r3, r0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b0ba      	sub	sp, #232	@ 0xe8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a32:	4013      	ands	r3, r2
 8008a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d11b      	bne.n	8008a78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d015      	beq.n	8008a78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d105      	bne.n	8008a64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 8377 	beq.w	800915c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
      }
      return;
 8008a76:	e371      	b.n	800915c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8123 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008a82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a86:	4b8d      	ldr	r3, [pc, #564]	@ (8008cbc <HAL_UART_IRQHandler+0x2b8>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008a8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008a92:	4b8b      	ldr	r3, [pc, #556]	@ (8008cc0 <HAL_UART_IRQHandler+0x2bc>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 8116 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d011      	beq.n	8008acc <HAL_UART_IRQHandler+0xc8>
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac2:	f043 0201 	orr.w	r2, r3, #1
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d011      	beq.n	8008afc <HAL_UART_IRQHandler+0xf8>
 8008ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af2:	f043 0204 	orr.w	r2, r3, #4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d011      	beq.n	8008b2c <HAL_UART_IRQHandler+0x128>
 8008b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b22:	f043 0202 	orr.w	r2, r3, #2
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d017      	beq.n	8008b68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d105      	bne.n	8008b50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b48:	4b5c      	ldr	r3, [pc, #368]	@ (8008cbc <HAL_UART_IRQHandler+0x2b8>)
 8008b4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2208      	movs	r2, #8
 8008b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b5e:	f043 0208 	orr.w	r2, r3, #8
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <HAL_UART_IRQHandler+0x196>
 8008b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00c      	beq.n	8008b9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b90:	f043 0220 	orr.w	r2, r3, #32
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 82dd 	beq.w	8009160 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d013      	beq.n	8008bda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d105      	bne.n	8008bca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d007      	beq.n	8008bda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bee:	2b40      	cmp	r3, #64	@ 0x40
 8008bf0:	d005      	beq.n	8008bfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d054      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 fc3a 	bl	800a478 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c0e:	2b40      	cmp	r3, #64	@ 0x40
 8008c10:	d146      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1d9      	bne.n	8008c12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d017      	beq.n	8008c98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6e:	4a15      	ldr	r2, [pc, #84]	@ (8008cc4 <HAL_UART_IRQHandler+0x2c0>)
 8008c70:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fa f861 	bl	8002d40 <HAL_DMA_Abort_IT>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d019      	beq.n	8008cb8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008c92:	4610      	mov	r0, r2
 8008c94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c96:	e00f      	b.n	8008cb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa81 	bl	80091a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9e:	e00b      	b.n	8008cb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fa7d 	bl	80091a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca6:	e007      	b.n	8008cb8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa79 	bl	80091a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008cb6:	e253      	b.n	8009160 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb8:	bf00      	nop
    return;
 8008cba:	e251      	b.n	8009160 <HAL_UART_IRQHandler+0x75c>
 8008cbc:	10000001 	.word	0x10000001
 8008cc0:	04000120 	.word	0x04000120
 8008cc4:	0800a72b 	.word	0x0800a72b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	f040 81e7 	bne.w	80090a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd6:	f003 0310 	and.w	r3, r3, #16
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 81e0 	beq.w	80090a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 81d9 	beq.w	80090a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2210      	movs	r2, #16
 8008cf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d00:	2b40      	cmp	r3, #64	@ 0x40
 8008d02:	f040 8151 	bne.w	8008fa8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a96      	ldr	r2, [pc, #600]	@ (8008f68 <HAL_UART_IRQHandler+0x564>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d068      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a93      	ldr	r2, [pc, #588]	@ (8008f6c <HAL_UART_IRQHandler+0x568>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d061      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a91      	ldr	r2, [pc, #580]	@ (8008f70 <HAL_UART_IRQHandler+0x56c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d05a      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a8e      	ldr	r2, [pc, #568]	@ (8008f74 <HAL_UART_IRQHandler+0x570>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d053      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a8c      	ldr	r2, [pc, #560]	@ (8008f78 <HAL_UART_IRQHandler+0x574>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d04c      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a89      	ldr	r2, [pc, #548]	@ (8008f7c <HAL_UART_IRQHandler+0x578>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d045      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a87      	ldr	r2, [pc, #540]	@ (8008f80 <HAL_UART_IRQHandler+0x57c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d03e      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a84      	ldr	r2, [pc, #528]	@ (8008f84 <HAL_UART_IRQHandler+0x580>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d037      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a82      	ldr	r2, [pc, #520]	@ (8008f88 <HAL_UART_IRQHandler+0x584>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d030      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a7f      	ldr	r2, [pc, #508]	@ (8008f8c <HAL_UART_IRQHandler+0x588>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d029      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a7d      	ldr	r2, [pc, #500]	@ (8008f90 <HAL_UART_IRQHandler+0x58c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d022      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a7a      	ldr	r2, [pc, #488]	@ (8008f94 <HAL_UART_IRQHandler+0x590>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01b      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a78      	ldr	r2, [pc, #480]	@ (8008f98 <HAL_UART_IRQHandler+0x594>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d014      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a75      	ldr	r2, [pc, #468]	@ (8008f9c <HAL_UART_IRQHandler+0x598>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d00d      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a73      	ldr	r2, [pc, #460]	@ (8008fa0 <HAL_UART_IRQHandler+0x59c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d006      	beq.n	8008de6 <HAL_UART_IRQHandler+0x3e2>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a70      	ldr	r2, [pc, #448]	@ (8008fa4 <HAL_UART_IRQHandler+0x5a0>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d106      	bne.n	8008df4 <HAL_UART_IRQHandler+0x3f0>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	e005      	b.n	8008e00 <HAL_UART_IRQHandler+0x3fc>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 81ab 	beq.w	8009164 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	f080 81a3 	bcs.w	8009164 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e34:	f000 8087 	beq.w	8008f46 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008e66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1da      	bne.n	8008e38 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e94:	f023 0301 	bic.w	r3, r3, #1
 8008e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ea6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e1      	bne.n	8008e82 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e3      	bne.n	8008ebe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f14:	f023 0310 	bic.w	r3, r3, #16
 8008f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e4      	bne.n	8008f04 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f9 fbdf 	bl	8002704 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2202      	movs	r2, #2
 8008f4a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7f7 febf 	bl	8000ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f66:	e0fd      	b.n	8009164 <HAL_UART_IRQHandler+0x760>
 8008f68:	40020010 	.word	0x40020010
 8008f6c:	40020028 	.word	0x40020028
 8008f70:	40020040 	.word	0x40020040
 8008f74:	40020058 	.word	0x40020058
 8008f78:	40020070 	.word	0x40020070
 8008f7c:	40020088 	.word	0x40020088
 8008f80:	400200a0 	.word	0x400200a0
 8008f84:	400200b8 	.word	0x400200b8
 8008f88:	40020410 	.word	0x40020410
 8008f8c:	40020428 	.word	0x40020428
 8008f90:	40020440 	.word	0x40020440
 8008f94:	40020458 	.word	0x40020458
 8008f98:	40020470 	.word	0x40020470
 8008f9c:	40020488 	.word	0x40020488
 8008fa0:	400204a0 	.word	0x400204a0
 8008fa4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 80cf 	beq.w	8009168 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008fca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 80ca 	beq.w	8009168 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ff8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ffe:	e841 2300 	strex	r3, r2, [r1]
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1e4      	bne.n	8008fd4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	3308      	adds	r3, #8
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	623b      	str	r3, [r7, #32]
   return(result);
 800901a:	6a3a      	ldr	r2, [r7, #32]
 800901c:	4b55      	ldr	r3, [pc, #340]	@ (8009174 <HAL_UART_IRQHandler+0x770>)
 800901e:	4013      	ands	r3, r2
 8009020:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3308      	adds	r3, #8
 800902a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800902e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e3      	bne.n	800900a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	e853 3f00 	ldrex	r3, [r3]
 8009062:	60fb      	str	r3, [r7, #12]
   return(result);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0310 	bic.w	r3, r3, #16
 800906a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	69b9      	ldr	r1, [r7, #24]
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	617b      	str	r3, [r7, #20]
   return(result);
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e4      	bne.n	8009056 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009092:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7f7 fe23 	bl	8000ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800909e:	e063      	b.n	8009168 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00e      	beq.n	80090ca <HAL_UART_IRQHandler+0x6c6>
 80090ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d008      	beq.n	80090ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80090c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fb72 	bl	800a7ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80090c8:	e051      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80090ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d014      	beq.n	8009100 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80090d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d105      	bne.n	80090ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80090e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d008      	beq.n	8009100 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d03a      	beq.n	800916c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	4798      	blx	r3
    }
    return;
 80090fe:	e035      	b.n	800916c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d009      	beq.n	8009120 <HAL_UART_IRQHandler+0x71c>
 800910c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 fb1c 	bl	800a756 <UART_EndTransmit_IT>
    return;
 800911e:	e026      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <HAL_UART_IRQHandler+0x73c>
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 fb4b 	bl	800a7d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800913e:	e016      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d010      	beq.n	800916e <HAL_UART_IRQHandler+0x76a>
 800914c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009150:	2b00      	cmp	r3, #0
 8009152:	da0c      	bge.n	800916e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fb33 	bl	800a7c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800915a:	e008      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
      return;
 800915c:	bf00      	nop
 800915e:	e006      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
    return;
 8009160:	bf00      	nop
 8009162:	e004      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
      return;
 8009164:	bf00      	nop
 8009166:	e002      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
      return;
 8009168:	bf00      	nop
 800916a:	e000      	b.n	800916e <HAL_UART_IRQHandler+0x76a>
    return;
 800916c:	bf00      	nop
  }
}
 800916e:	37e8      	adds	r7, #232	@ 0xe8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	effffffe 	.word	0xeffffffe

08009178 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b08f      	sub	sp, #60	@ 0x3c
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_HalfDuplex_EnableReceiver+0x16>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e042      	b.n	8009250 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2224      	movs	r2, #36	@ 0x24
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	f023 030c 	bic.w	r3, r3, #12
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e6      	bne.n	80091da <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	60bb      	str	r3, [r7, #8]
   return(result);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f043 0304 	orr.w	r3, r3, #4
 8009220:	633b      	str	r3, [r7, #48]	@ 0x30
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	61bb      	str	r3, [r7, #24]
 800922c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6979      	ldr	r1, [r7, #20]
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	613b      	str	r3, [r7, #16]
   return(result);
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e6      	bne.n	800920c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800924e:	2300      	movs	r3, #0
}
 8009250:	4618      	mov	r0, r3
 8009252:	373c      	adds	r7, #60	@ 0x3c
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800925c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009260:	b092      	sub	sp, #72	@ 0x48
 8009262:	af00      	add	r7, sp, #0
 8009264:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	431a      	orrs	r2, r3
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	431a      	orrs	r2, r3
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	4313      	orrs	r3, r2
 8009282:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4bbe      	ldr	r3, [pc, #760]	@ (8009584 <UART_SetConfig+0x328>)
 800928c:	4013      	ands	r3, r2
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009294:	430b      	orrs	r3, r1
 8009296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4ab3      	ldr	r2, [pc, #716]	@ (8009588 <UART_SetConfig+0x32c>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d004      	beq.n	80092c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092c4:	4313      	orrs	r3, r2
 80092c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	689a      	ldr	r2, [r3, #8]
 80092ce:	4baf      	ldr	r3, [pc, #700]	@ (800958c <UART_SetConfig+0x330>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092d8:	430b      	orrs	r3, r1
 80092da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	f023 010f 	bic.w	r1, r3, #15
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4aa6      	ldr	r2, [pc, #664]	@ (8009590 <UART_SetConfig+0x334>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d177      	bne.n	80093ec <UART_SetConfig+0x190>
 80092fc:	4ba5      	ldr	r3, [pc, #660]	@ (8009594 <UART_SetConfig+0x338>)
 80092fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009304:	2b28      	cmp	r3, #40	@ 0x28
 8009306:	d86d      	bhi.n	80093e4 <UART_SetConfig+0x188>
 8009308:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <UART_SetConfig+0xb4>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	080093b5 	.word	0x080093b5
 8009314:	080093e5 	.word	0x080093e5
 8009318:	080093e5 	.word	0x080093e5
 800931c:	080093e5 	.word	0x080093e5
 8009320:	080093e5 	.word	0x080093e5
 8009324:	080093e5 	.word	0x080093e5
 8009328:	080093e5 	.word	0x080093e5
 800932c:	080093e5 	.word	0x080093e5
 8009330:	080093bd 	.word	0x080093bd
 8009334:	080093e5 	.word	0x080093e5
 8009338:	080093e5 	.word	0x080093e5
 800933c:	080093e5 	.word	0x080093e5
 8009340:	080093e5 	.word	0x080093e5
 8009344:	080093e5 	.word	0x080093e5
 8009348:	080093e5 	.word	0x080093e5
 800934c:	080093e5 	.word	0x080093e5
 8009350:	080093c5 	.word	0x080093c5
 8009354:	080093e5 	.word	0x080093e5
 8009358:	080093e5 	.word	0x080093e5
 800935c:	080093e5 	.word	0x080093e5
 8009360:	080093e5 	.word	0x080093e5
 8009364:	080093e5 	.word	0x080093e5
 8009368:	080093e5 	.word	0x080093e5
 800936c:	080093e5 	.word	0x080093e5
 8009370:	080093cd 	.word	0x080093cd
 8009374:	080093e5 	.word	0x080093e5
 8009378:	080093e5 	.word	0x080093e5
 800937c:	080093e5 	.word	0x080093e5
 8009380:	080093e5 	.word	0x080093e5
 8009384:	080093e5 	.word	0x080093e5
 8009388:	080093e5 	.word	0x080093e5
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093d5 	.word	0x080093d5
 8009394:	080093e5 	.word	0x080093e5
 8009398:	080093e5 	.word	0x080093e5
 800939c:	080093e5 	.word	0x080093e5
 80093a0:	080093e5 	.word	0x080093e5
 80093a4:	080093e5 	.word	0x080093e5
 80093a8:	080093e5 	.word	0x080093e5
 80093ac:	080093e5 	.word	0x080093e5
 80093b0:	080093dd 	.word	0x080093dd
 80093b4:	2301      	movs	r3, #1
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e326      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093bc:	2304      	movs	r3, #4
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093c2:	e322      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093c4:	2308      	movs	r3, #8
 80093c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ca:	e31e      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093cc:	2310      	movs	r3, #16
 80093ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093d2:	e31a      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093d4:	2320      	movs	r3, #32
 80093d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093da:	e316      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093dc:	2340      	movs	r3, #64	@ 0x40
 80093de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e2:	e312      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093e4:	2380      	movs	r3, #128	@ 0x80
 80093e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ea:	e30e      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a69      	ldr	r2, [pc, #420]	@ (8009598 <UART_SetConfig+0x33c>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d130      	bne.n	8009458 <UART_SetConfig+0x1fc>
 80093f6:	4b67      	ldr	r3, [pc, #412]	@ (8009594 <UART_SetConfig+0x338>)
 80093f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b05      	cmp	r3, #5
 8009400:	d826      	bhi.n	8009450 <UART_SetConfig+0x1f4>
 8009402:	a201      	add	r2, pc, #4	@ (adr r2, 8009408 <UART_SetConfig+0x1ac>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009421 	.word	0x08009421
 800940c:	08009429 	.word	0x08009429
 8009410:	08009431 	.word	0x08009431
 8009414:	08009439 	.word	0x08009439
 8009418:	08009441 	.word	0x08009441
 800941c:	08009449 	.word	0x08009449
 8009420:	2300      	movs	r3, #0
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e2f0      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009428:	2304      	movs	r3, #4
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e2ec      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009430:	2308      	movs	r3, #8
 8009432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009436:	e2e8      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009438:	2310      	movs	r3, #16
 800943a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800943e:	e2e4      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009440:	2320      	movs	r3, #32
 8009442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009446:	e2e0      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009448:	2340      	movs	r3, #64	@ 0x40
 800944a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944e:	e2dc      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009450:	2380      	movs	r3, #128	@ 0x80
 8009452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009456:	e2d8      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a4f      	ldr	r2, [pc, #316]	@ (800959c <UART_SetConfig+0x340>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d130      	bne.n	80094c4 <UART_SetConfig+0x268>
 8009462:	4b4c      	ldr	r3, [pc, #304]	@ (8009594 <UART_SetConfig+0x338>)
 8009464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009466:	f003 0307 	and.w	r3, r3, #7
 800946a:	2b05      	cmp	r3, #5
 800946c:	d826      	bhi.n	80094bc <UART_SetConfig+0x260>
 800946e:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <UART_SetConfig+0x218>)
 8009470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009474:	0800948d 	.word	0x0800948d
 8009478:	08009495 	.word	0x08009495
 800947c:	0800949d 	.word	0x0800949d
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094ad 	.word	0x080094ad
 8009488:	080094b5 	.word	0x080094b5
 800948c:	2300      	movs	r3, #0
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e2ba      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009494:	2304      	movs	r3, #4
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e2b6      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800949c:	2308      	movs	r3, #8
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094a2:	e2b2      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80094a4:	2310      	movs	r3, #16
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094aa:	e2ae      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80094ac:	2320      	movs	r3, #32
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b2:	e2aa      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80094b4:	2340      	movs	r3, #64	@ 0x40
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ba:	e2a6      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80094bc:	2380      	movs	r3, #128	@ 0x80
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e2a2      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a35      	ldr	r2, [pc, #212]	@ (80095a0 <UART_SetConfig+0x344>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d130      	bne.n	8009530 <UART_SetConfig+0x2d4>
 80094ce:	4b31      	ldr	r3, [pc, #196]	@ (8009594 <UART_SetConfig+0x338>)
 80094d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d2:	f003 0307 	and.w	r3, r3, #7
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d826      	bhi.n	8009528 <UART_SetConfig+0x2cc>
 80094da:	a201      	add	r2, pc, #4	@ (adr r2, 80094e0 <UART_SetConfig+0x284>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094f9 	.word	0x080094f9
 80094e4:	08009501 	.word	0x08009501
 80094e8:	08009509 	.word	0x08009509
 80094ec:	08009511 	.word	0x08009511
 80094f0:	08009519 	.word	0x08009519
 80094f4:	08009521 	.word	0x08009521
 80094f8:	2300      	movs	r3, #0
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e284      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009500:	2304      	movs	r3, #4
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e280      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009508:	2308      	movs	r3, #8
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800950e:	e27c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009510:	2310      	movs	r3, #16
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009516:	e278      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009518:	2320      	movs	r3, #32
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800951e:	e274      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009520:	2340      	movs	r3, #64	@ 0x40
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009526:	e270      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009528:	2380      	movs	r3, #128	@ 0x80
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e26c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a1b      	ldr	r2, [pc, #108]	@ (80095a4 <UART_SetConfig+0x348>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d142      	bne.n	80095c0 <UART_SetConfig+0x364>
 800953a:	4b16      	ldr	r3, [pc, #88]	@ (8009594 <UART_SetConfig+0x338>)
 800953c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953e:	f003 0307 	and.w	r3, r3, #7
 8009542:	2b05      	cmp	r3, #5
 8009544:	d838      	bhi.n	80095b8 <UART_SetConfig+0x35c>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <UART_SetConfig+0x2f0>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	08009565 	.word	0x08009565
 8009550:	0800956d 	.word	0x0800956d
 8009554:	08009575 	.word	0x08009575
 8009558:	0800957d 	.word	0x0800957d
 800955c:	080095a9 	.word	0x080095a9
 8009560:	080095b1 	.word	0x080095b1
 8009564:	2300      	movs	r3, #0
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e24e      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800956c:	2304      	movs	r3, #4
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e24a      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009574:	2308      	movs	r3, #8
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957a:	e246      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800957c:	2310      	movs	r3, #16
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009582:	e242      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009584:	cfff69f3 	.word	0xcfff69f3
 8009588:	58000c00 	.word	0x58000c00
 800958c:	11fff4ff 	.word	0x11fff4ff
 8009590:	40011000 	.word	0x40011000
 8009594:	58024400 	.word	0x58024400
 8009598:	40004400 	.word	0x40004400
 800959c:	40004800 	.word	0x40004800
 80095a0:	40004c00 	.word	0x40004c00
 80095a4:	40005000 	.word	0x40005000
 80095a8:	2320      	movs	r3, #32
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e22c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80095b0:	2340      	movs	r3, #64	@ 0x40
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e228      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80095b8:	2380      	movs	r3, #128	@ 0x80
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e224      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4ab1      	ldr	r2, [pc, #708]	@ (800988c <UART_SetConfig+0x630>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d176      	bne.n	80096b8 <UART_SetConfig+0x45c>
 80095ca:	4bb1      	ldr	r3, [pc, #708]	@ (8009890 <UART_SetConfig+0x634>)
 80095cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095d2:	2b28      	cmp	r3, #40	@ 0x28
 80095d4:	d86c      	bhi.n	80096b0 <UART_SetConfig+0x454>
 80095d6:	a201      	add	r2, pc, #4	@ (adr r2, 80095dc <UART_SetConfig+0x380>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	08009681 	.word	0x08009681
 80095e0:	080096b1 	.word	0x080096b1
 80095e4:	080096b1 	.word	0x080096b1
 80095e8:	080096b1 	.word	0x080096b1
 80095ec:	080096b1 	.word	0x080096b1
 80095f0:	080096b1 	.word	0x080096b1
 80095f4:	080096b1 	.word	0x080096b1
 80095f8:	080096b1 	.word	0x080096b1
 80095fc:	08009689 	.word	0x08009689
 8009600:	080096b1 	.word	0x080096b1
 8009604:	080096b1 	.word	0x080096b1
 8009608:	080096b1 	.word	0x080096b1
 800960c:	080096b1 	.word	0x080096b1
 8009610:	080096b1 	.word	0x080096b1
 8009614:	080096b1 	.word	0x080096b1
 8009618:	080096b1 	.word	0x080096b1
 800961c:	08009691 	.word	0x08009691
 8009620:	080096b1 	.word	0x080096b1
 8009624:	080096b1 	.word	0x080096b1
 8009628:	080096b1 	.word	0x080096b1
 800962c:	080096b1 	.word	0x080096b1
 8009630:	080096b1 	.word	0x080096b1
 8009634:	080096b1 	.word	0x080096b1
 8009638:	080096b1 	.word	0x080096b1
 800963c:	08009699 	.word	0x08009699
 8009640:	080096b1 	.word	0x080096b1
 8009644:	080096b1 	.word	0x080096b1
 8009648:	080096b1 	.word	0x080096b1
 800964c:	080096b1 	.word	0x080096b1
 8009650:	080096b1 	.word	0x080096b1
 8009654:	080096b1 	.word	0x080096b1
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096a1 	.word	0x080096a1
 8009660:	080096b1 	.word	0x080096b1
 8009664:	080096b1 	.word	0x080096b1
 8009668:	080096b1 	.word	0x080096b1
 800966c:	080096b1 	.word	0x080096b1
 8009670:	080096b1 	.word	0x080096b1
 8009674:	080096b1 	.word	0x080096b1
 8009678:	080096b1 	.word	0x080096b1
 800967c:	080096a9 	.word	0x080096a9
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e1c0      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968e:	e1bc      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009696:	e1b8      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800969e:	e1b4      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80096a0:	2320      	movs	r3, #32
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096a6:	e1b0      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80096a8:	2340      	movs	r3, #64	@ 0x40
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ae:	e1ac      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80096b0:	2380      	movs	r3, #128	@ 0x80
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e1a8      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a75      	ldr	r2, [pc, #468]	@ (8009894 <UART_SetConfig+0x638>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d130      	bne.n	8009724 <UART_SetConfig+0x4c8>
 80096c2:	4b73      	ldr	r3, [pc, #460]	@ (8009890 <UART_SetConfig+0x634>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	d826      	bhi.n	800971c <UART_SetConfig+0x4c0>
 80096ce:	a201      	add	r2, pc, #4	@ (adr r2, 80096d4 <UART_SetConfig+0x478>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096ed 	.word	0x080096ed
 80096d8:	080096f5 	.word	0x080096f5
 80096dc:	080096fd 	.word	0x080096fd
 80096e0:	08009705 	.word	0x08009705
 80096e4:	0800970d 	.word	0x0800970d
 80096e8:	08009715 	.word	0x08009715
 80096ec:	2300      	movs	r3, #0
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e18a      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80096f4:	2304      	movs	r3, #4
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e186      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80096fc:	2308      	movs	r3, #8
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e182      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009704:	2310      	movs	r3, #16
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e17e      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800970c:	2320      	movs	r3, #32
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e17a      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009714:	2340      	movs	r3, #64	@ 0x40
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971a:	e176      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800971c:	2380      	movs	r3, #128	@ 0x80
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009722:	e172      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a5b      	ldr	r2, [pc, #364]	@ (8009898 <UART_SetConfig+0x63c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d130      	bne.n	8009790 <UART_SetConfig+0x534>
 800972e:	4b58      	ldr	r3, [pc, #352]	@ (8009890 <UART_SetConfig+0x634>)
 8009730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b05      	cmp	r3, #5
 8009738:	d826      	bhi.n	8009788 <UART_SetConfig+0x52c>
 800973a:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <UART_SetConfig+0x4e4>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009759 	.word	0x08009759
 8009744:	08009761 	.word	0x08009761
 8009748:	08009769 	.word	0x08009769
 800974c:	08009771 	.word	0x08009771
 8009750:	08009779 	.word	0x08009779
 8009754:	08009781 	.word	0x08009781
 8009758:	2300      	movs	r3, #0
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e154      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e150      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e14c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e148      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009778:	2320      	movs	r3, #32
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e144      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009780:	2340      	movs	r3, #64	@ 0x40
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009786:	e140      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009788:	2380      	movs	r3, #128	@ 0x80
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e13c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a41      	ldr	r2, [pc, #260]	@ (800989c <UART_SetConfig+0x640>)
 8009796:	4293      	cmp	r3, r2
 8009798:	f040 8082 	bne.w	80098a0 <UART_SetConfig+0x644>
 800979c:	4b3c      	ldr	r3, [pc, #240]	@ (8009890 <UART_SetConfig+0x634>)
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097a4:	2b28      	cmp	r3, #40	@ 0x28
 80097a6:	d86d      	bhi.n	8009884 <UART_SetConfig+0x628>
 80097a8:	a201      	add	r2, pc, #4	@ (adr r2, 80097b0 <UART_SetConfig+0x554>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	08009855 	.word	0x08009855
 80097b4:	08009885 	.word	0x08009885
 80097b8:	08009885 	.word	0x08009885
 80097bc:	08009885 	.word	0x08009885
 80097c0:	08009885 	.word	0x08009885
 80097c4:	08009885 	.word	0x08009885
 80097c8:	08009885 	.word	0x08009885
 80097cc:	08009885 	.word	0x08009885
 80097d0:	0800985d 	.word	0x0800985d
 80097d4:	08009885 	.word	0x08009885
 80097d8:	08009885 	.word	0x08009885
 80097dc:	08009885 	.word	0x08009885
 80097e0:	08009885 	.word	0x08009885
 80097e4:	08009885 	.word	0x08009885
 80097e8:	08009885 	.word	0x08009885
 80097ec:	08009885 	.word	0x08009885
 80097f0:	08009865 	.word	0x08009865
 80097f4:	08009885 	.word	0x08009885
 80097f8:	08009885 	.word	0x08009885
 80097fc:	08009885 	.word	0x08009885
 8009800:	08009885 	.word	0x08009885
 8009804:	08009885 	.word	0x08009885
 8009808:	08009885 	.word	0x08009885
 800980c:	08009885 	.word	0x08009885
 8009810:	0800986d 	.word	0x0800986d
 8009814:	08009885 	.word	0x08009885
 8009818:	08009885 	.word	0x08009885
 800981c:	08009885 	.word	0x08009885
 8009820:	08009885 	.word	0x08009885
 8009824:	08009885 	.word	0x08009885
 8009828:	08009885 	.word	0x08009885
 800982c:	08009885 	.word	0x08009885
 8009830:	08009875 	.word	0x08009875
 8009834:	08009885 	.word	0x08009885
 8009838:	08009885 	.word	0x08009885
 800983c:	08009885 	.word	0x08009885
 8009840:	08009885 	.word	0x08009885
 8009844:	08009885 	.word	0x08009885
 8009848:	08009885 	.word	0x08009885
 800984c:	08009885 	.word	0x08009885
 8009850:	0800987d 	.word	0x0800987d
 8009854:	2301      	movs	r3, #1
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e0d6      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800985c:	2304      	movs	r3, #4
 800985e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009862:	e0d2      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009864:	2308      	movs	r3, #8
 8009866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986a:	e0ce      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800986c:	2310      	movs	r3, #16
 800986e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009872:	e0ca      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009874:	2320      	movs	r3, #32
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e0c6      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800987c:	2340      	movs	r3, #64	@ 0x40
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e0c2      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009884:	2380      	movs	r3, #128	@ 0x80
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e0be      	b.n	8009a0a <UART_SetConfig+0x7ae>
 800988c:	40011400 	.word	0x40011400
 8009890:	58024400 	.word	0x58024400
 8009894:	40007800 	.word	0x40007800
 8009898:	40007c00 	.word	0x40007c00
 800989c:	40011800 	.word	0x40011800
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4aad      	ldr	r2, [pc, #692]	@ (8009b5c <UART_SetConfig+0x900>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d176      	bne.n	8009998 <UART_SetConfig+0x73c>
 80098aa:	4bad      	ldr	r3, [pc, #692]	@ (8009b60 <UART_SetConfig+0x904>)
 80098ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098b2:	2b28      	cmp	r3, #40	@ 0x28
 80098b4:	d86c      	bhi.n	8009990 <UART_SetConfig+0x734>
 80098b6:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <UART_SetConfig+0x660>)
 80098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098bc:	08009961 	.word	0x08009961
 80098c0:	08009991 	.word	0x08009991
 80098c4:	08009991 	.word	0x08009991
 80098c8:	08009991 	.word	0x08009991
 80098cc:	08009991 	.word	0x08009991
 80098d0:	08009991 	.word	0x08009991
 80098d4:	08009991 	.word	0x08009991
 80098d8:	08009991 	.word	0x08009991
 80098dc:	08009969 	.word	0x08009969
 80098e0:	08009991 	.word	0x08009991
 80098e4:	08009991 	.word	0x08009991
 80098e8:	08009991 	.word	0x08009991
 80098ec:	08009991 	.word	0x08009991
 80098f0:	08009991 	.word	0x08009991
 80098f4:	08009991 	.word	0x08009991
 80098f8:	08009991 	.word	0x08009991
 80098fc:	08009971 	.word	0x08009971
 8009900:	08009991 	.word	0x08009991
 8009904:	08009991 	.word	0x08009991
 8009908:	08009991 	.word	0x08009991
 800990c:	08009991 	.word	0x08009991
 8009910:	08009991 	.word	0x08009991
 8009914:	08009991 	.word	0x08009991
 8009918:	08009991 	.word	0x08009991
 800991c:	08009979 	.word	0x08009979
 8009920:	08009991 	.word	0x08009991
 8009924:	08009991 	.word	0x08009991
 8009928:	08009991 	.word	0x08009991
 800992c:	08009991 	.word	0x08009991
 8009930:	08009991 	.word	0x08009991
 8009934:	08009991 	.word	0x08009991
 8009938:	08009991 	.word	0x08009991
 800993c:	08009981 	.word	0x08009981
 8009940:	08009991 	.word	0x08009991
 8009944:	08009991 	.word	0x08009991
 8009948:	08009991 	.word	0x08009991
 800994c:	08009991 	.word	0x08009991
 8009950:	08009991 	.word	0x08009991
 8009954:	08009991 	.word	0x08009991
 8009958:	08009991 	.word	0x08009991
 800995c:	08009989 	.word	0x08009989
 8009960:	2301      	movs	r3, #1
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e050      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009968:	2304      	movs	r3, #4
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996e:	e04c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009970:	2308      	movs	r3, #8
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009976:	e048      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009978:	2310      	movs	r3, #16
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800997e:	e044      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009980:	2320      	movs	r3, #32
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009986:	e040      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009988:	2340      	movs	r3, #64	@ 0x40
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998e:	e03c      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009990:	2380      	movs	r3, #128	@ 0x80
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e038      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a71      	ldr	r2, [pc, #452]	@ (8009b64 <UART_SetConfig+0x908>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d130      	bne.n	8009a04 <UART_SetConfig+0x7a8>
 80099a2:	4b6f      	ldr	r3, [pc, #444]	@ (8009b60 <UART_SetConfig+0x904>)
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d826      	bhi.n	80099fc <UART_SetConfig+0x7a0>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x758>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	080099f5 	.word	0x080099f5
 80099cc:	2302      	movs	r3, #2
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d2:	e01a      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099da:	e016      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099e2:	e012      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ea:	e00e      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80099ec:	2320      	movs	r3, #32
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f2:	e00a      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80099f4:	2340      	movs	r3, #64	@ 0x40
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fa:	e006      	b.n	8009a0a <UART_SetConfig+0x7ae>
 80099fc:	2380      	movs	r3, #128	@ 0x80
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a02:	e002      	b.n	8009a0a <UART_SetConfig+0x7ae>
 8009a04:	2380      	movs	r3, #128	@ 0x80
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a55      	ldr	r2, [pc, #340]	@ (8009b64 <UART_SetConfig+0x908>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	f040 80f8 	bne.w	8009c06 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	dc46      	bgt.n	8009aac <UART_SetConfig+0x850>
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	db75      	blt.n	8009b0e <UART_SetConfig+0x8b2>
 8009a22:	3b02      	subs	r3, #2
 8009a24:	2b1e      	cmp	r3, #30
 8009a26:	d872      	bhi.n	8009b0e <UART_SetConfig+0x8b2>
 8009a28:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <UART_SetConfig+0x7d4>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009ab3 	.word	0x08009ab3
 8009a34:	08009b0f 	.word	0x08009b0f
 8009a38:	08009abb 	.word	0x08009abb
 8009a3c:	08009b0f 	.word	0x08009b0f
 8009a40:	08009b0f 	.word	0x08009b0f
 8009a44:	08009b0f 	.word	0x08009b0f
 8009a48:	08009acb 	.word	0x08009acb
 8009a4c:	08009b0f 	.word	0x08009b0f
 8009a50:	08009b0f 	.word	0x08009b0f
 8009a54:	08009b0f 	.word	0x08009b0f
 8009a58:	08009b0f 	.word	0x08009b0f
 8009a5c:	08009b0f 	.word	0x08009b0f
 8009a60:	08009b0f 	.word	0x08009b0f
 8009a64:	08009b0f 	.word	0x08009b0f
 8009a68:	08009adb 	.word	0x08009adb
 8009a6c:	08009b0f 	.word	0x08009b0f
 8009a70:	08009b0f 	.word	0x08009b0f
 8009a74:	08009b0f 	.word	0x08009b0f
 8009a78:	08009b0f 	.word	0x08009b0f
 8009a7c:	08009b0f 	.word	0x08009b0f
 8009a80:	08009b0f 	.word	0x08009b0f
 8009a84:	08009b0f 	.word	0x08009b0f
 8009a88:	08009b0f 	.word	0x08009b0f
 8009a8c:	08009b0f 	.word	0x08009b0f
 8009a90:	08009b0f 	.word	0x08009b0f
 8009a94:	08009b0f 	.word	0x08009b0f
 8009a98:	08009b0f 	.word	0x08009b0f
 8009a9c:	08009b0f 	.word	0x08009b0f
 8009aa0:	08009b0f 	.word	0x08009b0f
 8009aa4:	08009b0f 	.word	0x08009b0f
 8009aa8:	08009b01 	.word	0x08009b01
 8009aac:	2b40      	cmp	r3, #64	@ 0x40
 8009aae:	d02a      	beq.n	8009b06 <UART_SetConfig+0x8aa>
 8009ab0:	e02d      	b.n	8009b0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ab2:	f7fd f9d3 	bl	8006e5c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ab8:	e02f      	b.n	8009b1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fd f9e2 	bl	8006e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e027      	b.n	8009b1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aca:	f107 0318 	add.w	r3, r7, #24
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fd fb2e 	bl	8007130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad8:	e01f      	b.n	8009b1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ada:	4b21      	ldr	r3, [pc, #132]	@ (8009b60 <UART_SetConfig+0x904>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d009      	beq.n	8009afa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b60 <UART_SetConfig+0x904>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	08db      	lsrs	r3, r3, #3
 8009aec:	f003 0303 	and.w	r3, r3, #3
 8009af0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b68 <UART_SetConfig+0x90c>)
 8009af2:	fa22 f303 	lsr.w	r3, r2, r3
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009af8:	e00f      	b.n	8009b1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009afa:	4b1b      	ldr	r3, [pc, #108]	@ (8009b68 <UART_SetConfig+0x90c>)
 8009afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afe:	e00c      	b.n	8009b1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b00:	4b1a      	ldr	r3, [pc, #104]	@ (8009b6c <UART_SetConfig+0x910>)
 8009b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b04:	e009      	b.n	8009b1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e005      	b.n	8009b1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 81ee 	beq.w	8009efe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b26:	4a12      	ldr	r2, [pc, #72]	@ (8009b70 <UART_SetConfig+0x914>)
 8009b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b34:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	005b      	lsls	r3, r3, #1
 8009b3e:	4413      	add	r3, r2
 8009b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d305      	bcc.n	8009b52 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d910      	bls.n	8009b74 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b58:	e1d1      	b.n	8009efe <UART_SetConfig+0xca2>
 8009b5a:	bf00      	nop
 8009b5c:	40011c00 	.word	0x40011c00
 8009b60:	58024400 	.word	0x58024400
 8009b64:	58000c00 	.word	0x58000c00
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	003d0900 	.word	0x003d0900
 8009b70:	0800ab28 	.word	0x0800ab28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b76:	2200      	movs	r2, #0
 8009b78:	60bb      	str	r3, [r7, #8]
 8009b7a:	60fa      	str	r2, [r7, #12]
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b80:	4ac0      	ldr	r2, [pc, #768]	@ (8009e84 <UART_SetConfig+0xc28>)
 8009b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b96:	f7f6 fbb9 	bl	800030c <__aeabi_uldivmod>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	f04f 0300 	mov.w	r3, #0
 8009baa:	020b      	lsls	r3, r1, #8
 8009bac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bb0:	0202      	lsls	r2, r0, #8
 8009bb2:	6979      	ldr	r1, [r7, #20]
 8009bb4:	6849      	ldr	r1, [r1, #4]
 8009bb6:	0849      	lsrs	r1, r1, #1
 8009bb8:	2000      	movs	r0, #0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	eb12 0804 	adds.w	r8, r2, r4
 8009bc2:	eb43 0905 	adc.w	r9, r3, r5
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	469a      	mov	sl, r3
 8009bce:	4693      	mov	fp, r2
 8009bd0:	4652      	mov	r2, sl
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 fb98 	bl	800030c <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4613      	mov	r3, r2
 8009be2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bea:	d308      	bcc.n	8009bfe <UART_SetConfig+0x9a2>
 8009bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bf2:	d204      	bcs.n	8009bfe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bfa:	60da      	str	r2, [r3, #12]
 8009bfc:	e17f      	b.n	8009efe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c04:	e17b      	b.n	8009efe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c0e:	f040 80bd 	bne.w	8009d8c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009c12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	dc48      	bgt.n	8009cac <UART_SetConfig+0xa50>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db7b      	blt.n	8009d16 <UART_SetConfig+0xaba>
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d879      	bhi.n	8009d16 <UART_SetConfig+0xaba>
 8009c22:	a201      	add	r2, pc, #4	@ (adr r2, 8009c28 <UART_SetConfig+0x9cc>)
 8009c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c28:	08009cb3 	.word	0x08009cb3
 8009c2c:	08009cbb 	.word	0x08009cbb
 8009c30:	08009d17 	.word	0x08009d17
 8009c34:	08009d17 	.word	0x08009d17
 8009c38:	08009cc3 	.word	0x08009cc3
 8009c3c:	08009d17 	.word	0x08009d17
 8009c40:	08009d17 	.word	0x08009d17
 8009c44:	08009d17 	.word	0x08009d17
 8009c48:	08009cd3 	.word	0x08009cd3
 8009c4c:	08009d17 	.word	0x08009d17
 8009c50:	08009d17 	.word	0x08009d17
 8009c54:	08009d17 	.word	0x08009d17
 8009c58:	08009d17 	.word	0x08009d17
 8009c5c:	08009d17 	.word	0x08009d17
 8009c60:	08009d17 	.word	0x08009d17
 8009c64:	08009d17 	.word	0x08009d17
 8009c68:	08009ce3 	.word	0x08009ce3
 8009c6c:	08009d17 	.word	0x08009d17
 8009c70:	08009d17 	.word	0x08009d17
 8009c74:	08009d17 	.word	0x08009d17
 8009c78:	08009d17 	.word	0x08009d17
 8009c7c:	08009d17 	.word	0x08009d17
 8009c80:	08009d17 	.word	0x08009d17
 8009c84:	08009d17 	.word	0x08009d17
 8009c88:	08009d17 	.word	0x08009d17
 8009c8c:	08009d17 	.word	0x08009d17
 8009c90:	08009d17 	.word	0x08009d17
 8009c94:	08009d17 	.word	0x08009d17
 8009c98:	08009d17 	.word	0x08009d17
 8009c9c:	08009d17 	.word	0x08009d17
 8009ca0:	08009d17 	.word	0x08009d17
 8009ca4:	08009d17 	.word	0x08009d17
 8009ca8:	08009d09 	.word	0x08009d09
 8009cac:	2b40      	cmp	r3, #64	@ 0x40
 8009cae:	d02e      	beq.n	8009d0e <UART_SetConfig+0xab2>
 8009cb0:	e031      	b.n	8009d16 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cb2:	f7fb ff07 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8009cb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cb8:	e033      	b.n	8009d22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cba:	f7fb ff19 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8009cbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cc0:	e02f      	b.n	8009d22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fd f8de 	bl	8006e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd0:	e027      	b.n	8009d22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fd fa2a 	bl	8007130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce0:	e01f      	b.n	8009d22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce2:	4b69      	ldr	r3, [pc, #420]	@ (8009e88 <UART_SetConfig+0xc2c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d009      	beq.n	8009d02 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cee:	4b66      	ldr	r3, [pc, #408]	@ (8009e88 <UART_SetConfig+0xc2c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	08db      	lsrs	r3, r3, #3
 8009cf4:	f003 0303 	and.w	r3, r3, #3
 8009cf8:	4a64      	ldr	r2, [pc, #400]	@ (8009e8c <UART_SetConfig+0xc30>)
 8009cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d00:	e00f      	b.n	8009d22 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009d02:	4b62      	ldr	r3, [pc, #392]	@ (8009e8c <UART_SetConfig+0xc30>)
 8009d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d06:	e00c      	b.n	8009d22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d08:	4b61      	ldr	r3, [pc, #388]	@ (8009e90 <UART_SetConfig+0xc34>)
 8009d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d0c:	e009      	b.n	8009d22 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e005      	b.n	8009d22 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80ea 	beq.w	8009efe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d2e:	4a55      	ldr	r2, [pc, #340]	@ (8009e84 <UART_SetConfig+0xc28>)
 8009d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d34:	461a      	mov	r2, r3
 8009d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d3c:	005a      	lsls	r2, r3, #1
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	441a      	add	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d916      	bls.n	8009d84 <UART_SetConfig+0xb28>
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d5c:	d212      	bcs.n	8009d84 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f023 030f 	bic.w	r3, r3, #15
 8009d66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6a:	085b      	lsrs	r3, r3, #1
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d76:	4313      	orrs	r3, r2
 8009d78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d80:	60da      	str	r2, [r3, #12]
 8009d82:	e0bc      	b.n	8009efe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d8a:	e0b8      	b.n	8009efe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d90:	2b20      	cmp	r3, #32
 8009d92:	dc4b      	bgt.n	8009e2c <UART_SetConfig+0xbd0>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f2c0 8087 	blt.w	8009ea8 <UART_SetConfig+0xc4c>
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	f200 8084 	bhi.w	8009ea8 <UART_SetConfig+0xc4c>
 8009da0:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <UART_SetConfig+0xb4c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009e33 	.word	0x08009e33
 8009dac:	08009e3b 	.word	0x08009e3b
 8009db0:	08009ea9 	.word	0x08009ea9
 8009db4:	08009ea9 	.word	0x08009ea9
 8009db8:	08009e43 	.word	0x08009e43
 8009dbc:	08009ea9 	.word	0x08009ea9
 8009dc0:	08009ea9 	.word	0x08009ea9
 8009dc4:	08009ea9 	.word	0x08009ea9
 8009dc8:	08009e53 	.word	0x08009e53
 8009dcc:	08009ea9 	.word	0x08009ea9
 8009dd0:	08009ea9 	.word	0x08009ea9
 8009dd4:	08009ea9 	.word	0x08009ea9
 8009dd8:	08009ea9 	.word	0x08009ea9
 8009ddc:	08009ea9 	.word	0x08009ea9
 8009de0:	08009ea9 	.word	0x08009ea9
 8009de4:	08009ea9 	.word	0x08009ea9
 8009de8:	08009e63 	.word	0x08009e63
 8009dec:	08009ea9 	.word	0x08009ea9
 8009df0:	08009ea9 	.word	0x08009ea9
 8009df4:	08009ea9 	.word	0x08009ea9
 8009df8:	08009ea9 	.word	0x08009ea9
 8009dfc:	08009ea9 	.word	0x08009ea9
 8009e00:	08009ea9 	.word	0x08009ea9
 8009e04:	08009ea9 	.word	0x08009ea9
 8009e08:	08009ea9 	.word	0x08009ea9
 8009e0c:	08009ea9 	.word	0x08009ea9
 8009e10:	08009ea9 	.word	0x08009ea9
 8009e14:	08009ea9 	.word	0x08009ea9
 8009e18:	08009ea9 	.word	0x08009ea9
 8009e1c:	08009ea9 	.word	0x08009ea9
 8009e20:	08009ea9 	.word	0x08009ea9
 8009e24:	08009ea9 	.word	0x08009ea9
 8009e28:	08009e9b 	.word	0x08009e9b
 8009e2c:	2b40      	cmp	r3, #64	@ 0x40
 8009e2e:	d037      	beq.n	8009ea0 <UART_SetConfig+0xc44>
 8009e30:	e03a      	b.n	8009ea8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e32:	f7fb fe47 	bl	8005ac4 <HAL_RCC_GetPCLK1Freq>
 8009e36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e38:	e03c      	b.n	8009eb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e3a:	f7fb fe59 	bl	8005af0 <HAL_RCC_GetPCLK2Freq>
 8009e3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e40:	e038      	b.n	8009eb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fd f81e 	bl	8006e88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e50:	e030      	b.n	8009eb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e52:	f107 0318 	add.w	r3, r7, #24
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fd f96a 	bl	8007130 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e60:	e028      	b.n	8009eb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e62:	4b09      	ldr	r3, [pc, #36]	@ (8009e88 <UART_SetConfig+0xc2c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d012      	beq.n	8009e94 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e6e:	4b06      	ldr	r3, [pc, #24]	@ (8009e88 <UART_SetConfig+0xc2c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	08db      	lsrs	r3, r3, #3
 8009e74:	f003 0303 	and.w	r3, r3, #3
 8009e78:	4a04      	ldr	r2, [pc, #16]	@ (8009e8c <UART_SetConfig+0xc30>)
 8009e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e80:	e018      	b.n	8009eb4 <UART_SetConfig+0xc58>
 8009e82:	bf00      	nop
 8009e84:	0800ab28 	.word	0x0800ab28
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	03d09000 	.word	0x03d09000
 8009e90:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e94:	4b24      	ldr	r3, [pc, #144]	@ (8009f28 <UART_SetConfig+0xccc>)
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e98:	e00c      	b.n	8009eb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e9a:	4b24      	ldr	r3, [pc, #144]	@ (8009f2c <UART_SetConfig+0xcd0>)
 8009e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e9e:	e009      	b.n	8009eb4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea6:	e005      	b.n	8009eb4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009eb2:	bf00      	nop
    }

    if (pclk != 0U)
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d021      	beq.n	8009efe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8009f30 <UART_SetConfig+0xcd4>)
 8009ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	085b      	lsrs	r3, r3, #1
 8009ed2:	441a      	add	r2, r3
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009edc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	2b0f      	cmp	r3, #15
 8009ee2:	d909      	bls.n	8009ef8 <UART_SetConfig+0xc9c>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eea:	d205      	bcs.n	8009ef8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60da      	str	r2, [r3, #12]
 8009ef6:	e002      	b.n	8009efe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2200      	movs	r2, #0
 8009f12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2200      	movs	r2, #0
 8009f18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f1a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3748      	adds	r7, #72	@ 0x48
 8009f22:	46bd      	mov	sp, r7
 8009f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f28:	03d09000 	.word	0x03d09000
 8009f2c:	003d0900 	.word	0x003d0900
 8009f30:	0800ab28 	.word	0x0800ab28

08009f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	f003 0310 	and.w	r3, r3, #16
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a02e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a032:	d10a      	bne.n	800a04a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	430a      	orrs	r2, r1
 800a048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00a      	beq.n	800a06c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
  }
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b098      	sub	sp, #96	@ 0x60
 800a07c:	af02      	add	r7, sp, #8
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a088:	f7f7 f9bc 	bl	8001404 <HAL_GetTick>
 800a08c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d12f      	bne.n	800a0fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a09c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f88e 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d022      	beq.n	800a0fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	e853 3f00 	ldrex	r3, [r3]
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e6      	bne.n	800a0b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e063      	b.n	800a1c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0304 	and.w	r3, r3, #4
 800a106:	2b04      	cmp	r3, #4
 800a108:	d149      	bne.n	800a19e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a10a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a112:	2200      	movs	r2, #0
 800a114:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f857 	bl	800a1cc <UART_WaitOnFlagUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d03c      	beq.n	800a19e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	623b      	str	r3, [r7, #32]
   return(result);
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a142:	633b      	str	r3, [r7, #48]	@ 0x30
 800a144:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e6      	bne.n	800a124 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3308      	adds	r3, #8
 800a15c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	60fb      	str	r3, [r7, #12]
   return(result);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f023 0301 	bic.w	r3, r3, #1
 800a16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3308      	adds	r3, #8
 800a174:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a176:	61fa      	str	r2, [r7, #28]
 800a178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	69b9      	ldr	r1, [r7, #24]
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	617b      	str	r3, [r7, #20]
   return(result);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e5      	bne.n	800a156 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e012      	b.n	800a1c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3758      	adds	r7, #88	@ 0x58
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1dc:	e04f      	b.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d04b      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1e6:	f7f7 f90d 	bl	8001404 <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d302      	bcc.n	800a1fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e04e      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d037      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b80      	cmp	r3, #128	@ 0x80
 800a212:	d034      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b40      	cmp	r3, #64	@ 0x40
 800a218:	d031      	beq.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b08      	cmp	r3, #8
 800a226:	d110      	bne.n	800a24a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2208      	movs	r2, #8
 800a22e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 f921 	bl	800a478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2208      	movs	r2, #8
 800a23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e029      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69db      	ldr	r3, [r3, #28]
 800a250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a258:	d111      	bne.n	800a27e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f907 	bl	800a478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e00f      	b.n	800a29e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69da      	ldr	r2, [r3, #28]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	4013      	ands	r3, r2
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	bf0c      	ite	eq
 800a28e:	2301      	moveq	r3, #1
 800a290:	2300      	movne	r3, #0
 800a292:	b2db      	uxtb	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	79fb      	ldrb	r3, [r7, #7]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d0a0      	beq.n	800a1de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
	...

0800a2a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b096      	sub	sp, #88	@ 0x58
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	88fa      	ldrh	r2, [r7, #6]
 800a2c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2222      	movs	r2, #34	@ 0x22
 800a2d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d02d      	beq.n	800a33a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2e4:	4a40      	ldr	r2, [pc, #256]	@ (800a3e8 <UART_Start_Receive_DMA+0x140>)
 800a2e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ee:	4a3f      	ldr	r2, [pc, #252]	@ (800a3ec <UART_Start_Receive_DMA+0x144>)
 800a2f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2f8:	4a3d      	ldr	r2, [pc, #244]	@ (800a3f0 <UART_Start_Receive_DMA+0x148>)
 800a2fa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a302:	2200      	movs	r2, #0
 800a304:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3324      	adds	r3, #36	@ 0x24
 800a312:	4619      	mov	r1, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a318:	461a      	mov	r2, r3
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	f7f7 ff88 	bl	8002230 <HAL_DMA_Start_IT>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d009      	beq.n	800a33a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2210      	movs	r2, #16
 800a32a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2220      	movs	r2, #32
 800a332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e051      	b.n	800a3de <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d018      	beq.n	800a374 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34a:	e853 3f00 	ldrex	r3, [r3]
 800a34e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a356:	657b      	str	r3, [r7, #84]	@ 0x54
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a362:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a36e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e6      	bne.n	800a342 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	3308      	adds	r3, #8
 800a37a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a37e:	e853 3f00 	ldrex	r3, [r3]
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	f043 0301 	orr.w	r3, r3, #1
 800a38a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3308      	adds	r3, #8
 800a392:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a394:	637a      	str	r2, [r7, #52]	@ 0x34
 800a396:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a39a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a39c:	e841 2300 	strex	r3, r2, [r1]
 800a3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e5      	bne.n	800a374 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3c8:	623a      	str	r2, [r7, #32]
 800a3ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	69f9      	ldr	r1, [r7, #28]
 800a3ce:	6a3a      	ldr	r2, [r7, #32]
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e5      	bne.n	800a3a8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3758      	adds	r7, #88	@ 0x58
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	0800a545 	.word	0x0800a545
 800a3ec:	0800a66d 	.word	0x0800a66d
 800a3f0:	0800a6ab 	.word	0x0800a6ab

0800a3f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b08f      	sub	sp, #60	@ 0x3c
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	61fb      	str	r3, [r7, #28]
   return(result);
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a41c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a422:	e841 2300 	strex	r3, r2, [r1]
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e6      	bne.n	800a3fc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3308      	adds	r3, #8
 800a434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a444:	633b      	str	r3, [r7, #48]	@ 0x30
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3308      	adds	r3, #8
 800a44c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a44e:	61ba      	str	r2, [r7, #24]
 800a450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	e841 2300 	strex	r3, r2, [r1]
 800a45a:	613b      	str	r3, [r7, #16]
   return(result);
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1e5      	bne.n	800a42e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2220      	movs	r2, #32
 800a466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a46a:	bf00      	nop
 800a46c:	373c      	adds	r7, #60	@ 0x3c
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
	...

0800a478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b095      	sub	sp, #84	@ 0x54
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	461a      	mov	r2, r3
 800a49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a49e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e6      	bne.n	800a480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	e853 3f00 	ldrex	r3, [r3]
 800a4c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4c2:	69fa      	ldr	r2, [r7, #28]
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a540 <UART_EndRxTransfer+0xc8>)
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e5      	bne.n	800a4b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d118      	bne.n	800a520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	e853 3f00 	ldrex	r3, [r3]
 800a4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 0310 	bic.w	r3, r3, #16
 800a502:	647b      	str	r3, [r7, #68]	@ 0x44
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	461a      	mov	r2, r3
 800a50a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a50c:	61bb      	str	r3, [r7, #24]
 800a50e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a510:	6979      	ldr	r1, [r7, #20]
 800a512:	69ba      	ldr	r2, [r7, #24]
 800a514:	e841 2300 	strex	r3, r2, [r1]
 800a518:	613b      	str	r3, [r7, #16]
   return(result);
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1e6      	bne.n	800a4ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2220      	movs	r2, #32
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a534:	bf00      	nop
 800a536:	3754      	adds	r7, #84	@ 0x54
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	effffffe 	.word	0xeffffffe

0800a544 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b09c      	sub	sp, #112	@ 0x70
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a550:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a55a:	d071      	beq.n	800a640 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a55c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a55e:	2200      	movs	r2, #0
 800a560:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a57a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a582:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a584:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a588:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e6      	bne.n	800a564 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a8:	f023 0301 	bic.w	r3, r3, #1
 800a5ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e5      	bne.n	800a596 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a5ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e5      	bne.n	800a5ca <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d118      	bne.n	800a640 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0310 	bic.w	r3, r3, #16
 800a622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a62c:	61fb      	str	r3, [r7, #28]
 800a62e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	69b9      	ldr	r1, [r7, #24]
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	617b      	str	r3, [r7, #20]
   return(result);
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e6      	bne.n	800a60e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a642:	2200      	movs	r2, #0
 800a644:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d107      	bne.n	800a65e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a64e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a654:	4619      	mov	r1, r3
 800a656:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a658:	f7f6 fb44 	bl	8000ce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a65c:	e002      	b.n	800a664 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a65e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a660:	f7fe fd8a 	bl	8009178 <HAL_UART_RxCpltCallback>
}
 800a664:	bf00      	nop
 800a666:	3770      	adds	r7, #112	@ 0x70
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a678:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a684:	2b01      	cmp	r3, #1
 800a686:	d109      	bne.n	800a69c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a68e:	085b      	lsrs	r3, r3, #1
 800a690:	b29b      	uxth	r3, r3
 800a692:	4619      	mov	r1, r3
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f7f6 fb25 	bl	8000ce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a69a:	e002      	b.n	800a6a2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7fe fd75 	bl	800918c <HAL_UART_RxHalfCpltCallback>
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b086      	sub	sp, #24
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6d2:	2b80      	cmp	r3, #128	@ 0x80
 800a6d4:	d109      	bne.n	800a6ea <UART_DMAError+0x40>
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2b21      	cmp	r3, #33	@ 0x21
 800a6da:	d106      	bne.n	800a6ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a6e4:	6978      	ldr	r0, [r7, #20]
 800a6e6:	f7ff fe85 	bl	800a3f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6f4:	2b40      	cmp	r3, #64	@ 0x40
 800a6f6:	d109      	bne.n	800a70c <UART_DMAError+0x62>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b22      	cmp	r3, #34	@ 0x22
 800a6fc:	d106      	bne.n	800a70c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2200      	movs	r2, #0
 800a702:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a706:	6978      	ldr	r0, [r7, #20]
 800a708:	f7ff feb6 	bl	800a478 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a712:	f043 0210 	orr.w	r2, r3, #16
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a71c:	6978      	ldr	r0, [r7, #20]
 800a71e:	f7fe fd3f 	bl	80091a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a722:	bf00      	nop
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7fe fd29 	bl	80091a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a74e:	bf00      	nop
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b088      	sub	sp, #32
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a772:	61fb      	str	r3, [r7, #28]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6979      	ldr	r1, [r7, #20]
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	613b      	str	r3, [r7, #16]
   return(result);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7f6 fa96 	bl	8000cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a4:	bf00      	nop
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <HAL_UARTEx_DisableFifoMode+0x16>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e027      	b.n	800a84e <HAL_UARTEx_DisableFifoMode+0x66>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2224      	movs	r2, #36	@ 0x24
 800a80a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0201 	bic.w	r2, r2, #1
 800a824:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a82c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2220      	movs	r2, #32
 800a840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d101      	bne.n	800a872 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a86e:	2302      	movs	r3, #2
 800a870:	e02d      	b.n	800a8ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2224      	movs	r2, #36	@ 0x24
 800a87e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f022 0201 	bic.w	r2, r2, #1
 800a898:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f8a4 	bl	800a9fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d101      	bne.n	800a8ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e02d      	b.n	800a94a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2224      	movs	r2, #36	@ 0x24
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f022 0201 	bic.w	r2, r2, #1
 800a914:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f866 	bl	800a9fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b08c      	sub	sp, #48	@ 0x30
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	4613      	mov	r3, r2
 800a95e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a966:	2b20      	cmp	r3, #32
 800a968:	d142      	bne.n	800a9f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a970:	88fb      	ldrh	r3, [r7, #6]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e03b      	b.n	800a9f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2201      	movs	r2, #1
 800a97e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a986:	88fb      	ldrh	r3, [r7, #6]
 800a988:	461a      	mov	r2, r3
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff fc8b 	bl	800a2a8 <UART_Start_Receive_DMA>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d124      	bne.n	800a9ea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d11d      	bne.n	800a9e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2210      	movs	r2, #16
 800a9ae:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f043 0310 	orr.w	r3, r3, #16
 800a9c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9d0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6a39      	ldr	r1, [r7, #32]
 800a9d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e6      	bne.n	800a9b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a9e2:	e002      	b.n	800a9ea <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9ee:	e000      	b.n	800a9f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a9f0:	2302      	movs	r3, #2
  }
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3730      	adds	r7, #48	@ 0x30
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
	...

0800a9fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d108      	bne.n	800aa1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa1c:	e031      	b.n	800aa82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa1e:	2310      	movs	r3, #16
 800aa20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa22:	2310      	movs	r3, #16
 800aa24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	0e5b      	lsrs	r3, r3, #25
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f003 0307 	and.w	r3, r3, #7
 800aa34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	0f5b      	lsrs	r3, r3, #29
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	f003 0307 	and.w	r3, r3, #7
 800aa44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	7b3a      	ldrb	r2, [r7, #12]
 800aa4a:	4911      	ldr	r1, [pc, #68]	@ (800aa90 <UARTEx_SetNbDataToProcess+0x94>)
 800aa4c:	5c8a      	ldrb	r2, [r1, r2]
 800aa4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa52:	7b3a      	ldrb	r2, [r7, #12]
 800aa54:	490f      	ldr	r1, [pc, #60]	@ (800aa94 <UARTEx_SetNbDataToProcess+0x98>)
 800aa56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa58:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	7b7a      	ldrb	r2, [r7, #13]
 800aa68:	4909      	ldr	r1, [pc, #36]	@ (800aa90 <UARTEx_SetNbDataToProcess+0x94>)
 800aa6a:	5c8a      	ldrb	r2, [r1, r2]
 800aa6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa70:	7b7a      	ldrb	r2, [r7, #13]
 800aa72:	4908      	ldr	r1, [pc, #32]	@ (800aa94 <UARTEx_SetNbDataToProcess+0x98>)
 800aa74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa76:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aa82:	bf00      	nop
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	0800ab40 	.word	0x0800ab40
 800aa94:	0800ab48 	.word	0x0800ab48

0800aa98 <memset>:
 800aa98:	4402      	add	r2, r0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d100      	bne.n	800aaa2 <memset+0xa>
 800aaa0:	4770      	bx	lr
 800aaa2:	f803 1b01 	strb.w	r1, [r3], #1
 800aaa6:	e7f9      	b.n	800aa9c <memset+0x4>

0800aaa8 <__libc_init_array>:
 800aaa8:	b570      	push	{r4, r5, r6, lr}
 800aaaa:	4d0d      	ldr	r5, [pc, #52]	@ (800aae0 <__libc_init_array+0x38>)
 800aaac:	4c0d      	ldr	r4, [pc, #52]	@ (800aae4 <__libc_init_array+0x3c>)
 800aaae:	1b64      	subs	r4, r4, r5
 800aab0:	10a4      	asrs	r4, r4, #2
 800aab2:	2600      	movs	r6, #0
 800aab4:	42a6      	cmp	r6, r4
 800aab6:	d109      	bne.n	800aacc <__libc_init_array+0x24>
 800aab8:	4d0b      	ldr	r5, [pc, #44]	@ (800aae8 <__libc_init_array+0x40>)
 800aaba:	4c0c      	ldr	r4, [pc, #48]	@ (800aaec <__libc_init_array+0x44>)
 800aabc:	f000 f818 	bl	800aaf0 <_init>
 800aac0:	1b64      	subs	r4, r4, r5
 800aac2:	10a4      	asrs	r4, r4, #2
 800aac4:	2600      	movs	r6, #0
 800aac6:	42a6      	cmp	r6, r4
 800aac8:	d105      	bne.n	800aad6 <__libc_init_array+0x2e>
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad0:	4798      	blx	r3
 800aad2:	3601      	adds	r6, #1
 800aad4:	e7ee      	b.n	800aab4 <__libc_init_array+0xc>
 800aad6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aada:	4798      	blx	r3
 800aadc:	3601      	adds	r6, #1
 800aade:	e7f2      	b.n	800aac6 <__libc_init_array+0x1e>
 800aae0:	0800ab58 	.word	0x0800ab58
 800aae4:	0800ab58 	.word	0x0800ab58
 800aae8:	0800ab58 	.word	0x0800ab58
 800aaec:	0800ab5c 	.word	0x0800ab5c

0800aaf0 <_init>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	bf00      	nop
 800aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	469e      	mov	lr, r3
 800aafa:	4770      	bx	lr

0800aafc <_fini>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr
