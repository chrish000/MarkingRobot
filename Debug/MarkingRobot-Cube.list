
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a044  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a310  0800a310  0000b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a350  0800a350  0000b350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800a358  0800a358  0000b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a360  0800a360  0000b360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800a364  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000550  24000018  0800a378  0000c018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000568  0800a378  0000c568  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d496  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003252  00000000  00000000  000294d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013f8  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f91  00000000  00000000  0002db28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f17  00000000  00000000  0002eab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b320  00000000  00000000  000629d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001520de  00000000  00000000  0007dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cfdce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005560  00000000  00000000  001cfe14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001d5374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800a2f8 	.word	0x0800a2f8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800a2f8 	.word	0x0800a2f8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZL11reverseDatamh>:
 * @brief  Reverses the byte order of a given 32-bit data word.
 * @param  data: The 32-bit data word whose byte order is to be reversed.
 * @param  data_size: The number of bytes in the data word.
 * @retval unsigned int: The 32-bit data word with reversed byte order.
 */
static inline unsigned int reverseData(uint32_t data, uint8_t data_size) {
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	const unsigned char BITS_PER_BYTE = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	74bb      	strb	r3, [r7, #18]
	const unsigned char BYTE_MAX_VALUE = 0xFF;
 800060c:	23ff      	movs	r3, #255	@ 0xff
 800060e:	747b      	strb	r3, [r7, #17]
	uint32_t reversed_data = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < data_size; ++i) {
 8000614:	2300      	movs	r3, #0
 8000616:	74fb      	strb	r3, [r7, #19]
 8000618:	e017      	b.n	800064a <_ZL11reverseDatamh+0x4e>
		right_shift = (data_size - i - 1) * BITS_PER_BYTE;
 800061a:	78fa      	ldrb	r2, [r7, #3]
 800061c:	7cfb      	ldrb	r3, [r7, #19]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	3b01      	subs	r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	743b      	strb	r3, [r7, #16]
		left_shift = i * BITS_PER_BYTE;
 8000628:	7cfb      	ldrb	r3, [r7, #19]
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800062e:	7c3b      	ldrb	r3, [r7, #16]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	fa22 f303 	lsr.w	r3, r2, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	4313      	orrs	r3, r2
 8000642:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < data_size; ++i) {
 8000644:	7cfb      	ldrb	r3, [r7, #19]
 8000646:	3301      	adds	r3, #1
 8000648:	74fb      	strb	r3, [r7, #19]
 800064a:	7cfa      	ldrb	r2, [r7, #19]
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e3      	bcc.n	800061a <_ZL11reverseDatamh+0x1e>
	}
	return reversed_data;
 8000652:	697b      	ldr	r3, [r7, #20]
}
 8000654:	4618      	mov	r0, r3
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <_ZN7TMC2209C1Ev>:
#include "utils.h"

/**
 * @brief  Constructor for the TMC2209 class, initializes default settings.
 */
TMC2209::TMC2209() {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2203      	movs	r2, #3
 800066c:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
	cool_step_enabled_ = false;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
	data_received_flag = false;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
}
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_ZN7TMC22095setupEv>:
/**
 * @brief  Configures the TMC2209 communication interface.
 * @param  None
 * @retval None
 */
void TMC2209::setup() {
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&serial_address, (uint8_t*) &rxBuffer,
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	33a0      	adds	r3, #160	@ 0xa0
 800069c:	2208      	movs	r2, #8
 800069e:	4619      	mov	r1, r3
 80006a0:	f009 fd4d 	bl	800a13e <HAL_UARTEx_ReceiveToIdle_DMA>
			WRITE_READ_REPLY_DATAGRAM_SIZE);
	//HAL_HalfDuplex_EnableReceiver(&serial_address);


	initialize();
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f899 	bl	80007dc <_ZN7TMC220910initializeEv>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_ZN7TMC22097disableEv>:
/**
 * @brief  Disables the TMC2209 driver by setting the enable pin and disabling the chopper.
 * @param  None
 * @retval None
 */
void TMC2209::disable() {
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hardware_enable_port, hardware_enable_pin, GPIO_PIN_SET); //Treiber deaktivieren
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3094 	ldrh.w	r3, [r3, #148]	@ 0x94
 80006c6:	2201      	movs	r2, #1
 80006c8:	4619      	mov	r1, r3
 80006ca:	f004 f911 	bl	80048f0 <HAL_GPIO_WritePin>
	chopper_config_.toff = TOFF_DISABLE;
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	f892 30c0 	ldrb.w	r3, [r2, #192]	@ 0xc0
 80006d4:	f36f 0303 	bfc	r3, #0, #4
 80006d8:	f882 30c0 	strb.w	r3, [r2, #192]	@ 0xc0
	writeStoredChopperConfig();
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 fa70 	bl	8000bc2 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_ZN7TMC220920setMicrostepsPerStepEt>:
/**
 * @brief  Sets the number of microsteps per full step for the TMC2209 driver.
 * @param  microsteps_per_step: Desired microstep resolution.
 * @retval None
 */
void TMC2209::setMicrostepsPerStep(uint16_t microsteps_per_step) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	807b      	strh	r3, [r7, #2]
	chopper_config_.mres = microsteps_per_step;
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	b2d9      	uxtb	r1, r3
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	f892 30c3 	ldrb.w	r3, [r2, #195]	@ 0xc3
 8000704:	f361 0303 	bfi	r3, r1, #0, #4
 8000708:	f882 30c3 	strb.w	r3, [r2, #195]	@ 0xc3
	writeStoredChopperConfig();
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 fa58 	bl	8000bc2 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
/**
 * @brief  Disables automatic current scaling by clearing the corresponding bit in the PWM configuration.
 * @param  None
 * @retval None
 */
void TMC2209::disableAutomaticCurrentScaling() {
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	f892 30ca 	ldrb.w	r3, [r2, #202]	@ 0xca
 8000728:	f36f 0382 	bfc	r3, #2, #1
 800072c:	f882 30ca 	strb.w	r3, [r2, #202]	@ 0xca
	writeStoredPwmConfig();
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fa56 	bl	8000be2 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
/**
 * @brief  Disables automatic gradient adaptation by clearing the corresponding bit in the PWM configuration.
 * @param  None
 * @retval None
 */
void TMC2209::disableAutomaticGradientAdaptation() {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	f892 30ca 	ldrb.w	r3, [r2, #202]	@ 0xca
 800074c:	f36f 03c3 	bfc	r3, #3, #1
 8000750:	f882 30ca 	strb.w	r3, [r2, #202]	@ 0xca
	writeStoredPwmConfig();
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 fa44 	bl	8000be2 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_ZN7TMC220910getVersionEv>:
/**
 * @brief  Reads the version of the TMC2209 driver.
 * @param  None
 * @retval uint8_t The version of the driver.
 */
uint8_t TMC2209::getVersion() {
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
	Input input;
	input.bytes = read(ADDRESS_IOIN);
 800076a:	2106      	movs	r1, #6
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f97b 	bl	8000a68 <_ZN7TMC22094readEh>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]

	return input.version;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <_ZN7TMC220923isSetupAndCommunicatingEv>:
/**
 * @brief  Checks if the TMC2209 is both set up and communicating correctly.
 * @param  None
 * @retval bool True if the driver is set up and communication is successful, false otherwise.
 */
bool TMC2209::isSetupAndCommunicating() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	return serialOperationMode();
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f8ff 	bl	800098c <_ZN7TMC220919serialOperationModeEv>
 800078e:	4603      	mov	r3, r0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN7TMC220915clearDriveErrorEv>:
/**
 * @brief  Clears the drive error flag in the global status register of the TMC2209.
 * @param  None
 * @retval None
 */
void TMC2209::clearDriveError() {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	GlobalStatusUnion global_status_union;
	global_status_union.bytes = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	global_status_union.global_status.drv_err = 1;
 80007a4:	7b3b      	ldrb	r3, [r7, #12]
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	733b      	strb	r3, [r7, #12]
	write(ADDRESS_GSTAT, global_status_union.bytes);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	461a      	mov	r2, r3
 80007b0:	2101      	movs	r1, #1
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f91a 	bl	80009ec <_ZN7TMC22095writeEhm>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <_ZN7TMC220931getInterfaceTransmissionCounterEv>:
/**
 * @brief  Retrieves the interface transmission counter from the TMC2209.
 * @param  None
 * @retval uint8_t  The current value of the interface transmission counter.
 */
uint8_t TMC2209::getInterfaceTransmissionCounter() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_IFCNT);
 80007c8:	2102      	movs	r1, #2
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f94c 	bl	8000a68 <_ZN7TMC22094readEh>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b2db      	uxtb	r3, r3
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN7TMC220910initializeEv>:
/* Private methods -----------------------------------------------------------*/

/**
 * @brief  Initializes the TMC2209 driver by setting operation mode, clearing errors, and configuring settings.
 */
void TMC2209::initialize() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	setOperationModeToSerial();
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f816 	bl	8000816 <_ZN7TMC220924setOperationModeToSerialEv>
	setRegistersToDefaults();
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f83e 	bl	800086c <_ZN7TMC220922setRegistersToDefaultsEv>
	clearDriveError();
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ffd1 	bl	8000798 <_ZN7TMC220915clearDriveErrorEv>

	minimizeMotorCurrent();
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 f8de 	bl	80009b8 <_ZN7TMC220920minimizeMotorCurrentEv>
	disable();
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ff58 	bl	80006b2 <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff89 	bl	800071a <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff98 	bl	800073e <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZN7TMC220924setOperationModeToSerialEv>:
/**
 * @brief  Sets the operation mode of the TMC2209 to serial communication mode by configuring global settings.
 * @param  None
 * @retval None
 */
void TMC2209::setOperationModeToSerial() {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]

	global_config_.bytes = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	global_config_.i_scale_analog = 0;
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
 800082c:	f36f 0300 	bfc	r3, #0, #1
 8000830:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	global_config_.pdn_disable = 1;
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
 800083a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083e:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	global_config_.mstep_reg_select = 1;
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	global_config_.multistep_filt = 1;
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	f892 30b1 	ldrb.w	r3, [r2, #177]	@ 0xb1
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	f882 30b1 	strb.w	r3, [r2, #177]	@ 0xb1

	writeStoredGlobalConfig();
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f95e 	bl	8000b20 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <_ZN7TMC220922setRegistersToDefaultsEv>:
/**
 * @brief  Initializes the TMC2209 registers to their default values.
 * @param  None
 * @retval None
 */
void TMC2209::setRegistersToDefaults() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	driver_current_.ihold = IHOLD_DEFAULT;
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 8000882:	2110      	movs	r1, #16
 8000884:	f361 0304 	bfi	r3, r1, #0, #5
 8000888:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
	driver_current_.irun = IRUN_DEFAULT;
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8000892:	f043 031f 	orr.w	r3, r3, #31
 8000896:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 80008a0:	2101      	movs	r1, #1
 80008a2:	f361 0303 	bfi	r3, r1, #0, #4
 80008a6:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80008b0:	461a      	mov	r2, r3
 80008b2:	2110      	movs	r1, #16
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f899 	bl	80009ec <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a31      	ldr	r2, [pc, #196]	@ (8000984 <_ZN7TMC220922setRegistersToDefaultsEv+0x118>)
 80008be:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	chopper_config_.tbl = TBL_DEFAULT;
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80008c8:	2102      	movs	r1, #2
 80008ca:	f361 33d0 	bfi	r3, r1, #15, #2
 80008ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
	chopper_config_.hend = HEND_DEFAULT;
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	@ 0xc0
 80008d8:	f36f 13ca 	bfc	r3, #7, #4
 80008dc:	f8a2 30c0 	strh.w	r3, [r2, #192]	@ 0xc0
	chopper_config_.hstart = HSTART_DEFAULT;
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	f892 30c0 	ldrb.w	r3, [r2, #192]	@ 0xc0
 80008e6:	2105      	movs	r1, #5
 80008e8:	f361 1306 	bfi	r3, r1, #4, #3
 80008ec:	f882 30c0 	strb.w	r3, [r2, #192]	@ 0xc0
	chopper_config_.toff = TOFF_DEFAULT;
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	f892 30c0 	ldrb.w	r3, [r2, #192]	@ 0xc0
 80008f6:	2103      	movs	r1, #3
 80008f8:	f361 0303 	bfi	r3, r1, #0, #4
 80008fc:	f882 30c0 	strb.w	r3, [r2, #192]	@ 0xc0
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000906:	461a      	mov	r2, r3
 8000908:	216c      	movs	r1, #108	@ 0x6c
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f86e 	bl	80009ec <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a1d      	ldr	r2, [pc, #116]	@ (8000988 <_ZN7TMC220922setRegistersToDefaultsEv+0x11c>)
 8000914:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800091e:	461a      	mov	r2, r3
 8000920:	2170      	movs	r1, #112	@ 0x70
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f862 	bl	80009ec <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8000936:	461a      	mov	r2, r3
 8000938:	2142      	movs	r1, #66	@ 0x42
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f856 	bl	80009ec <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8000940:	2214      	movs	r2, #20
 8000942:	2111      	movs	r1, #17
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f851 	bl	80009ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 800094a:	2200      	movs	r2, #0
 800094c:	2113      	movs	r1, #19
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f84c 	bl	80009ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8000954:	2200      	movs	r2, #0
 8000956:	2122      	movs	r1, #34	@ 0x22
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f847 	bl	80009ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 800095e:	2200      	movs	r2, #0
 8000960:	2114      	movs	r1, #20
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f842 	bl	80009ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 8000968:	2200      	movs	r2, #0
 800096a:	2140      	movs	r1, #64	@ 0x40
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f83d 	bl	80009ec <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8000972:	2200      	movs	r2, #0
 8000974:	2142      	movs	r1, #66	@ 0x42
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f838 	bl	80009ec <_ZN7TMC22095writeEhm>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	10000053 	.word	0x10000053
 8000988:	c10d0024 	.word	0xc10d0024

0800098c <_ZN7TMC220919serialOperationModeEv>:
/**
 * @brief  Checks if the serial operation mode is enabled by reading the global configuration register.
 * @param  None
 * @retval True if serial operation mode is enabled, false otherwise.
 */
bool TMC2209::serialOperationMode() {
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	GlobalConfig global_config;
	global_config.bytes = readGlobalConfigBytes();
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f8d3 	bl	8000b40 <_ZN7TMC220921readGlobalConfigBytesEv>
 800099a:	4603      	mov	r3, r0
 800099c:	60fb      	str	r3, [r7, #12]

	return global_config.pdn_disable;
 800099e:	7b3b      	ldrb	r3, [r7, #12]
 80009a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf14      	ite	ne
 80009aa:	2301      	movne	r3, #1
 80009ac:	2300      	moveq	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_ZN7TMC220920minimizeMotorCurrentEv>:
/**
 * @brief  Minimizes the motor current by setting both the run and hold current to the minimum value.
 * @param  None
 * @retval None
 */
void TMC2209::minimizeMotorCurrent() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	driver_current_.irun = CURRENT_SETTING_MIN;
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 80009c6:	f36f 0304 	bfc	r3, #0, #5
 80009ca:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
	driver_current_.ihold = CURRENT_SETTING_MIN;
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 80009d4:	f36f 0304 	bfc	r3, #0, #5
 80009d8:	f882 30b4 	strb.w	r3, [r2, #180]	@ 0xb4
	writeStoredDriverCurrent();
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f8bc 	bl	8000b5a <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <_ZN7TMC22095writeEhm>:
 * @brief  Writes data to a specific register of the TMC2209.
 * @param  register_address: The address of the register to write to.
 * @param  data: The data to write to the register.
 * @retval None
 */
void TMC2209::write(uint8_t register_address, uint32_t data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	460b      	mov	r3, r1
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 80009fa:	f04f 0200 	mov.w	r2, #0
 80009fe:	f04f 0300 	mov.w	r3, #0
 8000a02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8000a06:	7c3b      	ldrb	r3, [r7, #16]
 8000a08:	2205      	movs	r2, #5
 8000a0a:	f362 0303 	bfi	r3, r2, #0, #4
 8000a0e:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = DEFAULT_SERIAL_ADDRESS;
 8000a10:	2300      	movs	r3, #0
 8000a12:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8000a14:	7afb      	ldrb	r3, [r7, #11]
 8000a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	7cbb      	ldrb	r3, [r7, #18]
 8000a1e:	f362 0306 	bfi	r3, r2, #0, #7
 8000a22:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8000a24:	7cbb      	ldrb	r3, [r7, #18]
 8000a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2a:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data, DATA_SIZE);
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fde4 	bl	80005fc <_ZL11reverseDatamh>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) &write_datagram,
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2207      	movs	r2, #7
 8000a40:	4619      	mov	r1, r3
 8000a42:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <_ZN7TMC22095writeEhm+0x78>)
 8000a44:	f001 fb36 	bl	80020b4 <HAL_CRC_Calculate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	75fb      	strb	r3, [r7, #23]
			WRITE_READ_REPLY_DATAGRAM_SIZE - 1);

	sendDatagram(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2208      	movs	r2, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f000 f8d3 	bl	8000c02 <_ZN7TMC220912sendDatagramINS_22WriteReadReplyDatagramEEEvRT_h>
}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	24000034 	.word	0x24000034

08000a68 <_ZN7TMC22094readEh>:
/**
 * @brief  Reads data from a specific register of the TMC2209.
 * @param  register_address: The address of the register to read from.
 * @retval uint32_t: The data read from the register, or 0xFFFFFFFF in case of a timeout.
 */
uint32_t TMC2209::read(uint8_t register_address) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
	ReadRequestDatagram read_request_datagram;
	read_request_datagram.bytes = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
	read_request_datagram.sync = SYNC;
 8000a78:	7a3b      	ldrb	r3, [r7, #8]
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	f362 0303 	bfi	r3, r2, #0, #4
 8000a80:	723b      	strb	r3, [r7, #8]
	read_request_datagram.serial_address = DEFAULT_SERIAL_ADDRESS;
 8000a82:	2300      	movs	r3, #0
 8000a84:	727b      	strb	r3, [r7, #9]
	read_request_datagram.register_address = register_address;
 8000a86:	78fb      	ldrb	r3, [r7, #3]
 8000a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	7abb      	ldrb	r3, [r7, #10]
 8000a90:	f362 0306 	bfi	r3, r2, #0, #7
 8000a94:	72bb      	strb	r3, [r7, #10]
	read_request_datagram.rw = RW_READ;
 8000a96:	7abb      	ldrb	r3, [r7, #10]
 8000a98:	f36f 13c7 	bfc	r3, #7, #1
 8000a9c:	72bb      	strb	r3, [r7, #10]
	read_request_datagram.crc = HAL_CRC_Calculate(&hcrc,
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481d      	ldr	r0, [pc, #116]	@ (8000b1c <_ZN7TMC22094readEh+0xb4>)
 8000aa8:	f001 fb04 	bl	80020b4 <HAL_CRC_Calculate>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	72fb      	strb	r3, [r7, #11]
			(uint32_t*) &read_request_datagram, READ_REQUEST_DATAGRAM_SIZE - 1);

	sendDatagram(read_request_datagram, READ_REQUEST_DATAGRAM_SIZE);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f8b7 	bl	8000c2e <_ZN7TMC220912sendDatagramINS_19ReadRequestDatagramEEEvRT_h>

	uint32_t timeout = HAL_GetTick() + READ_REPLY_TIMEOUT;
 8000ac0:	f001 f8dc 	bl	8001c7c <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000aca:	4413      	add	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
	while (!data_received_flag) {
 8000ace:	e00d      	b.n	8000aec <_ZN7TMC22094readEh+0x84>
		if (HAL_GetTick() > timeout) {
 8000ad0:	f001 f8d4 	bl	8001c7c <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	bf34      	ite	cc
 8000adc:	2301      	movcc	r3, #1
 8000ade:	2300      	movcs	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <_ZN7TMC22094readEh+0x84>
			return 0xFFFFFFFF; // Timeout-Fehlerwert
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e013      	b.n	8000b14 <_ZN7TMC22094readEh+0xac>
	while (!data_received_flag) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8000af2:	f083 0301 	eor.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1e9      	bne.n	8000ad0 <_ZN7TMC22094readEh+0x68>
		}
	}
	data_received_flag = false;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	HAL_HalfDuplex_EnableTransmitter(&serial_address);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f007 fefc 	bl	8008904 <HAL_HalfDuplex_EnableTransmitter>
	return rxBuffer.bytes;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000b12:	4613      	mov	r3, r2
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000034 	.word	0x24000034

08000b20 <_ZN7TMC220923writeStoredGlobalConfigEv>:
/**
 * @brief  Writes the stored global configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredGlobalConfig() {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff5a 	bl	80009ec <_ZN7TMC22095writeEhm>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_ZN7TMC220921readGlobalConfigBytesEv>:
/**
 * @brief  Reads the global configuration bytes from the driver.
 * @param  None
 * @retval uint32_t  The global configuration bytes.
 */
uint32_t TMC2209::readGlobalConfigBytes() {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_GCONF);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff8c 	bl	8000a68 <_ZN7TMC22094readEh>
 8000b50:	4603      	mov	r3, r0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_ZN7TMC220924writeStoredDriverCurrentEv>:
/**
 * @brief  Writes the stored driver current configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredDriverCurrent() {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff3d 	bl	80009ec <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8000b78:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b13      	cmp	r3, #19
 8000b80:	d907      	bls.n	8000b92 <_ZN7TMC220924writeStoredDriverCurrentEv+0x38>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	f892 30b9 	ldrb.w	r3, [r2, #185]	@ 0xb9
 8000b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b8c:	f882 30b9 	strb.w	r3, [r2, #185]	@ 0xb9
 8000b90:	e006      	b.n	8000ba0 <_ZN7TMC220924writeStoredDriverCurrentEv+0x46>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	f892 30b9 	ldrb.w	r3, [r2, #185]	@ 0xb9
 8000b98:	f36f 13c7 	bfc	r3, #7, #1
 8000b9c:	f882 30b9 	strb.w	r3, [r2, #185]	@ 0xb9
	}
	if (cool_step_enabled_) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <_ZN7TMC220924writeStoredDriverCurrentEv+0x60>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	2142      	movs	r1, #66	@ 0x42
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff19 	bl	80009ec <_ZN7TMC22095writeEhm>
	}
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_ZN7TMC220924writeStoredChopperConfigEv>:
/**
 * @brief  Writes the stored chopper configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredChopperConfig() {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	216c      	movs	r1, #108	@ 0x6c
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff09 	bl	80009ec <_ZN7TMC22095writeEhm>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_ZN7TMC220920writeStoredPwmConfigEv>:
/**
 * @brief  Writes the stored PWM configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredPwmConfig() {
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2170      	movs	r1, #112	@ 0x70
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fef9 	bl	80009ec <_ZN7TMC22095writeEhm>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_ZN7TMC220912sendDatagramINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagram(Datagram &datagram, uint8_t datagram_size) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(&serial_address);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 fe76 	bl	8008904 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit_DMA(&serial_address, (uint8_t*) &datagram, datagram_size);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	b292      	uxth	r2, r2
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 fdc7 	bl	80087b4 <HAL_UART_Transmit_DMA>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_ZN7TMC220912sendDatagramINS_19ReadRequestDatagramEEEvRT_h>:
void TMC2209::sendDatagram(Datagram &datagram, uint8_t datagram_size) {
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(&serial_address);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 fe60 	bl	8008904 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit_DMA(&serial_address, (uint8_t*) &datagram, datagram_size);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f007 fdb1 	bl	80087b4 <HAL_UART_Transmit_DMA>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000c62:	f000 fc37 	bl	80014d4 <_ZL10MPU_Configv>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c66:	f000 ff83 	bl	8001b70 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c6a:	f000 f85f 	bl	8000d2c <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c6e:	f000 faa5 	bl	80011bc <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000c72:	f000 fa6b 	bl	800114c <_ZL11MX_DMA_Initv>
	MX_UART8_Init();
 8000c76:	f000 f9a9 	bl	8000fcc <_ZL13MX_UART8_Initv>
	MX_USART2_UART_Init();
 8000c7a:	f000 fa07 	bl	800108c <_ZL19MX_USART2_UART_Initv>
	MX_CRC_Init();
 8000c7e:	f000 f8d3 	bl	8000e28 <_ZL11MX_CRC_Initv>
	MX_TIM2_Init();
 8000c82:	f000 f915 	bl	8000eb0 <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */
	/* Peripheral Configuration */
	tmcX.serial_address = huart2;
 8000c86:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <main+0xb0>)
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <main+0xb4>)
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2394      	movs	r3, #148	@ 0x94
 8000c90:	461a      	mov	r2, r3
 8000c92:	f009 fb23 	bl	800a2dc <memcpy>
	tmcX.hardware_enable_port = X_EN_GPIO_Port;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <main+0xb0>)
 8000c98:	4a1e      	ldr	r2, [pc, #120]	@ (8000d14 <main+0xb8>)
 8000c9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	tmcX.hardware_enable_pin = X_EN_Pin;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <main+0xb0>)
 8000ca0:	2240      	movs	r2, #64	@ 0x40
 8000ca2:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	tmcX.setup();
 8000ca6:	4819      	ldr	r0, [pc, #100]	@ (8000d0c <main+0xb0>)
 8000ca8:	f7ff fcf1 	bl	800068e <_ZN7TMC22095setupEv>

	tmcZ.serial_address = huart8;
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <main+0xbc>)
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <main+0xc0>)
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	2394      	movs	r3, #148	@ 0x94
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f009 fb10 	bl	800a2dc <memcpy>
	tmcZ.hardware_enable_port = Z_EN_GPIO_Port;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <main+0xbc>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <main+0xc4>)
 8000cc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	tmcZ.hardware_enable_pin = Z_EN_Pin;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <main+0xbc>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	tmcZ.setup();
 8000ccc:	4812      	ldr	r0, [pc, #72]	@ (8000d18 <main+0xbc>)
 8000cce:	f7ff fcde 	bl	800068e <_ZN7TMC22095setupEv>

	/* CLK Configuration */
	HAL_TIM_Base_Start_IT(&htim2);
 8000cd2:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <main+0xc8>)
 8000cd4:	f006 fc14 	bl	8007500 <HAL_TIM_Base_Start_IT>
	/* UART Configuration */

	/* Code before infinite loop */
	//uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
	//uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
	bool set = tmcX.isSetupAndCommunicating();
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <main+0xb0>)
 8000cda:	f7ff fd51 	bl	8000780 <_ZN7TMC220923isSetupAndCommunicatingEv>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	uint8_t version = tmcX.getVersion();
 8000ce2:	480a      	ldr	r0, [pc, #40]	@ (8000d0c <main+0xb0>)
 8000ce4:	f7ff fd3d 	bl	8000762 <_ZN7TMC220910getVersionEv>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71bb      	strb	r3, [r7, #6]
	tmcX.setMicrostepsPerStep(256);
 8000cec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf0:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <main+0xb0>)
 8000cf2:	f7ff fcfa 	bl	80006ea <_ZN7TMC220920setMicrostepsPerStepEt>
	uint8_t counter = tmcX.getInterfaceTransmissionCounter();
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <main+0xb0>)
 8000cf8:	f7ff fd62 	bl	80007c0 <_ZN7TMC220931getInterfaceTransmissionCounterEv>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	717b      	strb	r3, [r7, #5]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <main+0xcc>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	e7fa      	b.n	8000d00 <main+0xa4>
 8000d0a:	bf00      	nop
 8000d0c:	240003b0 	.word	0x240003b0
 8000d10:	24000138 	.word	0x24000138
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	24000480 	.word	0x24000480
 8000d1c:	240000a4 	.word	0x240000a4
 8000d20:	58021000 	.word	0x58021000
 8000d24:	24000058 	.word	0x24000058
 8000d28:	24000550 	.word	0x24000550

08000d2c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09c      	sub	sp, #112	@ 0x70
 8000d30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	224c      	movs	r2, #76	@ 0x4c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f009 faa2 	bl	800a284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2220      	movs	r2, #32
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f009 fa9c 	bl	800a284 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f003 fe1d 	bl	800498c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b33      	ldr	r3, [pc, #204]	@ (8000e24 <_Z18SystemClock_Configv+0xf8>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a32      	ldr	r2, [pc, #200]	@ (8000e24 <_Z18SystemClock_Configv+0xf8>)
 8000d5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <_Z18SystemClock_Configv+0xf8>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000d6e:	bf00      	nop
 8000d70:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <_Z18SystemClock_Configv+0xf8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d7c:	bf14      	ite	ne
 8000d7e:	2301      	movne	r3, #1
 8000d80:	2300      	moveq	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f3      	bne.n	8000d70 <_Z18SystemClock_Configv+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d90:	2340      	movs	r3, #64	@ 0x40
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 8000da0:	2322      	movs	r3, #34	@ 0x22
 8000da2:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000da8:	2303      	movs	r3, #3
 8000daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000db0:	230c      	movs	r3, #12
 8000db2:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000db8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 fe1c 	bl	8004a00 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	bf14      	ite	ne
 8000dce:	2301      	movne	r3, #1
 8000dd0:	2300      	moveq	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <_Z18SystemClock_Configv+0xb0>
		Error_Handler();
 8000dd8:	f000 fba8 	bl	800152c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ddc:	233f      	movs	r3, #63	@ 0x3f
 8000dde:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de0:	2303      	movs	r3, #3
 8000de2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de8:	2308      	movs	r3, #8
 8000dea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df0:	2340      	movs	r3, #64	@ 0x40
 8000df2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dfa:	2340      	movs	r3, #64	@ 0x40
 8000dfc:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2103      	movs	r1, #3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 f9d6 	bl	80051b4 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 8000e18:	f000 fb88 	bl	800152c <Error_Handler>
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3770      	adds	r7, #112	@ 0x70
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024800 	.word	0x58024800

08000e28 <_ZL11MX_CRC_Initv>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <_ZL11MX_CRC_Initv+0x7c>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea4 <_ZL11MX_CRC_Initv+0x7c>)
 8000e36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <_ZL11MX_CRC_Initv+0x7c>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <_ZL11MX_CRC_Initv+0x84>)
 8000e50:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000e82:	4809      	ldr	r0, [pc, #36]	@ (8000ea8 <_ZL11MX_CRC_Initv+0x80>)
 8000e84:	f001 f8b2 	bl	8001fec <HAL_CRC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bf14      	ite	ne
 8000e8e:	2301      	movne	r3, #1
 8000e90:	2300      	moveq	r3, #0
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <_ZL11MX_CRC_Initv+0x74>
		Error_Handler();
 8000e98:	f000 fb48 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	24000034 	.word	0x24000034
 8000eac:	58024c00 	.word	0x58024c00

08000eb0 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	@ 0x38
 8000eb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ee2:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ee8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 8000eea:	4b37      	ldr	r3, [pc, #220]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000eec:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000ef0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000ef8:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000efa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000efe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b30      	ldr	r3, [pc, #192]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000f0c:	482e      	ldr	r0, [pc, #184]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000f0e:	f006 fa9f 	bl	8007450 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <_ZL12MX_TIM2_Initv+0x76>
		Error_Handler();
 8000f22:	f000 fb03 	bl	800152c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000f2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4825      	ldr	r0, [pc, #148]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000f34:	f006 fde6 	bl	8007b04 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <_ZL12MX_TIM2_Initv+0x9c>
		Error_Handler();
 8000f48:	f000 faf0 	bl	800152c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000f4c:	481e      	ldr	r0, [pc, #120]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000f4e:	f006 fb5d 	bl	800760c <HAL_TIM_PWM_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <_ZL12MX_TIM2_Initv+0xb6>
		Error_Handler();
 8000f62:	f000 fae3 	bl	800152c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000f76:	f007 fb0b 	bl	8008590 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <_ZL12MX_TIM2_Initv+0xde>
		Error_Handler();
 8000f8a:	f000 facf 	bl	800152c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f8e:	2360      	movs	r3, #96	@ 0x60
 8000f90:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000f92:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f96:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4808      	ldr	r0, [pc, #32]	@ (8000fc8 <_ZL12MX_TIM2_Initv+0x118>)
 8000fa8:	f006 fc98 	bl	80078dc <HAL_TIM_PWM_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf14      	ite	ne
 8000fb2:	2301      	movne	r3, #1
 8000fb4:	2300      	moveq	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <_ZL12MX_TIM2_Initv+0x110>
		Error_Handler();
 8000fbc:	f000 fab6 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3738      	adds	r7, #56	@ 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	24000058 	.word	0x24000058

08000fcc <_ZL13MX_UART8_Initv>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8001088 <_ZL13MX_UART8_Initv+0xbc>)
 8000fd4:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b26      	ldr	r3, [pc, #152]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001008:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK) {
 8001014:	481b      	ldr	r0, [pc, #108]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8001016:	f007 fb75 	bl	8008704 <HAL_HalfDuplex_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <_ZL13MX_UART8_Initv+0x62>
		Error_Handler();
 800102a:	f000 fa7f 	bl	800152c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 800102e:	2100      	movs	r1, #0
 8001030:	4814      	ldr	r0, [pc, #80]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8001032:	f009 f808 	bl	800a046 <HAL_UARTEx_SetTxFifoThreshold>
 8001036:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001038:	2b00      	cmp	r3, #0
 800103a:	bf14      	ite	ne
 800103c:	2301      	movne	r3, #1
 800103e:	2300      	moveq	r3, #0
 8001040:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <_ZL13MX_UART8_Initv+0x7e>
		Error_Handler();
 8001046:	f000 fa71 	bl	800152c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 800104a:	2100      	movs	r1, #0
 800104c:	480d      	ldr	r0, [pc, #52]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 800104e:	f009 f838 	bl	800a0c2 <HAL_UARTEx_SetRxFifoThreshold>
 8001052:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf14      	ite	ne
 8001058:	2301      	movne	r3, #1
 800105a:	2300      	moveq	r3, #0
 800105c:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <_ZL13MX_UART8_Initv+0x9a>
		Error_Handler();
 8001062:	f000 fa63 	bl	800152c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <_ZL13MX_UART8_Initv+0xb8>)
 8001068:	f008 ffb4 	bl	8009fd4 <HAL_UARTEx_DisableFifoMode>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZL13MX_UART8_Initv+0xb4>
		Error_Handler();
 800107c:	f000 fa56 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	240000a4 	.word	0x240000a4
 8001088:	40007c00 	.word	0x40007c00

0800108c <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001090:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001092:	4a2d      	ldr	r2, [pc, #180]	@ (8001148 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8001094:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001096:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b27      	ldr	r3, [pc, #156]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 80010d4:	481b      	ldr	r0, [pc, #108]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010d6:	f007 fb15 	bl	8008704 <HAL_HalfDuplex_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf14      	ite	ne
 80010e0:	2301      	movne	r3, #1
 80010e2:	2300      	moveq	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <_ZL19MX_USART2_UART_Initv+0x62>
		Error_Handler();
 80010ea:	f000 fa1f 	bl	800152c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4814      	ldr	r0, [pc, #80]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80010f2:	f008 ffa8 	bl	800a046 <HAL_UARTEx_SetTxFifoThreshold>
 80010f6:	4603      	mov	r3, r0
			!= HAL_OK) {
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZL19MX_USART2_UART_Initv+0x7e>
		Error_Handler();
 8001106:	f000 fa11 	bl	800152c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800110a:	2100      	movs	r1, #0
 800110c:	480d      	ldr	r0, [pc, #52]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 800110e:	f008 ffd8 	bl	800a0c2 <HAL_UARTEx_SetRxFifoThreshold>
 8001112:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf14      	ite	ne
 8001118:	2301      	movne	r3, #1
 800111a:	2300      	moveq	r3, #0
 800111c:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_ZL19MX_USART2_UART_Initv+0x9a>
		Error_Handler();
 8001122:	f000 fa03 	bl	800152c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001126:	4807      	ldr	r0, [pc, #28]	@ (8001144 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001128:	f008 ff54 	bl	8009fd4 <HAL_UARTEx_DisableFifoMode>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf14      	ite	ne
 8001132:	2301      	movne	r3, #1
 8001134:	2300      	moveq	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <_ZL19MX_USART2_UART_Initv+0xb4>
		Error_Handler();
 800113c:	f000 f9f6 	bl	800152c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	24000138 	.word	0x24000138
 8001148:	40004400 	.word	0x40004400

0800114c <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <_ZL11MX_DMA_Initv+0x6c>)
 8001154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <_ZL11MX_DMA_Initv+0x6c>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <_ZL11MX_DMA_Initv+0x6c>)
 8001164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	200b      	movs	r0, #11
 8001176:	f000 fe8c 	bl	8001e92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800117a:	200b      	movs	r0, #11
 800117c:	f000 fea3 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	200c      	movs	r0, #12
 8001186:	f000 fe84 	bl	8001e92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800118a:	200c      	movs	r0, #12
 800118c:	f000 fe9b 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	200d      	movs	r0, #13
 8001196:	f000 fe7c 	bl	8001e92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800119a:	200d      	movs	r0, #13
 800119c:	f000 fe93 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	200e      	movs	r0, #14
 80011a6:	f000 fe74 	bl	8001e92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011aa:	200e      	movs	r0, #14
 80011ac:	f000 fe8b 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	58024400 	.word	0x58024400

080011bc <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80011d2:	4b52      	ldr	r3, [pc, #328]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d8:	4a50      	ldr	r2, [pc, #320]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e2:	4b4e      	ldr	r3, [pc, #312]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b4a      	ldr	r3, [pc, #296]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f6:	4a49      	ldr	r2, [pc, #292]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001200:	4b46      	ldr	r3, [pc, #280]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b43      	ldr	r3, [pc, #268]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	4a41      	ldr	r2, [pc, #260]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121e:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001232:	4a3a      	ldr	r2, [pc, #232]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123c:	4b37      	ldr	r3, [pc, #220]	@ (800131c <_ZL12MX_GPIO_Initv+0x160>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin | Z_DIR_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	210c      	movs	r1, #12
 800124e:	4834      	ldr	r0, [pc, #208]	@ (8001320 <_ZL12MX_GPIO_Initv+0x164>)
 8001250:	f003 fb4e 	bl	80048f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin | X_STEP_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2118      	movs	r1, #24
 8001258:	4832      	ldr	r0, [pc, #200]	@ (8001324 <_ZL12MX_GPIO_Initv+0x168>)
 800125a:	f003 fb49 	bl	80048f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	2140      	movs	r1, #64	@ 0x40
 8001262:	4830      	ldr	r0, [pc, #192]	@ (8001324 <_ZL12MX_GPIO_Initv+0x168>)
 8001264:	f003 fb44 	bl	80048f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2108      	movs	r1, #8
 800126c:	482e      	ldr	r0, [pc, #184]	@ (8001328 <_ZL12MX_GPIO_Initv+0x16c>)
 800126e:	f003 fb3f 	bl	80048f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2101      	movs	r1, #1
 8001276:	482a      	ldr	r0, [pc, #168]	@ (8001320 <_ZL12MX_GPIO_Initv+0x164>)
 8001278:	f003 fb3a 	bl	80048f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin | Z_DIR_Pin | Z_EN_Pin;
 800127c:	230d      	movs	r3, #13
 800127e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4823      	ldr	r0, [pc, #140]	@ (8001320 <_ZL12MX_GPIO_Initv+0x164>)
 8001294:	f003 f984 	bl	80045a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8001298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800129c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	481f      	ldr	r0, [pc, #124]	@ (800132c <_ZL12MX_GPIO_Initv+0x170>)
 80012b0:	f003 f976 	bl	80045a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin | X_MIN_Pin;
 80012b4:	2303      	movs	r3, #3
 80012b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4819      	ldr	r0, [pc, #100]	@ (800132c <_ZL12MX_GPIO_Initv+0x170>)
 80012c8:	f003 f96a 	bl	80045a0 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin | X_STEP_Pin | X_EN_Pin;
 80012cc:	2358      	movs	r3, #88	@ 0x58
 80012ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4810      	ldr	r0, [pc, #64]	@ (8001324 <_ZL12MX_GPIO_Initv+0x168>)
 80012e4:	f003 f95c 	bl	80045a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 80012e8:	2308      	movs	r3, #8
 80012ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	480a      	ldr	r0, [pc, #40]	@ (8001328 <_ZL12MX_GPIO_Initv+0x16c>)
 8001300:	f003 f94e 	bl	80045a0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2028      	movs	r0, #40	@ 0x28
 800130a:	f000 fdc2 	bl	8001e92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130e:	2028      	movs	r0, #40	@ 0x28
 8001310:	f000 fdd9 	bl	8001ec6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58024400 	.word	0x58024400
 8001320:	58021000 	.word	0x58021000
 8001324:	58020c00 	.word	0x58020c00
 8001328:	58020400 	.word	0x58020400
 800132c:	58020800 	.word	0x58020800

08001330 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO External Interrupt Callback Function
 * @param GPIO_Pin GPIO-Pin with active Interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001340:	d102      	bne.n	8001348 <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_GPIO_EXTI_Callback+0x24>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	24000550 	.word	0x24000550

08001358 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer External Interrupt Callback Function
 * @param htim Pointer to Timer with elapsed Timer Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d150      	bne.n	800140c <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (PWMEnabledX) {
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d046      	beq.n	800140c <HAL_TIM_PeriodElapsedCallback+0xb4>
			PWMCounterX++;
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	3301      	adds	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800138a:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 800138c:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	429a      	cmp	r2, r3
 800139a:	bf2c      	ite	cs
 800139c:	2301      	movcs	r3, #1
 800139e:	2300      	movcc	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x5e>
				PWMCounterX = 0;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80013b4:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	429a      	cmp	r2, r3
 80013c4:	bf34      	ite	cc
 80013c6:	2301      	movcc	r3, #1
 80013c8:	2300      	movcs	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x84>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2110      	movs	r1, #16
 80013d4:	4814      	ldr	r0, [pc, #80]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80013d6:	f003 fa8b 	bl	80048f0 <HAL_GPIO_WritePin>
 80013da:	e004      	b.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80013e2:	f003 fa85 	bl	80048f0 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	bf2c      	ite	cs
 80013f2:	2301      	movcs	r3, #1
 80013f4:	2300      	movcc	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d007      	beq.n	800140c <HAL_TIM_PeriodElapsedCallback+0xb4>
				PWMEnabledX = false;
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2110      	movs	r1, #16
 8001406:	4808      	ldr	r0, [pc, #32]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001408:	f003 fa72 	bl	80048f0 <HAL_GPIO_WritePin>
			}
		}
	}
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24000560 	.word	0x24000560
 8001418:	24000558 	.word	0x24000558
 800141c:	24000000 	.word	0x24000000
 8001420:	24000554 	.word	0x24000554
 8001424:	24000002 	.word	0x24000002
 8001428:	58020c00 	.word	0x58020c00
 800142c:	2400055c 	.word	0x2400055c

08001430 <HAL_UART_TxCpltCallback>:
/**
 * @brief UART Transmitt Completed Callback Function
 * @param huart Pointer to UART with completed transmitt
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <HAL_UART_TxCpltCallback+0x30>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d102      	bne.n	8001448 <HAL_UART_TxCpltCallback+0x18>
		HAL_HalfDuplex_EnableReceiver(&tmcX.serial_address);
 8001442:	4808      	ldr	r0, [pc, #32]	@ (8001464 <HAL_UART_TxCpltCallback+0x34>)
 8001444:	f007 fab2 	bl	80089ac <HAL_HalfDuplex_EnableReceiver>
	}
	if (huart->Instance == UART8) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <HAL_UART_TxCpltCallback+0x38>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d102      	bne.n	8001458 <HAL_UART_TxCpltCallback+0x28>
		HAL_HalfDuplex_EnableReceiver(&tmcZ.serial_address);
 8001452:	4806      	ldr	r0, [pc, #24]	@ (800146c <HAL_UART_TxCpltCallback+0x3c>)
 8001454:	f007 faaa 	bl	80089ac <HAL_HalfDuplex_EnableReceiver>
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40004400 	.word	0x40004400
 8001464:	240003b0 	.word	0x240003b0
 8001468:	40007c00 	.word	0x40007c00
 800146c:	24000480 	.word	0x24000480

08001470 <HAL_UARTEx_RxEventCallback>:
 * @brief UART Recive Completed Callback Function
 * @param huart Pointer to UART with recived data
 * @param Size Size of the recived data
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_UARTEx_RxEventCallback+0x4c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d108      	bne.n	8001498 <HAL_UARTEx_RxEventCallback+0x28>
		HAL_UARTEx_ReceiveToIdle_DMA(&tmcX.serial_address,
 8001486:	2208      	movs	r2, #8
 8001488:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <HAL_UARTEx_RxEventCallback+0x50>)
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x54>)
 800148c:	f008 fe57 	bl	800a13e <HAL_UARTEx_ReceiveToIdle_DMA>
					(uint8_t*) &tmcX.rxBuffer,
					TMC2209::WRITE_READ_REPLY_DATAGRAM_SIZE);
		tmcX.data_received_flag = true;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_UARTEx_RxEventCallback+0x54>)
 8001492:	2201      	movs	r2, #1
 8001494:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	}
	if (huart->Instance == UART8) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <HAL_UARTEx_RxEventCallback+0x58>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d108      	bne.n	80014b4 <HAL_UARTEx_RxEventCallback+0x44>
		HAL_UARTEx_ReceiveToIdle_DMA(&tmcZ.serial_address,
 80014a2:	2208      	movs	r2, #8
 80014a4:	4909      	ldr	r1, [pc, #36]	@ (80014cc <HAL_UARTEx_RxEventCallback+0x5c>)
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <HAL_UARTEx_RxEventCallback+0x60>)
 80014a8:	f008 fe49 	bl	800a13e <HAL_UARTEx_ReceiveToIdle_DMA>
							(uint8_t*) &tmcZ.rxBuffer,
							TMC2209::WRITE_READ_REPLY_DATAGRAM_SIZE);
		tmcZ.data_received_flag = true;
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <HAL_UARTEx_RxEventCallback+0x60>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

	}
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40004400 	.word	0x40004400
 80014c0:	24000450 	.word	0x24000450
 80014c4:	240003b0 	.word	0x240003b0
 80014c8:	40007c00 	.word	0x40007c00
 80014cc:	24000520 	.word	0x24000520
 80014d0:	24000480 	.word	0x24000480

080014d4 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80014da:	463b      	mov	r3, r7
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 80014e6:	f000 fd09 	bl	8001efc <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014ea:	2301      	movs	r3, #1
 80014ec:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014f6:	231f      	movs	r3, #31
 80014f8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 80014fa:	2387      	movs	r3, #135	@ 0x87
 80014fc:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014fe:	2300      	movs	r3, #0
 8001500:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001502:	2300      	movs	r3, #0
 8001504:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001506:	2301      	movs	r3, #1
 8001508:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800150a:	2301      	movs	r3, #1
 800150c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001516:	463b      	mov	r3, r7
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fd27 	bl	8001f6c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800151e:	2004      	movs	r0, #4
 8001520:	f000 fd04 	bl	8001f2c <HAL_MPU_Enable>

}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001534:	2108      	movs	r1, #8
 8001536:	4804      	ldr	r0, [pc, #16]	@ (8001548 <Error_Handler+0x1c>)
 8001538:	f003 f9f3 	bl	8004922 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800153c:	2064      	movs	r0, #100	@ 0x64
 800153e:	f000 fba9 	bl	8001c94 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001542:	bf00      	nop
 8001544:	e7f6      	b.n	8001534 <Error_Handler+0x8>
 8001546:	bf00      	nop
 8001548:	58020400 	.word	0x58020400

0800154c <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10a      	bne.n	8001572 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001562:	4293      	cmp	r3, r2
 8001564:	d105      	bne.n	8001572 <_Z41__static_initialization_and_destruction_0ii+0x26>
TMC2209 tmcX;
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001568:	f7ff f87a 	bl	8000660 <_ZN7TMC2209C1Ev>
TMC2209 tmcZ;
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800156e:	f7ff f877 	bl	8000660 <_ZN7TMC2209C1Ev>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240003b0 	.word	0x240003b0
 8001580:	24000480 	.word	0x24000480

08001584 <_GLOBAL__sub_I_hcrc>:
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
 8001588:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff ffdd 	bl	800154c <_Z41__static_initialization_and_destruction_0ii>
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_MspInit+0x30>)
 800159c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015a0:	4a08      	ldr	r2, [pc, #32]	@ (80015c4 <HAL_MspInit+0x30>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_MspInit+0x30>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	58024400 	.word	0x58024400

080015c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <HAL_CRC_MspInit+0x3c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10e      	bne.n	80015f8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_CRC_MspInit+0x40>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e0:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <HAL_CRC_MspInit+0x40>)
 80015e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <HAL_CRC_MspInit+0x40>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	58024c00 	.word	0x58024c00
 8001608:	58024400 	.word	0x58024400

0800160c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800161c:	d116      	bne.n	800164c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_TIM_Base_MspInit+0x48>)
 8001620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001624:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <HAL_TIM_Base_MspInit+0x48>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_TIM_Base_MspInit+0x48>)
 8001630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	201c      	movs	r0, #28
 8001642:	f000 fc26 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001646:	201c      	movs	r0, #28
 8001648:	f000 fc3d 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	58024400 	.word	0x58024400

08001658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0ba      	sub	sp, #232	@ 0xe8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	22b8      	movs	r2, #184	@ 0xb8
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f008 fe03 	bl	800a284 <memset>
  if(huart->Instance==UART8)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4aa8      	ldr	r2, [pc, #672]	@ (8001924 <HAL_UART_MspInit+0x2cc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	f040 80a2 	bne.w	80017ce <HAL_UART_MspInit+0x176>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800168a:	f04f 0202 	mov.w	r2, #2
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 f913 	bl	80058cc <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80016ac:	f7ff ff3e 	bl	800152c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80016b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 80016b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b6:	4a9c      	ldr	r2, [pc, #624]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 80016b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016c0:	4b99      	ldr	r3, [pc, #612]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 80016c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4b96      	ldr	r3, [pc, #600]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a94      	ldr	r2, [pc, #592]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b92      	ldr	r3, [pc, #584]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001704:	2308      	movs	r3, #8
 8001706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800170e:	4619      	mov	r1, r3
 8001710:	4886      	ldr	r0, [pc, #536]	@ (800192c <HAL_UART_MspInit+0x2d4>)
 8001712:	f002 ff45 	bl	80045a0 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 8001716:	4b86      	ldr	r3, [pc, #536]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001718:	4a86      	ldr	r2, [pc, #536]	@ (8001934 <HAL_UART_MspInit+0x2dc>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800171c:	4b84      	ldr	r3, [pc, #528]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 800171e:	2252      	movs	r2, #82	@ 0x52
 8001720:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001722:	4b83      	ldr	r3, [pc, #524]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001724:	2240      	movs	r2, #64	@ 0x40
 8001726:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001728:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800172e:	4b80      	ldr	r3, [pc, #512]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001730:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001734:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001736:	4b7e      	ldr	r3, [pc, #504]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173c:	4b7c      	ldr	r3, [pc, #496]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001742:	4b7b      	ldr	r3, [pc, #492]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001748:	4b79      	ldr	r3, [pc, #484]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800174e:	4b78      	ldr	r3, [pc, #480]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001754:	4876      	ldr	r0, [pc, #472]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001756:	f000 fe4f 	bl	80023f8 <HAL_DMA_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001760:	f7ff fee4 	bl	800152c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a72      	ldr	r2, [pc, #456]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 8001768:	67da      	str	r2, [r3, #124]	@ 0x7c
 800176a:	4a71      	ldr	r2, [pc, #452]	@ (8001930 <HAL_UART_MspInit+0x2d8>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8001770:	4b71      	ldr	r3, [pc, #452]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 8001772:	4a72      	ldr	r2, [pc, #456]	@ (800193c <HAL_UART_MspInit+0x2e4>)
 8001774:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001776:	4b70      	ldr	r3, [pc, #448]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 8001778:	2251      	movs	r2, #81	@ 0x51
 800177a:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	4b6e      	ldr	r3, [pc, #440]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b6d      	ldr	r3, [pc, #436]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b6b      	ldr	r3, [pc, #428]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 800178a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b69      	ldr	r3, [pc, #420]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b68      	ldr	r3, [pc, #416]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 800179c:	4b66      	ldr	r3, [pc, #408]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a2:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a8:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80017ae:	4862      	ldr	r0, [pc, #392]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 80017b0:	f000 fe22 	bl	80023f8 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80017ba:	f7ff feb7 	bl	800152c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a5d      	ldr	r2, [pc, #372]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 80017c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001938 <HAL_UART_MspInit+0x2e0>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017cc:	e0a6      	b.n	800191c <HAL_UART_MspInit+0x2c4>
  else if(huart->Instance==USART2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001940 <HAL_UART_MspInit+0x2e8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	f040 80a1 	bne.w	800191c <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017da:	f04f 0202 	mov.w	r2, #2
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 f86b 	bl	80058cc <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80017fc:	f7ff fe96 	bl	800152c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001800:	4b49      	ldr	r3, [pc, #292]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 8001802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001806:	4a48      	ldr	r2, [pc, #288]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001810:	4b45      	ldr	r3, [pc, #276]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 8001812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	4a40      	ldr	r2, [pc, #256]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <HAL_UART_MspInit+0x2d0>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 800183c:	2320      	movs	r3, #32
 800183e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001848:	2301      	movs	r3, #1
 800184a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001854:	2307      	movs	r3, #7
 8001856:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800185e:	4619      	mov	r1, r3
 8001860:	4838      	ldr	r0, [pc, #224]	@ (8001944 <HAL_UART_MspInit+0x2ec>)
 8001862:	f002 fe9d 	bl	80045a0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 8001868:	4a38      	ldr	r2, [pc, #224]	@ (800194c <HAL_UART_MspInit+0x2f4>)
 800186a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800186c:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 800186e:	222c      	movs	r2, #44	@ 0x2c
 8001870:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001872:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 8001874:	2240      	movs	r2, #64	@ 0x40
 8001876:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001878:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800187e:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 8001880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001884:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001886:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188c:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001898:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018a4:	4828      	ldr	r0, [pc, #160]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 80018a6:	f000 fda7 	bl	80023f8 <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80018b0:	f7ff fe3c 	bl	800152c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a24      	ldr	r2, [pc, #144]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 80018b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <HAL_UART_MspInit+0x2f0>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018c2:	4a24      	ldr	r2, [pc, #144]	@ (8001954 <HAL_UART_MspInit+0x2fc>)
 80018c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018c8:	222b      	movs	r2, #43	@ 0x2b
 80018ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018fe:	4814      	ldr	r0, [pc, #80]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 8001900:	f000 fd7a 	bl	80023f8 <HAL_DMA_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 800190a:	f7ff fe0f 	bl	800152c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 8001912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001916:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <HAL_UART_MspInit+0x2f8>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800191c:	bf00      	nop
 800191e:	37e8      	adds	r7, #232	@ 0xe8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40007c00 	.word	0x40007c00
 8001928:	58024400 	.word	0x58024400
 800192c:	58021000 	.word	0x58021000
 8001930:	240001cc 	.word	0x240001cc
 8001934:	40020040 	.word	0x40020040
 8001938:	24000244 	.word	0x24000244
 800193c:	40020058 	.word	0x40020058
 8001940:	40004400 	.word	0x40004400
 8001944:	58020c00 	.word	0x58020c00
 8001948:	240002bc 	.word	0x240002bc
 800194c:	40020010 	.word	0x40020010
 8001950:	24000334 	.word	0x24000334
 8001954:	40020028 	.word	0x40020028

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f951 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA1_Stream0_IRQHandler+0x10>)
 80019be:	f001 fadd 	bl	8002f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	240002bc 	.word	0x240002bc

080019cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA1_Stream1_IRQHandler+0x10>)
 80019d2:	f001 fad3 	bl	8002f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	24000334 	.word	0x24000334

080019e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <DMA1_Stream2_IRQHandler+0x10>)
 80019e6:	f001 fac9 	bl	8002f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	240001cc 	.word	0x240001cc

080019f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <DMA1_Stream3_IRQHandler+0x10>)
 80019fa:	f001 fabf 	bl	8002f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	24000244 	.word	0x24000244

08001a08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a0c:	4802      	ldr	r0, [pc, #8]	@ (8001a18 <TIM2_IRQHandler+0x10>)
 8001a0e:	f005 fe5e 	bl	80076ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	24000058 	.word	0x24000058

08001a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001a20:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001a24:	f002 ff97 	bl	8004956 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a30:	4b32      	ldr	r3, [pc, #200]	@ (8001afc <SystemInit+0xd0>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a36:	4a31      	ldr	r2, [pc, #196]	@ (8001afc <SystemInit+0xd0>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a40:	4b2f      	ldr	r3, [pc, #188]	@ (8001b00 <SystemInit+0xd4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	2b06      	cmp	r3, #6
 8001a4a:	d807      	bhi.n	8001a5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b00 <SystemInit+0xd4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 030f 	bic.w	r3, r3, #15
 8001a54:	4a2a      	ldr	r2, [pc, #168]	@ (8001b00 <SystemInit+0xd4>)
 8001a56:	f043 0307 	orr.w	r3, r3, #7
 8001a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <SystemInit+0xd8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a28      	ldr	r2, [pc, #160]	@ (8001b04 <SystemInit+0xd8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <SystemInit+0xd8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <SystemInit+0xd8>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4924      	ldr	r1, [pc, #144]	@ (8001b04 <SystemInit+0xd8>)
 8001a74:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <SystemInit+0xdc>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <SystemInit+0xd4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <SystemInit+0xd4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 030f 	bic.w	r3, r3, #15
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b00 <SystemInit+0xd4>)
 8001a90:	f043 0307 	orr.w	r3, r3, #7
 8001a94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <SystemInit+0xd8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <SystemInit+0xd8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <SystemInit+0xd8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <SystemInit+0xd8>)
 8001aaa:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <SystemInit+0xe0>)
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <SystemInit+0xd8>)
 8001ab0:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <SystemInit+0xe4>)
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <SystemInit+0xd8>)
 8001ab6:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <SystemInit+0xe8>)
 8001ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aba:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <SystemInit+0xd8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <SystemInit+0xd8>)
 8001ac2:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <SystemInit+0xe8>)
 8001ac4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <SystemInit+0xd8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <SystemInit+0xd8>)
 8001ace:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <SystemInit+0xe8>)
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <SystemInit+0xd8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <SystemInit+0xd8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <SystemInit+0xd8>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <SystemInit+0xd8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <SystemInit+0xec>)
 8001aec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001af0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	52002000 	.word	0x52002000
 8001b04:	58024400 	.word	0x58024400
 8001b08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b0c:	02020200 	.word	0x02020200
 8001b10:	01ff0000 	.word	0x01ff0000
 8001b14:	01010280 	.word	0x01010280
 8001b18:	52004000 	.word	0x52004000

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b20:	f7ff ff84 	bl	8001a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	@ (8001b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f008 fba3 	bl	800a294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff f885 	bl	8000c5c <main>
  bx  lr
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001b58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b5c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001b60:	0800a364 	.word	0x0800a364
  ldr r2, =_sbss
 8001b64:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8001b68:	24000568 	.word	0x24000568

08001b6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC3_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f980 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b7c:	f003 fcd0 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_Init+0x68>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	4913      	ldr	r1, [pc, #76]	@ (8001bdc <HAL_Init+0x6c>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_Init+0x68>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bdc <HAL_Init+0x6c>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_Init+0x70>)
 8001bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <HAL_Init+0x74>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f000 f814 	bl	8001be8 <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e002      	b.n	8001bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bca:	f7ff fce3 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	0800a310 	.word	0x0800a310
 8001be0:	24000008 	.word	0x24000008
 8001be4:	24000004 	.word	0x24000004

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bf0:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_InitTick+0x60>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e021      	b.n	8001c40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <HAL_InitTick+0x64>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_InitTick+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f965 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f92f 	bl	8001e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_InitTick+0x68>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	24000010 	.word	0x24000010
 8001c4c:	24000004 	.word	0x24000004
 8001c50:	2400000c 	.word	0x2400000c

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	24000010 	.word	0x24000010
 8001c78:	24000564 	.word	0x24000564

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	24000564 	.word	0x24000564

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	24000010 	.word	0x24000010

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x40>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <__NVIC_SetPriorityGrouping+0x40>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00
 8001d20:	05fa0000 	.word	0x05fa0000

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	@ (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	@ (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	@ 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff29 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff40 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff90 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff5f 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff33 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffa4 	bl	8001e38 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f00:	f3bf 8f5f 	dmb	sy
}
 8001f04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <HAL_MPU_Disable+0x28>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_MPU_Disable+0x28>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f10:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f12:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_MPU_Disable+0x2c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00
 8001f28:	e000ed90 	.word	0xe000ed90

08001f2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f34:	4a0b      	ldr	r2, [pc, #44]	@ (8001f64 <HAL_MPU_Enable+0x38>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_MPU_Enable+0x3c>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <HAL_MPU_Enable+0x3c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f50:	f3bf 8f6f 	isb	sy
}
 8001f54:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed90 	.word	0xe000ed90
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	785a      	ldrb	r2, [r3, #1]
 8001f78:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f88:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_MPU_ConfigRegion+0x7c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7adb      	ldrb	r3, [r3, #11]
 8001f9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7a9b      	ldrb	r3, [r3, #10]
 8001fa2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7b5b      	ldrb	r3, [r3, #13]
 8001faa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7b9b      	ldrb	r3, [r3, #14]
 8001fb2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7bdb      	ldrb	r3, [r3, #15]
 8001fba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7a5b      	ldrb	r3, [r3, #9]
 8001fc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7a1b      	ldrb	r3, [r3, #8]
 8001fca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fcc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fd4:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fd8:	6113      	str	r3, [r2, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed90 	.word	0xe000ed90

08001fec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e054      	b.n	80020a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7f5b      	ldrb	r3, [r3, #29]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fada 	bl	80015c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a22      	ldr	r2, [pc, #136]	@ (80020b0 <HAL_CRC_Init+0xc4>)
 8002028:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0218 	bic.w	r2, r2, #24
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	e00c      	b.n	8002056 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	461a      	mov	r2, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f948 	bl	80022dc <HAL_CRCEx_Polynomial_Set>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e028      	b.n	80020a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	795b      	ldrb	r3, [r3, #5]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f04f 32ff 	mov.w	r2, #4294967295
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	e004      	b.n	8002074 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6912      	ldr	r2, [r2, #16]
 8002072:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	04c11db7 	.word	0x04c11db7

080020b4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2202      	movs	r2, #2
 80020c8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d006      	beq.n	80020f0 <HAL_CRC_Calculate+0x3c>
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d829      	bhi.n	800213a <HAL_CRC_Calculate+0x86>
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d019      	beq.n	800211e <HAL_CRC_Calculate+0x6a>
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d01e      	beq.n	800212c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80020ee:	e024      	b.n	800213a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e00a      	b.n	800210c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	441a      	add	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d3f0      	bcc.n	80020f6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
      break;
 800211c:	e00e      	b.n	800213c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f812 	bl	800214c <CRC_Handle_8>
 8002128:	6138      	str	r0, [r7, #16]
      break;
 800212a:	e007      	b.n	800213c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f899 	bl	8002268 <CRC_Handle_16>
 8002136:	6138      	str	r0, [r7, #16]
      break;
 8002138:	e000      	b.n	800213c <HAL_CRC_Calculate+0x88>
      break;
 800213a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002142:	693b      	ldr	r3, [r7, #16]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e023      	b.n	80021a6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3301      	adds	r3, #1
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	440b      	add	r3, r1
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002178:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	3302      	adds	r3, #2
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	440b      	add	r3, r1
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002188:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3303      	adds	r3, #3
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800219c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800219e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3d6      	bcc.n	800215e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04d      	beq.n	8002256 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	4413      	add	r3, r2
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d116      	bne.n	800220c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3301      	adds	r3, #1
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	440b      	add	r3, r1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	8b7a      	ldrh	r2, [r7, #26]
 800220a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b03      	cmp	r3, #3
 8002214:	d11f      	bne.n	8002256 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	3301      	adds	r3, #1
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	440b      	add	r3, r1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b21b      	sxth	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b21b      	sxth	r3, r3
 8002236:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	8b7a      	ldrh	r2, [r7, #26]
 8002242:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3724      	adds	r7, #36	@ 0x24
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e013      	b.n	80022a2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	440b      	add	r3, r1
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3e6      	bcc.n	800227a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	4413      	add	r3, r2
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80022ec:	231f      	movs	r3, #31
 80022ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
 80022fe:	e063      	b.n	80023c8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002300:	bf00      	nop
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	613a      	str	r2, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_CRCEx_Polynomial_Set+0x44>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b18      	cmp	r3, #24
 8002324:	d846      	bhi.n	80023b4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002326:	a201      	add	r2, pc, #4	@ (adr r2, 800232c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	080023bb 	.word	0x080023bb
 8002330:	080023b5 	.word	0x080023b5
 8002334:	080023b5 	.word	0x080023b5
 8002338:	080023b5 	.word	0x080023b5
 800233c:	080023b5 	.word	0x080023b5
 8002340:	080023b5 	.word	0x080023b5
 8002344:	080023b5 	.word	0x080023b5
 8002348:	080023b5 	.word	0x080023b5
 800234c:	080023a9 	.word	0x080023a9
 8002350:	080023b5 	.word	0x080023b5
 8002354:	080023b5 	.word	0x080023b5
 8002358:	080023b5 	.word	0x080023b5
 800235c:	080023b5 	.word	0x080023b5
 8002360:	080023b5 	.word	0x080023b5
 8002364:	080023b5 	.word	0x080023b5
 8002368:	080023b5 	.word	0x080023b5
 800236c:	0800239d 	.word	0x0800239d
 8002370:	080023b5 	.word	0x080023b5
 8002374:	080023b5 	.word	0x080023b5
 8002378:	080023b5 	.word	0x080023b5
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023b5 	.word	0x080023b5
 8002384:	080023b5 	.word	0x080023b5
 8002388:	080023b5 	.word	0x080023b5
 800238c:	08002391 	.word	0x08002391
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b06      	cmp	r3, #6
 8002394:	d913      	bls.n	80023be <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800239a:	e010      	b.n	80023be <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b07      	cmp	r3, #7
 80023a0:	d90f      	bls.n	80023c2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80023a6:	e00c      	b.n	80023c2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	d90b      	bls.n	80023c6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80023b2:	e008      	b.n	80023c6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	75fb      	strb	r3, [r7, #23]
        break;
 80023b8:	e006      	b.n	80023c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023ba:	bf00      	nop
 80023bc:	e004      	b.n	80023c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80023c6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 0118 	bic.w	r1, r3, #24
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fc3c 	bl	8001c7c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e312      	b.n	8002a36 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a66      	ldr	r2, [pc, #408]	@ (80025b0 <HAL_DMA_Init+0x1b8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d04a      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a65      	ldr	r2, [pc, #404]	@ (80025b4 <HAL_DMA_Init+0x1bc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d045      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a63      	ldr	r2, [pc, #396]	@ (80025b8 <HAL_DMA_Init+0x1c0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d040      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a62      	ldr	r2, [pc, #392]	@ (80025bc <HAL_DMA_Init+0x1c4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d03b      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a60      	ldr	r2, [pc, #384]	@ (80025c0 <HAL_DMA_Init+0x1c8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d036      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5f      	ldr	r2, [pc, #380]	@ (80025c4 <HAL_DMA_Init+0x1cc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d031      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5d      	ldr	r2, [pc, #372]	@ (80025c8 <HAL_DMA_Init+0x1d0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02c      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a5c      	ldr	r2, [pc, #368]	@ (80025cc <HAL_DMA_Init+0x1d4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d027      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a5a      	ldr	r2, [pc, #360]	@ (80025d0 <HAL_DMA_Init+0x1d8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d022      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a59      	ldr	r2, [pc, #356]	@ (80025d4 <HAL_DMA_Init+0x1dc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d01d      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a57      	ldr	r2, [pc, #348]	@ (80025d8 <HAL_DMA_Init+0x1e0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d018      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a56      	ldr	r2, [pc, #344]	@ (80025dc <HAL_DMA_Init+0x1e4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a54      	ldr	r2, [pc, #336]	@ (80025e0 <HAL_DMA_Init+0x1e8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00e      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a53      	ldr	r2, [pc, #332]	@ (80025e4 <HAL_DMA_Init+0x1ec>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a51      	ldr	r2, [pc, #324]	@ (80025e8 <HAL_DMA_Init+0x1f0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_DMA_Init+0xb8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a50      	ldr	r2, [pc, #320]	@ (80025ec <HAL_DMA_Init+0x1f4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0xbc>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_Init+0xbe>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 813c 	beq.w	8002734 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a37      	ldr	r2, [pc, #220]	@ (80025b0 <HAL_DMA_Init+0x1b8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d04a      	beq.n	800256c <HAL_DMA_Init+0x174>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a36      	ldr	r2, [pc, #216]	@ (80025b4 <HAL_DMA_Init+0x1bc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d045      	beq.n	800256c <HAL_DMA_Init+0x174>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a34      	ldr	r2, [pc, #208]	@ (80025b8 <HAL_DMA_Init+0x1c0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d040      	beq.n	800256c <HAL_DMA_Init+0x174>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a33      	ldr	r2, [pc, #204]	@ (80025bc <HAL_DMA_Init+0x1c4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d03b      	beq.n	800256c <HAL_DMA_Init+0x174>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <HAL_DMA_Init+0x1c8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d036      	beq.n	800256c <HAL_DMA_Init+0x174>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <HAL_DMA_Init+0x1cc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d031      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2e      	ldr	r2, [pc, #184]	@ (80025c8 <HAL_DMA_Init+0x1d0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02c      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2d      	ldr	r2, [pc, #180]	@ (80025cc <HAL_DMA_Init+0x1d4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d027      	beq.n	800256c <HAL_DMA_Init+0x174>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2b      	ldr	r2, [pc, #172]	@ (80025d0 <HAL_DMA_Init+0x1d8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d022      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2a      	ldr	r2, [pc, #168]	@ (80025d4 <HAL_DMA_Init+0x1dc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d01d      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a28      	ldr	r2, [pc, #160]	@ (80025d8 <HAL_DMA_Init+0x1e0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_DMA_Init+0x174>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a27      	ldr	r2, [pc, #156]	@ (80025dc <HAL_DMA_Init+0x1e4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a25      	ldr	r2, [pc, #148]	@ (80025e0 <HAL_DMA_Init+0x1e8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_DMA_Init+0x174>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a24      	ldr	r2, [pc, #144]	@ (80025e4 <HAL_DMA_Init+0x1ec>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a22      	ldr	r2, [pc, #136]	@ (80025e8 <HAL_DMA_Init+0x1f0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_DMA_Init+0x174>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	@ (80025ec <HAL_DMA_Init+0x1f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d108      	bne.n	800257e <HAL_DMA_Init+0x186>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e007      	b.n	800258e <HAL_DMA_Init+0x196>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800258e:	e02f      	b.n	80025f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002590:	f7ff fb74 	bl	8001c7c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b05      	cmp	r3, #5
 800259c:	d928      	bls.n	80025f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e242      	b.n	8002a36 <HAL_DMA_Init+0x63e>
 80025b0:	40020010 	.word	0x40020010
 80025b4:	40020028 	.word	0x40020028
 80025b8:	40020040 	.word	0x40020040
 80025bc:	40020058 	.word	0x40020058
 80025c0:	40020070 	.word	0x40020070
 80025c4:	40020088 	.word	0x40020088
 80025c8:	400200a0 	.word	0x400200a0
 80025cc:	400200b8 	.word	0x400200b8
 80025d0:	40020410 	.word	0x40020410
 80025d4:	40020428 	.word	0x40020428
 80025d8:	40020440 	.word	0x40020440
 80025dc:	40020458 	.word	0x40020458
 80025e0:	40020470 	.word	0x40020470
 80025e4:	40020488 	.word	0x40020488
 80025e8:	400204a0 	.word	0x400204a0
 80025ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1c8      	bne.n	8002590 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4b83      	ldr	r3, [pc, #524]	@ (8002818 <HAL_DMA_Init+0x420>)
 800260a:	4013      	ands	r3, r2
 800260c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002616:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002622:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	4313      	orrs	r3, r2
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b28      	cmp	r3, #40	@ 0x28
 800265a:	d903      	bls.n	8002664 <HAL_DMA_Init+0x26c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b2e      	cmp	r3, #46	@ 0x2e
 8002662:	d91f      	bls.n	80026a4 <HAL_DMA_Init+0x2ac>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b3e      	cmp	r3, #62	@ 0x3e
 800266a:	d903      	bls.n	8002674 <HAL_DMA_Init+0x27c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b42      	cmp	r3, #66	@ 0x42
 8002672:	d917      	bls.n	80026a4 <HAL_DMA_Init+0x2ac>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b46      	cmp	r3, #70	@ 0x46
 800267a:	d903      	bls.n	8002684 <HAL_DMA_Init+0x28c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b48      	cmp	r3, #72	@ 0x48
 8002682:	d90f      	bls.n	80026a4 <HAL_DMA_Init+0x2ac>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b4e      	cmp	r3, #78	@ 0x4e
 800268a:	d903      	bls.n	8002694 <HAL_DMA_Init+0x29c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b52      	cmp	r3, #82	@ 0x52
 8002692:	d907      	bls.n	80026a4 <HAL_DMA_Init+0x2ac>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b73      	cmp	r3, #115	@ 0x73
 800269a:	d905      	bls.n	80026a8 <HAL_DMA_Init+0x2b0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b77      	cmp	r3, #119	@ 0x77
 80026a2:	d801      	bhi.n	80026a8 <HAL_DMA_Init+0x2b0>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_DMA_Init+0x2b2>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026b4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 0307 	bic.w	r3, r3, #7
 80026cc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d117      	bne.n	8002710 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f001 fdca 	bl	800428c <DMA_CheckFifoParam>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2240      	movs	r2, #64	@ 0x40
 8002702:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e192      	b.n	8002a36 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f001 fd05 	bl	8004128 <DMA_CalcBaseAndBitshift>
 800271e:	4603      	mov	r3, r0
 8002720:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	223f      	movs	r2, #63	@ 0x3f
 800272c:	409a      	lsls	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	e0c8      	b.n	80028c6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a38      	ldr	r2, [pc, #224]	@ (800281c <HAL_DMA_Init+0x424>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d022      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a37      	ldr	r2, [pc, #220]	@ (8002820 <HAL_DMA_Init+0x428>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d01d      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a35      	ldr	r2, [pc, #212]	@ (8002824 <HAL_DMA_Init+0x42c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d018      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a34      	ldr	r2, [pc, #208]	@ (8002828 <HAL_DMA_Init+0x430>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a32      	ldr	r2, [pc, #200]	@ (800282c <HAL_DMA_Init+0x434>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00e      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a31      	ldr	r2, [pc, #196]	@ (8002830 <HAL_DMA_Init+0x438>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2f      	ldr	r2, [pc, #188]	@ (8002834 <HAL_DMA_Init+0x43c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_DMA_Init+0x38c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2e      	ldr	r2, [pc, #184]	@ (8002838 <HAL_DMA_Init+0x440>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0x390>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_DMA_Init+0x392>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 8092 	beq.w	80028b4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a21      	ldr	r2, [pc, #132]	@ (800281c <HAL_DMA_Init+0x424>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d021      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a20      	ldr	r2, [pc, #128]	@ (8002820 <HAL_DMA_Init+0x428>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d01c      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002824 <HAL_DMA_Init+0x42c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d017      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_DMA_Init+0x430>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d012      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <HAL_DMA_Init+0x434>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002830 <HAL_DMA_Init+0x438>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d008      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a18      	ldr	r2, [pc, #96]	@ (8002834 <HAL_DMA_Init+0x43c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <HAL_DMA_Init+0x3e6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_DMA_Init+0x440>)
 80027dc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_DMA_Init+0x444>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b40      	cmp	r3, #64	@ 0x40
 8002804:	d01c      	beq.n	8002840 <HAL_DMA_Init+0x448>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b80      	cmp	r3, #128	@ 0x80
 800280c:	d102      	bne.n	8002814 <HAL_DMA_Init+0x41c>
 800280e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002812:	e016      	b.n	8002842 <HAL_DMA_Init+0x44a>
 8002814:	2300      	movs	r3, #0
 8002816:	e014      	b.n	8002842 <HAL_DMA_Init+0x44a>
 8002818:	fe10803f 	.word	0xfe10803f
 800281c:	58025408 	.word	0x58025408
 8002820:	5802541c 	.word	0x5802541c
 8002824:	58025430 	.word	0x58025430
 8002828:	58025444 	.word	0x58025444
 800282c:	58025458 	.word	0x58025458
 8002830:	5802546c 	.word	0x5802546c
 8002834:	58025480 	.word	0x58025480
 8002838:	58025494 	.word	0x58025494
 800283c:	fffe000f 	.word	0xfffe000f
 8002840:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002850:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002858:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002870:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b6e      	ldr	r3, [pc, #440]	@ (8002a40 <HAL_DMA_Init+0x648>)
 8002888:	4413      	add	r3, r2
 800288a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a44 <HAL_DMA_Init+0x64c>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 fc45 	bl	8004128 <DMA_CalcBaseAndBitshift>
 800289e:	4603      	mov	r3, r0
 80028a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2201      	movs	r2, #1
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e008      	b.n	80028c6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	@ 0x40
 80028b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e0b7      	b.n	8002a36 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002a48 <HAL_DMA_Init+0x650>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d072      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a4c <HAL_DMA_Init+0x654>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d06d      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a5c      	ldr	r2, [pc, #368]	@ (8002a50 <HAL_DMA_Init+0x658>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d068      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002a54 <HAL_DMA_Init+0x65c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d063      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a59      	ldr	r2, [pc, #356]	@ (8002a58 <HAL_DMA_Init+0x660>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d05e      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a57      	ldr	r2, [pc, #348]	@ (8002a5c <HAL_DMA_Init+0x664>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d059      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a56      	ldr	r2, [pc, #344]	@ (8002a60 <HAL_DMA_Init+0x668>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d054      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a54      	ldr	r2, [pc, #336]	@ (8002a64 <HAL_DMA_Init+0x66c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d04f      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a53      	ldr	r2, [pc, #332]	@ (8002a68 <HAL_DMA_Init+0x670>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d04a      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a51      	ldr	r2, [pc, #324]	@ (8002a6c <HAL_DMA_Init+0x674>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d045      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a50      	ldr	r2, [pc, #320]	@ (8002a70 <HAL_DMA_Init+0x678>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d040      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a4e      	ldr	r2, [pc, #312]	@ (8002a74 <HAL_DMA_Init+0x67c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d03b      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4d      	ldr	r2, [pc, #308]	@ (8002a78 <HAL_DMA_Init+0x680>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d036      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <HAL_DMA_Init+0x684>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4a      	ldr	r2, [pc, #296]	@ (8002a80 <HAL_DMA_Init+0x688>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d02c      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a48      	ldr	r2, [pc, #288]	@ (8002a84 <HAL_DMA_Init+0x68c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d027      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a47      	ldr	r2, [pc, #284]	@ (8002a88 <HAL_DMA_Init+0x690>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d022      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a45      	ldr	r2, [pc, #276]	@ (8002a8c <HAL_DMA_Init+0x694>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01d      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a44      	ldr	r2, [pc, #272]	@ (8002a90 <HAL_DMA_Init+0x698>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d018      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a42      	ldr	r2, [pc, #264]	@ (8002a94 <HAL_DMA_Init+0x69c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a41      	ldr	r2, [pc, #260]	@ (8002a98 <HAL_DMA_Init+0x6a0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a3f      	ldr	r2, [pc, #252]	@ (8002a9c <HAL_DMA_Init+0x6a4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3e      	ldr	r2, [pc, #248]	@ (8002aa0 <HAL_DMA_Init+0x6a8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_DMA_Init+0x5be>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa4 <HAL_DMA_Init+0x6ac>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_DMA_Init+0x5c2>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_DMA_Init+0x5c4>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d032      	beq.n	8002a26 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f001 fcdf 	bl	8004384 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b80      	cmp	r3, #128	@ 0x80
 80029cc:	d102      	bne.n	80029d4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_DMA_Init+0x61c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d80c      	bhi.n	8002a14 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f001 fd5c 	bl	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e008      	b.n	8002a26 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	a7fdabf8 	.word	0xa7fdabf8
 8002a44:	cccccccd 	.word	0xcccccccd
 8002a48:	40020010 	.word	0x40020010
 8002a4c:	40020028 	.word	0x40020028
 8002a50:	40020040 	.word	0x40020040
 8002a54:	40020058 	.word	0x40020058
 8002a58:	40020070 	.word	0x40020070
 8002a5c:	40020088 	.word	0x40020088
 8002a60:	400200a0 	.word	0x400200a0
 8002a64:	400200b8 	.word	0x400200b8
 8002a68:	40020410 	.word	0x40020410
 8002a6c:	40020428 	.word	0x40020428
 8002a70:	40020440 	.word	0x40020440
 8002a74:	40020458 	.word	0x40020458
 8002a78:	40020470 	.word	0x40020470
 8002a7c:	40020488 	.word	0x40020488
 8002a80:	400204a0 	.word	0x400204a0
 8002a84:	400204b8 	.word	0x400204b8
 8002a88:	58025408 	.word	0x58025408
 8002a8c:	5802541c 	.word	0x5802541c
 8002a90:	58025430 	.word	0x58025430
 8002a94:	58025444 	.word	0x58025444
 8002a98:	58025458 	.word	0x58025458
 8002a9c:	5802546c 	.word	0x5802546c
 8002aa0:	58025480 	.word	0x58025480
 8002aa4:	58025494 	.word	0x58025494

08002aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e226      	b.n	8002f12 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_DMA_Start_IT+0x2a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e21f      	b.n	8002f12 <HAL_DMA_Start_IT+0x46a>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f040 820a 	bne.w	8002efc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a68      	ldr	r2, [pc, #416]	@ (8002c9c <HAL_DMA_Start_IT+0x1f4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a66      	ldr	r2, [pc, #408]	@ (8002ca0 <HAL_DMA_Start_IT+0x1f8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a65      	ldr	r2, [pc, #404]	@ (8002ca4 <HAL_DMA_Start_IT+0x1fc>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a63      	ldr	r2, [pc, #396]	@ (8002ca8 <HAL_DMA_Start_IT+0x200>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a62      	ldr	r2, [pc, #392]	@ (8002cac <HAL_DMA_Start_IT+0x204>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a60      	ldr	r2, [pc, #384]	@ (8002cb0 <HAL_DMA_Start_IT+0x208>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5f      	ldr	r2, [pc, #380]	@ (8002cb4 <HAL_DMA_Start_IT+0x20c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb8 <HAL_DMA_Start_IT+0x210>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cbc <HAL_DMA_Start_IT+0x214>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5a      	ldr	r2, [pc, #360]	@ (8002cc0 <HAL_DMA_Start_IT+0x218>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a59      	ldr	r2, [pc, #356]	@ (8002cc4 <HAL_DMA_Start_IT+0x21c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a57      	ldr	r2, [pc, #348]	@ (8002cc8 <HAL_DMA_Start_IT+0x220>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a56      	ldr	r2, [pc, #344]	@ (8002ccc <HAL_DMA_Start_IT+0x224>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a54      	ldr	r2, [pc, #336]	@ (8002cd0 <HAL_DMA_Start_IT+0x228>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a53      	ldr	r2, [pc, #332]	@ (8002cd4 <HAL_DMA_Start_IT+0x22c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Start_IT+0xee>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a51      	ldr	r2, [pc, #324]	@ (8002cd8 <HAL_DMA_Start_IT+0x230>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <HAL_DMA_Start_IT+0x100>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0201 	bic.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e007      	b.n	8002bb8 <HAL_DMA_Start_IT+0x110>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f001 f906 	bl	8003dd0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a34      	ldr	r2, [pc, #208]	@ (8002c9c <HAL_DMA_Start_IT+0x1f4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d04a      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a33      	ldr	r2, [pc, #204]	@ (8002ca0 <HAL_DMA_Start_IT+0x1f8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d045      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a31      	ldr	r2, [pc, #196]	@ (8002ca4 <HAL_DMA_Start_IT+0x1fc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d040      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <HAL_DMA_Start_IT+0x200>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d03b      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8002cac <HAL_DMA_Start_IT+0x204>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d036      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002cb0 <HAL_DMA_Start_IT+0x208>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d031      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb4 <HAL_DMA_Start_IT+0x20c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d02c      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb8 <HAL_DMA_Start_IT+0x210>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d027      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a28      	ldr	r2, [pc, #160]	@ (8002cbc <HAL_DMA_Start_IT+0x214>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d022      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <HAL_DMA_Start_IT+0x218>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d01d      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <HAL_DMA_Start_IT+0x21c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d018      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a24      	ldr	r2, [pc, #144]	@ (8002cc8 <HAL_DMA_Start_IT+0x220>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a22      	ldr	r2, [pc, #136]	@ (8002ccc <HAL_DMA_Start_IT+0x224>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00e      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a21      	ldr	r2, [pc, #132]	@ (8002cd0 <HAL_DMA_Start_IT+0x228>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d009      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd4 <HAL_DMA_Start_IT+0x22c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_DMA_Start_IT+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_DMA_Start_IT+0x230>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Start_IT+0x1c0>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_DMA_Start_IT+0x1c2>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d036      	beq.n	8002cdc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 021e 	bic.w	r2, r3, #30
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0216 	orr.w	r2, r2, #22
 8002c80:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03e      	beq.n	8002d08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0208 	orr.w	r2, r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e035      	b.n	8002d08 <HAL_DMA_Start_IT+0x260>
 8002c9c:	40020010 	.word	0x40020010
 8002ca0:	40020028 	.word	0x40020028
 8002ca4:	40020040 	.word	0x40020040
 8002ca8:	40020058 	.word	0x40020058
 8002cac:	40020070 	.word	0x40020070
 8002cb0:	40020088 	.word	0x40020088
 8002cb4:	400200a0 	.word	0x400200a0
 8002cb8:	400200b8 	.word	0x400200b8
 8002cbc:	40020410 	.word	0x40020410
 8002cc0:	40020428 	.word	0x40020428
 8002cc4:	40020440 	.word	0x40020440
 8002cc8:	40020458 	.word	0x40020458
 8002ccc:	40020470 	.word	0x40020470
 8002cd0:	40020488 	.word	0x40020488
 8002cd4:	400204a0 	.word	0x400204a0
 8002cd8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 020e 	bic.w	r2, r3, #14
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 020a 	orr.w	r2, r2, #10
 8002cee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0204 	orr.w	r2, r2, #4
 8002d06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a83      	ldr	r2, [pc, #524]	@ (8002f1c <HAL_DMA_Start_IT+0x474>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d072      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a82      	ldr	r2, [pc, #520]	@ (8002f20 <HAL_DMA_Start_IT+0x478>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d06d      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a80      	ldr	r2, [pc, #512]	@ (8002f24 <HAL_DMA_Start_IT+0x47c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d068      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a7f      	ldr	r2, [pc, #508]	@ (8002f28 <HAL_DMA_Start_IT+0x480>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d063      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7d      	ldr	r2, [pc, #500]	@ (8002f2c <HAL_DMA_Start_IT+0x484>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d05e      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002f30 <HAL_DMA_Start_IT+0x488>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d059      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7a      	ldr	r2, [pc, #488]	@ (8002f34 <HAL_DMA_Start_IT+0x48c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d054      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a79      	ldr	r2, [pc, #484]	@ (8002f38 <HAL_DMA_Start_IT+0x490>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d04f      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a77      	ldr	r2, [pc, #476]	@ (8002f3c <HAL_DMA_Start_IT+0x494>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d04a      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a76      	ldr	r2, [pc, #472]	@ (8002f40 <HAL_DMA_Start_IT+0x498>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d045      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a74      	ldr	r2, [pc, #464]	@ (8002f44 <HAL_DMA_Start_IT+0x49c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d040      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	@ (8002f48 <HAL_DMA_Start_IT+0x4a0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d03b      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a71      	ldr	r2, [pc, #452]	@ (8002f4c <HAL_DMA_Start_IT+0x4a4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d036      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a70      	ldr	r2, [pc, #448]	@ (8002f50 <HAL_DMA_Start_IT+0x4a8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d031      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6e      	ldr	r2, [pc, #440]	@ (8002f54 <HAL_DMA_Start_IT+0x4ac>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02c      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6d      	ldr	r2, [pc, #436]	@ (8002f58 <HAL_DMA_Start_IT+0x4b0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d027      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6b      	ldr	r2, [pc, #428]	@ (8002f5c <HAL_DMA_Start_IT+0x4b4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d022      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6a      	ldr	r2, [pc, #424]	@ (8002f60 <HAL_DMA_Start_IT+0x4b8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d01d      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a68      	ldr	r2, [pc, #416]	@ (8002f64 <HAL_DMA_Start_IT+0x4bc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d018      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a67      	ldr	r2, [pc, #412]	@ (8002f68 <HAL_DMA_Start_IT+0x4c0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_DMA_Start_IT+0x4c4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00e      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a64      	ldr	r2, [pc, #400]	@ (8002f70 <HAL_DMA_Start_IT+0x4c8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d009      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a62      	ldr	r2, [pc, #392]	@ (8002f74 <HAL_DMA_Start_IT+0x4cc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a61      	ldr	r2, [pc, #388]	@ (8002f78 <HAL_DMA_Start_IT+0x4d0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_DMA_Start_IT+0x354>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <HAL_DMA_Start_IT+0x356>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e1e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e36:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a37      	ldr	r2, [pc, #220]	@ (8002f1c <HAL_DMA_Start_IT+0x474>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04a      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a36      	ldr	r2, [pc, #216]	@ (8002f20 <HAL_DMA_Start_IT+0x478>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d045      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a34      	ldr	r2, [pc, #208]	@ (8002f24 <HAL_DMA_Start_IT+0x47c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a33      	ldr	r2, [pc, #204]	@ (8002f28 <HAL_DMA_Start_IT+0x480>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d03b      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a31      	ldr	r2, [pc, #196]	@ (8002f2c <HAL_DMA_Start_IT+0x484>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d036      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a30      	ldr	r2, [pc, #192]	@ (8002f30 <HAL_DMA_Start_IT+0x488>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d031      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2e      	ldr	r2, [pc, #184]	@ (8002f34 <HAL_DMA_Start_IT+0x48c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d02c      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2d      	ldr	r2, [pc, #180]	@ (8002f38 <HAL_DMA_Start_IT+0x490>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d027      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <HAL_DMA_Start_IT+0x494>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d022      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2a      	ldr	r2, [pc, #168]	@ (8002f40 <HAL_DMA_Start_IT+0x498>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01d      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a28      	ldr	r2, [pc, #160]	@ (8002f44 <HAL_DMA_Start_IT+0x49c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d018      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a27      	ldr	r2, [pc, #156]	@ (8002f48 <HAL_DMA_Start_IT+0x4a0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a25      	ldr	r2, [pc, #148]	@ (8002f4c <HAL_DMA_Start_IT+0x4a4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00e      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <HAL_DMA_Start_IT+0x4a8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d009      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	@ (8002f54 <HAL_DMA_Start_IT+0x4ac>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_DMA_Start_IT+0x430>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <HAL_DMA_Start_IT+0x4b0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_DMA_Start_IT+0x442>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	e012      	b.n	8002f10 <HAL_DMA_Start_IT+0x468>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e009      	b.n	8002f10 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40020010 	.word	0x40020010
 8002f20:	40020028 	.word	0x40020028
 8002f24:	40020040 	.word	0x40020040
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40020088 	.word	0x40020088
 8002f34:	400200a0 	.word	0x400200a0
 8002f38:	400200b8 	.word	0x400200b8
 8002f3c:	40020410 	.word	0x40020410
 8002f40:	40020428 	.word	0x40020428
 8002f44:	40020440 	.word	0x40020440
 8002f48:	40020458 	.word	0x40020458
 8002f4c:	40020470 	.word	0x40020470
 8002f50:	40020488 	.word	0x40020488
 8002f54:	400204a0 	.word	0x400204a0
 8002f58:	400204b8 	.word	0x400204b8
 8002f5c:	58025408 	.word	0x58025408
 8002f60:	5802541c 	.word	0x5802541c
 8002f64:	58025430 	.word	0x58025430
 8002f68:	58025444 	.word	0x58025444
 8002f6c:	58025458 	.word	0x58025458
 8002f70:	5802546c 	.word	0x5802546c
 8002f74:	58025480 	.word	0x58025480
 8002f78:	58025494 	.word	0x58025494

08002f7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f88:	4b67      	ldr	r3, [pc, #412]	@ (8003128 <HAL_DMA_IRQHandler+0x1ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a67      	ldr	r2, [pc, #412]	@ (800312c <HAL_DMA_IRQHandler+0x1b0>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0a9b      	lsrs	r3, r3, #10
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5f      	ldr	r2, [pc, #380]	@ (8003130 <HAL_DMA_IRQHandler+0x1b4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04a      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003134 <HAL_DMA_IRQHandler+0x1b8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d045      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8003138 <HAL_DMA_IRQHandler+0x1bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d040      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800313c <HAL_DMA_IRQHandler+0x1c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d03b      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a59      	ldr	r2, [pc, #356]	@ (8003140 <HAL_DMA_IRQHandler+0x1c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d036      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a57      	ldr	r2, [pc, #348]	@ (8003144 <HAL_DMA_IRQHandler+0x1c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a56      	ldr	r2, [pc, #344]	@ (8003148 <HAL_DMA_IRQHandler+0x1cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d02c      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a54      	ldr	r2, [pc, #336]	@ (800314c <HAL_DMA_IRQHandler+0x1d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d027      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a53      	ldr	r2, [pc, #332]	@ (8003150 <HAL_DMA_IRQHandler+0x1d4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a51      	ldr	r2, [pc, #324]	@ (8003154 <HAL_DMA_IRQHandler+0x1d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01d      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a50      	ldr	r2, [pc, #320]	@ (8003158 <HAL_DMA_IRQHandler+0x1dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a4e      	ldr	r2, [pc, #312]	@ (800315c <HAL_DMA_IRQHandler+0x1e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a4d      	ldr	r2, [pc, #308]	@ (8003160 <HAL_DMA_IRQHandler+0x1e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a4b      	ldr	r2, [pc, #300]	@ (8003164 <HAL_DMA_IRQHandler+0x1e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a4a      	ldr	r2, [pc, #296]	@ (8003168 <HAL_DMA_IRQHandler+0x1ec>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_DMA_IRQHandler+0xd2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a48      	ldr	r2, [pc, #288]	@ (800316c <HAL_DMA_IRQHandler+0x1f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_DMA_IRQHandler+0xd6>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <HAL_DMA_IRQHandler+0xd8>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 842b 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2208      	movs	r2, #8
 8003064:	409a      	lsls	r2, r3
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a2 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <HAL_DMA_IRQHandler+0x1b4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d04a      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <HAL_DMA_IRQHandler+0x1b8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d045      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <HAL_DMA_IRQHandler+0x1bc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d040      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <HAL_DMA_IRQHandler+0x1c0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d03b      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a28      	ldr	r2, [pc, #160]	@ (8003140 <HAL_DMA_IRQHandler+0x1c4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d036      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_DMA_IRQHandler+0x1c8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d031      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a25      	ldr	r2, [pc, #148]	@ (8003148 <HAL_DMA_IRQHandler+0x1cc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02c      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a24      	ldr	r2, [pc, #144]	@ (800314c <HAL_DMA_IRQHandler+0x1d0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d027      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <HAL_DMA_IRQHandler+0x1d4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a21      	ldr	r2, [pc, #132]	@ (8003154 <HAL_DMA_IRQHandler+0x1d8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01d      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003158 <HAL_DMA_IRQHandler+0x1dc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d018      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1e      	ldr	r2, [pc, #120]	@ (800315c <HAL_DMA_IRQHandler+0x1e0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_DMA_IRQHandler+0x1e4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003164 <HAL_DMA_IRQHandler+0x1e8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_DMA_IRQHandler+0x1ec>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_DMA_IRQHandler+0x194>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_DMA_IRQHandler+0x1f0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d12f      	bne.n	8003170 <HAL_DMA_IRQHandler+0x1f4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	bf14      	ite	ne
 800311e:	2301      	movne	r3, #1
 8003120:	2300      	moveq	r3, #0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e02e      	b.n	8003184 <HAL_DMA_IRQHandler+0x208>
 8003126:	bf00      	nop
 8003128:	24000004 	.word	0x24000004
 800312c:	1b4e81b5 	.word	0x1b4e81b5
 8003130:	40020010 	.word	0x40020010
 8003134:	40020028 	.word	0x40020028
 8003138:	40020040 	.word	0x40020040
 800313c:	40020058 	.word	0x40020058
 8003140:	40020070 	.word	0x40020070
 8003144:	40020088 	.word	0x40020088
 8003148:	400200a0 	.word	0x400200a0
 800314c:	400200b8 	.word	0x400200b8
 8003150:	40020410 	.word	0x40020410
 8003154:	40020428 	.word	0x40020428
 8003158:	40020440 	.word	0x40020440
 800315c:	40020458 	.word	0x40020458
 8003160:	40020470 	.word	0x40020470
 8003164:	40020488 	.word	0x40020488
 8003168:	400204a0 	.word	0x400204a0
 800316c:	400204b8 	.word	0x400204b8
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2208      	movs	r2, #8
 80031a2:	409a      	lsls	r2, r3
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06e      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a69      	ldr	r2, [pc, #420]	@ (8003374 <HAL_DMA_IRQHandler+0x3f8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04a      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a67      	ldr	r2, [pc, #412]	@ (8003378 <HAL_DMA_IRQHandler+0x3fc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d045      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a66      	ldr	r2, [pc, #408]	@ (800337c <HAL_DMA_IRQHandler+0x400>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a64      	ldr	r2, [pc, #400]	@ (8003380 <HAL_DMA_IRQHandler+0x404>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d03b      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a63      	ldr	r2, [pc, #396]	@ (8003384 <HAL_DMA_IRQHandler+0x408>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d036      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a61      	ldr	r2, [pc, #388]	@ (8003388 <HAL_DMA_IRQHandler+0x40c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a60      	ldr	r2, [pc, #384]	@ (800338c <HAL_DMA_IRQHandler+0x410>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d02c      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5e      	ldr	r2, [pc, #376]	@ (8003390 <HAL_DMA_IRQHandler+0x414>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d027      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5d      	ldr	r2, [pc, #372]	@ (8003394 <HAL_DMA_IRQHandler+0x418>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5b      	ldr	r2, [pc, #364]	@ (8003398 <HAL_DMA_IRQHandler+0x41c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5a      	ldr	r2, [pc, #360]	@ (800339c <HAL_DMA_IRQHandler+0x420>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a58      	ldr	r2, [pc, #352]	@ (80033a0 <HAL_DMA_IRQHandler+0x424>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a57      	ldr	r2, [pc, #348]	@ (80033a4 <HAL_DMA_IRQHandler+0x428>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a55      	ldr	r2, [pc, #340]	@ (80033a8 <HAL_DMA_IRQHandler+0x42c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a54      	ldr	r2, [pc, #336]	@ (80033ac <HAL_DMA_IRQHandler+0x430>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_DMA_IRQHandler+0x2ee>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_DMA_IRQHandler+0x434>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10a      	bne.n	8003280 <HAL_DMA_IRQHandler+0x304>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e003      	b.n	8003288 <HAL_DMA_IRQHandler+0x30c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2300      	movs	r3, #0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2201      	movs	r2, #1
 8003296:	409a      	lsls	r2, r3
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	f043 0202 	orr.w	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2204      	movs	r2, #4
 80032b2:	409a      	lsls	r2, r3
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 808f 	beq.w	80033dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003374 <HAL_DMA_IRQHandler+0x3f8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04a      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003378 <HAL_DMA_IRQHandler+0x3fc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d045      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a29      	ldr	r2, [pc, #164]	@ (800337c <HAL_DMA_IRQHandler+0x400>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d040      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a27      	ldr	r2, [pc, #156]	@ (8003380 <HAL_DMA_IRQHandler+0x404>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d03b      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_DMA_IRQHandler+0x408>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d036      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a24      	ldr	r2, [pc, #144]	@ (8003388 <HAL_DMA_IRQHandler+0x40c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d031      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a23      	ldr	r2, [pc, #140]	@ (800338c <HAL_DMA_IRQHandler+0x410>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d02c      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a21      	ldr	r2, [pc, #132]	@ (8003390 <HAL_DMA_IRQHandler+0x414>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d027      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a20      	ldr	r2, [pc, #128]	@ (8003394 <HAL_DMA_IRQHandler+0x418>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <HAL_DMA_IRQHandler+0x41c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d01d      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1d      	ldr	r2, [pc, #116]	@ (800339c <HAL_DMA_IRQHandler+0x420>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1b      	ldr	r2, [pc, #108]	@ (80033a0 <HAL_DMA_IRQHandler+0x424>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1a      	ldr	r2, [pc, #104]	@ (80033a4 <HAL_DMA_IRQHandler+0x428>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a18      	ldr	r2, [pc, #96]	@ (80033a8 <HAL_DMA_IRQHandler+0x42c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <HAL_DMA_IRQHandler+0x430>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_DMA_IRQHandler+0x3e2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <HAL_DMA_IRQHandler+0x434>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d12a      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x438>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e023      	b.n	80033bc <HAL_DMA_IRQHandler+0x440>
 8003374:	40020010 	.word	0x40020010
 8003378:	40020028 	.word	0x40020028
 800337c:	40020040 	.word	0x40020040
 8003380:	40020058 	.word	0x40020058
 8003384:	40020070 	.word	0x40020070
 8003388:	40020088 	.word	0x40020088
 800338c:	400200a0 	.word	0x400200a0
 8003390:	400200b8 	.word	0x400200b8
 8003394:	40020410 	.word	0x40020410
 8003398:	40020428 	.word	0x40020428
 800339c:	40020440 	.word	0x40020440
 80033a0:	40020458 	.word	0x40020458
 80033a4:	40020470 	.word	0x40020470
 80033a8:	40020488 	.word	0x40020488
 80033ac:	400204a0 	.word	0x400204a0
 80033b0:	400204b8 	.word	0x400204b8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2204      	movs	r2, #4
 80033ca:	409a      	lsls	r2, r3
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2210      	movs	r2, #16
 80033e6:	409a      	lsls	r2, r3
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a6 	beq.w	800353e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a85      	ldr	r2, [pc, #532]	@ (800360c <HAL_DMA_IRQHandler+0x690>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d04a      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a83      	ldr	r2, [pc, #524]	@ (8003610 <HAL_DMA_IRQHandler+0x694>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d045      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a82      	ldr	r2, [pc, #520]	@ (8003614 <HAL_DMA_IRQHandler+0x698>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d040      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a80      	ldr	r2, [pc, #512]	@ (8003618 <HAL_DMA_IRQHandler+0x69c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d03b      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7f      	ldr	r2, [pc, #508]	@ (800361c <HAL_DMA_IRQHandler+0x6a0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d036      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a7d      	ldr	r2, [pc, #500]	@ (8003620 <HAL_DMA_IRQHandler+0x6a4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d031      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7c      	ldr	r2, [pc, #496]	@ (8003624 <HAL_DMA_IRQHandler+0x6a8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d02c      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7a      	ldr	r2, [pc, #488]	@ (8003628 <HAL_DMA_IRQHandler+0x6ac>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d027      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a79      	ldr	r2, [pc, #484]	@ (800362c <HAL_DMA_IRQHandler+0x6b0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a77      	ldr	r2, [pc, #476]	@ (8003630 <HAL_DMA_IRQHandler+0x6b4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01d      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a76      	ldr	r2, [pc, #472]	@ (8003634 <HAL_DMA_IRQHandler+0x6b8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d018      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a74      	ldr	r2, [pc, #464]	@ (8003638 <HAL_DMA_IRQHandler+0x6bc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a73      	ldr	r2, [pc, #460]	@ (800363c <HAL_DMA_IRQHandler+0x6c0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a71      	ldr	r2, [pc, #452]	@ (8003640 <HAL_DMA_IRQHandler+0x6c4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a70      	ldr	r2, [pc, #448]	@ (8003644 <HAL_DMA_IRQHandler+0x6c8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_IRQHandler+0x516>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6e      	ldr	r2, [pc, #440]	@ (8003648 <HAL_DMA_IRQHandler+0x6cc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d10a      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x52c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e009      	b.n	80034bc <HAL_DMA_IRQHandler+0x540>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d03e      	beq.n	800353e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2210      	movs	r2, #16
 80034ca:	409a      	lsls	r2, r3
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d018      	beq.n	8003510 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d024      	beq.n	800353e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
 80034fc:	e01f      	b.n	800353e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01b      	beq.n	800353e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4798      	blx	r3
 800350e:	e016      	b.n	800353e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0208 	bic.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	2220      	movs	r2, #32
 8003548:	409a      	lsls	r2, r3
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8110 	beq.w	8003774 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <HAL_DMA_IRQHandler+0x690>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d04a      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_DMA_IRQHandler+0x694>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d045      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <HAL_DMA_IRQHandler+0x698>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d040      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_DMA_IRQHandler+0x69c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d03b      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a26      	ldr	r2, [pc, #152]	@ (800361c <HAL_DMA_IRQHandler+0x6a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d036      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a25      	ldr	r2, [pc, #148]	@ (8003620 <HAL_DMA_IRQHandler+0x6a4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a23      	ldr	r2, [pc, #140]	@ (8003624 <HAL_DMA_IRQHandler+0x6a8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02c      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <HAL_DMA_IRQHandler+0x6ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d027      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a20      	ldr	r2, [pc, #128]	@ (800362c <HAL_DMA_IRQHandler+0x6b0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_DMA_IRQHandler+0x6b4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01d      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_DMA_IRQHandler+0x6b8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_DMA_IRQHandler+0x6bc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1a      	ldr	r2, [pc, #104]	@ (800363c <HAL_DMA_IRQHandler+0x6c0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a19      	ldr	r2, [pc, #100]	@ (8003640 <HAL_DMA_IRQHandler+0x6c4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a17      	ldr	r2, [pc, #92]	@ (8003644 <HAL_DMA_IRQHandler+0x6c8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x678>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a16      	ldr	r2, [pc, #88]	@ (8003648 <HAL_DMA_IRQHandler+0x6cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d12b      	bne.n	800364c <HAL_DMA_IRQHandler+0x6d0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e02a      	b.n	8003660 <HAL_DMA_IRQHandler+0x6e4>
 800360a:	bf00      	nop
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8087 	beq.w	8003774 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2220      	movs	r2, #32
 8003670:	409a      	lsls	r2, r3
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b04      	cmp	r3, #4
 8003680:	d139      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0216 	bic.w	r2, r2, #22
 8003690:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_DMA_IRQHandler+0x736>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0208 	bic.w	r2, r2, #8
 80036c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	223f      	movs	r2, #63	@ 0x3f
 80036cc:	409a      	lsls	r2, r3
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 834a 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
          }
          return;
 80036f4:	e344      	b.n	8003d80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	2b00      	cmp	r3, #0
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e027      	b.n	8003774 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d023      	beq.n	8003774 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e01e      	b.n	8003774 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10f      	bne.n	8003764 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0210 	bic.w	r2, r2, #16
 8003752:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8306 	beq.w	8003d8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8088 	beq.w	800389c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2204      	movs	r2, #4
 8003790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a7a      	ldr	r2, [pc, #488]	@ (8003984 <HAL_DMA_IRQHandler+0xa08>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d04a      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a79      	ldr	r2, [pc, #484]	@ (8003988 <HAL_DMA_IRQHandler+0xa0c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d045      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a77      	ldr	r2, [pc, #476]	@ (800398c <HAL_DMA_IRQHandler+0xa10>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d040      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a76      	ldr	r2, [pc, #472]	@ (8003990 <HAL_DMA_IRQHandler+0xa14>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d03b      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a74      	ldr	r2, [pc, #464]	@ (8003994 <HAL_DMA_IRQHandler+0xa18>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d036      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a73      	ldr	r2, [pc, #460]	@ (8003998 <HAL_DMA_IRQHandler+0xa1c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d031      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a71      	ldr	r2, [pc, #452]	@ (800399c <HAL_DMA_IRQHandler+0xa20>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d02c      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a70      	ldr	r2, [pc, #448]	@ (80039a0 <HAL_DMA_IRQHandler+0xa24>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d027      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a6e      	ldr	r2, [pc, #440]	@ (80039a4 <HAL_DMA_IRQHandler+0xa28>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6d      	ldr	r2, [pc, #436]	@ (80039a8 <HAL_DMA_IRQHandler+0xa2c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d01d      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a6b      	ldr	r2, [pc, #428]	@ (80039ac <HAL_DMA_IRQHandler+0xa30>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6a      	ldr	r2, [pc, #424]	@ (80039b0 <HAL_DMA_IRQHandler+0xa34>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a68      	ldr	r2, [pc, #416]	@ (80039b4 <HAL_DMA_IRQHandler+0xa38>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a67      	ldr	r2, [pc, #412]	@ (80039b8 <HAL_DMA_IRQHandler+0xa3c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_DMA_IRQHandler+0xa40>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_DMA_IRQHandler+0x8b8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a64      	ldr	r2, [pc, #400]	@ (80039c0 <HAL_DMA_IRQHandler+0xa44>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d108      	bne.n	8003846 <HAL_DMA_IRQHandler+0x8ca>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e007      	b.n	8003856 <HAL_DMA_IRQHandler+0x8da>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3301      	adds	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385e:	429a      	cmp	r2, r3
 8003860:	d307      	bcc.n	8003872 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f2      	bne.n	8003856 <HAL_DMA_IRQHandler+0x8da>
 8003870:	e000      	b.n	8003874 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003872:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800388a:	e003      	b.n	8003894 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8272 	beq.w	8003d8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
 80038ae:	e26c      	b.n	8003d8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a43      	ldr	r2, [pc, #268]	@ (80039c4 <HAL_DMA_IRQHandler+0xa48>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a42      	ldr	r2, [pc, #264]	@ (80039c8 <HAL_DMA_IRQHandler+0xa4c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01d      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a40      	ldr	r2, [pc, #256]	@ (80039cc <HAL_DMA_IRQHandler+0xa50>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3f      	ldr	r2, [pc, #252]	@ (80039d0 <HAL_DMA_IRQHandler+0xa54>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3d      	ldr	r2, [pc, #244]	@ (80039d4 <HAL_DMA_IRQHandler+0xa58>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3c      	ldr	r2, [pc, #240]	@ (80039d8 <HAL_DMA_IRQHandler+0xa5c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a3a      	ldr	r2, [pc, #232]	@ (80039dc <HAL_DMA_IRQHandler+0xa60>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_DMA_IRQHandler+0x984>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a39      	ldr	r2, [pc, #228]	@ (80039e0 <HAL_DMA_IRQHandler+0xa64>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_DMA_IRQHandler+0x988>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_DMA_IRQHandler+0x98a>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 823f 	beq.w	8003d8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2204      	movs	r2, #4
 800391e:	409a      	lsls	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80cd 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0xb48>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80c7 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	2204      	movs	r2, #4
 8003940:	409a      	lsls	r2, r3
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d049      	beq.n	80039e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8210 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800396c:	e20a      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8206 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003980:	e200      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe08>
 8003982:	bf00      	nop
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
 80039c4:	58025408 	.word	0x58025408
 80039c8:	5802541c 	.word	0x5802541c
 80039cc:	58025430 	.word	0x58025430
 80039d0:	58025444 	.word	0x58025444
 80039d4:	58025458 	.word	0x58025458
 80039d8:	5802546c 	.word	0x5802546c
 80039dc:	58025480 	.word	0x58025480
 80039e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d160      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7f      	ldr	r2, [pc, #508]	@ (8003bf0 <HAL_DMA_IRQHandler+0xc74>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d04a      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a7d      	ldr	r2, [pc, #500]	@ (8003bf4 <HAL_DMA_IRQHandler+0xc78>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d045      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7c      	ldr	r2, [pc, #496]	@ (8003bf8 <HAL_DMA_IRQHandler+0xc7c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d040      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7a      	ldr	r2, [pc, #488]	@ (8003bfc <HAL_DMA_IRQHandler+0xc80>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a79      	ldr	r2, [pc, #484]	@ (8003c00 <HAL_DMA_IRQHandler+0xc84>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d036      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a77      	ldr	r2, [pc, #476]	@ (8003c04 <HAL_DMA_IRQHandler+0xc88>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d031      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a76      	ldr	r2, [pc, #472]	@ (8003c08 <HAL_DMA_IRQHandler+0xc8c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d02c      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a74      	ldr	r2, [pc, #464]	@ (8003c0c <HAL_DMA_IRQHandler+0xc90>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d027      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a73      	ldr	r2, [pc, #460]	@ (8003c10 <HAL_DMA_IRQHandler+0xc94>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a71      	ldr	r2, [pc, #452]	@ (8003c14 <HAL_DMA_IRQHandler+0xc98>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01d      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a70      	ldr	r2, [pc, #448]	@ (8003c18 <HAL_DMA_IRQHandler+0xc9c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	@ (8003c1c <HAL_DMA_IRQHandler+0xca0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c20 <HAL_DMA_IRQHandler+0xca4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6b      	ldr	r2, [pc, #428]	@ (8003c24 <HAL_DMA_IRQHandler+0xca8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c28 <HAL_DMA_IRQHandler+0xcac>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xb12>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	@ (8003c2c <HAL_DMA_IRQHandler+0xcb0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0xb24>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0208 	bic.w	r2, r2, #8
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e007      	b.n	8003ab0 <HAL_DMA_IRQHandler+0xb34>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0204 	bic.w	r2, r2, #4
 8003aae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8165 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac2:	e15f      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2202      	movs	r2, #2
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80c5 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xce8>
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80bf 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2202      	movs	r2, #2
 8003af0:	409a      	lsls	r2, r3
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 813a 	beq.w	8003d88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1c:	e134      	b.n	8003d88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8130 	beq.w	8003d88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b30:	e12a      	b.n	8003d88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f040 8089 	bne.w	8003c50 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <HAL_DMA_IRQHandler+0xc74>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d04a      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a29      	ldr	r2, [pc, #164]	@ (8003bf4 <HAL_DMA_IRQHandler+0xc78>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d045      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a28      	ldr	r2, [pc, #160]	@ (8003bf8 <HAL_DMA_IRQHandler+0xc7c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d040      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <HAL_DMA_IRQHandler+0xc80>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d03b      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a25      	ldr	r2, [pc, #148]	@ (8003c00 <HAL_DMA_IRQHandler+0xc84>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d036      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a23      	ldr	r2, [pc, #140]	@ (8003c04 <HAL_DMA_IRQHandler+0xc88>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d031      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a22      	ldr	r2, [pc, #136]	@ (8003c08 <HAL_DMA_IRQHandler+0xc8c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d02c      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a20      	ldr	r2, [pc, #128]	@ (8003c0c <HAL_DMA_IRQHandler+0xc90>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d027      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1f      	ldr	r2, [pc, #124]	@ (8003c10 <HAL_DMA_IRQHandler+0xc94>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c14 <HAL_DMA_IRQHandler+0xc98>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01d      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c18 <HAL_DMA_IRQHandler+0xc9c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c1c <HAL_DMA_IRQHandler+0xca0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a19      	ldr	r2, [pc, #100]	@ (8003c20 <HAL_DMA_IRQHandler+0xca4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	@ (8003c24 <HAL_DMA_IRQHandler+0xca8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a16      	ldr	r2, [pc, #88]	@ (8003c28 <HAL_DMA_IRQHandler+0xcac>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_DMA_IRQHandler+0xc62>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <HAL_DMA_IRQHandler+0xcb0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d128      	bne.n	8003c30 <HAL_DMA_IRQHandler+0xcb4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0214 	bic.w	r2, r2, #20
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e027      	b.n	8003c40 <HAL_DMA_IRQHandler+0xcc4>
 8003bf0:	40020010 	.word	0x40020010
 8003bf4:	40020028 	.word	0x40020028
 8003bf8:	40020040 	.word	0x40020040
 8003bfc:	40020058 	.word	0x40020058
 8003c00:	40020070 	.word	0x40020070
 8003c04:	40020088 	.word	0x40020088
 8003c08:	400200a0 	.word	0x400200a0
 8003c0c:	400200b8 	.word	0x400200b8
 8003c10:	40020410 	.word	0x40020410
 8003c14:	40020428 	.word	0x40020428
 8003c18:	40020440 	.word	0x40020440
 8003c1c:	40020458 	.word	0x40020458
 8003c20:	40020470 	.word	0x40020470
 8003c24:	40020488 	.word	0x40020488
 8003c28:	400204a0 	.word	0x400204a0
 8003c2c:	400204b8 	.word	0x400204b8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 020a 	bic.w	r2, r2, #10
 8003c3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8097 	beq.w	8003d88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c62:	e091      	b.n	8003d88 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8088 	beq.w	8003d8a <HAL_DMA_IRQHandler+0xe0e>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8082 	beq.w	8003d8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	@ (8003d90 <HAL_DMA_IRQHandler+0xe14>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a3f      	ldr	r2, [pc, #252]	@ (8003d94 <HAL_DMA_IRQHandler+0xe18>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d98 <HAL_DMA_IRQHandler+0xe1c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8003d9c <HAL_DMA_IRQHandler+0xe20>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a3b      	ldr	r2, [pc, #236]	@ (8003da0 <HAL_DMA_IRQHandler+0xe24>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a39      	ldr	r2, [pc, #228]	@ (8003da4 <HAL_DMA_IRQHandler+0xe28>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a38      	ldr	r2, [pc, #224]	@ (8003da8 <HAL_DMA_IRQHandler+0xe2c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a36      	ldr	r2, [pc, #216]	@ (8003dac <HAL_DMA_IRQHandler+0xe30>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a35      	ldr	r2, [pc, #212]	@ (8003db0 <HAL_DMA_IRQHandler+0xe34>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a33      	ldr	r2, [pc, #204]	@ (8003db4 <HAL_DMA_IRQHandler+0xe38>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a32      	ldr	r2, [pc, #200]	@ (8003db8 <HAL_DMA_IRQHandler+0xe3c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a30      	ldr	r2, [pc, #192]	@ (8003dbc <HAL_DMA_IRQHandler+0xe40>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc0 <HAL_DMA_IRQHandler+0xe44>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc4 <HAL_DMA_IRQHandler+0xe48>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc8 <HAL_DMA_IRQHandler+0xe4c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xdaa>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	@ (8003dcc <HAL_DMA_IRQHandler+0xe50>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <HAL_DMA_IRQHandler+0xdbc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 021c 	bic.w	r2, r2, #28
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <HAL_DMA_IRQHandler+0xdcc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 020e 	bic.w	r2, r2, #14
 8003d46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
 8003d7e:	e004      	b.n	8003d8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d8a:	3728      	adds	r7, #40	@ 0x28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40020010 	.word	0x40020010
 8003d94:	40020028 	.word	0x40020028
 8003d98:	40020040 	.word	0x40020040
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	40020070 	.word	0x40020070
 8003da4:	40020088 	.word	0x40020088
 8003da8:	400200a0 	.word	0x400200a0
 8003dac:	400200b8 	.word	0x400200b8
 8003db0:	40020410 	.word	0x40020410
 8003db4:	40020428 	.word	0x40020428
 8003db8:	40020440 	.word	0x40020440
 8003dbc:	40020458 	.word	0x40020458
 8003dc0:	40020470 	.word	0x40020470
 8003dc4:	40020488 	.word	0x40020488
 8003dc8:	400204a0 	.word	0x400204a0
 8003dcc:	400204b8 	.word	0x400204b8

08003dd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7f      	ldr	r2, [pc, #508]	@ (8003fec <DMA_SetConfig+0x21c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d072      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ff0 <DMA_SetConfig+0x220>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d06d      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff4 <DMA_SetConfig+0x224>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d068      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a7a      	ldr	r2, [pc, #488]	@ (8003ff8 <DMA_SetConfig+0x228>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d063      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a79      	ldr	r2, [pc, #484]	@ (8003ffc <DMA_SetConfig+0x22c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d05e      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a77      	ldr	r2, [pc, #476]	@ (8004000 <DMA_SetConfig+0x230>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d059      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a76      	ldr	r2, [pc, #472]	@ (8004004 <DMA_SetConfig+0x234>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d054      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a74      	ldr	r2, [pc, #464]	@ (8004008 <DMA_SetConfig+0x238>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d04f      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a73      	ldr	r2, [pc, #460]	@ (800400c <DMA_SetConfig+0x23c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04a      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a71      	ldr	r2, [pc, #452]	@ (8004010 <DMA_SetConfig+0x240>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d045      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a70      	ldr	r2, [pc, #448]	@ (8004014 <DMA_SetConfig+0x244>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8004018 <DMA_SetConfig+0x248>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d03b      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a6d      	ldr	r2, [pc, #436]	@ (800401c <DMA_SetConfig+0x24c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d036      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6b      	ldr	r2, [pc, #428]	@ (8004020 <DMA_SetConfig+0x250>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8004024 <DMA_SetConfig+0x254>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02c      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a68      	ldr	r2, [pc, #416]	@ (8004028 <DMA_SetConfig+0x258>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d027      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a67      	ldr	r2, [pc, #412]	@ (800402c <DMA_SetConfig+0x25c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a65      	ldr	r2, [pc, #404]	@ (8004030 <DMA_SetConfig+0x260>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a64      	ldr	r2, [pc, #400]	@ (8004034 <DMA_SetConfig+0x264>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a62      	ldr	r2, [pc, #392]	@ (8004038 <DMA_SetConfig+0x268>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a61      	ldr	r2, [pc, #388]	@ (800403c <DMA_SetConfig+0x26c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8004040 <DMA_SetConfig+0x270>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5e      	ldr	r2, [pc, #376]	@ (8004044 <DMA_SetConfig+0x274>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <DMA_SetConfig+0x10a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5c      	ldr	r2, [pc, #368]	@ (8004048 <DMA_SetConfig+0x278>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <DMA_SetConfig+0x10e>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <DMA_SetConfig+0x110>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003eec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d004      	beq.n	8003f00 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003efe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a39      	ldr	r2, [pc, #228]	@ (8003fec <DMA_SetConfig+0x21c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d04a      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a38      	ldr	r2, [pc, #224]	@ (8003ff0 <DMA_SetConfig+0x220>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d045      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a36      	ldr	r2, [pc, #216]	@ (8003ff4 <DMA_SetConfig+0x224>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d040      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a35      	ldr	r2, [pc, #212]	@ (8003ff8 <DMA_SetConfig+0x228>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d03b      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a33      	ldr	r2, [pc, #204]	@ (8003ffc <DMA_SetConfig+0x22c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d036      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a32      	ldr	r2, [pc, #200]	@ (8004000 <DMA_SetConfig+0x230>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d031      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a30      	ldr	r2, [pc, #192]	@ (8004004 <DMA_SetConfig+0x234>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d02c      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004008 <DMA_SetConfig+0x238>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d027      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2d      	ldr	r2, [pc, #180]	@ (800400c <DMA_SetConfig+0x23c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d022      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004010 <DMA_SetConfig+0x240>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d01d      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2a      	ldr	r2, [pc, #168]	@ (8004014 <DMA_SetConfig+0x244>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d018      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a29      	ldr	r2, [pc, #164]	@ (8004018 <DMA_SetConfig+0x248>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a27      	ldr	r2, [pc, #156]	@ (800401c <DMA_SetConfig+0x24c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a26      	ldr	r2, [pc, #152]	@ (8004020 <DMA_SetConfig+0x250>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <DMA_SetConfig+0x254>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <DMA_SetConfig+0x1d0>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a23      	ldr	r2, [pc, #140]	@ (8004028 <DMA_SetConfig+0x258>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <DMA_SetConfig+0x1d4>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <DMA_SetConfig+0x1d6>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d059      	beq.n	800405e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	223f      	movs	r2, #63	@ 0x3f
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d138      	bne.n	800404c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fea:	e086      	b.n	80040fa <DMA_SetConfig+0x32a>
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]
}
 800405c:	e04d      	b.n	80040fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a29      	ldr	r2, [pc, #164]	@ (8004108 <DMA_SetConfig+0x338>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d022      	beq.n	80040ae <DMA_SetConfig+0x2de>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a27      	ldr	r2, [pc, #156]	@ (800410c <DMA_SetConfig+0x33c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01d      	beq.n	80040ae <DMA_SetConfig+0x2de>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <DMA_SetConfig+0x340>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d018      	beq.n	80040ae <DMA_SetConfig+0x2de>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a24      	ldr	r2, [pc, #144]	@ (8004114 <DMA_SetConfig+0x344>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <DMA_SetConfig+0x2de>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a23      	ldr	r2, [pc, #140]	@ (8004118 <DMA_SetConfig+0x348>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00e      	beq.n	80040ae <DMA_SetConfig+0x2de>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a21      	ldr	r2, [pc, #132]	@ (800411c <DMA_SetConfig+0x34c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d009      	beq.n	80040ae <DMA_SetConfig+0x2de>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a20      	ldr	r2, [pc, #128]	@ (8004120 <DMA_SetConfig+0x350>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <DMA_SetConfig+0x2de>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004124 <DMA_SetConfig+0x354>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <DMA_SetConfig+0x2e2>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <DMA_SetConfig+0x2e4>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b40      	cmp	r3, #64	@ 0x40
 80040d6:	d108      	bne.n	80040ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	60da      	str	r2, [r3, #12]
}
 80040e8:	e007      	b.n	80040fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	58025408 	.word	0x58025408
 800410c:	5802541c 	.word	0x5802541c
 8004110:	58025430 	.word	0x58025430
 8004114:	58025444 	.word	0x58025444
 8004118:	58025458 	.word	0x58025458
 800411c:	5802546c 	.word	0x5802546c
 8004120:	58025480 	.word	0x58025480
 8004124:	58025494 	.word	0x58025494

08004128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a42      	ldr	r2, [pc, #264]	@ (8004240 <DMA_CalcBaseAndBitshift+0x118>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d04a      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a41      	ldr	r2, [pc, #260]	@ (8004244 <DMA_CalcBaseAndBitshift+0x11c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d045      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a3f      	ldr	r2, [pc, #252]	@ (8004248 <DMA_CalcBaseAndBitshift+0x120>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d040      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a3e      	ldr	r2, [pc, #248]	@ (800424c <DMA_CalcBaseAndBitshift+0x124>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d03b      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a3c      	ldr	r2, [pc, #240]	@ (8004250 <DMA_CalcBaseAndBitshift+0x128>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d036      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a3b      	ldr	r2, [pc, #236]	@ (8004254 <DMA_CalcBaseAndBitshift+0x12c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d031      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a39      	ldr	r2, [pc, #228]	@ (8004258 <DMA_CalcBaseAndBitshift+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d02c      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a38      	ldr	r2, [pc, #224]	@ (800425c <DMA_CalcBaseAndBitshift+0x134>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d027      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <DMA_CalcBaseAndBitshift+0x138>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d022      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a35      	ldr	r2, [pc, #212]	@ (8004264 <DMA_CalcBaseAndBitshift+0x13c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d01d      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <DMA_CalcBaseAndBitshift+0x140>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d018      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a32      	ldr	r2, [pc, #200]	@ (800426c <DMA_CalcBaseAndBitshift+0x144>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a30      	ldr	r2, [pc, #192]	@ (8004270 <DMA_CalcBaseAndBitshift+0x148>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00e      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004274 <DMA_CalcBaseAndBitshift+0x14c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d009      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <DMA_CalcBaseAndBitshift+0x150>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <DMA_CalcBaseAndBitshift+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2c      	ldr	r2, [pc, #176]	@ (800427c <DMA_CalcBaseAndBitshift+0x154>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <DMA_CalcBaseAndBitshift+0xac>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <DMA_CalcBaseAndBitshift+0xae>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d024      	beq.n	8004224 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	3b10      	subs	r3, #16
 80041e2:	4a27      	ldr	r2, [pc, #156]	@ (8004280 <DMA_CalcBaseAndBitshift+0x158>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	4a24      	ldr	r2, [pc, #144]	@ (8004284 <DMA_CalcBaseAndBitshift+0x15c>)
 80041f4:	5cd3      	ldrb	r3, [r2, r3]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d908      	bls.n	8004214 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <DMA_CalcBaseAndBitshift+0x160>)
 800420a:	4013      	ands	r3, r2
 800420c:	1d1a      	adds	r2, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	659a      	str	r2, [r3, #88]	@ 0x58
 8004212:	e00d      	b.n	8004230 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <DMA_CalcBaseAndBitshift+0x160>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6593      	str	r3, [r2, #88]	@ 0x58
 8004222:	e005      	b.n	8004230 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	40020010 	.word	0x40020010
 8004244:	40020028 	.word	0x40020028
 8004248:	40020040 	.word	0x40020040
 800424c:	40020058 	.word	0x40020058
 8004250:	40020070 	.word	0x40020070
 8004254:	40020088 	.word	0x40020088
 8004258:	400200a0 	.word	0x400200a0
 800425c:	400200b8 	.word	0x400200b8
 8004260:	40020410 	.word	0x40020410
 8004264:	40020428 	.word	0x40020428
 8004268:	40020440 	.word	0x40020440
 800426c:	40020458 	.word	0x40020458
 8004270:	40020470 	.word	0x40020470
 8004274:	40020488 	.word	0x40020488
 8004278:	400204a0 	.word	0x400204a0
 800427c:	400204b8 	.word	0x400204b8
 8004280:	aaaaaaab 	.word	0xaaaaaaab
 8004284:	0800a320 	.word	0x0800a320
 8004288:	fffffc00 	.word	0xfffffc00

0800428c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d120      	bne.n	80042e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d858      	bhi.n	800435a <DMA_CheckFifoParam+0xce>
 80042a8:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <DMA_CheckFifoParam+0x24>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042d3 	.word	0x080042d3
 80042b8:	080042c1 	.word	0x080042c1
 80042bc:	0800435b 	.word	0x0800435b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d048      	beq.n	800435e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042d0:	e045      	b.n	800435e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042da:	d142      	bne.n	8004362 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042e0:	e03f      	b.n	8004362 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ea:	d123      	bne.n	8004334 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d838      	bhi.n	8004366 <DMA_CheckFifoParam+0xda>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <DMA_CheckFifoParam+0x70>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	08004313 	.word	0x08004313
 8004304:	0800430d 	.word	0x0800430d
 8004308:	08004325 	.word	0x08004325
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
        break;
 8004310:	e030      	b.n	8004374 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d025      	beq.n	800436a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004322:	e022      	b.n	800436a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800432c:	d11f      	bne.n	800436e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004332:	e01c      	b.n	800436e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	2b02      	cmp	r3, #2
 800433a:	d902      	bls.n	8004342 <DMA_CheckFifoParam+0xb6>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d003      	beq.n	8004348 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004340:	e018      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
        break;
 8004346:	e015      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00e      	beq.n	8004372 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
    break;
 8004358:	e00b      	b.n	8004372 <DMA_CheckFifoParam+0xe6>
        break;
 800435a:	bf00      	nop
 800435c:	e00a      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        break;
 800435e:	bf00      	nop
 8004360:	e008      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        break;
 8004362:	bf00      	nop
 8004364:	e006      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        break;
 8004366:	bf00      	nop
 8004368:	e004      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        break;
 800436a:	bf00      	nop
 800436c:	e002      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
        break;
 800436e:	bf00      	nop
 8004370:	e000      	b.n	8004374 <DMA_CheckFifoParam+0xe8>
    break;
 8004372:	bf00      	nop
    }
  }

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a38      	ldr	r2, [pc, #224]	@ (8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a36      	ldr	r2, [pc, #216]	@ (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a35      	ldr	r2, [pc, #212]	@ (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a33      	ldr	r2, [pc, #204]	@ (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a32      	ldr	r2, [pc, #200]	@ (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a30      	ldr	r2, [pc, #192]	@ (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043e6:	2300      	movs	r3, #0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	3b08      	subs	r3, #8
 80043f4:	4a28      	ldr	r2, [pc, #160]	@ (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043f6:	fba2 2303 	umull	r2, r3, r2, r3
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4b26      	ldr	r3, [pc, #152]	@ (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	461a      	mov	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004410:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2201      	movs	r2, #1
 800441a:	409a      	lsls	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004420:	e024      	b.n	800446c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	3b10      	subs	r3, #16
 800442a:	4a1e      	ldr	r2, [pc, #120]	@ (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a1c      	ldr	r2, [pc, #112]	@ (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d806      	bhi.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a1b      	ldr	r2, [pc, #108]	@ (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d902      	bls.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3308      	adds	r3, #8
 8004448:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4b18      	ldr	r3, [pc, #96]	@ (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	461a      	mov	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800445c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2201      	movs	r2, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	58025408 	.word	0x58025408
 800447c:	5802541c 	.word	0x5802541c
 8004480:	58025430 	.word	0x58025430
 8004484:	58025444 	.word	0x58025444
 8004488:	58025458 	.word	0x58025458
 800448c:	5802546c 	.word	0x5802546c
 8004490:	58025480 	.word	0x58025480
 8004494:	58025494 	.word	0x58025494
 8004498:	cccccccd 	.word	0xcccccccd
 800449c:	16009600 	.word	0x16009600
 80044a0:	58025880 	.word	0x58025880
 80044a4:	aaaaaaab 	.word	0xaaaaaaab
 80044a8:	400204b8 	.word	0x400204b8
 80044ac:	4002040f 	.word	0x4002040f
 80044b0:	10008200 	.word	0x10008200
 80044b4:	40020880 	.word	0x40020880

080044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d04a      	beq.n	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d847      	bhi.n	8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a25      	ldr	r2, [pc, #148]	@ (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a21      	ldr	r2, [pc, #132]	@ (800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1f      	ldr	r2, [pc, #124]	@ (8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1e      	ldr	r2, [pc, #120]	@ (8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4b17      	ldr	r3, [pc, #92]	@ (8004590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004540:	671a      	str	r2, [r3, #112]	@ 0x70
 8004542:	e009      	b.n	8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a11      	ldr	r2, [pc, #68]	@ (800459c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004556:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	3b01      	subs	r3, #1
 800455c:	2201      	movs	r2, #1
 800455e:	409a      	lsls	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	58025408 	.word	0x58025408
 8004574:	5802541c 	.word	0x5802541c
 8004578:	58025430 	.word	0x58025430
 800457c:	58025444 	.word	0x58025444
 8004580:	58025458 	.word	0x58025458
 8004584:	5802546c 	.word	0x5802546c
 8004588:	58025480 	.word	0x58025480
 800458c:	58025494 	.word	0x58025494
 8004590:	1600963f 	.word	0x1600963f
 8004594:	58025940 	.word	0x58025940
 8004598:	1000823f 	.word	0x1000823f
 800459c:	40020940 	.word	0x40020940

080045a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	@ 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045ae:	4b86      	ldr	r3, [pc, #536]	@ (80047c8 <HAL_GPIO_Init+0x228>)
 80045b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045b2:	e18c      	b.n	80048ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	4013      	ands	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 817e 	beq.w	80048c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d005      	beq.n	80045e4 <HAL_GPIO_Init+0x44>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d130      	bne.n	8004646 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	2203      	movs	r2, #3
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800461a:	2201      	movs	r2, #1
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 0201 	and.w	r2, r3, #1
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b03      	cmp	r3, #3
 8004650:	d017      	beq.n	8004682 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d123      	bne.n	80046d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	08da      	lsrs	r2, r3, #3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3208      	adds	r2, #8
 8004696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	220f      	movs	r2, #15
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	2203      	movs	r2, #3
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0203 	and.w	r2, r3, #3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80d8 	beq.w	80048c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004718:	4b2c      	ldr	r3, [pc, #176]	@ (80047cc <HAL_GPIO_Init+0x22c>)
 800471a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800471e:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <HAL_GPIO_Init+0x22c>)
 8004720:	f043 0302 	orr.w	r3, r3, #2
 8004724:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004728:	4b28      	ldr	r3, [pc, #160]	@ (80047cc <HAL_GPIO_Init+0x22c>)
 800472a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004736:	4a26      	ldr	r2, [pc, #152]	@ (80047d0 <HAL_GPIO_Init+0x230>)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	3302      	adds	r3, #2
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	220f      	movs	r2, #15
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1d      	ldr	r2, [pc, #116]	@ (80047d4 <HAL_GPIO_Init+0x234>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d04a      	beq.n	80047f8 <HAL_GPIO_Init+0x258>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <HAL_GPIO_Init+0x238>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02b      	beq.n	80047c2 <HAL_GPIO_Init+0x222>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1b      	ldr	r2, [pc, #108]	@ (80047dc <HAL_GPIO_Init+0x23c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d025      	beq.n	80047be <HAL_GPIO_Init+0x21e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1a      	ldr	r2, [pc, #104]	@ (80047e0 <HAL_GPIO_Init+0x240>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01f      	beq.n	80047ba <HAL_GPIO_Init+0x21a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a19      	ldr	r2, [pc, #100]	@ (80047e4 <HAL_GPIO_Init+0x244>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d019      	beq.n	80047b6 <HAL_GPIO_Init+0x216>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <HAL_GPIO_Init+0x248>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_GPIO_Init+0x212>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a17      	ldr	r2, [pc, #92]	@ (80047ec <HAL_GPIO_Init+0x24c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00d      	beq.n	80047ae <HAL_GPIO_Init+0x20e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a16      	ldr	r2, [pc, #88]	@ (80047f0 <HAL_GPIO_Init+0x250>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <HAL_GPIO_Init+0x20a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <HAL_GPIO_Init+0x254>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_GPIO_Init+0x206>
 80047a2:	2309      	movs	r3, #9
 80047a4:	e029      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047a6:	230a      	movs	r3, #10
 80047a8:	e027      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047aa:	2307      	movs	r3, #7
 80047ac:	e025      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047ae:	2306      	movs	r3, #6
 80047b0:	e023      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047b2:	2305      	movs	r3, #5
 80047b4:	e021      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047b6:	2304      	movs	r3, #4
 80047b8:	e01f      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047ba:	2303      	movs	r3, #3
 80047bc:	e01d      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e01b      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e019      	b.n	80047fa <HAL_GPIO_Init+0x25a>
 80047c6:	bf00      	nop
 80047c8:	58000080 	.word	0x58000080
 80047cc:	58024400 	.word	0x58024400
 80047d0:	58000400 	.word	0x58000400
 80047d4:	58020000 	.word	0x58020000
 80047d8:	58020400 	.word	0x58020400
 80047dc:	58020800 	.word	0x58020800
 80047e0:	58020c00 	.word	0x58020c00
 80047e4:	58021000 	.word	0x58021000
 80047e8:	58021400 	.word	0x58021400
 80047ec:	58021800 	.word	0x58021800
 80047f0:	58021c00 	.word	0x58021c00
 80047f4:	58022400 	.word	0x58022400
 80047f8:	2300      	movs	r3, #0
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	f002 0203 	and.w	r2, r2, #3
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	4093      	lsls	r3, r2
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800480a:	4938      	ldr	r1, [pc, #224]	@ (80048ec <HAL_GPIO_Init+0x34c>)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	3302      	adds	r3, #2
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800483e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800486c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f47f ae6b 	bne.w	80045b4 <HAL_GPIO_Init+0x14>
  }
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	3724      	adds	r7, #36	@ 0x24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	58000400 	.word	0x58000400

080048f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
 80048fc:	4613      	mov	r3, r2
 80048fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800490c:	e003      	b.n	8004916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	041a      	lsls	r2, r3, #16
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	619a      	str	r2, [r3, #24]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004934:	887a      	ldrh	r2, [r7, #2]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4013      	ands	r3, r2
 800493a:	041a      	lsls	r2, r3, #16
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	43d9      	mvns	r1, r3
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	400b      	ands	r3, r1
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	619a      	str	r2, [r3, #24]
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	4603      	mov	r3, r0
 800495e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004964:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fc fcd7 	bl	8001330 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d00a      	beq.n	80049b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80049a0:	4b16      	ldr	r3, [pc, #88]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d001      	beq.n	80049b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e01f      	b.n	80049f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e01d      	b.n	80049f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80049b6:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f023 0207 	bic.w	r2, r3, #7
 80049be:	490f      	ldr	r1, [pc, #60]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80049c6:	f7fd f959 	bl	8001c7c <HAL_GetTick>
 80049ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049cc:	e009      	b.n	80049e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80049ce:	f7fd f955 	bl	8001c7c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049dc:	d901      	bls.n	80049e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80049e2:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_PWREx_ConfigSupply+0x70>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ee:	d1ee      	bne.n	80049ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	58024800 	.word	0x58024800

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b08c      	sub	sp, #48	@ 0x30
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e3c8      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8087 	beq.w	8004b2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a20:	4b88      	ldr	r3, [pc, #544]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a2a:	4b86      	ldr	r3, [pc, #536]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d007      	beq.n	8004a46 <HAL_RCC_OscConfig+0x46>
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	2b18      	cmp	r3, #24
 8004a3a:	d110      	bne.n	8004a5e <HAL_RCC_OscConfig+0x5e>
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d10b      	bne.n	8004a5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a46:	4b7f      	ldr	r3, [pc, #508]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d06c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x12c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d168      	bne.n	8004b2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e3a2      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a66:	d106      	bne.n	8004a76 <HAL_RCC_OscConfig+0x76>
 8004a68:	4b76      	ldr	r3, [pc, #472]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a75      	ldr	r2, [pc, #468]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e02e      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCC_OscConfig+0x98>
 8004a7e:	4b71      	ldr	r3, [pc, #452]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a70      	ldr	r2, [pc, #448]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a6d      	ldr	r2, [pc, #436]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004a90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e01d      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0xbc>
 8004aa2:	4b68      	ldr	r3, [pc, #416]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a67      	ldr	r2, [pc, #412]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b65      	ldr	r3, [pc, #404]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a64      	ldr	r2, [pc, #400]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0xd4>
 8004abc:	4b61      	ldr	r3, [pc, #388]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a60      	ldr	r2, [pc, #384]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b5e      	ldr	r3, [pc, #376]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5d      	ldr	r2, [pc, #372]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd f8ce 	bl	8001c7c <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fd f8ca 	bl	8001c7c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	@ 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e356      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004af6:	4b53      	ldr	r3, [pc, #332]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xe4>
 8004b02:	e014      	b.n	8004b2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fd f8ba 	bl	8001c7c <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fd f8b6 	bl	8001c7c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	@ 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e342      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b1e:	4b49      	ldr	r3, [pc, #292]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x10c>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 808c 	beq.w	8004c54 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3c:	4b41      	ldr	r3, [pc, #260]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b46:	4b3f      	ldr	r3, [pc, #252]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <HAL_RCC_OscConfig+0x162>
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	2b18      	cmp	r3, #24
 8004b56:	d137      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1c8>
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d132      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_RCC_OscConfig+0x17a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e314      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b7a:	4b32      	ldr	r3, [pc, #200]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 0219 	bic.w	r2, r3, #25
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	492f      	ldr	r1, [pc, #188]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fd f876 	bl	8001c7c <HAL_GetTick>
 8004b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7fd f872 	bl	8001c7c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e2fe      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ba6:	4b27      	ldr	r3, [pc, #156]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	4920      	ldr	r1, [pc, #128]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc6:	e045      	b.n	8004c54 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d026      	beq.n	8004c1e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 0219 	bic.w	r2, r3, #25
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4919      	ldr	r1, [pc, #100]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be2:	f7fd f84b 	bl	8001c7c <HAL_GetTick>
 8004be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bea:	f7fd f847 	bl	8001c7c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e2d3      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bfc:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4b0e      	ldr	r3, [pc, #56]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	490b      	ldr	r1, [pc, #44]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	604b      	str	r3, [r1, #4]
 8004c1c:	e01a      	b.n	8004c54 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a08      	ldr	r2, [pc, #32]	@ (8004c44 <HAL_RCC_OscConfig+0x244>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fd f827 	bl	8001c7c <HAL_GetTick>
 8004c2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c32:	f7fd f823 	bl	8001c7c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d903      	bls.n	8004c48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e2af      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
 8004c44:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c48:	4b96      	ldr	r3, [pc, #600]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ee      	bne.n	8004c32 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d06a      	beq.n	8004d36 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c60:	4b90      	ldr	r3, [pc, #576]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c68:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d007      	beq.n	8004c86 <HAL_RCC_OscConfig+0x286>
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b18      	cmp	r3, #24
 8004c7a:	d11b      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2b4>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d116      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c86:	4b87      	ldr	r3, [pc, #540]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_RCC_OscConfig+0x29e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	2b80      	cmp	r3, #128	@ 0x80
 8004c98:	d001      	beq.n	8004c9e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e282      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c9e:	4b81      	ldr	r3, [pc, #516]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	497d      	ldr	r1, [pc, #500]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cb2:	e040      	b.n	8004d36 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cbc:	4b79      	ldr	r3, [pc, #484]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a78      	ldr	r2, [pc, #480]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc ffd8 	bl	8001c7c <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cd0:	f7fc ffd4 	bl	8001c7c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e260      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ce2:	4b70      	ldr	r3, [pc, #448]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	4969      	ldr	r1, [pc, #420]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60cb      	str	r3, [r1, #12]
 8004d02:	e018      	b.n	8004d36 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d04:	4b67      	ldr	r3, [pc, #412]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a66      	ldr	r2, [pc, #408]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc ffb4 	bl	8001c7c <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d18:	f7fc ffb0 	bl	8001c7c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e23c      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d036      	beq.n	8004db0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d4e:	4a55      	ldr	r2, [pc, #340]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fc ff91 	bl	8001c7c <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fc ff8d 	bl	8001c7c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e219      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d70:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x35e>
 8004d7c:	e018      	b.n	8004db0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7e:	4b49      	ldr	r3, [pc, #292]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d82:	4a48      	ldr	r2, [pc, #288]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8a:	f7fc ff77 	bl	8001c7c <HAL_GetTick>
 8004d8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d92:	f7fc ff73 	bl	8001c7c <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e1ff      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004da4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d036      	beq.n	8004e2a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d019      	beq.n	8004df8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dc4:	4b37      	ldr	r3, [pc, #220]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a36      	ldr	r2, [pc, #216]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004dca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd0:	f7fc ff54 	bl	8001c7c <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd8:	f7fc ff50 	bl	8001c7c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1dc      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004dea:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x3d8>
 8004df6:	e018      	b.n	8004e2a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004df8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e04:	f7fc ff3a 	bl	8001c7c <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0c:	f7fc ff36 	bl	8001c7c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1c2      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8086 	beq.w	8004f44 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <HAL_RCC_OscConfig+0x4a8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea8 <HAL_RCC_OscConfig+0x4a8>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e44:	f7fc ff1a 	bl	8001c7c <HAL_GetTick>
 8004e48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4c:	f7fc ff16 	bl	8001c7c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	@ 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e1a2      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e5e:	4b12      	ldr	r3, [pc, #72]	@ (8004ea8 <HAL_RCC_OscConfig+0x4a8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d106      	bne.n	8004e80 <HAL_RCC_OscConfig+0x480>
 8004e72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e76:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7e:	e032      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d111      	bne.n	8004eac <HAL_RCC_OscConfig+0x4ac>
 8004e88:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8c:	4a05      	ldr	r2, [pc, #20]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e94:	4b03      	ldr	r3, [pc, #12]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a02      	ldr	r2, [pc, #8]	@ (8004ea4 <HAL_RCC_OscConfig+0x4a4>)
 8004e9a:	f023 0304 	bic.w	r3, r3, #4
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	e021      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	58024800 	.word	0x58024800
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b05      	cmp	r3, #5
 8004eb2:	d10c      	bne.n	8004ece <HAL_RCC_OscConfig+0x4ce>
 8004eb4:	4b83      	ldr	r3, [pc, #524]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb8:	4a82      	ldr	r2, [pc, #520]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004eba:	f043 0304 	orr.w	r3, r3, #4
 8004ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec0:	4b80      	ldr	r3, [pc, #512]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec4:	4a7f      	ldr	r2, [pc, #508]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ecc:	e00b      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
 8004ece:	4b7d      	ldr	r3, [pc, #500]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	4a7c      	ldr	r2, [pc, #496]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eda:	4b7a      	ldr	r3, [pc, #488]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ede:	4a79      	ldr	r2, [pc, #484]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004ee0:	f023 0304 	bic.w	r3, r3, #4
 8004ee4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d015      	beq.n	8004f1a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fc fec5 	bl	8001c7c <HAL_GetTick>
 8004ef2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef6:	f7fc fec1 	bl	8001c7c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e14b      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ee      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x4f6>
 8004f18:	e014      	b.n	8004f44 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fc feaf 	bl	8001c7c <HAL_GetTick>
 8004f1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fc feab 	bl	8001c7c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e135      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f38:	4b62      	ldr	r3, [pc, #392]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ee      	bne.n	8004f22 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 812a 	beq.w	80051a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	f000 80ba 	beq.w	80050d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f040 8095 	bne.w	8005090 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b57      	ldr	r3, [pc, #348]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a56      	ldr	r2, [pc, #344]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fc fe83 	bl	8001c7c <HAL_GetTick>
 8004f76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fc fe7f 	bl	8001c7c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e10b      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f0      	bne.n	8004f7a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f98:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004f9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80050c8 <HAL_RCC_OscConfig+0x6c8>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fa8:	0112      	lsls	r2, r2, #4
 8004faa:	430a      	orrs	r2, r1
 8004fac:	4945      	ldr	r1, [pc, #276]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	041b      	lsls	r3, r3, #16
 8004fd0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	061b      	lsls	r3, r3, #24
 8004fde:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fe2:	4938      	ldr	r1, [pc, #224]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fe8:	4b36      	ldr	r3, [pc, #216]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	4a35      	ldr	r2, [pc, #212]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ff4:	4b33      	ldr	r3, [pc, #204]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff8:	4b34      	ldr	r3, [pc, #208]	@ (80050cc <HAL_RCC_OscConfig+0x6cc>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005000:	00d2      	lsls	r2, r2, #3
 8005002:	4930      	ldr	r1, [pc, #192]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005004:	4313      	orrs	r3, r2
 8005006:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005008:	4b2e      	ldr	r3, [pc, #184]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	f023 020c 	bic.w	r2, r3, #12
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	492b      	ldr	r1, [pc, #172]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005016:	4313      	orrs	r3, r2
 8005018:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800501a:	4b2a      	ldr	r3, [pc, #168]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	f023 0202 	bic.w	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	4927      	ldr	r1, [pc, #156]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005028:	4313      	orrs	r3, r2
 800502a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800502c:	4b25      	ldr	r3, [pc, #148]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	4a24      	ldr	r2, [pc, #144]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005038:	4b22      	ldr	r3, [pc, #136]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4a21      	ldr	r2, [pc, #132]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800503e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005042:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005044:	4b1f      	ldr	r3, [pc, #124]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	4a1e      	ldr	r2, [pc, #120]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800504a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800504e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005050:	4b1c      	ldr	r3, [pc, #112]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505c:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc fe08 	bl	8001c7c <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc fe04 	bl	8001c7c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e090      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005082:	4b10      	ldr	r3, [pc, #64]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x670>
 800508e:	e088      	b.n	80051a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005090:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a0b      	ldr	r2, [pc, #44]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 8005096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800509a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fc fdee 	bl	8001c7c <HAL_GetTick>
 80050a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a4:	f7fc fdea 	bl	8001c7c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e076      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b6:	4b03      	ldr	r3, [pc, #12]	@ (80050c4 <HAL_RCC_OscConfig+0x6c4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0x6a4>
 80050c2:	e06e      	b.n	80051a2 <HAL_RCC_OscConfig+0x7a2>
 80050c4:	58024400 	.word	0x58024400
 80050c8:	fffffc0c 	.word	0xfffffc0c
 80050cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050d0:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050d6:	4b35      	ldr	r3, [pc, #212]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d031      	beq.n	8005148 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0203 	and.w	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d12a      	bne.n	8005148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d122      	bne.n	8005148 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800510e:	429a      	cmp	r2, r3
 8005110:	d11a      	bne.n	8005148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	0a5b      	lsrs	r3, r3, #9
 8005116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d111      	bne.n	8005148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	0c1b      	lsrs	r3, r3, #16
 8005128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d108      	bne.n	8005148 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	0e1b      	lsrs	r3, r3, #24
 800513a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005142:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e02b      	b.n	80051a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800514c:	4b17      	ldr	r3, [pc, #92]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 800514e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005156:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d01f      	beq.n	80051a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005162:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4a11      	ldr	r2, [pc, #68]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800516e:	f7fc fd85 	bl	8001c7c <HAL_GetTick>
 8005172:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005174:	bf00      	nop
 8005176:	f7fc fd81 	bl	8001c7c <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	4293      	cmp	r3, r2
 8005180:	d0f9      	beq.n	8005176 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005182:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 8005184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005186:	4b0a      	ldr	r3, [pc, #40]	@ (80051b0 <HAL_RCC_OscConfig+0x7b0>)
 8005188:	4013      	ands	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800518e:	00d2      	lsls	r2, r2, #3
 8005190:	4906      	ldr	r1, [pc, #24]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 8005192:	4313      	orrs	r3, r2
 8005194:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005196:	4b05      	ldr	r3, [pc, #20]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	4a04      	ldr	r2, [pc, #16]	@ (80051ac <HAL_RCC_OscConfig+0x7ac>)
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3730      	adds	r7, #48	@ 0x30
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	58024400 	.word	0x58024400
 80051b0:	ffff0007 	.word	0xffff0007

080051b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e19c      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c8:	4b8a      	ldr	r3, [pc, #552]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d910      	bls.n	80051f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d6:	4b87      	ldr	r3, [pc, #540]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f023 020f 	bic.w	r2, r3, #15
 80051de:	4985      	ldr	r1, [pc, #532]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e6:	4b83      	ldr	r3, [pc, #524]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d001      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e184      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	4b7b      	ldr	r3, [pc, #492]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005210:	429a      	cmp	r2, r3
 8005212:	d908      	bls.n	8005226 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005214:	4b78      	ldr	r3, [pc, #480]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	4975      	ldr	r1, [pc, #468]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005222:	4313      	orrs	r3, r2
 8005224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	4b70      	ldr	r3, [pc, #448]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800523e:	429a      	cmp	r2, r3
 8005240:	d908      	bls.n	8005254 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005242:	4b6d      	ldr	r3, [pc, #436]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	496a      	ldr	r1, [pc, #424]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005250:	4313      	orrs	r3, r2
 8005252:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	4b64      	ldr	r3, [pc, #400]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800526c:	429a      	cmp	r2, r3
 800526e:	d908      	bls.n	8005282 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005270:	4b61      	ldr	r3, [pc, #388]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	495e      	ldr	r1, [pc, #376]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 800527e:	4313      	orrs	r3, r2
 8005280:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d010      	beq.n	80052b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	4b59      	ldr	r3, [pc, #356]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529a:	429a      	cmp	r2, r3
 800529c:	d908      	bls.n	80052b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800529e:	4b56      	ldr	r3, [pc, #344]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4953      	ldr	r1, [pc, #332]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d010      	beq.n	80052de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	4b4d      	ldr	r3, [pc, #308]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	f003 030f 	and.w	r3, r3, #15
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d908      	bls.n	80052de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052cc:	4b4a      	ldr	r3, [pc, #296]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f023 020f 	bic.w	r2, r3, #15
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4947      	ldr	r1, [pc, #284]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d055      	beq.n	8005396 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052ea:	4b43      	ldr	r3, [pc, #268]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	4940      	ldr	r1, [pc, #256]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b02      	cmp	r3, #2
 8005302:	d107      	bne.n	8005314 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005304:	4b3c      	ldr	r3, [pc, #240]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d121      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0f6      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b03      	cmp	r3, #3
 800531a:	d107      	bne.n	800532c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800531c:	4b36      	ldr	r3, [pc, #216]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d115      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0ea      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d107      	bne.n	8005344 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005334:	4b30      	ldr	r3, [pc, #192]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0de      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005344:	4b2c      	ldr	r3, [pc, #176]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0d6      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005354:	4b28      	ldr	r3, [pc, #160]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f023 0207 	bic.w	r2, r3, #7
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4925      	ldr	r1, [pc, #148]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005362:	4313      	orrs	r3, r2
 8005364:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005366:	f7fc fc89 	bl	8001c7c <HAL_GetTick>
 800536a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536c:	e00a      	b.n	8005384 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536e:	f7fc fc85 	bl	8001c7c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0be      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005384:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	429a      	cmp	r2, r3
 8005394:	d1eb      	bne.n	800536e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d010      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	4b14      	ldr	r3, [pc, #80]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d208      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b2:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f023 020f 	bic.w	r2, r3, #15
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	490e      	ldr	r1, [pc, #56]	@ (80053f8 <HAL_RCC_ClockConfig+0x244>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b0b      	ldr	r3, [pc, #44]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d214      	bcs.n	80053fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b08      	ldr	r3, [pc, #32]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 020f 	bic.w	r2, r3, #15
 80053da:	4906      	ldr	r1, [pc, #24]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e2:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <HAL_RCC_ClockConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e086      	b.n	8005502 <HAL_RCC_ClockConfig+0x34e>
 80053f4:	52002000 	.word	0x52002000
 80053f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	4b3f      	ldr	r3, [pc, #252]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005414:	429a      	cmp	r2, r3
 8005416:	d208      	bcs.n	800542a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005418:	4b3c      	ldr	r3, [pc, #240]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	4939      	ldr	r1, [pc, #228]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 8005426:	4313      	orrs	r3, r2
 8005428:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	4b34      	ldr	r3, [pc, #208]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005442:	429a      	cmp	r2, r3
 8005444:	d208      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005446:	4b31      	ldr	r3, [pc, #196]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	492e      	ldr	r1, [pc, #184]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 8005454:	4313      	orrs	r3, r2
 8005456:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	4b28      	ldr	r3, [pc, #160]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005470:	429a      	cmp	r2, r3
 8005472:	d208      	bcs.n	8005486 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005474:	4b25      	ldr	r3, [pc, #148]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	4922      	ldr	r1, [pc, #136]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 8005482:	4313      	orrs	r3, r2
 8005484:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d010      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69da      	ldr	r2, [r3, #28]
 8005496:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800549e:	429a      	cmp	r2, r3
 80054a0:	d208      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054a2:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	4917      	ldr	r1, [pc, #92]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054b4:	f000 f834 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 80054b8:	4602      	mov	r2, r0
 80054ba:	4b14      	ldr	r3, [pc, #80]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	4912      	ldr	r1, [pc, #72]	@ (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054c6:	5ccb      	ldrb	r3, [r1, r3]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
 80054d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054d2:	4b0e      	ldr	r3, [pc, #56]	@ (800550c <HAL_RCC_ClockConfig+0x358>)
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <HAL_RCC_ClockConfig+0x35c>)
 80054dc:	5cd3      	ldrb	r3, [r2, r3]
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005514 <HAL_RCC_ClockConfig+0x360>)
 80054ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005518 <HAL_RCC_ClockConfig+0x364>)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <HAL_RCC_ClockConfig+0x368>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc fb76 	bl	8001be8 <HAL_InitTick>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	58024400 	.word	0x58024400
 8005510:	0800a310 	.word	0x0800a310
 8005514:	24000008 	.word	0x24000008
 8005518:	24000004 	.word	0x24000004
 800551c:	2400000c 	.word	0x2400000c

08005520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	@ 0x24
 8005524:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005526:	4bb3      	ldr	r3, [pc, #716]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800552e:	2b18      	cmp	r3, #24
 8005530:	f200 8155 	bhi.w	80057de <HAL_RCC_GetSysClockFreq+0x2be>
 8005534:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	080055a1 	.word	0x080055a1
 8005540:	080057df 	.word	0x080057df
 8005544:	080057df 	.word	0x080057df
 8005548:	080057df 	.word	0x080057df
 800554c:	080057df 	.word	0x080057df
 8005550:	080057df 	.word	0x080057df
 8005554:	080057df 	.word	0x080057df
 8005558:	080057df 	.word	0x080057df
 800555c:	080055c7 	.word	0x080055c7
 8005560:	080057df 	.word	0x080057df
 8005564:	080057df 	.word	0x080057df
 8005568:	080057df 	.word	0x080057df
 800556c:	080057df 	.word	0x080057df
 8005570:	080057df 	.word	0x080057df
 8005574:	080057df 	.word	0x080057df
 8005578:	080057df 	.word	0x080057df
 800557c:	080055cd 	.word	0x080055cd
 8005580:	080057df 	.word	0x080057df
 8005584:	080057df 	.word	0x080057df
 8005588:	080057df 	.word	0x080057df
 800558c:	080057df 	.word	0x080057df
 8005590:	080057df 	.word	0x080057df
 8005594:	080057df 	.word	0x080057df
 8005598:	080057df 	.word	0x080057df
 800559c:	080055d3 	.word	0x080055d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a0:	4b94      	ldr	r3, [pc, #592]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ac:	4b91      	ldr	r3, [pc, #580]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	08db      	lsrs	r3, r3, #3
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	4a90      	ldr	r2, [pc, #576]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055b8:	fa22 f303 	lsr.w	r3, r2, r3
 80055bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80055be:	e111      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055c0:	4b8d      	ldr	r3, [pc, #564]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055c2:	61bb      	str	r3, [r7, #24]
      break;
 80055c4:	e10e      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80055c6:	4b8d      	ldr	r3, [pc, #564]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055c8:	61bb      	str	r3, [r7, #24]
      break;
 80055ca:	e10b      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80055cc:	4b8c      	ldr	r3, [pc, #560]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80055ce:	61bb      	str	r3, [r7, #24]
      break;
 80055d0:	e108      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055d2:	4b88      	ldr	r3, [pc, #544]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80055dc:	4b85      	ldr	r3, [pc, #532]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055e8:	4b82      	ldr	r3, [pc, #520]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055f2:	4b80      	ldr	r3, [pc, #512]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80e1 	beq.w	80057d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b02      	cmp	r3, #2
 800561a:	f000 8083 	beq.w	8005724 <HAL_RCC_GetSysClockFreq+0x204>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b02      	cmp	r3, #2
 8005622:	f200 80a1 	bhi.w	8005768 <HAL_RCC_GetSysClockFreq+0x248>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x114>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d056      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005632:	e099      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005634:	4b6f      	ldr	r3, [pc, #444]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02d      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005640:	4b6c      	ldr	r3, [pc, #432]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	08db      	lsrs	r3, r3, #3
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	4a6b      	ldr	r2, [pc, #428]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
 8005650:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566a:	4b62      	ldr	r3, [pc, #392]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567a:	ed97 6a02 	vldr	s12, [r7, #8]
 800567e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800568e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005696:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800569a:	e087      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005808 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ae:	4b51      	ldr	r3, [pc, #324]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056be:	ed97 6a02 	vldr	s12, [r7, #8]
 80056c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005804 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056de:	e065      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	ee07 3a90 	vmov	s15, r3
 80056e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2ec>
 80056ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056f2:	4b40      	ldr	r3, [pc, #256]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee07 3a90 	vmov	s15, r3
 80056fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005702:	ed97 6a02 	vldr	s12, [r7, #8]
 8005706:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800570a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800571a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005722:	e043      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	ee07 3a90 	vmov	s15, r3
 800572a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005810 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005736:	4b2f      	ldr	r3, [pc, #188]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005746:	ed97 6a02 	vldr	s12, [r7, #8]
 800574a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005804 <HAL_RCC_GetSysClockFreq+0x2e4>
 800574e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800575a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005766:	e021      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	ee07 3a90 	vmov	s15, r3
 800576e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005772:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800577a:	4b1e      	ldr	r3, [pc, #120]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578a:	ed97 6a02 	vldr	s12, [r7, #8]
 800578e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005804 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800579e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057ac:	4b11      	ldr	r3, [pc, #68]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	0a5b      	lsrs	r3, r3, #9
 80057b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b6:	3301      	adds	r3, #1
 80057b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	ee07 3a90 	vmov	s15, r3
 80057c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d0:	ee17 3a90 	vmov	r3, s15
 80057d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80057d6:	e005      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
      break;
 80057dc:	e002      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80057de:	4b07      	ldr	r3, [pc, #28]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057e0:	61bb      	str	r3, [r7, #24]
      break;
 80057e2:	bf00      	nop
  }

  return sysclockfreq;
 80057e4:	69bb      	ldr	r3, [r7, #24]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3724      	adds	r7, #36	@ 0x24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
 80057f8:	03d09000 	.word	0x03d09000
 80057fc:	003d0900 	.word	0x003d0900
 8005800:	017d7840 	.word	0x017d7840
 8005804:	46000000 	.word	0x46000000
 8005808:	4c742400 	.word	0x4c742400
 800580c:	4a742400 	.word	0x4a742400
 8005810:	4bbebc20 	.word	0x4bbebc20

08005814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800581a:	f7ff fe81 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 800581e:	4602      	mov	r2, r0
 8005820:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <HAL_RCC_GetHCLKFreq+0x50>)
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	490f      	ldr	r1, [pc, #60]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x54>)
 800582c:	5ccb      	ldrb	r3, [r1, r3]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005838:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <HAL_RCC_GetHCLKFreq+0x50>)
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4a09      	ldr	r2, [pc, #36]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x54>)
 8005842:	5cd3      	ldrb	r3, [r2, r3]
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	4a07      	ldr	r2, [pc, #28]	@ (800586c <HAL_RCC_GetHCLKFreq+0x58>)
 8005850:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005852:	4a07      	ldr	r2, [pc, #28]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005858:	4b04      	ldr	r3, [pc, #16]	@ (800586c <HAL_RCC_GetHCLKFreq+0x58>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	58024400 	.word	0x58024400
 8005868:	0800a310 	.word	0x0800a310
 800586c:	24000008 	.word	0x24000008
 8005870:	24000004 	.word	0x24000004

08005874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005878:	f7ff ffcc 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 800587c:	4602      	mov	r2, r0
 800587e:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	4904      	ldr	r1, [pc, #16]	@ (800589c <HAL_RCC_GetPCLK1Freq+0x28>)
 800588a:	5ccb      	ldrb	r3, [r1, r3]
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005894:	4618      	mov	r0, r3
 8005896:	bd80      	pop	{r7, pc}
 8005898:	58024400 	.word	0x58024400
 800589c:	0800a310 	.word	0x0800a310

080058a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058a4:	f7ff ffb6 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 0307 	and.w	r3, r3, #7
 80058b4:	4904      	ldr	r1, [pc, #16]	@ (80058c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058b6:	5ccb      	ldrb	r3, [r1, r3]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	58024400 	.word	0x58024400
 80058c8:	0800a310 	.word	0x0800a310

080058cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b0c6      	sub	sp, #280	@ 0x118
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058d8:	2300      	movs	r3, #0
 80058da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058de:	2300      	movs	r3, #0
 80058e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058f0:	2500      	movs	r5, #0
 80058f2:	ea54 0305 	orrs.w	r3, r4, r5
 80058f6:	d049      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005902:	d02f      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005904:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005908:	d828      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800590a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800590e:	d01a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005910:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005914:	d822      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800591a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800591e:	d007      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005920:	e01c      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005922:	4bab      	ldr	r3, [pc, #684]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	4aaa      	ldr	r2, [pc, #680]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800592e:	e01a      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	3308      	adds	r3, #8
 8005936:	2102      	movs	r1, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fc25 	bl	8007188 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005944:	e00f      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594a:	3328      	adds	r3, #40	@ 0x28
 800594c:	2102      	movs	r1, #2
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fccc 	bl	80072ec <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800596e:	4b98      	ldr	r3, [pc, #608]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005972:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800597c:	4a94      	ldr	r2, [pc, #592]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800597e:	430b      	orrs	r3, r1
 8005980:	6513      	str	r3, [r2, #80]	@ 0x50
 8005982:	e003      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005998:	f04f 0900 	mov.w	r9, #0
 800599c:	ea58 0309 	orrs.w	r3, r8, r9
 80059a0:	d047      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d82a      	bhi.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059ac:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059c9 	.word	0x080059c9
 80059b8:	080059d7 	.word	0x080059d7
 80059bc:	080059ed 	.word	0x080059ed
 80059c0:	08005a0b 	.word	0x08005a0b
 80059c4:	08005a0b 	.word	0x08005a0b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c8:	4b81      	ldr	r3, [pc, #516]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	4a80      	ldr	r2, [pc, #512]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d4:	e01a      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059da:	3308      	adds	r3, #8
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f001 fbd2 	bl	8007188 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ea:	e00f      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f0:	3328      	adds	r3, #40	@ 0x28
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 fc79 	bl	80072ec <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a00:	e004      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a08:	e000      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a14:	4b6e      	ldr	r3, [pc, #440]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a18:	f023 0107 	bic.w	r1, r3, #7
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a22:	4a6b      	ldr	r2, [pc, #428]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a24:	430b      	orrs	r3, r1
 8005a26:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a28:	e003      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005a3e:	f04f 0b00 	mov.w	fp, #0
 8005a42:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a46:	d05b      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a50:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a54:	d03b      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a56:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a5a:	d834      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a60:	d037      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a66:	d82e      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a6c:	d033      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005a6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a72:	d828      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a78:	d01a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a7e:	d822      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a88:	d007      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005a8a:	e01c      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b50      	ldr	r3, [pc, #320]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a90:	4a4f      	ldr	r2, [pc, #316]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a98:	e01e      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fb70 	bl	8007188 <RCCEx_PLL2_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005aae:	e013      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	3328      	adds	r3, #40	@ 0x28
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fc17 	bl	80072ec <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e008      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005acc:	e004      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005af0:	4a37      	ldr	r2, [pc, #220]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af2:	430b      	orrs	r3, r1
 8005af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005af6:	e003      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005afc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b16:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d05d      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b28:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b2c:	d03b      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b2e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b32:	d834      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b38:	d037      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b3e:	d82e      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b44:	d033      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005b46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b4a:	d828      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b50:	d01a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b56:	d822      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b60:	d007      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b62:	e01c      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b64:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b68:	4a19      	ldr	r2, [pc, #100]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b70:	e01e      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	3308      	adds	r3, #8
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fb04 	bl	8007188 <RCCEx_PLL2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b86:	e013      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8c:	3328      	adds	r3, #40	@ 0x28
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fbab 	bl	80072ec <RCCEx_PLL3_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ba4:	e004      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005bb8:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bc8:	4a01      	ldr	r2, [pc, #4]	@ (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bce:	e005      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005be8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d03a      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c02:	2b30      	cmp	r3, #48	@ 0x30
 8005c04:	d01f      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005c06:	2b30      	cmp	r3, #48	@ 0x30
 8005c08:	d819      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d00c      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d815      	bhi.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d019      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c16:	2b10      	cmp	r3, #16
 8005c18:	d111      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1a:	4baa      	ldr	r3, [pc, #680]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	4aa9      	ldr	r2, [pc, #676]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c26:	e011      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	2102      	movs	r1, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f001 faa9 	bl	8007188 <RCCEx_PLL2_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c54:	4b9b      	ldr	r3, [pc, #620]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c62:	4a98      	ldr	r2, [pc, #608]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c64:	430b      	orrs	r3, r1
 8005c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c68:	e003      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c82:	2300      	movs	r3, #0
 8005c84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	d051      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c9c:	d035      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005c9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ca2:	d82e      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ca4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ca8:	d031      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005caa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cae:	d828      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cb4:	d01a      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cba:	d822      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc4:	d007      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005cc6:	e01c      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	4a7d      	ldr	r2, [pc, #500]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e01c      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	3308      	adds	r3, #8
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fa52 	bl	8007188 <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cea:	e011      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	3328      	adds	r3, #40	@ 0x28
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 faf9 	bl	80072ec <RCCEx_PLL3_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d00:	e006      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d08:	e002      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d18:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d26:	4a67      	ldr	r2, [pc, #412]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d2c:	e003      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005d42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d46:	2300      	movs	r3, #0
 8005d48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d4c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d053      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d60:	d033      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005d62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d66:	d82c      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d6c:	d02f      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d72:	d826      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d78:	d02b      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005d7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005d7e:	d820      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d84:	d012      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005d86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d8a:	d81a      	bhi.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d022      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d94:	d115      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f9f2 	bl	8007188 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005daa:	e015      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	3328      	adds	r3, #40	@ 0x28
 8005db2:	2101      	movs	r1, #1
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fa99 	bl	80072ec <RCCEx_PLL3_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005dc0:	e00a      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dc8:	e006      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dca:	bf00      	nop
 8005dcc:	e004      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dce:	bf00      	nop
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005de0:	4b38      	ldr	r3, [pc, #224]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dee:	4a35      	ldr	r2, [pc, #212]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df4:	e003      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e14:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d058      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e2a:	d033      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e30:	d82c      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e36:	d02f      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3c:	d826      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e42:	d02b      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005e44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e48:	d820      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e4e:	d012      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e54:	d81a      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d022      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e5e:	d115      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e64:	3308      	adds	r3, #8
 8005e66:	2101      	movs	r1, #1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 f98d 	bl	8007188 <RCCEx_PLL2_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e74:	e015      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e7a:	3328      	adds	r3, #40	@ 0x28
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 fa34 	bl	80072ec <RCCEx_PLL3_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e92:	e006      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e94:	bf00      	nop
 8005e96:	e004      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e98:	bf00      	nop
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10e      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005eba:	4a02      	ldr	r2, [pc, #8]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ec0:	e006      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005ec2:	bf00      	nop
 8005ec4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ee6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	d037      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efa:	d00e      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f00:	d816      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005f06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f0a:	d111      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0c:	4bc4      	ldr	r3, [pc, #784]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f10:	4ac3      	ldr	r2, [pc, #780]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f18:	e00f      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1e:	3308      	adds	r3, #8
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 f930 	bl	8007188 <RCCEx_PLL2_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f2e:	e004      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f42:	4bb7      	ldr	r3, [pc, #732]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f50:	4ab3      	ldr	r2, [pc, #716]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f52:	430b      	orrs	r3, r1
 8005f54:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f56:	e003      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d039      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d81c      	bhi.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fcd 	.word	0x08005fcd
 8005f94:	08005fa1 	.word	0x08005fa1
 8005f98:	08005faf 	.word	0x08005faf
 8005f9c:	08005fcd 	.word	0x08005fcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa0:	4b9f      	ldr	r3, [pc, #636]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa4:	4a9e      	ldr	r2, [pc, #632]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fac:	e00f      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 f8e6 	bl	8007188 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005fc2:	e004      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fca:	e000      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005fd6:	4b92      	ldr	r3, [pc, #584]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fda:	f023 0103 	bic.w	r1, r3, #3
 8005fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe4:	4a8e      	ldr	r2, [pc, #568]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800600a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	f000 8099 	beq.w	8006148 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006016:	4b83      	ldr	r3, [pc, #524]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a82      	ldr	r2, [pc, #520]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800601c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006022:	f7fb fe2b 	bl	8001c7c <HAL_GetTick>
 8006026:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800602a:	e00b      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602c:	f7fb fe26 	bl	8001c7c <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b64      	cmp	r3, #100	@ 0x64
 800603a:	d903      	bls.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006042:	e005      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006044:	4b77      	ldr	r3, [pc, #476]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ed      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006054:	2b00      	cmp	r3, #0
 8006056:	d173      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006058:	4b71      	ldr	r3, [pc, #452]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800605a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800605c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006064:	4053      	eors	r3, r2
 8006066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800606a:	2b00      	cmp	r3, #0
 800606c:	d015      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800606e:	4b6c      	ldr	r3, [pc, #432]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006076:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800607a:	4b69      	ldr	r3, [pc, #420]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	4a68      	ldr	r2, [pc, #416]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006084:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006086:	4b66      	ldr	r3, [pc, #408]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608a:	4a65      	ldr	r2, [pc, #404]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800608c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006090:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006092:	4a63      	ldr	r2, [pc, #396]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006098:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060a6:	d118      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fb fde8 	bl	8001c7c <HAL_GetTick>
 80060ac:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060b0:	e00d      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7fb fde3 	bl	8001c7c <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80060bc:	1ad2      	subs	r2, r2, r3
 80060be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d903      	bls.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80060cc:	e005      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ce:	4b54      	ldr	r3, [pc, #336]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0eb      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80060da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d129      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060f2:	d10e      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80060f4:	4b4a      	ldr	r3, [pc, #296]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006104:	091a      	lsrs	r2, r3, #4
 8006106:	4b48      	ldr	r3, [pc, #288]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006108:	4013      	ands	r3, r2
 800610a:	4a45      	ldr	r2, [pc, #276]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610c:	430b      	orrs	r3, r1
 800610e:	6113      	str	r3, [r2, #16]
 8006110:	e005      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006112:	4b43      	ldr	r3, [pc, #268]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	4a42      	ldr	r2, [pc, #264]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006118:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800611c:	6113      	str	r3, [r2, #16]
 800611e:	4b40      	ldr	r3, [pc, #256]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006120:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800612a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612e:	4a3c      	ldr	r2, [pc, #240]	@ (8006220 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006130:	430b      	orrs	r3, r1
 8006132:	6713      	str	r3, [r2, #112]	@ 0x70
 8006134:	e008      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800613e:	e003      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006144:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	f002 0301 	and.w	r3, r2, #1
 8006154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006158:	2300      	movs	r3, #0
 800615a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800615e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006162:	460b      	mov	r3, r1
 8006164:	4313      	orrs	r3, r2
 8006166:	f000 808f 	beq.w	8006288 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006170:	2b28      	cmp	r3, #40	@ 0x28
 8006172:	d871      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006174:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	08006261 	.word	0x08006261
 8006180:	08006259 	.word	0x08006259
 8006184:	08006259 	.word	0x08006259
 8006188:	08006259 	.word	0x08006259
 800618c:	08006259 	.word	0x08006259
 8006190:	08006259 	.word	0x08006259
 8006194:	08006259 	.word	0x08006259
 8006198:	08006259 	.word	0x08006259
 800619c:	0800622d 	.word	0x0800622d
 80061a0:	08006259 	.word	0x08006259
 80061a4:	08006259 	.word	0x08006259
 80061a8:	08006259 	.word	0x08006259
 80061ac:	08006259 	.word	0x08006259
 80061b0:	08006259 	.word	0x08006259
 80061b4:	08006259 	.word	0x08006259
 80061b8:	08006259 	.word	0x08006259
 80061bc:	08006243 	.word	0x08006243
 80061c0:	08006259 	.word	0x08006259
 80061c4:	08006259 	.word	0x08006259
 80061c8:	08006259 	.word	0x08006259
 80061cc:	08006259 	.word	0x08006259
 80061d0:	08006259 	.word	0x08006259
 80061d4:	08006259 	.word	0x08006259
 80061d8:	08006259 	.word	0x08006259
 80061dc:	08006261 	.word	0x08006261
 80061e0:	08006259 	.word	0x08006259
 80061e4:	08006259 	.word	0x08006259
 80061e8:	08006259 	.word	0x08006259
 80061ec:	08006259 	.word	0x08006259
 80061f0:	08006259 	.word	0x08006259
 80061f4:	08006259 	.word	0x08006259
 80061f8:	08006259 	.word	0x08006259
 80061fc:	08006261 	.word	0x08006261
 8006200:	08006259 	.word	0x08006259
 8006204:	08006259 	.word	0x08006259
 8006208:	08006259 	.word	0x08006259
 800620c:	08006259 	.word	0x08006259
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	08006261 	.word	0x08006261
 8006220:	58024400 	.word	0x58024400
 8006224:	58024800 	.word	0x58024800
 8006228:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	3308      	adds	r3, #8
 8006232:	2101      	movs	r1, #1
 8006234:	4618      	mov	r0, r3
 8006236:	f000 ffa7 	bl	8007188 <RCCEx_PLL2_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006240:	e00f      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	3328      	adds	r3, #40	@ 0x28
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f001 f84e 	bl	80072ec <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006256:	e004      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800626a:	4bbf      	ldr	r3, [pc, #764]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006278:	4abb      	ldr	r2, [pc, #748]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800627a:	430b      	orrs	r3, r1
 800627c:	6553      	str	r3, [r2, #84]	@ 0x54
 800627e:	e003      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f002 0302 	and.w	r3, r2, #2
 8006294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800629e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	d041      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80062a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d824      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80062b2:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	08006305 	.word	0x08006305
 80062bc:	080062d1 	.word	0x080062d1
 80062c0:	080062e7 	.word	0x080062e7
 80062c4:	08006305 	.word	0x08006305
 80062c8:	08006305 	.word	0x08006305
 80062cc:	08006305 	.word	0x08006305
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	3308      	adds	r3, #8
 80062d6:	2101      	movs	r1, #1
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 ff55 	bl	8007188 <RCCEx_PLL2_Config>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062e4:	e00f      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ea:	3328      	adds	r3, #40	@ 0x28
 80062ec:	2101      	movs	r1, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fffc 	bl	80072ec <RCCEx_PLL3_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062fa:	e004      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006302:	e000      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006306:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800630e:	4b96      	ldr	r3, [pc, #600]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006312:	f023 0107 	bic.w	r1, r3, #7
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800631c:	4a92      	ldr	r2, [pc, #584]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6553      	str	r3, [r2, #84]	@ 0x54
 8006322:	e003      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	f002 0304 	and.w	r3, r2, #4
 8006338:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006342:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006346:	460b      	mov	r3, r1
 8006348:	4313      	orrs	r3, r2
 800634a:	d044      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006354:	2b05      	cmp	r3, #5
 8006356:	d825      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	080063ad 	.word	0x080063ad
 8006364:	08006379 	.word	0x08006379
 8006368:	0800638f 	.word	0x0800638f
 800636c:	080063ad 	.word	0x080063ad
 8006370:	080063ad 	.word	0x080063ad
 8006374:	080063ad 	.word	0x080063ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	3308      	adds	r3, #8
 800637e:	2101      	movs	r1, #1
 8006380:	4618      	mov	r0, r3
 8006382:	f000 ff01 	bl	8007188 <RCCEx_PLL2_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800638c:	e00f      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	3328      	adds	r3, #40	@ 0x28
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f000 ffa8 	bl	80072ec <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063a2:	e004      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063aa:	e000      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80063ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063b6:	4b6c      	ldr	r3, [pc, #432]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	f023 0107 	bic.w	r1, r3, #7
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c6:	4a68      	ldr	r2, [pc, #416]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80063cc:	e003      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f002 0320 	and.w	r3, r2, #32
 80063e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4313      	orrs	r3, r2
 80063f4:	d055      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006402:	d033      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006408:	d82c      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640e:	d02f      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006414:	d826      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006416:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800641a:	d02b      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800641c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006420:	d820      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006426:	d012      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800642c:	d81a      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d022      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006436:	d115      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643c:	3308      	adds	r3, #8
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fea1 	bl	8007188 <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800644c:	e015      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006452:	3328      	adds	r3, #40	@ 0x28
 8006454:	2102      	movs	r1, #2
 8006456:	4618      	mov	r0, r3
 8006458:	f000 ff48 	bl	80072ec <RCCEx_PLL3_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006462:	e00a      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800646a:	e006      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800646c:	bf00      	nop
 800646e:	e004      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006470:	bf00      	nop
 8006472:	e002      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006474:	bf00      	nop
 8006476:	e000      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800647a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006482:	4b39      	ldr	r3, [pc, #228]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006492:	4a35      	ldr	r2, [pc, #212]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006494:	430b      	orrs	r3, r1
 8006496:	6553      	str	r3, [r2, #84]	@ 0x54
 8006498:	e003      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800649e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80064ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064b2:	2300      	movs	r3, #0
 80064b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80064b8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d058      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064ce:	d033      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80064d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80064d4:	d82c      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064da:	d02f      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064e0:	d826      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e6:	d02b      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80064e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064ec:	d820      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f2:	d012      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80064f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f8:	d81a      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d022      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80064fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006502:	d115      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006508:	3308      	adds	r3, #8
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fe3b 	bl	8007188 <RCCEx_PLL2_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006518:	e015      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651e:	3328      	adds	r3, #40	@ 0x28
 8006520:	2102      	movs	r1, #2
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fee2 	bl	80072ec <RCCEx_PLL3_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800652e:	e00a      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006536:	e006      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006538:	bf00      	nop
 800653a:	e004      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800653c:	bf00      	nop
 800653e:	e002      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006540:	bf00      	nop
 8006542:	e000      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006544:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006546:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10e      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800654e:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006552:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800655e:	4a02      	ldr	r2, [pc, #8]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006560:	430b      	orrs	r3, r1
 8006562:	6593      	str	r3, [r2, #88]	@ 0x58
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006566:	bf00      	nop
 8006568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800658a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800658e:	460b      	mov	r3, r1
 8006590:	4313      	orrs	r3, r2
 8006592:	d055      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800659c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065a0:	d033      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80065a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80065a6:	d82c      	bhi.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ac:	d02f      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b2:	d826      	bhi.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065b8:	d02b      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80065ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80065be:	d820      	bhi.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c4:	d012      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80065c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ca:	d81a      	bhi.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d022      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065d4:	d115      	bne.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	3308      	adds	r3, #8
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fdd2 	bl	8007188 <RCCEx_PLL2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065ea:	e015      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f0:	3328      	adds	r3, #40	@ 0x28
 80065f2:	2102      	movs	r1, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fe79 	bl	80072ec <RCCEx_PLL3_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006600:	e00a      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006608:	e006      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800660a:	bf00      	nop
 800660c:	e004      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10b      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006620:	4ba0      	ldr	r3, [pc, #640]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006624:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006630:	4a9c      	ldr	r2, [pc, #624]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006632:	430b      	orrs	r3, r1
 8006634:	6593      	str	r3, [r2, #88]	@ 0x58
 8006636:	e003      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800663c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f002 0308 	and.w	r3, r2, #8
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006656:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d01e      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666c:	d10c      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800666e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006672:	3328      	adds	r3, #40	@ 0x28
 8006674:	2102      	movs	r1, #2
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fe38 	bl	80072ec <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006688:	4b86      	ldr	r3, [pc, #536]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800668a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006698:	4a82      	ldr	r2, [pc, #520]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800669a:	430b      	orrs	r3, r1
 800669c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800669e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	f002 0310 	and.w	r3, r2, #16
 80066aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066ae:	2300      	movs	r3, #0
 80066b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d01e      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	3328      	adds	r3, #40	@ 0x28
 80066d2:	2102      	movs	r1, #2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fe09 	bl	80072ec <RCCEx_PLL3_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066e6:	4b6f      	ldr	r3, [pc, #444]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f6:	4a6b      	ldr	r2, [pc, #428]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800670a:	2300      	movs	r3, #0
 800670c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800670e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006712:	460b      	mov	r3, r1
 8006714:	4313      	orrs	r3, r2
 8006716:	d03e      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006724:	d022      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800672a:	d81b      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d00b      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006736:	e015      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	3308      	adds	r3, #8
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fd21 	bl	8007188 <RCCEx_PLL2_Config>
 8006746:	4603      	mov	r3, r0
 8006748:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800674c:	e00f      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006752:	3328      	adds	r3, #40	@ 0x28
 8006754:	2102      	movs	r1, #2
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fdc8 	bl	80072ec <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006776:	4b4b      	ldr	r3, [pc, #300]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800677e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006786:	4a47      	ldr	r2, [pc, #284]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6593      	str	r3, [r2, #88]	@ 0x58
 800678c:	e003      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006792:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80067a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80067a4:	2300      	movs	r3, #0
 80067a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80067a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d03b      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067be:	d01f      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80067c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067c4:	d818      	bhi.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80067cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d0:	d007      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80067d2:	e011      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d4:	4b33      	ldr	r3, [pc, #204]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80067e0:	e00f      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e6:	3328      	adds	r3, #40	@ 0x28
 80067e8:	2101      	movs	r1, #1
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fd7e 	bl	80072ec <RCCEx_PLL3_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80067f6:	e004      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067fe:	e000      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800680a:	4b26      	ldr	r3, [pc, #152]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800680c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800680e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681a:	4a22      	ldr	r2, [pc, #136]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800681c:	430b      	orrs	r3, r1
 800681e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006820:	e003      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006826:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006836:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006838:	2300      	movs	r3, #0
 800683a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800683c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d034      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006854:	d007      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006856:	e011      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006858:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	4a11      	ldr	r2, [pc, #68]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800685e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006864:	e00e      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	3308      	adds	r3, #8
 800686c:	2102      	movs	r1, #2
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fc8a 	bl	8007188 <RCCEx_PLL2_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800687a:	e003      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006884:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10d      	bne.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800688e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006890:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800689a:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800689c:	430b      	orrs	r3, r1
 800689e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80068a2:	bf00      	nop
 80068a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80068bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80068be:	2300      	movs	r3, #0
 80068c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80068c2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d00c      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	3328      	adds	r3, #40	@ 0x28
 80068d2:	2102      	movs	r1, #2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fd09 	bl	80072ec <RCCEx_PLL3_Config>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80068f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068f4:	2300      	movs	r3, #0
 80068f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80068fc:	460b      	mov	r3, r1
 80068fe:	4313      	orrs	r3, r2
 8006900:	d036      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006906:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006908:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800690c:	d018      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800690e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006912:	d811      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006918:	d014      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800691a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691e:	d80b      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d011      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006928:	d106      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800692a:	4bb7      	ldr	r3, [pc, #732]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	4ab6      	ldr	r2, [pc, #728]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006936:	e008      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800693e:	e004      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006940:	bf00      	nop
 8006942:	e002      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006952:	4bad      	ldr	r3, [pc, #692]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800695a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006960:	4aa9      	ldr	r2, [pc, #676]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006962:	430b      	orrs	r3, r1
 8006964:	6553      	str	r3, [r2, #84]	@ 0x54
 8006966:	e003      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800696c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800697c:	653b      	str	r3, [r7, #80]	@ 0x50
 800697e:	2300      	movs	r3, #0
 8006980:	657b      	str	r3, [r7, #84]	@ 0x54
 8006982:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006986:	460b      	mov	r3, r1
 8006988:	4313      	orrs	r3, r2
 800698a:	d009      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800698c:	4b9e      	ldr	r3, [pc, #632]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800698e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006990:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699a:	4a9b      	ldr	r2, [pc, #620]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800699c:	430b      	orrs	r3, r1
 800699e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80069ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ae:	2300      	movs	r3, #0
 80069b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069bc:	4b92      	ldr	r3, [pc, #584]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069ca:	4a8f      	ldr	r2, [pc, #572]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80069dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80069de:	2300      	movs	r3, #0
 80069e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80069e6:	460b      	mov	r3, r1
 80069e8:	4313      	orrs	r3, r2
 80069ea:	d00e      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ec:	4b86      	ldr	r3, [pc, #536]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	4a85      	ldr	r2, [pc, #532]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80069f6:	6113      	str	r3, [r2, #16]
 80069f8:	4b83      	ldr	r3, [pc, #524]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069fa:	6919      	ldr	r1, [r3, #16]
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a04:	4a80      	ldr	r2, [pc, #512]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a06:	430b      	orrs	r3, r1
 8006a08:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a18:	2300      	movs	r3, #0
 8006a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a26:	4b78      	ldr	r3, [pc, #480]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	4a74      	ldr	r2, [pc, #464]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a36:	430b      	orrs	r3, r1
 8006a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006a46:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a48:	2300      	movs	r3, #0
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006a50:	460b      	mov	r3, r1
 8006a52:	4313      	orrs	r3, r2
 8006a54:	d00a      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a56:	4b6c      	ldr	r3, [pc, #432]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a66:	4a68      	ldr	r2, [pc, #416]	@ (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	2100      	movs	r1, #0
 8006a76:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a82:	460b      	mov	r3, r1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	d011      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fb79 	bl	8007188 <RCCEx_PLL2_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	6239      	str	r1, [r7, #32]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006abe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	d011      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006acc:	3308      	adds	r3, #8
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fb59 	bl	8007188 <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ae8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	2100      	movs	r1, #0
 8006af6:	61b9      	str	r1, [r7, #24]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b02:	460b      	mov	r3, r1
 8006b04:	4313      	orrs	r3, r2
 8006b06:	d011      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	2102      	movs	r1, #2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fb39 	bl	8007188 <RCCEx_PLL2_Config>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	2100      	movs	r1, #0
 8006b36:	6139      	str	r1, [r7, #16]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b42:	460b      	mov	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d011      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	3328      	adds	r3, #40	@ 0x28
 8006b4e:	2100      	movs	r1, #0
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fbcb 	bl	80072ec <RCCEx_PLL3_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	2100      	movs	r1, #0
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	f003 0310 	and.w	r3, r3, #16
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d011      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	3328      	adds	r3, #40	@ 0x28
 8006b8e:	2101      	movs	r1, #1
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fbab 	bl	80072ec <RCCEx_PLL3_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	6039      	str	r1, [r7, #0]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	607b      	str	r3, [r7, #4]
 8006bbe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	d011      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bcc:	3328      	adds	r3, #40	@ 0x28
 8006bce:	2102      	movs	r1, #2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fb8b 	bl	80072ec <RCCEx_PLL3_Config>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006bec:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	e000      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006c00:	46bd      	mov	sp, r7
 8006c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c06:	bf00      	nop
 8006c08:	58024400 	.word	0x58024400

08006c0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c10:	f7fe fe00 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8006c14:	4602      	mov	r2, r0
 8006c16:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	091b      	lsrs	r3, r3, #4
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	4904      	ldr	r1, [pc, #16]	@ (8006c34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c22:	5ccb      	ldrb	r3, [r1, r3]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	58024400 	.word	0x58024400
 8006c34:	0800a310 	.word	0x0800a310

08006c38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b089      	sub	sp, #36	@ 0x24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c40:	4ba1      	ldr	r3, [pc, #644]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	0b1b      	lsrs	r3, r3, #12
 8006c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c56:	4b9c      	ldr	r3, [pc, #624]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c62:	4b99      	ldr	r3, [pc, #612]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c66:	08db      	lsrs	r3, r3, #3
 8006c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	fb02 f303 	mul.w	r3, r2, r3
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8111 	beq.w	8006ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	f000 8083 	beq.w	8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	f200 80a1 	bhi.w	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d056      	beq.n	8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ca2:	e099      	b.n	8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca4:	4b88      	ldr	r3, [pc, #544]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02d      	beq.n	8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb0:	4b85      	ldr	r3, [pc, #532]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	08db      	lsrs	r3, r3, #3
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	4a84      	ldr	r2, [pc, #528]	@ (8006ecc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cda:	4b7b      	ldr	r3, [pc, #492]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d0a:	e087      	b.n	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d4e:	e065      	b.n	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d62:	4b59      	ldr	r3, [pc, #356]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d92:	e043      	b.n	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006edc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da6:	4b48      	ldr	r3, [pc, #288]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd6:	e021      	b.n	8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dea:	4b37      	ldr	r3, [pc, #220]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e20:	0a5b      	lsrs	r3, r3, #9
 8006e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e42:	ee17 2a90 	vmov	r2, s15
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4e:	0c1b      	lsrs	r3, r3, #16
 8006e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e70:	ee17 2a90 	vmov	r2, s15
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006e78:	4b13      	ldr	r3, [pc, #76]	@ (8006ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	0e1b      	lsrs	r3, r3, #24
 8006e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9e:	ee17 2a90 	vmov	r2, s15
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ea6:	e008      	b.n	8006eba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	609a      	str	r2, [r3, #8]
}
 8006eba:	bf00      	nop
 8006ebc:	3724      	adds	r7, #36	@ 0x24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	58024400 	.word	0x58024400
 8006ecc:	03d09000 	.word	0x03d09000
 8006ed0:	46000000 	.word	0x46000000
 8006ed4:	4c742400 	.word	0x4c742400
 8006ed8:	4a742400 	.word	0x4a742400
 8006edc:	4bbebc20 	.word	0x4bbebc20

08006ee0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b089      	sub	sp, #36	@ 0x24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ee8:	4ba1      	ldr	r3, [pc, #644]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006ef2:	4b9f      	ldr	r3, [pc, #636]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef6:	0d1b      	lsrs	r3, r3, #20
 8006ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006efc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006efe:	4b9c      	ldr	r3, [pc, #624]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f0a:	4b99      	ldr	r3, [pc, #612]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0e:	08db      	lsrs	r3, r3, #3
 8006f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8111 	beq.w	8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	f000 8083 	beq.w	800703c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	f200 80a1 	bhi.w	8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d056      	beq.n	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006f4a:	e099      	b.n	8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f4c:	4b88      	ldr	r3, [pc, #544]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d02d      	beq.n	8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f58:	4b85      	ldr	r3, [pc, #532]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	4a84      	ldr	r2, [pc, #528]	@ (8007174 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b7b      	ldr	r3, [pc, #492]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fb2:	e087      	b.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800717c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ff6:	e065      	b.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b59      	ldr	r3, [pc, #356]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800703a:	e043      	b.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007046:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007184 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800704a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800704e:	4b48      	ldr	r3, [pc, #288]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800705e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007062:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800706a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800706e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800707e:	e021      	b.n	80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007180 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800708e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007092:	4b37      	ldr	r3, [pc, #220]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80070c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	0a5b      	lsrs	r3, r3, #9
 80070ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070de:	edd7 6a07 	vldr	s13, [r7, #28]
 80070e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ea:	ee17 2a90 	vmov	r2, s15
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80070f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	0c1b      	lsrs	r3, r3, #16
 80070f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fc:	ee07 3a90 	vmov	s15, r3
 8007100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007104:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800710c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007118:	ee17 2a90 	vmov	r2, s15
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007120:	4b13      	ldr	r3, [pc, #76]	@ (8007170 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	0e1b      	lsrs	r3, r3, #24
 8007126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800713a:	edd7 6a07 	vldr	s13, [r7, #28]
 800713e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007146:	ee17 2a90 	vmov	r2, s15
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800714e:	e008      	b.n	8007162 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	609a      	str	r2, [r3, #8]
}
 8007162:	bf00      	nop
 8007164:	3724      	adds	r7, #36	@ 0x24
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	58024400 	.word	0x58024400
 8007174:	03d09000 	.word	0x03d09000
 8007178:	46000000 	.word	0x46000000
 800717c:	4c742400 	.word	0x4c742400
 8007180:	4a742400 	.word	0x4a742400
 8007184:	4bbebc20 	.word	0x4bbebc20

08007188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007196:	4b53      	ldr	r3, [pc, #332]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d101      	bne.n	80071a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e099      	b.n	80072da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071a6:	4b4f      	ldr	r3, [pc, #316]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a4e      	ldr	r2, [pc, #312]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80071ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b2:	f7fa fd63 	bl	8001c7c <HAL_GetTick>
 80071b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071b8:	e008      	b.n	80071cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071ba:	f7fa fd5f 	bl	8001c7c <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e086      	b.n	80072da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071cc:	4b45      	ldr	r3, [pc, #276]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1f0      	bne.n	80071ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80071d8:	4b42      	ldr	r3, [pc, #264]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	031b      	lsls	r3, r3, #12
 80071e6:	493f      	ldr	r1, [pc, #252]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	025b      	lsls	r3, r3, #9
 80071fe:	b29b      	uxth	r3, r3
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	3b01      	subs	r3, #1
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	3b01      	subs	r3, #1
 8007216:	061b      	lsls	r3, r3, #24
 8007218:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800721c:	4931      	ldr	r1, [pc, #196]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800721e:	4313      	orrs	r3, r2
 8007220:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007222:	4b30      	ldr	r3, [pc, #192]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	492d      	ldr	r1, [pc, #180]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007230:	4313      	orrs	r3, r2
 8007232:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007234:	4b2b      	ldr	r3, [pc, #172]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	f023 0220 	bic.w	r2, r3, #32
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	4928      	ldr	r1, [pc, #160]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007242:	4313      	orrs	r3, r2
 8007244:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007246:	4b27      	ldr	r3, [pc, #156]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	4a26      	ldr	r2, [pc, #152]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800724c:	f023 0310 	bic.w	r3, r3, #16
 8007250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007252:	4b24      	ldr	r3, [pc, #144]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007254:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007256:	4b24      	ldr	r3, [pc, #144]	@ (80072e8 <RCCEx_PLL2_Config+0x160>)
 8007258:	4013      	ands	r3, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	69d2      	ldr	r2, [r2, #28]
 800725e:	00d2      	lsls	r2, r2, #3
 8007260:	4920      	ldr	r1, [pc, #128]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007266:	4b1f      	ldr	r3, [pc, #124]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	4a1e      	ldr	r2, [pc, #120]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800726c:	f043 0310 	orr.w	r3, r3, #16
 8007270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007278:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800727a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727c:	4a19      	ldr	r2, [pc, #100]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800727e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007282:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007284:	e00f      	b.n	80072a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d106      	bne.n	800729a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800728c:	4b15      	ldr	r3, [pc, #84]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	4a14      	ldr	r2, [pc, #80]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 8007292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007296:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007298:	e005      	b.n	80072a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800729a:	4b12      	ldr	r3, [pc, #72]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 800729c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729e:	4a11      	ldr	r2, [pc, #68]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80072a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072a6:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a0e      	ldr	r2, [pc, #56]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b2:	f7fa fce3 	bl	8001c7c <HAL_GetTick>
 80072b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072b8:	e008      	b.n	80072cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072ba:	f7fa fcdf 	bl	8001c7c <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e006      	b.n	80072da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072cc:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <RCCEx_PLL2_Config+0x15c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	58024400 	.word	0x58024400
 80072e8:	ffff0007 	.word	0xffff0007

080072ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072fa:	4b53      	ldr	r3, [pc, #332]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b03      	cmp	r3, #3
 8007304:	d101      	bne.n	800730a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e099      	b.n	800743e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800730a:	4b4f      	ldr	r3, [pc, #316]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a4e      	ldr	r2, [pc, #312]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007316:	f7fa fcb1 	bl	8001c7c <HAL_GetTick>
 800731a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800731c:	e008      	b.n	8007330 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800731e:	f7fa fcad 	bl	8001c7c <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e086      	b.n	800743e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007330:	4b45      	ldr	r3, [pc, #276]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f0      	bne.n	800731e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800733c:	4b42      	ldr	r3, [pc, #264]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	493f      	ldr	r1, [pc, #252]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	3b01      	subs	r3, #1
 8007356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	3b01      	subs	r3, #1
 8007360:	025b      	lsls	r3, r3, #9
 8007362:	b29b      	uxth	r3, r3
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	3b01      	subs	r3, #1
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	3b01      	subs	r3, #1
 800737a:	061b      	lsls	r3, r3, #24
 800737c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007380:	4931      	ldr	r1, [pc, #196]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007382:	4313      	orrs	r3, r2
 8007384:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007386:	4b30      	ldr	r3, [pc, #192]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	492d      	ldr	r1, [pc, #180]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007398:	4b2b      	ldr	r3, [pc, #172]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	4928      	ldr	r1, [pc, #160]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80073aa:	4b27      	ldr	r3, [pc, #156]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	4a26      	ldr	r2, [pc, #152]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073b6:	4b24      	ldr	r3, [pc, #144]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073ba:	4b24      	ldr	r3, [pc, #144]	@ (800744c <RCCEx_PLL3_Config+0x160>)
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	69d2      	ldr	r2, [r2, #28]
 80073c2:	00d2      	lsls	r2, r2, #3
 80073c4:	4920      	ldr	r1, [pc, #128]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80073ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d106      	bne.n	80073ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80073dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e0:	4a19      	ldr	r2, [pc, #100]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80073e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073e8:	e00f      	b.n	800740a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d106      	bne.n	80073fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80073f0:	4b15      	ldr	r3, [pc, #84]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	4a14      	ldr	r2, [pc, #80]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 80073f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073fc:	e005      	b.n	800740a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80073fe:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007402:	4a11      	ldr	r2, [pc, #68]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007404:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007408:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800740a:	4b0f      	ldr	r3, [pc, #60]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a0e      	ldr	r2, [pc, #56]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007416:	f7fa fc31 	bl	8001c7c <HAL_GetTick>
 800741a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800741c:	e008      	b.n	8007430 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800741e:	f7fa fc2d 	bl	8001c7c <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e006      	b.n	800743e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007430:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <RCCEx_PLL3_Config+0x15c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	58024400 	.word	0x58024400
 800744c:	ffff0007 	.word	0xffff0007

08007450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e049      	b.n	80074f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fa f8c8 	bl	800160c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f000 fc58 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e05e      	b.n	80075d6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2b      	ldr	r2, [pc, #172]	@ (80075e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d02c      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007542:	d027      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a27      	ldr	r2, [pc, #156]	@ (80075e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d022      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a26      	ldr	r2, [pc, #152]	@ (80075ec <HAL_TIM_Base_Start_IT+0xec>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01d      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a24      	ldr	r2, [pc, #144]	@ (80075f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d018      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a23      	ldr	r2, [pc, #140]	@ (80075f4 <HAL_TIM_Base_Start_IT+0xf4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a21      	ldr	r2, [pc, #132]	@ (80075f8 <HAL_TIM_Base_Start_IT+0xf8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a20      	ldr	r2, [pc, #128]	@ (80075fc <HAL_TIM_Base_Start_IT+0xfc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d009      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1e      	ldr	r2, [pc, #120]	@ (8007600 <HAL_TIM_Base_Start_IT+0x100>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x94>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1d      	ldr	r2, [pc, #116]	@ (8007604 <HAL_TIM_Base_Start_IT+0x104>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d115      	bne.n	80075c0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <HAL_TIM_Base_Start_IT+0x108>)
 800759c:	4013      	ands	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d015      	beq.n	80075d2 <HAL_TIM_Base_Start_IT+0xd2>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ac:	d011      	beq.n	80075d2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075be:	e008      	b.n	80075d2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	e000      	b.n	80075d4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40010400 	.word	0x40010400
 80075f8:	40001800 	.word	0x40001800
 80075fc:	40014000 	.word	0x40014000
 8007600:	4000e000 	.word	0x4000e000
 8007604:	4000e400 	.word	0x4000e400
 8007608:	00010007 	.word	0x00010007

0800760c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e049      	b.n	80076b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f841 	bl	80076ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f000 fb7a 	bl	8007d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d020      	beq.n	8007732 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01b      	beq.n	8007732 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f06f 0202 	mvn.w	r2, #2
 8007702:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 faf5 	bl	8007d08 <HAL_TIM_IC_CaptureCallback>
 800771e:	e005      	b.n	800772c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fae7 	bl	8007cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 faf8 	bl	8007d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d020      	beq.n	800777e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f003 0304 	and.w	r3, r3, #4
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01b      	beq.n	800777e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f06f 0204 	mvn.w	r2, #4
 800774e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 facf 	bl	8007d08 <HAL_TIM_IC_CaptureCallback>
 800776a:	e005      	b.n	8007778 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fac1 	bl	8007cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fad2 	bl	8007d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f003 0308 	and.w	r3, r3, #8
 8007784:	2b00      	cmp	r3, #0
 8007786:	d020      	beq.n	80077ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01b      	beq.n	80077ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f06f 0208 	mvn.w	r2, #8
 800779a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2204      	movs	r2, #4
 80077a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 faa9 	bl	8007d08 <HAL_TIM_IC_CaptureCallback>
 80077b6:	e005      	b.n	80077c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa9b 	bl	8007cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 faac 	bl	8007d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01b      	beq.n	8007816 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f06f 0210 	mvn.w	r2, #16
 80077e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2208      	movs	r2, #8
 80077ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa83 	bl	8007d08 <HAL_TIM_IC_CaptureCallback>
 8007802:	e005      	b.n	8007810 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fa75 	bl	8007cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa86 	bl	8007d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00c      	beq.n	800783a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f06f 0201 	mvn.w	r2, #1
 8007832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7f9 fd8f 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 ff3a 	bl	80086dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00c      	beq.n	800788c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007878:	2b00      	cmp	r3, #0
 800787a:	d007      	beq.n	800788c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 ff32 	bl	80086f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d007      	beq.n	80078b0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fa40 	bl	8007d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00c      	beq.n	80078d4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f06f 0220 	mvn.w	r2, #32
 80078cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fefa 	bl	80086c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e0ff      	b.n	8007afa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b14      	cmp	r3, #20
 8007906:	f200 80f0 	bhi.w	8007aea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007965 	.word	0x08007965
 8007914:	08007aeb 	.word	0x08007aeb
 8007918:	08007aeb 	.word	0x08007aeb
 800791c:	08007aeb 	.word	0x08007aeb
 8007920:	080079a5 	.word	0x080079a5
 8007924:	08007aeb 	.word	0x08007aeb
 8007928:	08007aeb 	.word	0x08007aeb
 800792c:	08007aeb 	.word	0x08007aeb
 8007930:	080079e7 	.word	0x080079e7
 8007934:	08007aeb 	.word	0x08007aeb
 8007938:	08007aeb 	.word	0x08007aeb
 800793c:	08007aeb 	.word	0x08007aeb
 8007940:	08007a27 	.word	0x08007a27
 8007944:	08007aeb 	.word	0x08007aeb
 8007948:	08007aeb 	.word	0x08007aeb
 800794c:	08007aeb 	.word	0x08007aeb
 8007950:	08007a69 	.word	0x08007a69
 8007954:	08007aeb 	.word	0x08007aeb
 8007958:	08007aeb 	.word	0x08007aeb
 800795c:	08007aeb 	.word	0x08007aeb
 8007960:	08007aa9 	.word	0x08007aa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fa9c 	bl	8007ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0208 	orr.w	r2, r2, #8
 800797e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0204 	bic.w	r2, r2, #4
 800798e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6999      	ldr	r1, [r3, #24]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	619a      	str	r2, [r3, #24]
      break;
 80079a2:	e0a5      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fb0c 	bl	8007fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6999      	ldr	r1, [r3, #24]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	021a      	lsls	r2, r3, #8
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	619a      	str	r2, [r3, #24]
      break;
 80079e4:	e084      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fb75 	bl	80080dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0208 	orr.w	r2, r2, #8
 8007a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69da      	ldr	r2, [r3, #28]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0204 	bic.w	r2, r2, #4
 8007a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69d9      	ldr	r1, [r3, #28]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	61da      	str	r2, [r3, #28]
      break;
 8007a24:	e064      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fbdd 	bl	80081ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69da      	ldr	r2, [r3, #28]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69d9      	ldr	r1, [r3, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	021a      	lsls	r2, r3, #8
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	61da      	str	r2, [r3, #28]
      break;
 8007a66:	e043      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fc26 	bl	80082c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0208 	orr.w	r2, r2, #8
 8007a82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0204 	bic.w	r2, r2, #4
 8007a92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007aa6:	e023      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fc6a 	bl	8008388 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ad2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	021a      	lsls	r2, r3, #8
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ae8:	e002      	b.n	8007af0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
      break;
 8007aee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop

08007b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_TIM_ConfigClockSource+0x1c>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e0dc      	b.n	8007cda <HAL_TIM_ConfigClockSource+0x1d6>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ce4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a64      	ldr	r2, [pc, #400]	@ (8007ce8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f000 80a9 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007b5c:	4a62      	ldr	r2, [pc, #392]	@ (8007ce8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f200 80ae 	bhi.w	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b64:	4a61      	ldr	r2, [pc, #388]	@ (8007cec <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	f000 80a1 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8007cec <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	f200 80a6 	bhi.w	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b74:	4a5e      	ldr	r2, [pc, #376]	@ (8007cf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	f000 8099 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8007cf0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f200 809e 	bhi.w	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b88:	f000 8091 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007b8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b90:	f200 8096 	bhi.w	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b98:	f000 8089 	beq.w	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007b9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ba0:	f200 808e 	bhi.w	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ba8:	d03e      	beq.n	8007c28 <HAL_TIM_ConfigClockSource+0x124>
 8007baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bae:	f200 8087 	bhi.w	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb6:	f000 8086 	beq.w	8007cc6 <HAL_TIM_ConfigClockSource+0x1c2>
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bbe:	d87f      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bc0:	2b70      	cmp	r3, #112	@ 0x70
 8007bc2:	d01a      	beq.n	8007bfa <HAL_TIM_ConfigClockSource+0xf6>
 8007bc4:	2b70      	cmp	r3, #112	@ 0x70
 8007bc6:	d87b      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bc8:	2b60      	cmp	r3, #96	@ 0x60
 8007bca:	d050      	beq.n	8007c6e <HAL_TIM_ConfigClockSource+0x16a>
 8007bcc:	2b60      	cmp	r3, #96	@ 0x60
 8007bce:	d877      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bd0:	2b50      	cmp	r3, #80	@ 0x50
 8007bd2:	d03c      	beq.n	8007c4e <HAL_TIM_ConfigClockSource+0x14a>
 8007bd4:	2b50      	cmp	r3, #80	@ 0x50
 8007bd6:	d873      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bd8:	2b40      	cmp	r3, #64	@ 0x40
 8007bda:	d058      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x18a>
 8007bdc:	2b40      	cmp	r3, #64	@ 0x40
 8007bde:	d86f      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007be0:	2b30      	cmp	r3, #48	@ 0x30
 8007be2:	d064      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007be4:	2b30      	cmp	r3, #48	@ 0x30
 8007be6:	d86b      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d060      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d867      	bhi.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d05c      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007bf4:	2b10      	cmp	r3, #16
 8007bf6:	d05a      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x1aa>
 8007bf8:	e062      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c0a:	f000 fca1 	bl	8008550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	609a      	str	r2, [r3, #8]
      break;
 8007c26:	e04f      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c38:	f000 fc8a 	bl	8008550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c4a:	609a      	str	r2, [r3, #8]
      break;
 8007c4c:	e03c      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f000 fbfa 	bl	8008454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2150      	movs	r1, #80	@ 0x50
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 fc54 	bl	8008514 <TIM_ITRx_SetConfig>
      break;
 8007c6c:	e02c      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f000 fc19 	bl	80084b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2160      	movs	r1, #96	@ 0x60
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fc44 	bl	8008514 <TIM_ITRx_SetConfig>
      break;
 8007c8c:	e01c      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f000 fbda 	bl	8008454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2140      	movs	r1, #64	@ 0x40
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fc34 	bl	8008514 <TIM_ITRx_SetConfig>
      break;
 8007cac:	e00c      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f000 fc2b 	bl	8008514 <TIM_ITRx_SetConfig>
      break;
 8007cbe:	e003      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e000      	b.n	8007cc8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	ffceff88 	.word	0xffceff88
 8007ce8:	00100040 	.word	0x00100040
 8007cec:	00100030 	.word	0x00100030
 8007cf0:	00100020 	.word	0x00100020

08007cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a4a      	ldr	r2, [pc, #296]	@ (8007e80 <TIM_Base_SetConfig+0x13c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d62:	d00f      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a47      	ldr	r2, [pc, #284]	@ (8007e84 <TIM_Base_SetConfig+0x140>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00b      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a46      	ldr	r2, [pc, #280]	@ (8007e88 <TIM_Base_SetConfig+0x144>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d007      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a45      	ldr	r2, [pc, #276]	@ (8007e8c <TIM_Base_SetConfig+0x148>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_Base_SetConfig+0x40>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a44      	ldr	r2, [pc, #272]	@ (8007e90 <TIM_Base_SetConfig+0x14c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d108      	bne.n	8007d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a39      	ldr	r2, [pc, #228]	@ (8007e80 <TIM_Base_SetConfig+0x13c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d027      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da4:	d023      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a36      	ldr	r2, [pc, #216]	@ (8007e84 <TIM_Base_SetConfig+0x140>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01f      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a35      	ldr	r2, [pc, #212]	@ (8007e88 <TIM_Base_SetConfig+0x144>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01b      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a34      	ldr	r2, [pc, #208]	@ (8007e8c <TIM_Base_SetConfig+0x148>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d017      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a33      	ldr	r2, [pc, #204]	@ (8007e90 <TIM_Base_SetConfig+0x14c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a32      	ldr	r2, [pc, #200]	@ (8007e94 <TIM_Base_SetConfig+0x150>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00f      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a31      	ldr	r2, [pc, #196]	@ (8007e98 <TIM_Base_SetConfig+0x154>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00b      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a30      	ldr	r2, [pc, #192]	@ (8007e9c <TIM_Base_SetConfig+0x158>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d007      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a2f      	ldr	r2, [pc, #188]	@ (8007ea0 <TIM_Base_SetConfig+0x15c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_Base_SetConfig+0xaa>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a2e      	ldr	r2, [pc, #184]	@ (8007ea4 <TIM_Base_SetConfig+0x160>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d108      	bne.n	8007e00 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a16      	ldr	r2, [pc, #88]	@ (8007e80 <TIM_Base_SetConfig+0x13c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d00f      	beq.n	8007e4c <TIM_Base_SetConfig+0x108>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a18      	ldr	r2, [pc, #96]	@ (8007e90 <TIM_Base_SetConfig+0x14c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00b      	beq.n	8007e4c <TIM_Base_SetConfig+0x108>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a17      	ldr	r2, [pc, #92]	@ (8007e94 <TIM_Base_SetConfig+0x150>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d007      	beq.n	8007e4c <TIM_Base_SetConfig+0x108>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	@ (8007e98 <TIM_Base_SetConfig+0x154>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_Base_SetConfig+0x108>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a15      	ldr	r2, [pc, #84]	@ (8007e9c <TIM_Base_SetConfig+0x158>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d103      	bne.n	8007e54 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d105      	bne.n	8007e72 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f023 0201 	bic.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]
  }
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40010400 	.word	0x40010400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800
 8007ea0:	4000e000 	.word	0x4000e000
 8007ea4:	4000e400 	.word	0x4000e400

08007ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	f023 0201 	bic.w	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4b37      	ldr	r3, [pc, #220]	@ (8007fb0 <TIM_OC1_SetConfig+0x108>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f023 0302 	bic.w	r3, r3, #2
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a2d      	ldr	r2, [pc, #180]	@ (8007fb4 <TIM_OC1_SetConfig+0x10c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00f      	beq.n	8007f24 <TIM_OC1_SetConfig+0x7c>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb8 <TIM_OC1_SetConfig+0x110>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00b      	beq.n	8007f24 <TIM_OC1_SetConfig+0x7c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fbc <TIM_OC1_SetConfig+0x114>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d007      	beq.n	8007f24 <TIM_OC1_SetConfig+0x7c>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a2a      	ldr	r2, [pc, #168]	@ (8007fc0 <TIM_OC1_SetConfig+0x118>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_OC1_SetConfig+0x7c>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a29      	ldr	r2, [pc, #164]	@ (8007fc4 <TIM_OC1_SetConfig+0x11c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d10c      	bne.n	8007f3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f023 0308 	bic.w	r3, r3, #8
 8007f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f023 0304 	bic.w	r3, r3, #4
 8007f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <TIM_OC1_SetConfig+0x10c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00f      	beq.n	8007f66 <TIM_OC1_SetConfig+0xbe>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <TIM_OC1_SetConfig+0x110>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00b      	beq.n	8007f66 <TIM_OC1_SetConfig+0xbe>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1a      	ldr	r2, [pc, #104]	@ (8007fbc <TIM_OC1_SetConfig+0x114>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d007      	beq.n	8007f66 <TIM_OC1_SetConfig+0xbe>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <TIM_OC1_SetConfig+0x118>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d003      	beq.n	8007f66 <TIM_OC1_SetConfig+0xbe>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a18      	ldr	r2, [pc, #96]	@ (8007fc4 <TIM_OC1_SetConfig+0x11c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d111      	bne.n	8007f8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	621a      	str	r2, [r3, #32]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	fffeff8f 	.word	0xfffeff8f
 8007fb4:	40010000 	.word	0x40010000
 8007fb8:	40010400 	.word	0x40010400
 8007fbc:	40014000 	.word	0x40014000
 8007fc0:	40014400 	.word	0x40014400
 8007fc4:	40014800 	.word	0x40014800

08007fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	f023 0210 	bic.w	r2, r3, #16
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4b34      	ldr	r3, [pc, #208]	@ (80080c4 <TIM_OC2_SetConfig+0xfc>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	021b      	lsls	r3, r3, #8
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f023 0320 	bic.w	r3, r3, #32
 8008012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a29      	ldr	r2, [pc, #164]	@ (80080c8 <TIM_OC2_SetConfig+0x100>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d003      	beq.n	8008030 <TIM_OC2_SetConfig+0x68>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a28      	ldr	r2, [pc, #160]	@ (80080cc <TIM_OC2_SetConfig+0x104>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10d      	bne.n	800804c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800804a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1e      	ldr	r2, [pc, #120]	@ (80080c8 <TIM_OC2_SetConfig+0x100>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00f      	beq.n	8008074 <TIM_OC2_SetConfig+0xac>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <TIM_OC2_SetConfig+0x104>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00b      	beq.n	8008074 <TIM_OC2_SetConfig+0xac>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a1c      	ldr	r2, [pc, #112]	@ (80080d0 <TIM_OC2_SetConfig+0x108>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_OC2_SetConfig+0xac>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1b      	ldr	r2, [pc, #108]	@ (80080d4 <TIM_OC2_SetConfig+0x10c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC2_SetConfig+0xac>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1a      	ldr	r2, [pc, #104]	@ (80080d8 <TIM_OC2_SetConfig+0x110>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d113      	bne.n	800809c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800807a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	feff8fff 	.word	0xfeff8fff
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40010400 	.word	0x40010400
 80080d0:	40014000 	.word	0x40014000
 80080d4:	40014400 	.word	0x40014400
 80080d8:	40014800 	.word	0x40014800

080080dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4b33      	ldr	r3, [pc, #204]	@ (80081d4 <TIM_OC3_SetConfig+0xf8>)
 8008108:	4013      	ands	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a28      	ldr	r2, [pc, #160]	@ (80081d8 <TIM_OC3_SetConfig+0xfc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_OC3_SetConfig+0x66>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a27      	ldr	r2, [pc, #156]	@ (80081dc <TIM_OC3_SetConfig+0x100>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d10d      	bne.n	800815e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800815c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1d      	ldr	r2, [pc, #116]	@ (80081d8 <TIM_OC3_SetConfig+0xfc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00f      	beq.n	8008186 <TIM_OC3_SetConfig+0xaa>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1c      	ldr	r2, [pc, #112]	@ (80081dc <TIM_OC3_SetConfig+0x100>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d00b      	beq.n	8008186 <TIM_OC3_SetConfig+0xaa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1b      	ldr	r2, [pc, #108]	@ (80081e0 <TIM_OC3_SetConfig+0x104>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d007      	beq.n	8008186 <TIM_OC3_SetConfig+0xaa>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1a      	ldr	r2, [pc, #104]	@ (80081e4 <TIM_OC3_SetConfig+0x108>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d003      	beq.n	8008186 <TIM_OC3_SetConfig+0xaa>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a19      	ldr	r2, [pc, #100]	@ (80081e8 <TIM_OC3_SetConfig+0x10c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d113      	bne.n	80081ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800818c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	011b      	lsls	r3, r3, #4
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	fffeff8f 	.word	0xfffeff8f
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40010400 	.word	0x40010400
 80081e0:	40014000 	.word	0x40014000
 80081e4:	40014400 	.word	0x40014400
 80081e8:	40014800 	.word	0x40014800

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4b24      	ldr	r3, [pc, #144]	@ (80082a8 <TIM_OC4_SetConfig+0xbc>)
 8008218:	4013      	ands	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a19      	ldr	r2, [pc, #100]	@ (80082ac <TIM_OC4_SetConfig+0xc0>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00f      	beq.n	800826c <TIM_OC4_SetConfig+0x80>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a18      	ldr	r2, [pc, #96]	@ (80082b0 <TIM_OC4_SetConfig+0xc4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00b      	beq.n	800826c <TIM_OC4_SetConfig+0x80>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a17      	ldr	r2, [pc, #92]	@ (80082b4 <TIM_OC4_SetConfig+0xc8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d007      	beq.n	800826c <TIM_OC4_SetConfig+0x80>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a16      	ldr	r2, [pc, #88]	@ (80082b8 <TIM_OC4_SetConfig+0xcc>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d003      	beq.n	800826c <TIM_OC4_SetConfig+0x80>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a15      	ldr	r2, [pc, #84]	@ (80082bc <TIM_OC4_SetConfig+0xd0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d109      	bne.n	8008280 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	019b      	lsls	r3, r3, #6
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	621a      	str	r2, [r3, #32]
}
 800829a:	bf00      	nop
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	feff8fff 	.word	0xfeff8fff
 80082ac:	40010000 	.word	0x40010000
 80082b0:	40010400 	.word	0x40010400
 80082b4:	40014000 	.word	0x40014000
 80082b8:	40014400 	.word	0x40014400
 80082bc:	40014800 	.word	0x40014800

080082c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	4b21      	ldr	r3, [pc, #132]	@ (8008370 <TIM_OC5_SetConfig+0xb0>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	041b      	lsls	r3, r3, #16
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a18      	ldr	r2, [pc, #96]	@ (8008374 <TIM_OC5_SetConfig+0xb4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00f      	beq.n	8008336 <TIM_OC5_SetConfig+0x76>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a17      	ldr	r2, [pc, #92]	@ (8008378 <TIM_OC5_SetConfig+0xb8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00b      	beq.n	8008336 <TIM_OC5_SetConfig+0x76>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a16      	ldr	r2, [pc, #88]	@ (800837c <TIM_OC5_SetConfig+0xbc>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d007      	beq.n	8008336 <TIM_OC5_SetConfig+0x76>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a15      	ldr	r2, [pc, #84]	@ (8008380 <TIM_OC5_SetConfig+0xc0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_OC5_SetConfig+0x76>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a14      	ldr	r2, [pc, #80]	@ (8008384 <TIM_OC5_SetConfig+0xc4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d109      	bne.n	800834a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800833c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	621a      	str	r2, [r3, #32]
}
 8008364:	bf00      	nop
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	fffeff8f 	.word	0xfffeff8f
 8008374:	40010000 	.word	0x40010000
 8008378:	40010400 	.word	0x40010400
 800837c:	40014000 	.word	0x40014000
 8008380:	40014400 	.word	0x40014400
 8008384:	40014800 	.word	0x40014800

08008388 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4b22      	ldr	r3, [pc, #136]	@ (800843c <TIM_OC6_SetConfig+0xb4>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	051b      	lsls	r3, r3, #20
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a19      	ldr	r2, [pc, #100]	@ (8008440 <TIM_OC6_SetConfig+0xb8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d00f      	beq.n	8008400 <TIM_OC6_SetConfig+0x78>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a18      	ldr	r2, [pc, #96]	@ (8008444 <TIM_OC6_SetConfig+0xbc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00b      	beq.n	8008400 <TIM_OC6_SetConfig+0x78>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <TIM_OC6_SetConfig+0xc0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d007      	beq.n	8008400 <TIM_OC6_SetConfig+0x78>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a16      	ldr	r2, [pc, #88]	@ (800844c <TIM_OC6_SetConfig+0xc4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_OC6_SetConfig+0x78>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a15      	ldr	r2, [pc, #84]	@ (8008450 <TIM_OC6_SetConfig+0xc8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d109      	bne.n	8008414 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	029b      	lsls	r3, r3, #10
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	621a      	str	r2, [r3, #32]
}
 800842e:	bf00      	nop
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	feff8fff 	.word	0xfeff8fff
 8008440:	40010000 	.word	0x40010000
 8008444:	40010400 	.word	0x40010400
 8008448:	40014000 	.word	0x40014000
 800844c:	40014400 	.word	0x40014400
 8008450:	40014800 	.word	0x40014800

08008454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f023 0201 	bic.w	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800847e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f023 030a 	bic.w	r3, r3, #10
 8008490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b087      	sub	sp, #28
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	f023 0210 	bic.w	r2, r3, #16
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	031b      	lsls	r3, r3, #12
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	4b09      	ldr	r3, [pc, #36]	@ (800854c <TIM_ITRx_SetConfig+0x38>)
 8008528:	4013      	ands	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	f043 0307 	orr.w	r3, r3, #7
 8008536:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	609a      	str	r2, [r3, #8]
}
 800853e:	bf00      	nop
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	ffcfff8f 	.word	0xffcfff8f

08008550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800856a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	021a      	lsls	r2, r3, #8
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	431a      	orrs	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4313      	orrs	r3, r2
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	609a      	str	r2, [r3, #8]
}
 8008584:	bf00      	nop
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d101      	bne.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e077      	b.n	8008698 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a35      	ldr	r2, [pc, #212]	@ (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d004      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a34      	ldr	r2, [pc, #208]	@ (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d108      	bne.n	80085ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a25      	ldr	r2, [pc, #148]	@ (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d02c      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861a:	d027      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a22      	ldr	r2, [pc, #136]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d022      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a21      	ldr	r2, [pc, #132]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d01d      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1f      	ldr	r2, [pc, #124]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d018      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1a      	ldr	r2, [pc, #104]	@ (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d013      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1b      	ldr	r2, [pc, #108]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00e      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1a      	ldr	r2, [pc, #104]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d009      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a18      	ldr	r2, [pc, #96]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a17      	ldr	r2, [pc, #92]	@ (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d10c      	bne.n	8008686 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	4313      	orrs	r3, r2
 800867c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40010000 	.word	0x40010000
 80086a8:	40010400 	.word	0x40010400
 80086ac:	40000400 	.word	0x40000400
 80086b0:	40000800 	.word	0x40000800
 80086b4:	40000c00 	.word	0x40000c00
 80086b8:	40001800 	.word	0x40001800
 80086bc:	40014000 	.word	0x40014000
 80086c0:	4000e000 	.word	0x4000e000
 80086c4:	4000e400 	.word	0x4000e400

080086c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e04a      	b.n	80087ac <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800871c:	2b00      	cmp	r3, #0
 800871e:	d106      	bne.n	800872e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7f8 ff95 	bl	8001658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2224      	movs	r2, #36	@ 0x24
 8008732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 0201 	bic.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 ffec 	bl	800972c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f97d 	bl	8008a54 <UART_SetConfig>
 800875a:	4603      	mov	r3, r0
 800875c:	2b01      	cmp	r3, #1
 800875e:	d101      	bne.n	8008764 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e023      	b.n	80087ac <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689a      	ldr	r2, [r3, #8]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008782:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f042 0208 	orr.w	r2, r2, #8
 8008792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0201 	orr.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 f863 	bl	8009870 <UART_CheckIdleState>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	@ 0x28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d167      	bne.n	800889c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_UART_Transmit_DMA+0x24>
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e060      	b.n	800889e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	88fa      	ldrh	r2, [r7, #6]
 80087e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	88fa      	ldrh	r2, [r7, #6]
 80087ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2221      	movs	r2, #33	@ 0x21
 80087fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d028      	beq.n	800885c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800880e:	4a26      	ldr	r2, [pc, #152]	@ (80088a8 <HAL_UART_Transmit_DMA+0xf4>)
 8008810:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008816:	4a25      	ldr	r2, [pc, #148]	@ (80088ac <HAL_UART_Transmit_DMA+0xf8>)
 8008818:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800881e:	4a24      	ldr	r2, [pc, #144]	@ (80088b0 <HAL_UART_Transmit_DMA+0xfc>)
 8008820:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008826:	2200      	movs	r2, #0
 8008828:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008832:	4619      	mov	r1, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3328      	adds	r3, #40	@ 0x28
 800883a:	461a      	mov	r2, r3
 800883c:	88fb      	ldrh	r3, [r7, #6]
 800883e:	f7fa f933 	bl	8002aa8 <HAL_DMA_Start_IT>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d009      	beq.n	800885c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2210      	movs	r2, #16
 800884c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2220      	movs	r2, #32
 8008854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e020      	b.n	800889e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2240      	movs	r2, #64	@ 0x40
 8008862:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3308      	adds	r3, #8
 800886a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	613b      	str	r3, [r7, #16]
   return(result);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008884:	623a      	str	r2, [r7, #32]
 8008886:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	69f9      	ldr	r1, [r7, #28]
 800888a:	6a3a      	ldr	r2, [r7, #32]
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	61bb      	str	r3, [r7, #24]
   return(result);
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e5      	bne.n	8008864 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e000      	b.n	800889e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800889c:	2302      	movs	r3, #2
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3728      	adds	r7, #40	@ 0x28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	08009d3d 	.word	0x08009d3d
 80088ac:	08009dd3 	.word	0x08009dd3
 80088b0:	08009f55 	.word	0x08009f55

080088b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b08f      	sub	sp, #60	@ 0x3c
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8008916:	2302      	movs	r3, #2
 8008918:	e042      	b.n	80089a0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2224      	movs	r2, #36	@ 0x24
 8008926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	e853 3f00 	ldrex	r3, [r3]
 8008936:	61fb      	str	r3, [r7, #28]
   return(result);
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f023 030c 	bic.w	r3, r3, #12
 800893e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800894a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800894e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e6      	bne.n	800892a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	60bb      	str	r3, [r7, #8]
   return(result);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f043 0308 	orr.w	r3, r3, #8
 8008970:	633b      	str	r3, [r7, #48]	@ 0x30
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	61bb      	str	r3, [r7, #24]
 800897c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6979      	ldr	r1, [r7, #20]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	613b      	str	r3, [r7, #16]
   return(result);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e6      	bne.n	800895c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	373c      	adds	r7, #60	@ 0x3c
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b08f      	sub	sp, #60	@ 0x3c
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d101      	bne.n	80089c2 <HAL_HalfDuplex_EnableReceiver+0x16>
 80089be:	2302      	movs	r3, #2
 80089c0:	e042      	b.n	8008a48 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2224      	movs	r2, #36	@ 0x24
 80089ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	61fb      	str	r3, [r7, #28]
   return(result);
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f023 030c 	bic.w	r3, r3, #12
 80089e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e6      	bne.n	80089d2 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f043 0304 	orr.w	r3, r3, #4
 8008a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	61bb      	str	r3, [r7, #24]
 8008a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	6979      	ldr	r1, [r7, #20]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e6      	bne.n	8008a04 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	373c      	adds	r7, #60	@ 0x3c
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a58:	b092      	sub	sp, #72	@ 0x48
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4bbe      	ldr	r3, [pc, #760]	@ (8008d7c <UART_SetConfig+0x328>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4ab3      	ldr	r2, [pc, #716]	@ (8008d80 <UART_SetConfig+0x32c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d004      	beq.n	8008ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008abc:	4313      	orrs	r3, r2
 8008abe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	4baf      	ldr	r3, [pc, #700]	@ (8008d84 <UART_SetConfig+0x330>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ada:	f023 010f 	bic.w	r1, r3, #15
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4aa6      	ldr	r2, [pc, #664]	@ (8008d88 <UART_SetConfig+0x334>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d177      	bne.n	8008be4 <UART_SetConfig+0x190>
 8008af4:	4ba5      	ldr	r3, [pc, #660]	@ (8008d8c <UART_SetConfig+0x338>)
 8008af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008afc:	2b28      	cmp	r3, #40	@ 0x28
 8008afe:	d86d      	bhi.n	8008bdc <UART_SetConfig+0x188>
 8008b00:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <UART_SetConfig+0xb4>)
 8008b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b06:	bf00      	nop
 8008b08:	08008bad 	.word	0x08008bad
 8008b0c:	08008bdd 	.word	0x08008bdd
 8008b10:	08008bdd 	.word	0x08008bdd
 8008b14:	08008bdd 	.word	0x08008bdd
 8008b18:	08008bdd 	.word	0x08008bdd
 8008b1c:	08008bdd 	.word	0x08008bdd
 8008b20:	08008bdd 	.word	0x08008bdd
 8008b24:	08008bdd 	.word	0x08008bdd
 8008b28:	08008bb5 	.word	0x08008bb5
 8008b2c:	08008bdd 	.word	0x08008bdd
 8008b30:	08008bdd 	.word	0x08008bdd
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008bdd 	.word	0x08008bdd
 8008b3c:	08008bdd 	.word	0x08008bdd
 8008b40:	08008bdd 	.word	0x08008bdd
 8008b44:	08008bdd 	.word	0x08008bdd
 8008b48:	08008bbd 	.word	0x08008bbd
 8008b4c:	08008bdd 	.word	0x08008bdd
 8008b50:	08008bdd 	.word	0x08008bdd
 8008b54:	08008bdd 	.word	0x08008bdd
 8008b58:	08008bdd 	.word	0x08008bdd
 8008b5c:	08008bdd 	.word	0x08008bdd
 8008b60:	08008bdd 	.word	0x08008bdd
 8008b64:	08008bdd 	.word	0x08008bdd
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bdd 	.word	0x08008bdd
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008bdd 	.word	0x08008bdd
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008bdd 	.word	0x08008bdd
 8008b80:	08008bdd 	.word	0x08008bdd
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008bcd 	.word	0x08008bcd
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008bdd 	.word	0x08008bdd
 8008b94:	08008bdd 	.word	0x08008bdd
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bdd 	.word	0x08008bdd
 8008ba0:	08008bdd 	.word	0x08008bdd
 8008ba4:	08008bdd 	.word	0x08008bdd
 8008ba8:	08008bd5 	.word	0x08008bd5
 8008bac:	2301      	movs	r3, #1
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e326      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e322      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e31e      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bca:	e31a      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd2:	e316      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008bd4:	2340      	movs	r3, #64	@ 0x40
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bda:	e312      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008bdc:	2380      	movs	r3, #128	@ 0x80
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e30e      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a69      	ldr	r2, [pc, #420]	@ (8008d90 <UART_SetConfig+0x33c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d130      	bne.n	8008c50 <UART_SetConfig+0x1fc>
 8008bee:	4b67      	ldr	r3, [pc, #412]	@ (8008d8c <UART_SetConfig+0x338>)
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d826      	bhi.n	8008c48 <UART_SetConfig+0x1f4>
 8008bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <UART_SetConfig+0x1ac>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c29 	.word	0x08008c29
 8008c0c:	08008c31 	.word	0x08008c31
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e2f0      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c20:	2304      	movs	r3, #4
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e2ec      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e2e8      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c30:	2310      	movs	r3, #16
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e2e4      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e2e0      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c40:	2340      	movs	r3, #64	@ 0x40
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e2dc      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e2d8      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a4f      	ldr	r2, [pc, #316]	@ (8008d94 <UART_SetConfig+0x340>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d130      	bne.n	8008cbc <UART_SetConfig+0x268>
 8008c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d8c <UART_SetConfig+0x338>)
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d826      	bhi.n	8008cb4 <UART_SetConfig+0x260>
 8008c66:	a201      	add	r2, pc, #4	@ (adr r2, 8008c6c <UART_SetConfig+0x218>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e2ba      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e2b6      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c94:	2308      	movs	r3, #8
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e2b2      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e2ae      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008ca4:	2320      	movs	r3, #32
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e2aa      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008cac:	2340      	movs	r3, #64	@ 0x40
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e2a6      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008cb4:	2380      	movs	r3, #128	@ 0x80
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e2a2      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a35      	ldr	r2, [pc, #212]	@ (8008d98 <UART_SetConfig+0x344>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d130      	bne.n	8008d28 <UART_SetConfig+0x2d4>
 8008cc6:	4b31      	ldr	r3, [pc, #196]	@ (8008d8c <UART_SetConfig+0x338>)
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d826      	bhi.n	8008d20 <UART_SetConfig+0x2cc>
 8008cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <UART_SetConfig+0x284>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e284      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e280      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e27c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e278      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d10:	2320      	movs	r3, #32
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d16:	e274      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d18:	2340      	movs	r3, #64	@ 0x40
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1e:	e270      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d20:	2380      	movs	r3, #128	@ 0x80
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e26c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008d9c <UART_SetConfig+0x348>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d142      	bne.n	8008db8 <UART_SetConfig+0x364>
 8008d32:	4b16      	ldr	r3, [pc, #88]	@ (8008d8c <UART_SetConfig+0x338>)
 8008d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b05      	cmp	r3, #5
 8008d3c:	d838      	bhi.n	8008db0 <UART_SetConfig+0x35c>
 8008d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <UART_SetConfig+0x2f0>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d65 	.word	0x08008d65
 8008d4c:	08008d6d 	.word	0x08008d6d
 8008d50:	08008d75 	.word	0x08008d75
 8008d54:	08008da1 	.word	0x08008da1
 8008d58:	08008da9 	.word	0x08008da9
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e24e      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d64:	2304      	movs	r3, #4
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6a:	e24a      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e246      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d74:	2310      	movs	r3, #16
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e242      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008d7c:	cfff69f3 	.word	0xcfff69f3
 8008d80:	58000c00 	.word	0x58000c00
 8008d84:	11fff4ff 	.word	0x11fff4ff
 8008d88:	40011000 	.word	0x40011000
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	40004400 	.word	0x40004400
 8008d94:	40004800 	.word	0x40004800
 8008d98:	40004c00 	.word	0x40004c00
 8008d9c:	40005000 	.word	0x40005000
 8008da0:	2320      	movs	r3, #32
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e22c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e228      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008db0:	2380      	movs	r3, #128	@ 0x80
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e224      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4ab1      	ldr	r2, [pc, #708]	@ (8009084 <UART_SetConfig+0x630>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d176      	bne.n	8008eb0 <UART_SetConfig+0x45c>
 8008dc2:	4bb1      	ldr	r3, [pc, #708]	@ (8009088 <UART_SetConfig+0x634>)
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dca:	2b28      	cmp	r3, #40	@ 0x28
 8008dcc:	d86c      	bhi.n	8008ea8 <UART_SetConfig+0x454>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <UART_SetConfig+0x380>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e79 	.word	0x08008e79
 8008dd8:	08008ea9 	.word	0x08008ea9
 8008ddc:	08008ea9 	.word	0x08008ea9
 8008de0:	08008ea9 	.word	0x08008ea9
 8008de4:	08008ea9 	.word	0x08008ea9
 8008de8:	08008ea9 	.word	0x08008ea9
 8008dec:	08008ea9 	.word	0x08008ea9
 8008df0:	08008ea9 	.word	0x08008ea9
 8008df4:	08008e81 	.word	0x08008e81
 8008df8:	08008ea9 	.word	0x08008ea9
 8008dfc:	08008ea9 	.word	0x08008ea9
 8008e00:	08008ea9 	.word	0x08008ea9
 8008e04:	08008ea9 	.word	0x08008ea9
 8008e08:	08008ea9 	.word	0x08008ea9
 8008e0c:	08008ea9 	.word	0x08008ea9
 8008e10:	08008ea9 	.word	0x08008ea9
 8008e14:	08008e89 	.word	0x08008e89
 8008e18:	08008ea9 	.word	0x08008ea9
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008ea9 	.word	0x08008ea9
 8008e24:	08008ea9 	.word	0x08008ea9
 8008e28:	08008ea9 	.word	0x08008ea9
 8008e2c:	08008ea9 	.word	0x08008ea9
 8008e30:	08008ea9 	.word	0x08008ea9
 8008e34:	08008e91 	.word	0x08008e91
 8008e38:	08008ea9 	.word	0x08008ea9
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008ea9 	.word	0x08008ea9
 8008e44:	08008ea9 	.word	0x08008ea9
 8008e48:	08008ea9 	.word	0x08008ea9
 8008e4c:	08008ea9 	.word	0x08008ea9
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008e99 	.word	0x08008e99
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008ea9 	.word	0x08008ea9
 8008e60:	08008ea9 	.word	0x08008ea9
 8008e64:	08008ea9 	.word	0x08008ea9
 8008e68:	08008ea9 	.word	0x08008ea9
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008ea9 	.word	0x08008ea9
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	2301      	movs	r3, #1
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e1c0      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008e80:	2304      	movs	r3, #4
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e86:	e1bc      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8e:	e1b8      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008e90:	2310      	movs	r3, #16
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e96:	e1b4      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008e98:	2320      	movs	r3, #32
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9e:	e1b0      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008ea0:	2340      	movs	r3, #64	@ 0x40
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea6:	e1ac      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008ea8:	2380      	movs	r3, #128	@ 0x80
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e1a8      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a75      	ldr	r2, [pc, #468]	@ (800908c <UART_SetConfig+0x638>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d130      	bne.n	8008f1c <UART_SetConfig+0x4c8>
 8008eba:	4b73      	ldr	r3, [pc, #460]	@ (8009088 <UART_SetConfig+0x634>)
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d826      	bhi.n	8008f14 <UART_SetConfig+0x4c0>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <UART_SetConfig+0x478>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	08008ef5 	.word	0x08008ef5
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008f05 	.word	0x08008f05
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e18a      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef2:	e186      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e182      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e17e      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f04:	2320      	movs	r3, #32
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e17a      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f0c:	2340      	movs	r3, #64	@ 0x40
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e176      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f14:	2380      	movs	r3, #128	@ 0x80
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e172      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a5b      	ldr	r2, [pc, #364]	@ (8009090 <UART_SetConfig+0x63c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d130      	bne.n	8008f88 <UART_SetConfig+0x534>
 8008f26:	4b58      	ldr	r3, [pc, #352]	@ (8009088 <UART_SetConfig+0x634>)
 8008f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d826      	bhi.n	8008f80 <UART_SetConfig+0x52c>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <UART_SetConfig+0x4e4>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f51 	.word	0x08008f51
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	08008f61 	.word	0x08008f61
 8008f44:	08008f69 	.word	0x08008f69
 8008f48:	08008f71 	.word	0x08008f71
 8008f4c:	08008f79 	.word	0x08008f79
 8008f50:	2300      	movs	r3, #0
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e154      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e150      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f60:	2308      	movs	r3, #8
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e14c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e148      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f70:	2320      	movs	r3, #32
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e144      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f78:	2340      	movs	r3, #64	@ 0x40
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e140      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f80:	2380      	movs	r3, #128	@ 0x80
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e13c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a41      	ldr	r2, [pc, #260]	@ (8009094 <UART_SetConfig+0x640>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f040 8082 	bne.w	8009098 <UART_SetConfig+0x644>
 8008f94:	4b3c      	ldr	r3, [pc, #240]	@ (8009088 <UART_SetConfig+0x634>)
 8008f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f9c:	2b28      	cmp	r3, #40	@ 0x28
 8008f9e:	d86d      	bhi.n	800907c <UART_SetConfig+0x628>
 8008fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <UART_SetConfig+0x554>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	0800904d 	.word	0x0800904d
 8008fac:	0800907d 	.word	0x0800907d
 8008fb0:	0800907d 	.word	0x0800907d
 8008fb4:	0800907d 	.word	0x0800907d
 8008fb8:	0800907d 	.word	0x0800907d
 8008fbc:	0800907d 	.word	0x0800907d
 8008fc0:	0800907d 	.word	0x0800907d
 8008fc4:	0800907d 	.word	0x0800907d
 8008fc8:	08009055 	.word	0x08009055
 8008fcc:	0800907d 	.word	0x0800907d
 8008fd0:	0800907d 	.word	0x0800907d
 8008fd4:	0800907d 	.word	0x0800907d
 8008fd8:	0800907d 	.word	0x0800907d
 8008fdc:	0800907d 	.word	0x0800907d
 8008fe0:	0800907d 	.word	0x0800907d
 8008fe4:	0800907d 	.word	0x0800907d
 8008fe8:	0800905d 	.word	0x0800905d
 8008fec:	0800907d 	.word	0x0800907d
 8008ff0:	0800907d 	.word	0x0800907d
 8008ff4:	0800907d 	.word	0x0800907d
 8008ff8:	0800907d 	.word	0x0800907d
 8008ffc:	0800907d 	.word	0x0800907d
 8009000:	0800907d 	.word	0x0800907d
 8009004:	0800907d 	.word	0x0800907d
 8009008:	08009065 	.word	0x08009065
 800900c:	0800907d 	.word	0x0800907d
 8009010:	0800907d 	.word	0x0800907d
 8009014:	0800907d 	.word	0x0800907d
 8009018:	0800907d 	.word	0x0800907d
 800901c:	0800907d 	.word	0x0800907d
 8009020:	0800907d 	.word	0x0800907d
 8009024:	0800907d 	.word	0x0800907d
 8009028:	0800906d 	.word	0x0800906d
 800902c:	0800907d 	.word	0x0800907d
 8009030:	0800907d 	.word	0x0800907d
 8009034:	0800907d 	.word	0x0800907d
 8009038:	0800907d 	.word	0x0800907d
 800903c:	0800907d 	.word	0x0800907d
 8009040:	0800907d 	.word	0x0800907d
 8009044:	0800907d 	.word	0x0800907d
 8009048:	08009075 	.word	0x08009075
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009052:	e0d6      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009054:	2304      	movs	r3, #4
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e0d2      	b.n	8009202 <UART_SetConfig+0x7ae>
 800905c:	2308      	movs	r3, #8
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e0ce      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009064:	2310      	movs	r3, #16
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e0ca      	b.n	8009202 <UART_SetConfig+0x7ae>
 800906c:	2320      	movs	r3, #32
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e0c6      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009074:	2340      	movs	r3, #64	@ 0x40
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e0c2      	b.n	8009202 <UART_SetConfig+0x7ae>
 800907c:	2380      	movs	r3, #128	@ 0x80
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e0be      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009084:	40011400 	.word	0x40011400
 8009088:	58024400 	.word	0x58024400
 800908c:	40007800 	.word	0x40007800
 8009090:	40007c00 	.word	0x40007c00
 8009094:	40011800 	.word	0x40011800
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4aad      	ldr	r2, [pc, #692]	@ (8009354 <UART_SetConfig+0x900>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d176      	bne.n	8009190 <UART_SetConfig+0x73c>
 80090a2:	4bad      	ldr	r3, [pc, #692]	@ (8009358 <UART_SetConfig+0x904>)
 80090a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090aa:	2b28      	cmp	r3, #40	@ 0x28
 80090ac:	d86c      	bhi.n	8009188 <UART_SetConfig+0x734>
 80090ae:	a201      	add	r2, pc, #4	@ (adr r2, 80090b4 <UART_SetConfig+0x660>)
 80090b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b4:	08009159 	.word	0x08009159
 80090b8:	08009189 	.word	0x08009189
 80090bc:	08009189 	.word	0x08009189
 80090c0:	08009189 	.word	0x08009189
 80090c4:	08009189 	.word	0x08009189
 80090c8:	08009189 	.word	0x08009189
 80090cc:	08009189 	.word	0x08009189
 80090d0:	08009189 	.word	0x08009189
 80090d4:	08009161 	.word	0x08009161
 80090d8:	08009189 	.word	0x08009189
 80090dc:	08009189 	.word	0x08009189
 80090e0:	08009189 	.word	0x08009189
 80090e4:	08009189 	.word	0x08009189
 80090e8:	08009189 	.word	0x08009189
 80090ec:	08009189 	.word	0x08009189
 80090f0:	08009189 	.word	0x08009189
 80090f4:	08009169 	.word	0x08009169
 80090f8:	08009189 	.word	0x08009189
 80090fc:	08009189 	.word	0x08009189
 8009100:	08009189 	.word	0x08009189
 8009104:	08009189 	.word	0x08009189
 8009108:	08009189 	.word	0x08009189
 800910c:	08009189 	.word	0x08009189
 8009110:	08009189 	.word	0x08009189
 8009114:	08009171 	.word	0x08009171
 8009118:	08009189 	.word	0x08009189
 800911c:	08009189 	.word	0x08009189
 8009120:	08009189 	.word	0x08009189
 8009124:	08009189 	.word	0x08009189
 8009128:	08009189 	.word	0x08009189
 800912c:	08009189 	.word	0x08009189
 8009130:	08009189 	.word	0x08009189
 8009134:	08009179 	.word	0x08009179
 8009138:	08009189 	.word	0x08009189
 800913c:	08009189 	.word	0x08009189
 8009140:	08009189 	.word	0x08009189
 8009144:	08009189 	.word	0x08009189
 8009148:	08009189 	.word	0x08009189
 800914c:	08009189 	.word	0x08009189
 8009150:	08009189 	.word	0x08009189
 8009154:	08009181 	.word	0x08009181
 8009158:	2301      	movs	r3, #1
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800915e:	e050      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009160:	2304      	movs	r3, #4
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009166:	e04c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009168:	2308      	movs	r3, #8
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916e:	e048      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009170:	2310      	movs	r3, #16
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009176:	e044      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009178:	2320      	movs	r3, #32
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800917e:	e040      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009180:	2340      	movs	r3, #64	@ 0x40
 8009182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009186:	e03c      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009188:	2380      	movs	r3, #128	@ 0x80
 800918a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800918e:	e038      	b.n	8009202 <UART_SetConfig+0x7ae>
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a71      	ldr	r2, [pc, #452]	@ (800935c <UART_SetConfig+0x908>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d130      	bne.n	80091fc <UART_SetConfig+0x7a8>
 800919a:	4b6f      	ldr	r3, [pc, #444]	@ (8009358 <UART_SetConfig+0x904>)
 800919c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800919e:	f003 0307 	and.w	r3, r3, #7
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	d826      	bhi.n	80091f4 <UART_SetConfig+0x7a0>
 80091a6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ac <UART_SetConfig+0x758>)
 80091a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ac:	080091c5 	.word	0x080091c5
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091d5 	.word	0x080091d5
 80091b8:	080091dd 	.word	0x080091dd
 80091bc:	080091e5 	.word	0x080091e5
 80091c0:	080091ed 	.word	0x080091ed
 80091c4:	2302      	movs	r3, #2
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ca:	e01a      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091cc:	2304      	movs	r3, #4
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d2:	e016      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091d4:	2308      	movs	r3, #8
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e012      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091dc:	2310      	movs	r3, #16
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e2:	e00e      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091e4:	2320      	movs	r3, #32
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ea:	e00a      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091ec:	2340      	movs	r3, #64	@ 0x40
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e006      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091f4:	2380      	movs	r3, #128	@ 0x80
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e002      	b.n	8009202 <UART_SetConfig+0x7ae>
 80091fc:	2380      	movs	r3, #128	@ 0x80
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a55      	ldr	r2, [pc, #340]	@ (800935c <UART_SetConfig+0x908>)
 8009208:	4293      	cmp	r3, r2
 800920a:	f040 80f8 	bne.w	80093fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800920e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009212:	2b20      	cmp	r3, #32
 8009214:	dc46      	bgt.n	80092a4 <UART_SetConfig+0x850>
 8009216:	2b02      	cmp	r3, #2
 8009218:	db75      	blt.n	8009306 <UART_SetConfig+0x8b2>
 800921a:	3b02      	subs	r3, #2
 800921c:	2b1e      	cmp	r3, #30
 800921e:	d872      	bhi.n	8009306 <UART_SetConfig+0x8b2>
 8009220:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <UART_SetConfig+0x7d4>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	080092ab 	.word	0x080092ab
 800922c:	08009307 	.word	0x08009307
 8009230:	080092b3 	.word	0x080092b3
 8009234:	08009307 	.word	0x08009307
 8009238:	08009307 	.word	0x08009307
 800923c:	08009307 	.word	0x08009307
 8009240:	080092c3 	.word	0x080092c3
 8009244:	08009307 	.word	0x08009307
 8009248:	08009307 	.word	0x08009307
 800924c:	08009307 	.word	0x08009307
 8009250:	08009307 	.word	0x08009307
 8009254:	08009307 	.word	0x08009307
 8009258:	08009307 	.word	0x08009307
 800925c:	08009307 	.word	0x08009307
 8009260:	080092d3 	.word	0x080092d3
 8009264:	08009307 	.word	0x08009307
 8009268:	08009307 	.word	0x08009307
 800926c:	08009307 	.word	0x08009307
 8009270:	08009307 	.word	0x08009307
 8009274:	08009307 	.word	0x08009307
 8009278:	08009307 	.word	0x08009307
 800927c:	08009307 	.word	0x08009307
 8009280:	08009307 	.word	0x08009307
 8009284:	08009307 	.word	0x08009307
 8009288:	08009307 	.word	0x08009307
 800928c:	08009307 	.word	0x08009307
 8009290:	08009307 	.word	0x08009307
 8009294:	08009307 	.word	0x08009307
 8009298:	08009307 	.word	0x08009307
 800929c:	08009307 	.word	0x08009307
 80092a0:	080092f9 	.word	0x080092f9
 80092a4:	2b40      	cmp	r3, #64	@ 0x40
 80092a6:	d02a      	beq.n	80092fe <UART_SetConfig+0x8aa>
 80092a8:	e02d      	b.n	8009306 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80092aa:	f7fd fcaf 	bl	8006c0c <HAL_RCCEx_GetD3PCLK1Freq>
 80092ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092b0:	e02f      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fd fcbe 	bl	8006c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c0:	e027      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c2:	f107 0318 	add.w	r3, r7, #24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fd fe0a 	bl	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d0:	e01f      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d2:	4b21      	ldr	r3, [pc, #132]	@ (8009358 <UART_SetConfig+0x904>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092de:	4b1e      	ldr	r3, [pc, #120]	@ (8009358 <UART_SetConfig+0x904>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	08db      	lsrs	r3, r3, #3
 80092e4:	f003 0303 	and.w	r3, r3, #3
 80092e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009360 <UART_SetConfig+0x90c>)
 80092ea:	fa22 f303 	lsr.w	r3, r2, r3
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092f0:	e00f      	b.n	8009312 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009360 <UART_SetConfig+0x90c>)
 80092f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f6:	e00c      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009364 <UART_SetConfig+0x910>)
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fc:	e009      	b.n	8009312 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009304:	e005      	b.n	8009312 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 81ee 	beq.w	80096f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931e:	4a12      	ldr	r2, [pc, #72]	@ (8009368 <UART_SetConfig+0x914>)
 8009320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009324:	461a      	mov	r2, r3
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009328:	fbb3 f3f2 	udiv	r3, r3, r2
 800932c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	4613      	mov	r3, r2
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	4413      	add	r3, r2
 8009338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933a:	429a      	cmp	r2, r3
 800933c:	d305      	bcc.n	800934a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009346:	429a      	cmp	r2, r3
 8009348:	d910      	bls.n	800936c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009350:	e1d1      	b.n	80096f6 <UART_SetConfig+0xca2>
 8009352:	bf00      	nop
 8009354:	40011c00 	.word	0x40011c00
 8009358:	58024400 	.word	0x58024400
 800935c:	58000c00 	.word	0x58000c00
 8009360:	03d09000 	.word	0x03d09000
 8009364:	003d0900 	.word	0x003d0900
 8009368:	0800a328 	.word	0x0800a328
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800936c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800936e:	2200      	movs	r2, #0
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	60fa      	str	r2, [r7, #12]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009378:	4ac0      	ldr	r2, [pc, #768]	@ (800967c <UART_SetConfig+0xc28>)
 800937a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800937e:	b29b      	uxth	r3, r3
 8009380:	2200      	movs	r2, #0
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800938e:	f7f6 ffbd 	bl	800030c <__aeabi_uldivmod>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4610      	mov	r0, r2
 8009398:	4619      	mov	r1, r3
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	020b      	lsls	r3, r1, #8
 80093a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093a8:	0202      	lsls	r2, r0, #8
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	6849      	ldr	r1, [r1, #4]
 80093ae:	0849      	lsrs	r1, r1, #1
 80093b0:	2000      	movs	r0, #0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4605      	mov	r5, r0
 80093b6:	eb12 0804 	adds.w	r8, r2, r4
 80093ba:	eb43 0905 	adc.w	r9, r3, r5
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	469a      	mov	sl, r3
 80093c6:	4693      	mov	fp, r2
 80093c8:	4652      	mov	r2, sl
 80093ca:	465b      	mov	r3, fp
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f6 ff9c 	bl	800030c <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4613      	mov	r3, r2
 80093da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093e2:	d308      	bcc.n	80093f6 <UART_SetConfig+0x9a2>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ea:	d204      	bcs.n	80093f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093f2:	60da      	str	r2, [r3, #12]
 80093f4:	e17f      	b.n	80096f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093fc:	e17b      	b.n	80096f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009406:	f040 80bd 	bne.w	8009584 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800940a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800940e:	2b20      	cmp	r3, #32
 8009410:	dc48      	bgt.n	80094a4 <UART_SetConfig+0xa50>
 8009412:	2b00      	cmp	r3, #0
 8009414:	db7b      	blt.n	800950e <UART_SetConfig+0xaba>
 8009416:	2b20      	cmp	r3, #32
 8009418:	d879      	bhi.n	800950e <UART_SetConfig+0xaba>
 800941a:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <UART_SetConfig+0x9cc>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	080094ab 	.word	0x080094ab
 8009424:	080094b3 	.word	0x080094b3
 8009428:	0800950f 	.word	0x0800950f
 800942c:	0800950f 	.word	0x0800950f
 8009430:	080094bb 	.word	0x080094bb
 8009434:	0800950f 	.word	0x0800950f
 8009438:	0800950f 	.word	0x0800950f
 800943c:	0800950f 	.word	0x0800950f
 8009440:	080094cb 	.word	0x080094cb
 8009444:	0800950f 	.word	0x0800950f
 8009448:	0800950f 	.word	0x0800950f
 800944c:	0800950f 	.word	0x0800950f
 8009450:	0800950f 	.word	0x0800950f
 8009454:	0800950f 	.word	0x0800950f
 8009458:	0800950f 	.word	0x0800950f
 800945c:	0800950f 	.word	0x0800950f
 8009460:	080094db 	.word	0x080094db
 8009464:	0800950f 	.word	0x0800950f
 8009468:	0800950f 	.word	0x0800950f
 800946c:	0800950f 	.word	0x0800950f
 8009470:	0800950f 	.word	0x0800950f
 8009474:	0800950f 	.word	0x0800950f
 8009478:	0800950f 	.word	0x0800950f
 800947c:	0800950f 	.word	0x0800950f
 8009480:	0800950f 	.word	0x0800950f
 8009484:	0800950f 	.word	0x0800950f
 8009488:	0800950f 	.word	0x0800950f
 800948c:	0800950f 	.word	0x0800950f
 8009490:	0800950f 	.word	0x0800950f
 8009494:	0800950f 	.word	0x0800950f
 8009498:	0800950f 	.word	0x0800950f
 800949c:	0800950f 	.word	0x0800950f
 80094a0:	08009501 	.word	0x08009501
 80094a4:	2b40      	cmp	r3, #64	@ 0x40
 80094a6:	d02e      	beq.n	8009506 <UART_SetConfig+0xab2>
 80094a8:	e031      	b.n	800950e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094aa:	f7fc f9e3 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 80094ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094b0:	e033      	b.n	800951a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094b2:	f7fc f9f5 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 80094b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094b8:	e02f      	b.n	800951a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd fbba 	bl	8006c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c8:	e027      	b.n	800951a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ca:	f107 0318 	add.w	r3, r7, #24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd fd06 	bl	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d8:	e01f      	b.n	800951a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094da:	4b69      	ldr	r3, [pc, #420]	@ (8009680 <UART_SetConfig+0xc2c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d009      	beq.n	80094fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094e6:	4b66      	ldr	r3, [pc, #408]	@ (8009680 <UART_SetConfig+0xc2c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	08db      	lsrs	r3, r3, #3
 80094ec:	f003 0303 	and.w	r3, r3, #3
 80094f0:	4a64      	ldr	r2, [pc, #400]	@ (8009684 <UART_SetConfig+0xc30>)
 80094f2:	fa22 f303 	lsr.w	r3, r2, r3
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094f8:	e00f      	b.n	800951a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80094fa:	4b62      	ldr	r3, [pc, #392]	@ (8009684 <UART_SetConfig+0xc30>)
 80094fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094fe:	e00c      	b.n	800951a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009500:	4b61      	ldr	r3, [pc, #388]	@ (8009688 <UART_SetConfig+0xc34>)
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009504:	e009      	b.n	800951a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800950a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800950c:	e005      	b.n	800951a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800951a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80ea 	beq.w	80096f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009526:	4a55      	ldr	r2, [pc, #340]	@ (800967c <UART_SetConfig+0xc28>)
 8009528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800952c:	461a      	mov	r2, r3
 800952e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009530:	fbb3 f3f2 	udiv	r3, r3, r2
 8009534:	005a      	lsls	r2, r3, #1
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	085b      	lsrs	r3, r3, #1
 800953c:	441a      	add	r2, r3
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	fbb2 f3f3 	udiv	r3, r2, r3
 8009546:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954a:	2b0f      	cmp	r3, #15
 800954c:	d916      	bls.n	800957c <UART_SetConfig+0xb28>
 800954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009554:	d212      	bcs.n	800957c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	b29b      	uxth	r3, r3
 800955a:	f023 030f 	bic.w	r3, r3, #15
 800955e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	b29b      	uxth	r3, r3
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	b29a      	uxth	r2, r3
 800956c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800956e:	4313      	orrs	r3, r2
 8009570:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	e0bc      	b.n	80096f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009582:	e0b8      	b.n	80096f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009584:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009588:	2b20      	cmp	r3, #32
 800958a:	dc4b      	bgt.n	8009624 <UART_SetConfig+0xbd0>
 800958c:	2b00      	cmp	r3, #0
 800958e:	f2c0 8087 	blt.w	80096a0 <UART_SetConfig+0xc4c>
 8009592:	2b20      	cmp	r3, #32
 8009594:	f200 8084 	bhi.w	80096a0 <UART_SetConfig+0xc4c>
 8009598:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <UART_SetConfig+0xb4c>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	0800962b 	.word	0x0800962b
 80095a4:	08009633 	.word	0x08009633
 80095a8:	080096a1 	.word	0x080096a1
 80095ac:	080096a1 	.word	0x080096a1
 80095b0:	0800963b 	.word	0x0800963b
 80095b4:	080096a1 	.word	0x080096a1
 80095b8:	080096a1 	.word	0x080096a1
 80095bc:	080096a1 	.word	0x080096a1
 80095c0:	0800964b 	.word	0x0800964b
 80095c4:	080096a1 	.word	0x080096a1
 80095c8:	080096a1 	.word	0x080096a1
 80095cc:	080096a1 	.word	0x080096a1
 80095d0:	080096a1 	.word	0x080096a1
 80095d4:	080096a1 	.word	0x080096a1
 80095d8:	080096a1 	.word	0x080096a1
 80095dc:	080096a1 	.word	0x080096a1
 80095e0:	0800965b 	.word	0x0800965b
 80095e4:	080096a1 	.word	0x080096a1
 80095e8:	080096a1 	.word	0x080096a1
 80095ec:	080096a1 	.word	0x080096a1
 80095f0:	080096a1 	.word	0x080096a1
 80095f4:	080096a1 	.word	0x080096a1
 80095f8:	080096a1 	.word	0x080096a1
 80095fc:	080096a1 	.word	0x080096a1
 8009600:	080096a1 	.word	0x080096a1
 8009604:	080096a1 	.word	0x080096a1
 8009608:	080096a1 	.word	0x080096a1
 800960c:	080096a1 	.word	0x080096a1
 8009610:	080096a1 	.word	0x080096a1
 8009614:	080096a1 	.word	0x080096a1
 8009618:	080096a1 	.word	0x080096a1
 800961c:	080096a1 	.word	0x080096a1
 8009620:	08009693 	.word	0x08009693
 8009624:	2b40      	cmp	r3, #64	@ 0x40
 8009626:	d037      	beq.n	8009698 <UART_SetConfig+0xc44>
 8009628:	e03a      	b.n	80096a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800962a:	f7fc f923 	bl	8005874 <HAL_RCC_GetPCLK1Freq>
 800962e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009630:	e03c      	b.n	80096ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009632:	f7fc f935 	bl	80058a0 <HAL_RCC_GetPCLK2Freq>
 8009636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009638:	e038      	b.n	80096ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800963e:	4618      	mov	r0, r3
 8009640:	f7fd fafa 	bl	8006c38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009648:	e030      	b.n	80096ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800964a:	f107 0318 	add.w	r3, r7, #24
 800964e:	4618      	mov	r0, r3
 8009650:	f7fd fc46 	bl	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009658:	e028      	b.n	80096ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800965a:	4b09      	ldr	r3, [pc, #36]	@ (8009680 <UART_SetConfig+0xc2c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	d012      	beq.n	800968c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009666:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <UART_SetConfig+0xc2c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	08db      	lsrs	r3, r3, #3
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	4a04      	ldr	r2, [pc, #16]	@ (8009684 <UART_SetConfig+0xc30>)
 8009672:	fa22 f303 	lsr.w	r3, r2, r3
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009678:	e018      	b.n	80096ac <UART_SetConfig+0xc58>
 800967a:	bf00      	nop
 800967c:	0800a328 	.word	0x0800a328
 8009680:	58024400 	.word	0x58024400
 8009684:	03d09000 	.word	0x03d09000
 8009688:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800968c:	4b24      	ldr	r3, [pc, #144]	@ (8009720 <UART_SetConfig+0xccc>)
 800968e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009690:	e00c      	b.n	80096ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009692:	4b24      	ldr	r3, [pc, #144]	@ (8009724 <UART_SetConfig+0xcd0>)
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009696:	e009      	b.n	80096ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800969c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800969e:	e005      	b.n	80096ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096aa:	bf00      	nop
    }

    if (pclk != 0U)
 80096ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d021      	beq.n	80096f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009728 <UART_SetConfig+0xcd4>)
 80096b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096bc:	461a      	mov	r2, r3
 80096be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	085b      	lsrs	r3, r3, #1
 80096ca:	441a      	add	r2, r3
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	2b0f      	cmp	r3, #15
 80096da:	d909      	bls.n	80096f0 <UART_SetConfig+0xc9c>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e2:	d205      	bcs.n	80096f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60da      	str	r2, [r3, #12]
 80096ee:	e002      	b.n	80096f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2201      	movs	r2, #1
 8009702:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2200      	movs	r2, #0
 800970a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2200      	movs	r2, #0
 8009710:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009712:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009716:	4618      	mov	r0, r3
 8009718:	3748      	adds	r7, #72	@ 0x48
 800971a:	46bd      	mov	sp, r7
 800971c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009720:	03d09000 	.word	0x03d09000
 8009724:	003d0900 	.word	0x003d0900
 8009728:	0800a328 	.word	0x0800a328

0800972c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00a      	beq.n	8009756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	430a      	orrs	r2, r1
 80097dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	f003 0320 	and.w	r3, r3, #32
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01a      	beq.n	8009842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800982a:	d10a      	bne.n	8009842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00a      	beq.n	8009864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	605a      	str	r2, [r3, #4]
  }
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b098      	sub	sp, #96	@ 0x60
 8009874:	af02      	add	r7, sp, #8
 8009876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009880:	f7f8 f9fc 	bl	8001c7c <HAL_GetTick>
 8009884:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b08      	cmp	r3, #8
 8009892:	d12f      	bne.n	80098f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009894:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800989c:	2200      	movs	r2, #0
 800989e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f88e 	bl	80099c4 <UART_WaitOnFlagUntilTimeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d022      	beq.n	80098f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e6      	bne.n	80098ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e063      	b.n	80099bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d149      	bne.n	8009996 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009902:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800990a:	2200      	movs	r2, #0
 800990c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f857 	bl	80099c4 <UART_WaitOnFlagUntilTimeout>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d03c      	beq.n	8009996 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	623b      	str	r3, [r7, #32]
   return(result);
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800993a:	633b      	str	r3, [r7, #48]	@ 0x30
 800993c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e6      	bne.n	800991c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3308      	adds	r3, #8
 8009954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	e853 3f00 	ldrex	r3, [r3]
 800995c:	60fb      	str	r3, [r7, #12]
   return(result);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f023 0301 	bic.w	r3, r3, #1
 8009964:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800996e:	61fa      	str	r2, [r7, #28]
 8009970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	69b9      	ldr	r1, [r7, #24]
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	617b      	str	r3, [r7, #20]
   return(result);
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e5      	bne.n	800994e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e012      	b.n	80099bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2220      	movs	r2, #32
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3758      	adds	r7, #88	@ 0x58
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	4613      	mov	r3, r2
 80099d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099d4:	e04f      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d04b      	beq.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099de:	f7f8 f94d 	bl	8001c7c <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d302      	bcc.n	80099f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e04e      	b.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d037      	beq.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b80      	cmp	r3, #128	@ 0x80
 8009a0a:	d034      	beq.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d031      	beq.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d110      	bne.n	8009a42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2208      	movs	r2, #8
 8009a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f000 f921 	bl	8009c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2208      	movs	r2, #8
 8009a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e029      	b.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a50:	d111      	bne.n	8009a76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 f907 	bl	8009c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e00f      	b.n	8009a96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69da      	ldr	r2, [r3, #28]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	bf0c      	ite	eq
 8009a86:	2301      	moveq	r3, #1
 8009a88:	2300      	movne	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d0a0      	beq.n	80099d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b096      	sub	sp, #88	@ 0x58
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	88fa      	ldrh	r2, [r7, #6]
 8009ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2222      	movs	r2, #34	@ 0x22
 8009ac8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d02d      	beq.n	8009b32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009adc:	4a40      	ldr	r2, [pc, #256]	@ (8009be0 <UART_Start_Receive_DMA+0x140>)
 8009ade:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8009be4 <UART_Start_Receive_DMA+0x144>)
 8009ae8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af0:	4a3d      	ldr	r2, [pc, #244]	@ (8009be8 <UART_Start_Receive_DMA+0x148>)
 8009af2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009afa:	2200      	movs	r2, #0
 8009afc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3324      	adds	r3, #36	@ 0x24
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b10:	461a      	mov	r2, r3
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	f7f8 ffc8 	bl	8002aa8 <HAL_DMA_Start_IT>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d009      	beq.n	8009b32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2210      	movs	r2, #16
 8009b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e051      	b.n	8009bd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d018      	beq.n	8009b6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b42:	e853 3f00 	ldrex	r3, [r3]
 8009b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b5a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e6      	bne.n	8009b3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3308      	adds	r3, #8
 8009b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b76:	e853 3f00 	ldrex	r3, [r3]
 8009b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	3308      	adds	r3, #8
 8009b8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b8c:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e5      	bne.n	8009b6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	613b      	str	r3, [r7, #16]
   return(result);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bc0:	623a      	str	r2, [r7, #32]
 8009bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	69f9      	ldr	r1, [r7, #28]
 8009bc6:	6a3a      	ldr	r2, [r7, #32]
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e5      	bne.n	8009ba0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3758      	adds	r7, #88	@ 0x58
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	08009def 	.word	0x08009def
 8009be4:	08009f17 	.word	0x08009f17
 8009be8:	08009f55 	.word	0x08009f55

08009bec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b08f      	sub	sp, #60	@ 0x3c
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e6      	bne.n	8009bf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	e853 3f00 	ldrex	r3, [r3]
 8009c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3308      	adds	r3, #8
 8009c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c46:	61ba      	str	r2, [r7, #24]
 8009c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4a:	6979      	ldr	r1, [r7, #20]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	613b      	str	r3, [r7, #16]
   return(result);
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e5      	bne.n	8009c26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009c62:	bf00      	nop
 8009c64:	373c      	adds	r7, #60	@ 0x3c
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
	...

08009c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b095      	sub	sp, #84	@ 0x54
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c96:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e6      	bne.n	8009c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3308      	adds	r3, #8
 8009cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8009d38 <UART_EndRxTransfer+0xc8>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cd2:	e841 2300 	strex	r3, r2, [r1]
 8009cd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e5      	bne.n	8009caa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d118      	bne.n	8009d18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	e853 3f00 	ldrex	r3, [r3]
 8009cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f023 0310 	bic.w	r3, r3, #16
 8009cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d08:	6979      	ldr	r1, [r7, #20]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	e841 2300 	strex	r3, r2, [r1]
 8009d10:	613b      	str	r3, [r7, #16]
   return(result);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1e6      	bne.n	8009ce6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d2c:	bf00      	nop
 8009d2e:	3754      	adds	r7, #84	@ 0x54
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	effffffe 	.word	0xeffffffe

08009d3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b090      	sub	sp, #64	@ 0x40
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d52:	d037      	beq.n	8009dc4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d56:	2200      	movs	r2, #0
 8009d58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e5      	bne.n	8009d5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	69b9      	ldr	r1, [r7, #24]
 8009db4:	69fa      	ldr	r2, [r7, #28]
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	617b      	str	r3, [r7, #20]
   return(result);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e6      	bne.n	8009d90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dc2:	e002      	b.n	8009dca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009dc4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009dc6:	f7f7 fb33 	bl	8001430 <HAL_UART_TxCpltCallback>
}
 8009dca:	bf00      	nop
 8009dcc:	3740      	adds	r7, #64	@ 0x40
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	f7fe fd67 	bl	80088b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009de6:	bf00      	nop
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b09c      	sub	sp, #112	@ 0x70
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e04:	d071      	beq.n	8009eea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e16:	e853 3f00 	ldrex	r3, [r3]
 8009e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e2e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e34:	e841 2300 	strex	r3, r2, [r1]
 8009e38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1e6      	bne.n	8009e0e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3308      	adds	r3, #8
 8009e46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e52:	f023 0301 	bic.w	r3, r3, #1
 8009e56:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e60:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e68:	e841 2300 	strex	r3, r2, [r1]
 8009e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e5      	bne.n	8009e40 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3308      	adds	r3, #8
 8009e7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7e:	e853 3f00 	ldrex	r3, [r3]
 8009e82:	623b      	str	r3, [r7, #32]
   return(result);
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e94:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9c:	e841 2300 	strex	r3, r2, [r1]
 8009ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1e5      	bne.n	8009e74 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eaa:	2220      	movs	r2, #32
 8009eac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d118      	bne.n	8009eea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f023 0310 	bic.w	r3, r3, #16
 8009ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ed6:	61fb      	str	r3, [r7, #28]
 8009ed8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	69b9      	ldr	r1, [r7, #24]
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e6      	bne.n	8009eb8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eec:	2200      	movs	r2, #0
 8009eee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d107      	bne.n	8009f08 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009efa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009efe:	4619      	mov	r1, r3
 8009f00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f02:	f7f7 fab5 	bl	8001470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f06:	e002      	b.n	8009f0e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009f08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f0a:	f7fe fcdd 	bl	80088c8 <HAL_UART_RxCpltCallback>
}
 8009f0e:	bf00      	nop
 8009f10:	3770      	adds	r7, #112	@ 0x70
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2201      	movs	r2, #1
 8009f28:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d109      	bne.n	8009f46 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7f7 fa96 	bl	8001470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f44:	e002      	b.n	8009f4c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7fe fcc8 	bl	80088dc <HAL_UART_RxHalfCpltCallback>
}
 8009f4c:	bf00      	nop
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f68:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f7c:	2b80      	cmp	r3, #128	@ 0x80
 8009f7e:	d109      	bne.n	8009f94 <UART_DMAError+0x40>
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	2b21      	cmp	r3, #33	@ 0x21
 8009f84:	d106      	bne.n	8009f94 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009f8e:	6978      	ldr	r0, [r7, #20]
 8009f90:	f7ff fe2c 	bl	8009bec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f9e:	2b40      	cmp	r3, #64	@ 0x40
 8009fa0:	d109      	bne.n	8009fb6 <UART_DMAError+0x62>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b22      	cmp	r3, #34	@ 0x22
 8009fa6:	d106      	bne.n	8009fb6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009fb0:	6978      	ldr	r0, [r7, #20]
 8009fb2:	f7ff fe5d 	bl	8009c70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fbc:	f043 0210 	orr.w	r2, r3, #16
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fc6:	6978      	ldr	r0, [r7, #20]
 8009fc8:	f7fe fc92 	bl	80088f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fcc:	bf00      	nop
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_UARTEx_DisableFifoMode+0x16>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e027      	b.n	800a03a <HAL_UARTEx_DisableFifoMode+0x66>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	@ 0x24
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b084      	sub	sp, #16
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
 800a04e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e02d      	b.n	800a0ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2224      	movs	r2, #36	@ 0x24
 800a06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 0201 	bic.w	r2, r2, #1
 800a084:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f8a4 	bl	800a1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e02d      	b.n	800a136 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2224      	movs	r2, #36	@ 0x24
 800a0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f866 	bl	800a1e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b08c      	sub	sp, #48	@ 0x30
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	4613      	mov	r3, r2
 800a14a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a152:	2b20      	cmp	r3, #32
 800a154:	d142      	bne.n	800a1dc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e03b      	b.n	800a1de <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a172:	88fb      	ldrh	r3, [r7, #6]
 800a174:	461a      	mov	r2, r3
 800a176:	68b9      	ldr	r1, [r7, #8]
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7ff fc91 	bl	8009aa0 <UART_Start_Receive_DMA>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a184:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d124      	bne.n	800a1d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a190:	2b01      	cmp	r3, #1
 800a192:	d11d      	bne.n	800a1d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2210      	movs	r2, #16
 800a19a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f043 0310 	orr.w	r3, r3, #16
 800a1b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1bc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6a39      	ldr	r1, [r7, #32]
 800a1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e6      	bne.n	800a19c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a1ce:	e002      	b.n	800a1d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1da:	e000      	b.n	800a1de <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a1dc:	2302      	movs	r3, #2
  }
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3730      	adds	r7, #48	@ 0x30
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d108      	bne.n	800a20a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a208:	e031      	b.n	800a26e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a20a:	2310      	movs	r3, #16
 800a20c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a20e:	2310      	movs	r3, #16
 800a210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	0e5b      	lsrs	r3, r3, #25
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	f003 0307 	and.w	r3, r3, #7
 800a220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	0f5b      	lsrs	r3, r3, #29
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	7b3a      	ldrb	r2, [r7, #12]
 800a236:	4911      	ldr	r1, [pc, #68]	@ (800a27c <UARTEx_SetNbDataToProcess+0x94>)
 800a238:	5c8a      	ldrb	r2, [r1, r2]
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a23e:	7b3a      	ldrb	r2, [r7, #12]
 800a240:	490f      	ldr	r1, [pc, #60]	@ (800a280 <UARTEx_SetNbDataToProcess+0x98>)
 800a242:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a244:	fb93 f3f2 	sdiv	r3, r3, r2
 800a248:	b29a      	uxth	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	7b7a      	ldrb	r2, [r7, #13]
 800a254:	4909      	ldr	r1, [pc, #36]	@ (800a27c <UARTEx_SetNbDataToProcess+0x94>)
 800a256:	5c8a      	ldrb	r2, [r1, r2]
 800a258:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a25c:	7b7a      	ldrb	r2, [r7, #13]
 800a25e:	4908      	ldr	r1, [pc, #32]	@ (800a280 <UARTEx_SetNbDataToProcess+0x98>)
 800a260:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a262:	fb93 f3f2 	sdiv	r3, r3, r2
 800a266:	b29a      	uxth	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	0800a340 	.word	0x0800a340
 800a280:	0800a348 	.word	0x0800a348

0800a284 <memset>:
 800a284:	4402      	add	r2, r0
 800a286:	4603      	mov	r3, r0
 800a288:	4293      	cmp	r3, r2
 800a28a:	d100      	bne.n	800a28e <memset+0xa>
 800a28c:	4770      	bx	lr
 800a28e:	f803 1b01 	strb.w	r1, [r3], #1
 800a292:	e7f9      	b.n	800a288 <memset+0x4>

0800a294 <__libc_init_array>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	4d0d      	ldr	r5, [pc, #52]	@ (800a2cc <__libc_init_array+0x38>)
 800a298:	4c0d      	ldr	r4, [pc, #52]	@ (800a2d0 <__libc_init_array+0x3c>)
 800a29a:	1b64      	subs	r4, r4, r5
 800a29c:	10a4      	asrs	r4, r4, #2
 800a29e:	2600      	movs	r6, #0
 800a2a0:	42a6      	cmp	r6, r4
 800a2a2:	d109      	bne.n	800a2b8 <__libc_init_array+0x24>
 800a2a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a2d4 <__libc_init_array+0x40>)
 800a2a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a2d8 <__libc_init_array+0x44>)
 800a2a8:	f000 f826 	bl	800a2f8 <_init>
 800a2ac:	1b64      	subs	r4, r4, r5
 800a2ae:	10a4      	asrs	r4, r4, #2
 800a2b0:	2600      	movs	r6, #0
 800a2b2:	42a6      	cmp	r6, r4
 800a2b4:	d105      	bne.n	800a2c2 <__libc_init_array+0x2e>
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}
 800a2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2bc:	4798      	blx	r3
 800a2be:	3601      	adds	r6, #1
 800a2c0:	e7ee      	b.n	800a2a0 <__libc_init_array+0xc>
 800a2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2c6:	4798      	blx	r3
 800a2c8:	3601      	adds	r6, #1
 800a2ca:	e7f2      	b.n	800a2b2 <__libc_init_array+0x1e>
 800a2cc:	0800a358 	.word	0x0800a358
 800a2d0:	0800a358 	.word	0x0800a358
 800a2d4:	0800a358 	.word	0x0800a358
 800a2d8:	0800a360 	.word	0x0800a360

0800a2dc <memcpy>:
 800a2dc:	440a      	add	r2, r1
 800a2de:	4291      	cmp	r1, r2
 800a2e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2e4:	d100      	bne.n	800a2e8 <memcpy+0xc>
 800a2e6:	4770      	bx	lr
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2f2:	4291      	cmp	r1, r2
 800a2f4:	d1f9      	bne.n	800a2ea <memcpy+0xe>
 800a2f6:	bd10      	pop	{r4, pc}

0800a2f8 <_init>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	bf00      	nop
 800a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fe:	bc08      	pop	{r3}
 800a300:	469e      	mov	lr, r3
 800a302:	4770      	bx	lr

0800a304 <_fini>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr
