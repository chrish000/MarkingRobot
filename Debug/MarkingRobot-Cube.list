
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8bc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800ab88  0800ab88  0000bb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800abd0  0800abd0  0000bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800abd8  0800abd8  0000bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800abdc  0800abdc  0000bbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800abe0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e8  24000014  0800abf4  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002fc  0800abf4  0000c2fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016a37  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a64  00000000  00000000  00022a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a0  00000000  00000000  000254e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dca  00000000  00000000  00026680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000034df  00000000  00000000  0002744a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019fc3  00000000  00000000  0002a929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cd42  00000000  00000000  000448ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  0019162e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004aa4  00000000  00000000  001916b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  00196158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800ab70 	.word	0x0800ab70

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800ab70 	.word	0x0800ab70

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000602:	f000 fba1 	bl	8000d48 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000606:	f000 fe95 	bl	8001334 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800060a:	f000 f86b 	bl	80006e4 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800060e:	f000 fa4f 	bl	8000ab0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000612:	f000 fa25 	bl	8000a60 <MX_DMA_Init>
	MX_UART8_Init();
 8000616:	f000 f98b 	bl	8000930 <MX_UART8_Init>
	MX_USART2_UART_Init();
 800061a:	f000 f9d5 	bl	80009c8 <MX_USART2_UART_Init>
	MX_CRC_Init();
 800061e:	f000 f8d1 	bl	80007c4 <MX_CRC_Init>
	MX_TIM2_Init();
 8000622:	f000 f90f 	bl	8000844 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	/* CLK Konfiguration */
	HAL_TIM_Base_Start_IT(&htim2);
 8000626:	4826      	ldr	r0, [pc, #152]	@ (80006c0 <main+0xc4>)
 8000628:	f006 ff9c 	bl	8007564 <HAL_TIM_Base_Start_IT>

	/* GPIO Konfiguration */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	@ 0x40
 8000630:	4824      	ldr	r0, [pc, #144]	@ (80006c4 <main+0xc8>)
 8000632:	f004 f98f 	bl	8004954 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	4823      	ldr	r0, [pc, #140]	@ (80006c8 <main+0xcc>)
 800063c:	f004 f98a 	bl	8004954 <HAL_GPIO_WritePin>

	/* UART Konfiguration */
	HAL_HalfDuplex_EnableReceiver(&huart2);
 8000640:	4822      	ldr	r0, [pc, #136]	@ (80006cc <main+0xd0>)
 8000642:	f008 fd9f 	bl	8009184 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000646:	2220      	movs	r2, #32
 8000648:	4921      	ldr	r1, [pc, #132]	@ (80006d0 <main+0xd4>)
 800064a:	4820      	ldr	r0, [pc, #128]	@ (80006cc <main+0xd0>)
 800064c:	f00a f9c2 	bl	800a9d4 <HAL_UARTEx_ReceiveToIdle_DMA>

	//########################### Uart X (Uart2)
	uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
 8000650:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <main+0xd8>)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <main+0xdc>)
 8000660:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <main+0xe0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d007      	beq.n	800067c <main+0x80>
			//TODO gebe leeren Batteriestand auf Display aus
			//TODO Code in Interrupt stecken
			if (Move_To_Pos(HomePos))
 800066c:	481c      	ldr	r0, [pc, #112]	@ (80006e0 <main+0xe4>)
 800066e:	f000 fba7 	bl	8000dc0 <Move_To_Pos>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x80>
				Error_Handler();
 8000678:	f000 fb92 	bl	8000da0 <Error_Handler>
		}
		//*********************************************************************************************
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 800067c:	4813      	ldr	r0, [pc, #76]	@ (80006cc <main+0xd0>)
 800067e:	f008 fd2d 	bl	80090dc <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, write, 8);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2208      	movs	r2, #8
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	@ (80006cc <main+0xd0>)
 800068c:	f008 f8c4 	bl	8008818 <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 8000690:	480e      	ldr	r0, [pc, #56]	@ (80006cc <main+0xd0>)
 8000692:	f008 fd77 	bl	8009184 <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069a:	f000 fedd 	bl	8001458 <HAL_Delay>
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <main+0xd0>)
 80006a0:	f008 fd1c 	bl	80090dc <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, read, 4);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2204      	movs	r2, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4808      	ldr	r0, [pc, #32]	@ (80006cc <main+0xd0>)
 80006ac:	f008 f8b4 	bl	8008818 <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 80006b0:	4806      	ldr	r0, [pc, #24]	@ (80006cc <main+0xd0>)
 80006b2:	f008 fd67 	bl	8009184 <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 80006b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ba:	f000 fecd 	bl	8001458 <HAL_Delay>
		if (BatteryAlarm) {
 80006be:	e7d0      	b.n	8000662 <main+0x66>
 80006c0:	24000054 	.word	0x24000054
 80006c4:	58020c00 	.word	0x58020c00
 80006c8:	58021000 	.word	0x58021000
 80006cc:	24000134 	.word	0x24000134
 80006d0:	240002b8 	.word	0x240002b8
 80006d4:	0800ab88 	.word	0x0800ab88
 80006d8:	8f020005 	.word	0x8f020005
 80006dc:	240002d8 	.word	0x240002d8
 80006e0:	240002dc 	.word	0x240002dc

080006e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b09c      	sub	sp, #112	@ 0x70
 80006e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ee:	224c      	movs	r2, #76	@ 0x4c
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00a fa10 	bl	800ab18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2220      	movs	r2, #32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f00a fa0a 	bl	800ab18 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000704:	2002      	movs	r0, #2
 8000706:	f004 f973 	bl	80049f0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <SystemClock_Config+0xdc>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <SystemClock_Config+0xdc>)
 8000714:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <SystemClock_Config+0xdc>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000726:	bf00      	nop
 8000728:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <SystemClock_Config+0xdc>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000734:	d1f8      	bne.n	8000728 <SystemClock_Config+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800073a:	2301      	movs	r3, #1
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 800073e:	2340      	movs	r3, #64	@ 0x40
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000746:	2300      	movs	r3, #0
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800074a:	2304      	movs	r3, #4
 800074c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 800074e:	2322      	movs	r3, #34	@ 0x22
 8000750:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000756:	2303      	movs	r3, #3
 8000758:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075e:	230c      	movs	r3, #12
 8000760:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000762:	2300      	movs	r3, #0
 8000764:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000766:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800076a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800076c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000770:	4618      	mov	r0, r3
 8000772:	f004 f977 	bl	8004a64 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x9c>
		Error_Handler();
 800077c:	f000 fb10 	bl	8000da0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000780:	233f      	movs	r3, #63	@ 0x3f
 8000782:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800078c:	2308      	movs	r3, #8
 800078e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000790:	2340      	movs	r3, #64	@ 0x40
 8000792:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800079c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800079e:	2340      	movs	r3, #64	@ 0x40
 80007a0:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2103      	movs	r1, #3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 fd36 	bl	8005218 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xd2>
		Error_Handler();
 80007b2:	f000 faf5 	bl	8000da0 <Error_Handler>
	}
}
 80007b6:	bf00      	nop
 80007b8:	3770      	adds	r7, #112	@ 0x70
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	58024800 	.word	0x58024800

080007c4 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_CRC_Init+0x74>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d0:	4a19      	ldr	r2, [pc, #100]	@ (8000838 <MX_CRC_Init+0x74>)
 80007d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_CRC_Init+0x74>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_CRC_Init+0x78>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <MX_CRC_Init+0x7c>)
 80007ec:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_CRC_Init+0x78>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_CRC_Init+0x78>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <MX_CRC_Init+0x78>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_CRC_Init+0x78>)
 8000802:	2210      	movs	r2, #16
 8000804:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <MX_CRC_Init+0x78>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_CRC_Init+0x78>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_CRC_Init+0x78>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_CRC_Init+0x78>)
 800081a:	2201      	movs	r2, #1
 800081c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800081e:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_CRC_Init+0x78>)
 8000820:	f000 ffc6 	bl	80017b0 <HAL_CRC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_CRC_Init+0x6a>
		Error_Handler();
 800082a:	f000 fab9 	bl	8000da0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	58024400 	.word	0x58024400
 800083c:	24000030 	.word	0x24000030
 8000840:	58024c00 	.word	0x58024c00

08000844 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	@ 0x38
 8000848:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800084a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000876:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <MX_TIM2_Init+0xe8>)
 8000878:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800087c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <MX_TIM2_Init+0xe8>)
 8000880:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000884:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_TIM2_Init+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_TIM2_Init+0xe8>)
 800088e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000892:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_TIM2_Init+0xe8>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_TIM2_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008a0:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_TIM2_Init+0xe8>)
 80008a2:	f006 fe07 	bl	80074b4 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x6c>
		Error_Handler();
 80008ac:	f000 fa78 	bl	8000da0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ba:	4619      	mov	r1, r3
 80008bc:	481b      	ldr	r0, [pc, #108]	@ (800092c <MX_TIM2_Init+0xe8>)
 80008be:	f007 f953 	bl	8007b68 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x88>
		Error_Handler();
 80008c8:	f000 fa6a 	bl	8000da0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80008cc:	4817      	ldr	r0, [pc, #92]	@ (800092c <MX_TIM2_Init+0xe8>)
 80008ce:	f006 fecf 	bl	8007670 <HAL_TIM_PWM_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x98>
		Error_Handler();
 80008d8:	f000 fa62 	bl	8000da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4810      	ldr	r0, [pc, #64]	@ (800092c <MX_TIM2_Init+0xe8>)
 80008ec:	f007 fe82 	bl	80085f4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 80008f6:	f000 fa53 	bl	8000da0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fa:	2360      	movs	r3, #96	@ 0x60
 80008fc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 80008fe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000902:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_TIM2_Init+0xe8>)
 8000914:	f007 f814 	bl	8007940 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0xde>
			!= HAL_OK) {
		Error_Handler();
 800091e:	f000 fa3f 	bl	8000da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3738      	adds	r7, #56	@ 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000054 	.word	0x24000054

08000930 <MX_UART8_Init>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000936:	4a23      	ldr	r2, [pc, #140]	@ (80009c4 <MX_UART8_Init+0x94>)
 8000938:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 800093a:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_UART8_Init+0x90>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_UART8_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_UART8_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_UART8_Init+0x90>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_UART8_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK) {
 8000978:	4811      	ldr	r0, [pc, #68]	@ (80009c0 <MX_UART8_Init+0x90>)
 800097a:	f007 fef5 	bl	8008768 <HAL_HalfDuplex_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_UART8_Init+0x58>
		Error_Handler();
 8000984:	f000 fa0c 	bl	8000da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000988:	2100      	movs	r1, #0
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <MX_UART8_Init+0x90>)
 800098c:	f009 ffa6 	bl	800a8dc <HAL_UARTEx_SetTxFifoThreshold>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_UART8_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000996:	f000 fa03 	bl	8000da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 800099a:	2100      	movs	r1, #0
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <MX_UART8_Init+0x90>)
 800099e:	f009 ffdb 	bl	800a958 <HAL_UARTEx_SetRxFifoThreshold>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART8_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80009a8:	f000 f9fa 	bl	8000da0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 80009ac:	4804      	ldr	r0, [pc, #16]	@ (80009c0 <MX_UART8_Init+0x90>)
 80009ae:	f009 ff5c 	bl	800a86a <HAL_UARTEx_DisableFifoMode>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_UART8_Init+0x8c>
		Error_Handler();
 80009b8:	f000 f9f2 	bl	8000da0 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	240000a0 	.word	0x240000a0
 80009c4:	40007c00 	.word	0x40007c00

080009c8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ce:	4a23      	ldr	r2, [pc, #140]	@ (8000a5c <MX_USART2_UART_Init+0x94>)
 80009d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8000a10:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a12:	f007 fea9 	bl	8008768 <HAL_HalfDuplex_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000a1c:	f000 f9c0 	bl	8000da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000a20:	2100      	movs	r1, #0
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a24:	f009 ff5a 	bl	800a8dc <HAL_UARTEx_SetTxFifoThreshold>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000a2e:	f000 f9b7 	bl	8000da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a36:	f009 ff8f 	bl	800a958 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000a40:	f000 f9ae 	bl	8000da0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_USART2_UART_Init+0x90>)
 8000a46:	f009 ff10 	bl	800a86a <HAL_UARTEx_DisableFifoMode>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000a50:	f000 f9a6 	bl	8000da0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	24000134 	.word	0x24000134
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_DMA_Init+0x4c>)
 8000a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <MX_DMA_Init+0x4c>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <MX_DMA_Init+0x4c>)
 8000a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	200b      	movs	r0, #11
 8000a8a:	f000 fde4 	bl	8001656 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a8e:	200b      	movs	r0, #11
 8000a90:	f000 fdfb 	bl	800168a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	200c      	movs	r0, #12
 8000a9a:	f000 fddc 	bl	8001656 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a9e:	200c      	movs	r0, #12
 8000aa0:	f000 fdf3 	bl	800168a <HAL_NVIC_EnableIRQ>

}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	58024400 	.word	0x58024400

08000ab0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac6:	4b52      	ldr	r3, [pc, #328]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	4a50      	ldr	r2, [pc, #320]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	4a49      	ldr	r2, [pc, #292]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af4:	4b46      	ldr	r3, [pc, #280]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	4b43      	ldr	r3, [pc, #268]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	4a41      	ldr	r2, [pc, #260]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b12:	4b3f      	ldr	r3, [pc, #252]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	f003 0308 	and.w	r3, r3, #8
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b20:	4b3b      	ldr	r3, [pc, #236]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	4a3a      	ldr	r2, [pc, #232]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b30:	4b37      	ldr	r3, [pc, #220]	@ (8000c10 <MX_GPIO_Init+0x160>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin | Z_DIR_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210c      	movs	r1, #12
 8000b42:	4834      	ldr	r0, [pc, #208]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b44:	f003 ff06 	bl	8004954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin | X_STEP_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2118      	movs	r1, #24
 8000b4c:	4832      	ldr	r0, [pc, #200]	@ (8000c18 <MX_GPIO_Init+0x168>)
 8000b4e:	f003 ff01 	bl	8004954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4830      	ldr	r0, [pc, #192]	@ (8000c18 <MX_GPIO_Init+0x168>)
 8000b58:	f003 fefc 	bl	8004954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, HE0_PWM_Pin | LED_TESTING_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2118      	movs	r1, #24
 8000b60:	482e      	ldr	r0, [pc, #184]	@ (8000c1c <MX_GPIO_Init+0x16c>)
 8000b62:	f003 fef7 	bl	8004954 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	482a      	ldr	r0, [pc, #168]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b6c:	f003 fef2 	bl	8004954 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin | Z_DIR_Pin | Z_EN_Pin;
 8000b70:	230d      	movs	r3, #13
 8000b72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4823      	ldr	r0, [pc, #140]	@ (8000c14 <MX_GPIO_Init+0x164>)
 8000b88:	f003 fd3c 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8000b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481f      	ldr	r0, [pc, #124]	@ (8000c20 <MX_GPIO_Init+0x170>)
 8000ba4:	f003 fd2e 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin | X_MIN_Pin;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4819      	ldr	r0, [pc, #100]	@ (8000c20 <MX_GPIO_Init+0x170>)
 8000bbc:	f003 fd22 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin | X_STEP_Pin | X_EN_Pin;
 8000bc0:	2358      	movs	r3, #88	@ 0x58
 8000bc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <MX_GPIO_Init+0x168>)
 8000bd8:	f003 fd14 	bl	8004604 <HAL_GPIO_Init>

	/*Configure GPIO pins : HE0_PWM_Pin LED_TESTING_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin | LED_TESTING_Pin;
 8000bdc:	2318      	movs	r3, #24
 8000bde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <MX_GPIO_Init+0x16c>)
 8000bf4:	f003 fd06 	bl	8004604 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2028      	movs	r0, #40	@ 0x28
 8000bfe:	f000 fd2a 	bl	8001656 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c02:	2028      	movs	r0, #40	@ 0x28
 8000c04:	f000 fd41 	bl	800168a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58021000 	.word	0x58021000
 8000c18:	58020c00 	.word	0x58020c00
 8000c1c:	58020400 	.word	0x58020400
 8000c20:	58020800 	.word	0x58020800

08000c24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c34:	d102      	bne.n	8000c3c <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000c36:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	240002d8 	.word	0x240002d8

08000c4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5c:	d13d      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x8e>
		if (PWMEnabledX) {
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d038      	beq.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x8e>
			PWMCounterX++;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c74:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d307      	bcc.n	8000c96 <HAL_TIM_PeriodElapsedCallback+0x4a>
				PWMCounterX = 0;
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	3301      	adds	r3, #1
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c94:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d205      	bcs.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x66>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4813      	ldr	r0, [pc, #76]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cac:	f003 fe52 	bl	8004954 <HAL_GPIO_WritePin>
 8000cb0:	e004      	b.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cb8:	f003 fe4c 	bl	8004954 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d307      	bcc.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x8e>
				PWMEnabledX = false;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	4808      	ldr	r0, [pc, #32]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cd6:	f003 fe3d 	bl	8004954 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	240002f4 	.word	0x240002f4
 8000ce8:	240002ec 	.word	0x240002ec
 8000cec:	24000000 	.word	0x24000000
 8000cf0:	240002e8 	.word	0x240002e8
 8000cf4:	24000002 	.word	0x24000002
 8000cf8:	58020c00 	.word	0x58020c00
 8000cfc:	240002f0 	.word	0x240002f0

08000d00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {

	}
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000d20:	2220      	movs	r2, #32
 8000d22:	4906      	ldr	r1, [pc, #24]	@ (8000d3c <HAL_UARTEx_RxEventCallback+0x28>)
 8000d24:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000d26:	f009 fe55 	bl	800a9d4 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_GPIO_TogglePin(LED_TESTING_GPIO_Port, LED_TESTING_Pin);
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <HAL_UARTEx_RxEventCallback+0x30>)
 8000d2e:	f003 fe2a 	bl	8004986 <HAL_GPIO_TogglePin>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240002b8 	.word	0x240002b8
 8000d40:	24000134 	.word	0x24000134
 8000d44:	58020400 	.word	0x58020400

08000d48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000d5a:	f000 fcb1 	bl	80016c0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000d6e:	2387      	movs	r3, #135	@ 0x87
 8000d70:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d76:	2300      	movs	r3, #0
 8000d78:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fccf 	bl	8001730 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d92:	2004      	movs	r0, #4
 8000d94:	f000 fcac 	bl	80016f0 <HAL_MPU_Enable>

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000da8:	2108      	movs	r1, #8
 8000daa:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <Error_Handler+0x1c>)
 8000dac:	f003 fdeb 	bl	8004986 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000db0:	2064      	movs	r0, #100	@ 0x64
 8000db2:	f000 fb51 	bl	8001458 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000db6:	bf00      	nop
 8000db8:	e7f6      	b.n	8000da8 <Error_Handler+0x8>
 8000dba:	bf00      	nop
 8000dbc:	58020400 	.word	0x58020400

08000dc0 <Move_To_Pos>:
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, (Dir == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	PWMEnabledX = true; // Start Bewegung
}

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if(NextPosition[0] != PosX && NextPosition[1] != PosY)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <Move_To_Pos+0x38>)
 8000dd6:	edd3 7a00 	vldr	s15, [r3]
 8000dda:	eeb4 7a67 	vcmp.f32	s14, s15
 8000dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de2:	d001      	beq.n	8000de8 <Move_To_Pos+0x28>
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <Move_To_Pos+0x3c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
	{
		//TODO Logik für Bewegung zu nächstem Punkt
	}
	return true;
 8000de8:	2301      	movs	r3, #1
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	240002e0 	.word	0x240002e0
 8000dfc:	240002e4 	.word	0x240002e4

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_MspInit+0x30>)
 8000e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e0c:	4a08      	ldr	r2, [pc, #32]	@ (8000e30 <HAL_MspInit+0x30>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_MspInit+0x30>)
 8000e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	58024400 	.word	0x58024400

08000e34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_CRC_MspInit+0x3c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10e      	bne.n	8000e64 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_CRC_MspInit+0x40>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <HAL_CRC_MspInit+0x40>)
 8000e4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <HAL_CRC_MspInit+0x40>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	58024c00 	.word	0x58024c00
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e88:	d116      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e90:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <HAL_TIM_Base_MspInit+0x48>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	201c      	movs	r0, #28
 8000eae:	f000 fbd2 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb2:	201c      	movs	r0, #28
 8000eb4:	f000 fbe9 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	22b8      	movs	r2, #184	@ 0xb8
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f009 fe17 	bl	800ab18 <memset>
  if(huart->Instance==UART8)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a82      	ldr	r2, [pc, #520]	@ (80010f8 <HAL_UART_MspInit+0x234>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d14e      	bne.n	8000f92 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ef4:	f04f 0202 	mov.w	r2, #2
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fd10 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f16:	f7ff ff43 	bl	8000da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000f1a:	4b78      	ldr	r3, [pc, #480]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f20:	4a76      	ldr	r2, [pc, #472]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000f22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f2a:	4b74      	ldr	r3, [pc, #464]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f38:	4b70      	ldr	r3, [pc, #448]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000f40:	f043 0310 	orr.w	r3, r3, #16
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f48:	4b6c      	ldr	r3, [pc, #432]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4861      	ldr	r0, [pc, #388]	@ (8001100 <HAL_UART_MspInit+0x23c>)
 8000f7c:	f003 fb42 	bl	8004604 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2053      	movs	r0, #83	@ 0x53
 8000f86:	f000 fb66 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000f8a:	2053      	movs	r0, #83	@ 0x53
 8000f8c:	f000 fb7d 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f90:	e0ae      	b.n	80010f0 <HAL_UART_MspInit+0x22c>
  else if(huart->Instance==USART2)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a5b      	ldr	r2, [pc, #364]	@ (8001104 <HAL_UART_MspInit+0x240>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 80a9 	bne.w	80010f0 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f9e:	f04f 0202 	mov.w	r2, #2
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fcbb 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000fc0:	f7ff feee 	bl	8000da0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000fc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fca:	4a4c      	ldr	r2, [pc, #304]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fd4:	4b49      	ldr	r3, [pc, #292]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4b46      	ldr	r3, [pc, #280]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a44      	ldr	r2, [pc, #272]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <HAL_UART_MspInit+0x238>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8001000:	2320      	movs	r3, #32
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800100c:	2301      	movs	r3, #1
 800100e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001018:	2307      	movs	r3, #7
 800101a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001022:	4619      	mov	r1, r3
 8001024:	4838      	ldr	r0, [pc, #224]	@ (8001108 <HAL_UART_MspInit+0x244>)
 8001026:	f003 faed 	bl	8004604 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 800102a:	4b38      	ldr	r3, [pc, #224]	@ (800110c <HAL_UART_MspInit+0x248>)
 800102c:	4a38      	ldr	r2, [pc, #224]	@ (8001110 <HAL_UART_MspInit+0x24c>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001030:	4b36      	ldr	r3, [pc, #216]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001032:	222c      	movs	r2, #44	@ 0x2c
 8001034:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001036:	4b35      	ldr	r3, [pc, #212]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001038:	2240      	movs	r2, #64	@ 0x40
 800103a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <HAL_UART_MspInit+0x248>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b32      	ldr	r3, [pc, #200]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001048:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104a:	4b30      	ldr	r3, [pc, #192]	@ (800110c <HAL_UART_MspInit+0x248>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001050:	4b2e      	ldr	r3, [pc, #184]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001056:	4b2d      	ldr	r3, [pc, #180]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <HAL_UART_MspInit+0x248>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001062:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001064:	2200      	movs	r2, #0
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001068:	4828      	ldr	r0, [pc, #160]	@ (800110c <HAL_UART_MspInit+0x248>)
 800106a:	f000 fc93 	bl	8001994 <HAL_DMA_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8001074:	f7ff fe94 	bl	8000da0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a24      	ldr	r2, [pc, #144]	@ (800110c <HAL_UART_MspInit+0x248>)
 800107c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800107e:	4a23      	ldr	r2, [pc, #140]	@ (800110c <HAL_UART_MspInit+0x248>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001084:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_UART_MspInit+0x250>)
 8001086:	4a24      	ldr	r2, [pc, #144]	@ (8001118 <HAL_UART_MspInit+0x254>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_UART_MspInit+0x250>)
 800108c:	222b      	movs	r2, #43	@ 0x2b
 800108e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <HAL_UART_MspInit+0x250>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_UART_MspInit+0x250>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <HAL_UART_MspInit+0x250>)
 800109e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010c4:	f000 fc66 	bl	8001994 <HAL_DMA_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_UART_MspInit+0x20e>
      Error_Handler();
 80010ce:	f7ff fe67 	bl	8000da0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80010da:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_UART_MspInit+0x250>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	2026      	movs	r0, #38	@ 0x26
 80010e6:	f000 fab6 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ea:	2026      	movs	r0, #38	@ 0x26
 80010ec:	f000 facd 	bl	800168a <HAL_NVIC_EnableIRQ>
}
 80010f0:	bf00      	nop
 80010f2:	37e8      	adds	r7, #232	@ 0xe8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40007c00 	.word	0x40007c00
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021000 	.word	0x58021000
 8001104:	40004400 	.word	0x40004400
 8001108:	58020c00 	.word	0x58020c00
 800110c:	240001c8 	.word	0x240001c8
 8001110:	40020010 	.word	0x40020010
 8001114:	24000240 	.word	0x24000240
 8001118:	40020028 	.word	0x40020028

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f951 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <DMA1_Stream0_IRQHandler+0x10>)
 8001182:	f001 ff2d 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240001c8 	.word	0x240001c8

08001190 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001196:	f001 ff23 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000240 	.word	0x24000240

080011a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <TIM2_IRQHandler+0x10>)
 80011aa:	f006 fac2 	bl	8007732 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000054 	.word	0x24000054

080011b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <USART2_IRQHandler+0x10>)
 80011be:	f007 fbab 	bl	8008918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24000134 	.word	0x24000134

080011cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 80011d0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80011d4:	f003 fbf1 	bl	80049ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <UART8_IRQHandler+0x10>)
 80011e2:	f007 fb99 	bl	8008918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	240000a0 	.word	0x240000a0

080011f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <SystemInit+0xd0>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011fa:	4a31      	ldr	r2, [pc, #196]	@ (80012c0 <SystemInit+0xd0>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001204:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <SystemInit+0xd4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	2b06      	cmp	r3, #6
 800120e:	d807      	bhi.n	8001220 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001210:	4b2c      	ldr	r3, [pc, #176]	@ (80012c4 <SystemInit+0xd4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 030f 	bic.w	r3, r3, #15
 8001218:	4a2a      	ldr	r2, [pc, #168]	@ (80012c4 <SystemInit+0xd4>)
 800121a:	f043 0307 	orr.w	r3, r3, #7
 800121e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <SystemInit+0xd8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <SystemInit+0xd8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800122c:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <SystemInit+0xd8>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001232:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <SystemInit+0xd8>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4924      	ldr	r1, [pc, #144]	@ (80012c8 <SystemInit+0xd8>)
 8001238:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <SystemInit+0xdc>)
 800123a:	4013      	ands	r3, r2
 800123c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800123e:	4b21      	ldr	r3, [pc, #132]	@ (80012c4 <SystemInit+0xd4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800124a:	4b1e      	ldr	r3, [pc, #120]	@ (80012c4 <SystemInit+0xd4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 030f 	bic.w	r3, r3, #15
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <SystemInit+0xd4>)
 8001254:	f043 0307 	orr.w	r3, r3, #7
 8001258:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <SystemInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <SystemInit+0xd8>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <SystemInit+0xd8>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <SystemInit+0xd8>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <SystemInit+0xe0>)
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <SystemInit+0xd8>)
 8001274:	4a17      	ldr	r2, [pc, #92]	@ (80012d4 <SystemInit+0xe4>)
 8001276:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <SystemInit+0xd8>)
 800127a:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <SystemInit+0xe8>)
 800127c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <SystemInit+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001284:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <SystemInit+0xd8>)
 8001286:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <SystemInit+0xe8>)
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <SystemInit+0xd8>)
 800128c:	2200      	movs	r2, #0
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <SystemInit+0xd8>)
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <SystemInit+0xe8>)
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001296:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <SystemInit+0xd8>)
 8001298:	2200      	movs	r2, #0
 800129a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <SystemInit+0xd8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <SystemInit+0xd8>)
 80012a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <SystemInit+0xd8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <SystemInit+0xec>)
 80012b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000ed00 	.word	0xe000ed00
 80012c4:	52002000 	.word	0x52002000
 80012c8:	58024400 	.word	0x58024400
 80012cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80012d0:	02020200 	.word	0x02020200
 80012d4:	01ff0000 	.word	0x01ff0000
 80012d8:	01010280 	.word	0x01010280
 80012dc:	52004000 	.word	0x52004000

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001318 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e4:	f7ff ff84 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	@ (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130e:	f009 fc0b 	bl	800ab28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff f973 	bl	80005fc <main>
  bx  lr
 8001316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001318:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800131c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001320:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001324:	0800abe0 	.word	0x0800abe0
  ldr r2, =_sbss
 8001328:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800132c:	240002fc 	.word	0x240002fc

08001330 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC3_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f980 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001340:	f004 f920 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8001344:	4602      	mov	r2, r0
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_Init+0x68>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	4913      	ldr	r1, [pc, #76]	@ (80013a0 <HAL_Init+0x6c>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <HAL_Init+0x68>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <HAL_Init+0x6c>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_Init+0x70>)
 8001376:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001378:	4a0b      	ldr	r2, [pc, #44]	@ (80013a8 <HAL_Init+0x74>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f814 	bl	80013ac <HAL_InitTick>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e002      	b.n	8001394 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800138e:	f7ff fd37 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58024400 	.word	0x58024400
 80013a0:	0800ab90 	.word	0x0800ab90
 80013a4:	24000008 	.word	0x24000008
 80013a8:	24000004 	.word	0x24000004

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_InitTick+0x60>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e021      	b.n	8001404 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <HAL_InitTick+0x64>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <HAL_InitTick+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f965 	bl	80016a6 <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 f92f 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <HAL_InitTick+0x68>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	24000010 	.word	0x24000010
 8001410:	24000004 	.word	0x24000004
 8001414:	2400000c 	.word	0x2400000c

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	24000010 	.word	0x24000010
 800143c:	240002f8 	.word	0x240002f8

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	240002f8 	.word	0x240002f8

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	24000010 	.word	0x24000010

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x40>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x40>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	05fa0000 	.word	0x05fa0000

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	@ (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	@ (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff8e 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff29 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff40 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff90 	bl	8001594 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5f 	bl	8001540 <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff33 	bl	8001504 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa4 	bl	80015fc <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016c4:	f3bf 8f5f 	dmb	sy
}
 80016c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_MPU_Disable+0x28>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_MPU_Disable+0x28>)
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016d6:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_MPU_Disable+0x2c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	e000ed90 	.word	0xe000ed90

080016f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_MPU_Enable+0x38>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_MPU_Enable+0x3c>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_MPU_Enable+0x3c>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800170e:	f3bf 8f4f 	dsb	sy
}
 8001712:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001714:	f3bf 8f6f 	isb	sy
}
 8001718:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed90 	.word	0xe000ed90
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	785a      	ldrb	r2, [r3, #1]
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 800173e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800174c:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7adb      	ldrb	r3, [r3, #11]
 800175e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a9b      	ldrb	r3, [r3, #10]
 8001766:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001768:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7b5b      	ldrb	r3, [r3, #13]
 800176e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b9b      	ldrb	r3, [r3, #14]
 8001776:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7bdb      	ldrb	r3, [r3, #15]
 800177e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7a5b      	ldrb	r3, [r3, #9]
 8001786:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001790:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800179a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800179c:	6113      	str	r3, [r2, #16]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed90 	.word	0xe000ed90

080017b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e054      	b.n	800186c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7f5b      	ldrb	r3, [r3, #29]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fb2e 	bl	8000e34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_CRC_Init+0xc4>)
 80017ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0218 	bic.w	r2, r2, #24
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	e00c      	b.n	800181a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	461a      	mov	r2, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f834 	bl	8001878 <HAL_CRCEx_Polynomial_Set>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e028      	b.n	800186c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	795b      	ldrb	r3, [r3, #5]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f04f 32ff 	mov.w	r2, #4294967295
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	e004      	b.n	8001838 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6912      	ldr	r2, [r2, #16]
 8001836:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	04c11db7 	.word	0x04c11db7

08001878 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001888:	231f      	movs	r3, #31
 800188a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	75fb      	strb	r3, [r7, #23]
 800189a:	e063      	b.n	8001964 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800189c:	bf00      	nop
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1e5a      	subs	r2, r3, #1
 80018a2:	613a      	str	r2, [r7, #16]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <HAL_CRCEx_Polynomial_Set+0x44>
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b18      	cmp	r3, #24
 80018c0:	d846      	bhi.n	8001950 <HAL_CRCEx_Polynomial_Set+0xd8>
 80018c2:	a201      	add	r2, pc, #4	@ (adr r2, 80018c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80018c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c8:	08001957 	.word	0x08001957
 80018cc:	08001951 	.word	0x08001951
 80018d0:	08001951 	.word	0x08001951
 80018d4:	08001951 	.word	0x08001951
 80018d8:	08001951 	.word	0x08001951
 80018dc:	08001951 	.word	0x08001951
 80018e0:	08001951 	.word	0x08001951
 80018e4:	08001951 	.word	0x08001951
 80018e8:	08001945 	.word	0x08001945
 80018ec:	08001951 	.word	0x08001951
 80018f0:	08001951 	.word	0x08001951
 80018f4:	08001951 	.word	0x08001951
 80018f8:	08001951 	.word	0x08001951
 80018fc:	08001951 	.word	0x08001951
 8001900:	08001951 	.word	0x08001951
 8001904:	08001951 	.word	0x08001951
 8001908:	08001939 	.word	0x08001939
 800190c:	08001951 	.word	0x08001951
 8001910:	08001951 	.word	0x08001951
 8001914:	08001951 	.word	0x08001951
 8001918:	08001951 	.word	0x08001951
 800191c:	08001951 	.word	0x08001951
 8001920:	08001951 	.word	0x08001951
 8001924:	08001951 	.word	0x08001951
 8001928:	0800192d 	.word	0x0800192d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b06      	cmp	r3, #6
 8001930:	d913      	bls.n	800195a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001936:	e010      	b.n	800195a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b07      	cmp	r3, #7
 800193c:	d90f      	bls.n	800195e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001942:	e00c      	b.n	800195e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	d90b      	bls.n	8001962 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800194e:	e008      	b.n	8001962 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	75fb      	strb	r3, [r7, #23]
        break;
 8001954:	e006      	b.n	8001964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001956:	bf00      	nop
 8001958:	e004      	b.n	8001964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800195a:	bf00      	nop
 800195c:	e002      	b.n	8001964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800195e:	bf00      	nop
 8001960:	e000      	b.n	8001964 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001962:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10d      	bne.n	8001986 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 0118 	bic.w	r1, r3, #24
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001986:	7dfb      	ldrb	r3, [r7, #23]
}
 8001988:	4618      	mov	r0, r3
 800198a:	371c      	adds	r7, #28
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff fd50 	bl	8001440 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e312      	b.n	8001fd2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a66      	ldr	r2, [pc, #408]	@ (8001b4c <HAL_DMA_Init+0x1b8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d04a      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a65      	ldr	r2, [pc, #404]	@ (8001b50 <HAL_DMA_Init+0x1bc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d045      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a63      	ldr	r2, [pc, #396]	@ (8001b54 <HAL_DMA_Init+0x1c0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a62      	ldr	r2, [pc, #392]	@ (8001b58 <HAL_DMA_Init+0x1c4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d03b      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a60      	ldr	r2, [pc, #384]	@ (8001b5c <HAL_DMA_Init+0x1c8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d036      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b60 <HAL_DMA_Init+0x1cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d031      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001b64 <HAL_DMA_Init+0x1d0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02c      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b68 <HAL_DMA_Init+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d027      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5a      	ldr	r2, [pc, #360]	@ (8001b6c <HAL_DMA_Init+0x1d8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d022      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a59      	ldr	r2, [pc, #356]	@ (8001b70 <HAL_DMA_Init+0x1dc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d01d      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a57      	ldr	r2, [pc, #348]	@ (8001b74 <HAL_DMA_Init+0x1e0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d018      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a56      	ldr	r2, [pc, #344]	@ (8001b78 <HAL_DMA_Init+0x1e4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_DMA_Init+0x1e8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00e      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a53      	ldr	r2, [pc, #332]	@ (8001b80 <HAL_DMA_Init+0x1ec>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	@ (8001b84 <HAL_DMA_Init+0x1f0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_DMA_Init+0xb8>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a50      	ldr	r2, [pc, #320]	@ (8001b88 <HAL_DMA_Init+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Init+0xbc>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_DMA_Init+0xbe>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 813c 	beq.w	8001cd0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a37      	ldr	r2, [pc, #220]	@ (8001b4c <HAL_DMA_Init+0x1b8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d04a      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a36      	ldr	r2, [pc, #216]	@ (8001b50 <HAL_DMA_Init+0x1bc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d045      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a34      	ldr	r2, [pc, #208]	@ (8001b54 <HAL_DMA_Init+0x1c0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d040      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <HAL_DMA_Init+0x1c4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d03b      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a31      	ldr	r2, [pc, #196]	@ (8001b5c <HAL_DMA_Init+0x1c8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d036      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a30      	ldr	r2, [pc, #192]	@ (8001b60 <HAL_DMA_Init+0x1cc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d031      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8001b64 <HAL_DMA_Init+0x1d0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d02c      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b68 <HAL_DMA_Init+0x1d4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d027      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2b      	ldr	r2, [pc, #172]	@ (8001b6c <HAL_DMA_Init+0x1d8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d022      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8001b70 <HAL_DMA_Init+0x1dc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d01d      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a28      	ldr	r2, [pc, #160]	@ (8001b74 <HAL_DMA_Init+0x1e0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d018      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <HAL_DMA_Init+0x1e4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d013      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a25      	ldr	r2, [pc, #148]	@ (8001b7c <HAL_DMA_Init+0x1e8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00e      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a24      	ldr	r2, [pc, #144]	@ (8001b80 <HAL_DMA_Init+0x1ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a22      	ldr	r2, [pc, #136]	@ (8001b84 <HAL_DMA_Init+0x1f0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_DMA_Init+0x174>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <HAL_DMA_Init+0x1f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d108      	bne.n	8001b1a <HAL_DMA_Init+0x186>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e007      	b.n	8001b2a <HAL_DMA_Init+0x196>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b2a:	e02f      	b.n	8001b8c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2c:	f7ff fc88 	bl	8001440 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d928      	bls.n	8001b8c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e242      	b.n	8001fd2 <HAL_DMA_Init+0x63e>
 8001b4c:	40020010 	.word	0x40020010
 8001b50:	40020028 	.word	0x40020028
 8001b54:	40020040 	.word	0x40020040
 8001b58:	40020058 	.word	0x40020058
 8001b5c:	40020070 	.word	0x40020070
 8001b60:	40020088 	.word	0x40020088
 8001b64:	400200a0 	.word	0x400200a0
 8001b68:	400200b8 	.word	0x400200b8
 8001b6c:	40020410 	.word	0x40020410
 8001b70:	40020428 	.word	0x40020428
 8001b74:	40020440 	.word	0x40020440
 8001b78:	40020458 	.word	0x40020458
 8001b7c:	40020470 	.word	0x40020470
 8001b80:	40020488 	.word	0x40020488
 8001b84:	400204a0 	.word	0x400204a0
 8001b88:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1c8      	bne.n	8001b2c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4b83      	ldr	r3, [pc, #524]	@ (8001db4 <HAL_DMA_Init+0x420>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001bb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d107      	bne.n	8001bf0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4313      	orrs	r3, r2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b28      	cmp	r3, #40	@ 0x28
 8001bf6:	d903      	bls.n	8001c00 <HAL_DMA_Init+0x26c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bfe:	d91f      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c06:	d903      	bls.n	8001c10 <HAL_DMA_Init+0x27c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b42      	cmp	r3, #66	@ 0x42
 8001c0e:	d917      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b46      	cmp	r3, #70	@ 0x46
 8001c16:	d903      	bls.n	8001c20 <HAL_DMA_Init+0x28c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b48      	cmp	r3, #72	@ 0x48
 8001c1e:	d90f      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c26:	d903      	bls.n	8001c30 <HAL_DMA_Init+0x29c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b52      	cmp	r3, #82	@ 0x52
 8001c2e:	d907      	bls.n	8001c40 <HAL_DMA_Init+0x2ac>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b73      	cmp	r3, #115	@ 0x73
 8001c36:	d905      	bls.n	8001c44 <HAL_DMA_Init+0x2b0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b77      	cmp	r3, #119	@ 0x77
 8001c3e:	d801      	bhi.n	8001c44 <HAL_DMA_Init+0x2b0>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_DMA_Init+0x2b2>
 8001c44:	2300      	movs	r3, #0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c50:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f023 0307 	bic.w	r3, r3, #7
 8001c68:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d117      	bne.n	8001cac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f002 fb2e 	bl	80042f0 <DMA_CheckFifoParam>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2240      	movs	r2, #64	@ 0x40
 8001c9e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e192      	b.n	8001fd2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f002 fa69 	bl	800418c <DMA_CalcBaseAndBitshift>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	223f      	movs	r2, #63	@ 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	e0c8      	b.n	8001e62 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a38      	ldr	r2, [pc, #224]	@ (8001db8 <HAL_DMA_Init+0x424>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a37      	ldr	r2, [pc, #220]	@ (8001dbc <HAL_DMA_Init+0x428>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a35      	ldr	r2, [pc, #212]	@ (8001dc0 <HAL_DMA_Init+0x42c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a34      	ldr	r2, [pc, #208]	@ (8001dc4 <HAL_DMA_Init+0x430>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a32      	ldr	r2, [pc, #200]	@ (8001dc8 <HAL_DMA_Init+0x434>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a31      	ldr	r2, [pc, #196]	@ (8001dcc <HAL_DMA_Init+0x438>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd0 <HAL_DMA_Init+0x43c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Init+0x38c>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd4 <HAL_DMA_Init+0x440>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Init+0x390>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_Init+0x392>
 8001d24:	2300      	movs	r3, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8092 	beq.w	8001e50 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <HAL_DMA_Init+0x424>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d021      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <HAL_DMA_Init+0x428>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d01c      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <HAL_DMA_Init+0x42c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d017      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc4 <HAL_DMA_Init+0x430>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc8 <HAL_DMA_Init+0x434>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1a      	ldr	r2, [pc, #104]	@ (8001dcc <HAL_DMA_Init+0x438>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d008      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <HAL_DMA_Init+0x43c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d003      	beq.n	8001d7a <HAL_DMA_Init+0x3e6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <HAL_DMA_Init+0x440>)
 8001d78:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <HAL_DMA_Init+0x444>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b40      	cmp	r3, #64	@ 0x40
 8001da0:	d01c      	beq.n	8001ddc <HAL_DMA_Init+0x448>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b80      	cmp	r3, #128	@ 0x80
 8001da8:	d102      	bne.n	8001db0 <HAL_DMA_Init+0x41c>
 8001daa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001dae:	e016      	b.n	8001dde <HAL_DMA_Init+0x44a>
 8001db0:	2300      	movs	r3, #0
 8001db2:	e014      	b.n	8001dde <HAL_DMA_Init+0x44a>
 8001db4:	fe10803f 	.word	0xfe10803f
 8001db8:	58025408 	.word	0x58025408
 8001dbc:	5802541c 	.word	0x5802541c
 8001dc0:	58025430 	.word	0x58025430
 8001dc4:	58025444 	.word	0x58025444
 8001dc8:	58025458 	.word	0x58025458
 8001dcc:	5802546c 	.word	0x5802546c
 8001dd0:	58025480 	.word	0x58025480
 8001dd4:	58025494 	.word	0x58025494
 8001dd8:	fffe000f 	.word	0xfffe000f
 8001ddc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68d2      	ldr	r2, [r2, #12]
 8001de2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001de4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001dec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001df4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001dfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e0c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b6e      	ldr	r3, [pc, #440]	@ (8001fdc <HAL_DMA_Init+0x648>)
 8001e24:	4413      	add	r3, r2
 8001e26:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe0 <HAL_DMA_Init+0x64c>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	009a      	lsls	r2, r3, #2
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f002 f9a9 	bl	800418c <DMA_CalcBaseAndBitshift>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2201      	movs	r2, #1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	e008      	b.n	8001e62 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2240      	movs	r2, #64	@ 0x40
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0b7      	b.n	8001fd2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe4 <HAL_DMA_Init+0x650>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d072      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe8 <HAL_DMA_Init+0x654>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d06d      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001fec <HAL_DMA_Init+0x658>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d068      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff0 <HAL_DMA_Init+0x65c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d063      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a59      	ldr	r2, [pc, #356]	@ (8001ff4 <HAL_DMA_Init+0x660>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d05e      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a57      	ldr	r2, [pc, #348]	@ (8001ff8 <HAL_DMA_Init+0x664>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d059      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a56      	ldr	r2, [pc, #344]	@ (8001ffc <HAL_DMA_Init+0x668>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d054      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a54      	ldr	r2, [pc, #336]	@ (8002000 <HAL_DMA_Init+0x66c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d04f      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a53      	ldr	r2, [pc, #332]	@ (8002004 <HAL_DMA_Init+0x670>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04a      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	@ (8002008 <HAL_DMA_Init+0x674>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d045      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a50      	ldr	r2, [pc, #320]	@ (800200c <HAL_DMA_Init+0x678>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d040      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8002010 <HAL_DMA_Init+0x67c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d03b      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a4d      	ldr	r2, [pc, #308]	@ (8002014 <HAL_DMA_Init+0x680>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8002018 <HAL_DMA_Init+0x684>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800201c <HAL_DMA_Init+0x688>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d02c      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a48      	ldr	r2, [pc, #288]	@ (8002020 <HAL_DMA_Init+0x68c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a47      	ldr	r2, [pc, #284]	@ (8002024 <HAL_DMA_Init+0x690>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a45      	ldr	r2, [pc, #276]	@ (8002028 <HAL_DMA_Init+0x694>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a44      	ldr	r2, [pc, #272]	@ (800202c <HAL_DMA_Init+0x698>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a42      	ldr	r2, [pc, #264]	@ (8002030 <HAL_DMA_Init+0x69c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a41      	ldr	r2, [pc, #260]	@ (8002034 <HAL_DMA_Init+0x6a0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3f      	ldr	r2, [pc, #252]	@ (8002038 <HAL_DMA_Init+0x6a4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3e      	ldr	r2, [pc, #248]	@ (800203c <HAL_DMA_Init+0x6a8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_DMA_Init+0x5be>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002040 <HAL_DMA_Init+0x6ac>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_DMA_Init+0x5c2>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_DMA_Init+0x5c4>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d032      	beq.n	8001fc2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f002 fa43 	bl	80043e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b80      	cmp	r3, #128	@ 0x80
 8001f68:	d102      	bne.n	8001f70 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f84:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <HAL_DMA_Init+0x61c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d80c      	bhi.n	8001fb0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f002 fac0 	bl	800451c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	e008      	b.n	8001fc2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	a7fdabf8 	.word	0xa7fdabf8
 8001fe0:	cccccccd 	.word	0xcccccccd
 8001fe4:	40020010 	.word	0x40020010
 8001fe8:	40020028 	.word	0x40020028
 8001fec:	40020040 	.word	0x40020040
 8001ff0:	40020058 	.word	0x40020058
 8001ff4:	40020070 	.word	0x40020070
 8001ff8:	40020088 	.word	0x40020088
 8001ffc:	400200a0 	.word	0x400200a0
 8002000:	400200b8 	.word	0x400200b8
 8002004:	40020410 	.word	0x40020410
 8002008:	40020428 	.word	0x40020428
 800200c:	40020440 	.word	0x40020440
 8002010:	40020458 	.word	0x40020458
 8002014:	40020470 	.word	0x40020470
 8002018:	40020488 	.word	0x40020488
 800201c:	400204a0 	.word	0x400204a0
 8002020:	400204b8 	.word	0x400204b8
 8002024:	58025408 	.word	0x58025408
 8002028:	5802541c 	.word	0x5802541c
 800202c:	58025430 	.word	0x58025430
 8002030:	58025444 	.word	0x58025444
 8002034:	58025458 	.word	0x58025458
 8002038:	5802546c 	.word	0x5802546c
 800203c:	58025480 	.word	0x58025480
 8002040:	58025494 	.word	0x58025494

08002044 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e226      	b.n	80024ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_DMA_Start_IT+0x2a>
 800206a:	2302      	movs	r3, #2
 800206c:	e21f      	b.n	80024ae <HAL_DMA_Start_IT+0x46a>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	f040 820a 	bne.w	8002498 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a68      	ldr	r2, [pc, #416]	@ (8002238 <HAL_DMA_Start_IT+0x1f4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d04a      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a66      	ldr	r2, [pc, #408]	@ (800223c <HAL_DMA_Start_IT+0x1f8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d045      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a65      	ldr	r2, [pc, #404]	@ (8002240 <HAL_DMA_Start_IT+0x1fc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d040      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a63      	ldr	r2, [pc, #396]	@ (8002244 <HAL_DMA_Start_IT+0x200>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d03b      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a62      	ldr	r2, [pc, #392]	@ (8002248 <HAL_DMA_Start_IT+0x204>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d036      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a60      	ldr	r2, [pc, #384]	@ (800224c <HAL_DMA_Start_IT+0x208>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d031      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002250 <HAL_DMA_Start_IT+0x20c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d02c      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002254 <HAL_DMA_Start_IT+0x210>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d027      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002258 <HAL_DMA_Start_IT+0x214>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a5a      	ldr	r2, [pc, #360]	@ (800225c <HAL_DMA_Start_IT+0x218>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01d      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a59      	ldr	r2, [pc, #356]	@ (8002260 <HAL_DMA_Start_IT+0x21c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d018      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a57      	ldr	r2, [pc, #348]	@ (8002264 <HAL_DMA_Start_IT+0x220>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a56      	ldr	r2, [pc, #344]	@ (8002268 <HAL_DMA_Start_IT+0x224>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a54      	ldr	r2, [pc, #336]	@ (800226c <HAL_DMA_Start_IT+0x228>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d009      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a53      	ldr	r2, [pc, #332]	@ (8002270 <HAL_DMA_Start_IT+0x22c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_DMA_Start_IT+0xee>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a51      	ldr	r2, [pc, #324]	@ (8002274 <HAL_DMA_Start_IT+0x230>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <HAL_DMA_Start_IT+0x100>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	e007      	b.n	8002154 <HAL_DMA_Start_IT+0x110>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f001 fe6a 	bl	8003e34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a34      	ldr	r2, [pc, #208]	@ (8002238 <HAL_DMA_Start_IT+0x1f4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d04a      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a33      	ldr	r2, [pc, #204]	@ (800223c <HAL_DMA_Start_IT+0x1f8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d045      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a31      	ldr	r2, [pc, #196]	@ (8002240 <HAL_DMA_Start_IT+0x1fc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d040      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <HAL_DMA_Start_IT+0x200>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d03b      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <HAL_DMA_Start_IT+0x204>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d036      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2d      	ldr	r2, [pc, #180]	@ (800224c <HAL_DMA_Start_IT+0x208>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d031      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002250 <HAL_DMA_Start_IT+0x20c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02c      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002254 <HAL_DMA_Start_IT+0x210>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d027      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a28      	ldr	r2, [pc, #160]	@ (8002258 <HAL_DMA_Start_IT+0x214>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d022      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a27      	ldr	r2, [pc, #156]	@ (800225c <HAL_DMA_Start_IT+0x218>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d01d      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_DMA_Start_IT+0x21c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d018      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <HAL_DMA_Start_IT+0x220>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a22      	ldr	r2, [pc, #136]	@ (8002268 <HAL_DMA_Start_IT+0x224>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_DMA_Start_IT+0x228>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d009      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002270 <HAL_DMA_Start_IT+0x22c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_DMA_Start_IT+0x1bc>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <HAL_DMA_Start_IT+0x230>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_DMA_Start_IT+0x1c0>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_DMA_Start_IT+0x1c2>
 8002204:	2300      	movs	r3, #0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d036      	beq.n	8002278 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 021e 	bic.w	r2, r3, #30
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0216 	orr.w	r2, r2, #22
 800221c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d03e      	beq.n	80022a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0208 	orr.w	r2, r2, #8
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e035      	b.n	80022a4 <HAL_DMA_Start_IT+0x260>
 8002238:	40020010 	.word	0x40020010
 800223c:	40020028 	.word	0x40020028
 8002240:	40020040 	.word	0x40020040
 8002244:	40020058 	.word	0x40020058
 8002248:	40020070 	.word	0x40020070
 800224c:	40020088 	.word	0x40020088
 8002250:	400200a0 	.word	0x400200a0
 8002254:	400200b8 	.word	0x400200b8
 8002258:	40020410 	.word	0x40020410
 800225c:	40020428 	.word	0x40020428
 8002260:	40020440 	.word	0x40020440
 8002264:	40020458 	.word	0x40020458
 8002268:	40020470 	.word	0x40020470
 800226c:	40020488 	.word	0x40020488
 8002270:	400204a0 	.word	0x400204a0
 8002274:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 020e 	bic.w	r2, r3, #14
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 020a 	orr.w	r2, r2, #10
 800228a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0204 	orr.w	r2, r2, #4
 80022a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a83      	ldr	r2, [pc, #524]	@ (80024b8 <HAL_DMA_Start_IT+0x474>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d072      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a82      	ldr	r2, [pc, #520]	@ (80024bc <HAL_DMA_Start_IT+0x478>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d06d      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a80      	ldr	r2, [pc, #512]	@ (80024c0 <HAL_DMA_Start_IT+0x47c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d068      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7f      	ldr	r2, [pc, #508]	@ (80024c4 <HAL_DMA_Start_IT+0x480>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d063      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7d      	ldr	r2, [pc, #500]	@ (80024c8 <HAL_DMA_Start_IT+0x484>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d05e      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7c      	ldr	r2, [pc, #496]	@ (80024cc <HAL_DMA_Start_IT+0x488>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d059      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a7a      	ldr	r2, [pc, #488]	@ (80024d0 <HAL_DMA_Start_IT+0x48c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d054      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a79      	ldr	r2, [pc, #484]	@ (80024d4 <HAL_DMA_Start_IT+0x490>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d04f      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a77      	ldr	r2, [pc, #476]	@ (80024d8 <HAL_DMA_Start_IT+0x494>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04a      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a76      	ldr	r2, [pc, #472]	@ (80024dc <HAL_DMA_Start_IT+0x498>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d045      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a74      	ldr	r2, [pc, #464]	@ (80024e0 <HAL_DMA_Start_IT+0x49c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d040      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a73      	ldr	r2, [pc, #460]	@ (80024e4 <HAL_DMA_Start_IT+0x4a0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d03b      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a71      	ldr	r2, [pc, #452]	@ (80024e8 <HAL_DMA_Start_IT+0x4a4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d036      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a70      	ldr	r2, [pc, #448]	@ (80024ec <HAL_DMA_Start_IT+0x4a8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d031      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6e      	ldr	r2, [pc, #440]	@ (80024f0 <HAL_DMA_Start_IT+0x4ac>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02c      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6d      	ldr	r2, [pc, #436]	@ (80024f4 <HAL_DMA_Start_IT+0x4b0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d027      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6b      	ldr	r2, [pc, #428]	@ (80024f8 <HAL_DMA_Start_IT+0x4b4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d022      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6a      	ldr	r2, [pc, #424]	@ (80024fc <HAL_DMA_Start_IT+0x4b8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d01d      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a68      	ldr	r2, [pc, #416]	@ (8002500 <HAL_DMA_Start_IT+0x4bc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d018      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a67      	ldr	r2, [pc, #412]	@ (8002504 <HAL_DMA_Start_IT+0x4c0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a65      	ldr	r2, [pc, #404]	@ (8002508 <HAL_DMA_Start_IT+0x4c4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00e      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a64      	ldr	r2, [pc, #400]	@ (800250c <HAL_DMA_Start_IT+0x4c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a62      	ldr	r2, [pc, #392]	@ (8002510 <HAL_DMA_Start_IT+0x4cc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_DMA_Start_IT+0x350>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a61      	ldr	r2, [pc, #388]	@ (8002514 <HAL_DMA_Start_IT+0x4d0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <HAL_DMA_Start_IT+0x354>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_DMA_Start_IT+0x356>
 8002398:	2300      	movs	r3, #0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01a      	beq.n	80023d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a37      	ldr	r2, [pc, #220]	@ (80024b8 <HAL_DMA_Start_IT+0x474>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d04a      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a36      	ldr	r2, [pc, #216]	@ (80024bc <HAL_DMA_Start_IT+0x478>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d045      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a34      	ldr	r2, [pc, #208]	@ (80024c0 <HAL_DMA_Start_IT+0x47c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d040      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a33      	ldr	r2, [pc, #204]	@ (80024c4 <HAL_DMA_Start_IT+0x480>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d03b      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_DMA_Start_IT+0x484>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d036      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a30      	ldr	r2, [pc, #192]	@ (80024cc <HAL_DMA_Start_IT+0x488>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d031      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2e      	ldr	r2, [pc, #184]	@ (80024d0 <HAL_DMA_Start_IT+0x48c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d02c      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2d      	ldr	r2, [pc, #180]	@ (80024d4 <HAL_DMA_Start_IT+0x490>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d027      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a2b      	ldr	r2, [pc, #172]	@ (80024d8 <HAL_DMA_Start_IT+0x494>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d022      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2a      	ldr	r2, [pc, #168]	@ (80024dc <HAL_DMA_Start_IT+0x498>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d01d      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a28      	ldr	r2, [pc, #160]	@ (80024e0 <HAL_DMA_Start_IT+0x49c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d018      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a27      	ldr	r2, [pc, #156]	@ (80024e4 <HAL_DMA_Start_IT+0x4a0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	@ (80024e8 <HAL_DMA_Start_IT+0x4a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00e      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a24      	ldr	r2, [pc, #144]	@ (80024ec <HAL_DMA_Start_IT+0x4a8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d009      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_DMA_Start_IT+0x4ac>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_DMA_Start_IT+0x430>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a21      	ldr	r2, [pc, #132]	@ (80024f4 <HAL_DMA_Start_IT+0x4b0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d108      	bne.n	8002486 <HAL_DMA_Start_IT+0x442>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e012      	b.n	80024ac <HAL_DMA_Start_IT+0x468>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e009      	b.n	80024ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
 80024f8:	58025408 	.word	0x58025408
 80024fc:	5802541c 	.word	0x5802541c
 8002500:	58025430 	.word	0x58025430
 8002504:	58025444 	.word	0x58025444
 8002508:	58025458 	.word	0x58025458
 800250c:	5802546c 	.word	0x5802546c
 8002510:	58025480 	.word	0x58025480
 8002514:	58025494 	.word	0x58025494

08002518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002520:	f7fe ff8e 	bl	8001440 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e2dc      	b.n	8002aea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d008      	beq.n	800254e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	@ 0x80
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e2cd      	b.n	8002aea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a76      	ldr	r2, [pc, #472]	@ (800272c <HAL_DMA_Abort+0x214>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04a      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a74      	ldr	r2, [pc, #464]	@ (8002730 <HAL_DMA_Abort+0x218>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d045      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a73      	ldr	r2, [pc, #460]	@ (8002734 <HAL_DMA_Abort+0x21c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d040      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a71      	ldr	r2, [pc, #452]	@ (8002738 <HAL_DMA_Abort+0x220>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d03b      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a70      	ldr	r2, [pc, #448]	@ (800273c <HAL_DMA_Abort+0x224>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d036      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6e      	ldr	r2, [pc, #440]	@ (8002740 <HAL_DMA_Abort+0x228>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d031      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6d      	ldr	r2, [pc, #436]	@ (8002744 <HAL_DMA_Abort+0x22c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d02c      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6b      	ldr	r2, [pc, #428]	@ (8002748 <HAL_DMA_Abort+0x230>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d027      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6a      	ldr	r2, [pc, #424]	@ (800274c <HAL_DMA_Abort+0x234>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a68      	ldr	r2, [pc, #416]	@ (8002750 <HAL_DMA_Abort+0x238>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01d      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a67      	ldr	r2, [pc, #412]	@ (8002754 <HAL_DMA_Abort+0x23c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_DMA_Abort+0x240>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a64      	ldr	r2, [pc, #400]	@ (800275c <HAL_DMA_Abort+0x244>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a62      	ldr	r2, [pc, #392]	@ (8002760 <HAL_DMA_Abort+0x248>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a61      	ldr	r2, [pc, #388]	@ (8002764 <HAL_DMA_Abort+0x24c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_DMA_Abort+0xd6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_DMA_Abort+0x250>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_Abort+0xda>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_Abort+0xdc>
 80025f2:	2300      	movs	r3, #0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 021e 	bic.w	r2, r2, #30
 8002606:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695a      	ldr	r2, [r3, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002616:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e00a      	b.n	8002636 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 020e 	bic.w	r2, r2, #14
 800262e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3c      	ldr	r2, [pc, #240]	@ (800272c <HAL_DMA_Abort+0x214>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d072      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a3a      	ldr	r2, [pc, #232]	@ (8002730 <HAL_DMA_Abort+0x218>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d06d      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a39      	ldr	r2, [pc, #228]	@ (8002734 <HAL_DMA_Abort+0x21c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d068      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a37      	ldr	r2, [pc, #220]	@ (8002738 <HAL_DMA_Abort+0x220>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d063      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a36      	ldr	r2, [pc, #216]	@ (800273c <HAL_DMA_Abort+0x224>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d05e      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a34      	ldr	r2, [pc, #208]	@ (8002740 <HAL_DMA_Abort+0x228>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d059      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a33      	ldr	r2, [pc, #204]	@ (8002744 <HAL_DMA_Abort+0x22c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d054      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_DMA_Abort+0x230>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d04f      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a30      	ldr	r2, [pc, #192]	@ (800274c <HAL_DMA_Abort+0x234>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d04a      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2e      	ldr	r2, [pc, #184]	@ (8002750 <HAL_DMA_Abort+0x238>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d045      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2d      	ldr	r2, [pc, #180]	@ (8002754 <HAL_DMA_Abort+0x23c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d040      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002758 <HAL_DMA_Abort+0x240>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d03b      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2a      	ldr	r2, [pc, #168]	@ (800275c <HAL_DMA_Abort+0x244>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d036      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a28      	ldr	r2, [pc, #160]	@ (8002760 <HAL_DMA_Abort+0x248>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a27      	ldr	r2, [pc, #156]	@ (8002764 <HAL_DMA_Abort+0x24c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d02c      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a25      	ldr	r2, [pc, #148]	@ (8002768 <HAL_DMA_Abort+0x250>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d027      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_DMA_Abort+0x254>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <HAL_DMA_Abort+0x258>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01d      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <HAL_DMA_Abort+0x25c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <HAL_DMA_Abort+0x260>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1e      	ldr	r2, [pc, #120]	@ (800277c <HAL_DMA_Abort+0x264>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1c      	ldr	r2, [pc, #112]	@ (8002780 <HAL_DMA_Abort+0x268>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a1b      	ldr	r2, [pc, #108]	@ (8002784 <HAL_DMA_Abort+0x26c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_DMA_Abort+0x20e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	@ (8002788 <HAL_DMA_Abort+0x270>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d132      	bne.n	800278c <HAL_DMA_Abort+0x274>
 8002726:	2301      	movs	r3, #1
 8002728:	e031      	b.n	800278e <HAL_DMA_Abort+0x276>
 800272a:	bf00      	nop
 800272c:	40020010 	.word	0x40020010
 8002730:	40020028 	.word	0x40020028
 8002734:	40020040 	.word	0x40020040
 8002738:	40020058 	.word	0x40020058
 800273c:	40020070 	.word	0x40020070
 8002740:	40020088 	.word	0x40020088
 8002744:	400200a0 	.word	0x400200a0
 8002748:	400200b8 	.word	0x400200b8
 800274c:	40020410 	.word	0x40020410
 8002750:	40020428 	.word	0x40020428
 8002754:	40020440 	.word	0x40020440
 8002758:	40020458 	.word	0x40020458
 800275c:	40020470 	.word	0x40020470
 8002760:	40020488 	.word	0x40020488
 8002764:	400204a0 	.word	0x400204a0
 8002768:	400204b8 	.word	0x400204b8
 800276c:	58025408 	.word	0x58025408
 8002770:	5802541c 	.word	0x5802541c
 8002774:	58025430 	.word	0x58025430
 8002778:	58025444 	.word	0x58025444
 800277c:	58025458 	.word	0x58025458
 8002780:	5802546c 	.word	0x5802546c
 8002784:	58025480 	.word	0x58025480
 8002788:	58025494 	.word	0x58025494
 800278c:	2300      	movs	r3, #0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6d      	ldr	r2, [pc, #436]	@ (800295c <HAL_DMA_Abort+0x444>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04a      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_DMA_Abort+0x448>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d045      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002964 <HAL_DMA_Abort+0x44c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d040      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a68      	ldr	r2, [pc, #416]	@ (8002968 <HAL_DMA_Abort+0x450>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d03b      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a67      	ldr	r2, [pc, #412]	@ (800296c <HAL_DMA_Abort+0x454>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d036      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_DMA_Abort+0x458>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d031      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a64      	ldr	r2, [pc, #400]	@ (8002974 <HAL_DMA_Abort+0x45c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d02c      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a62      	ldr	r2, [pc, #392]	@ (8002978 <HAL_DMA_Abort+0x460>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d027      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a61      	ldr	r2, [pc, #388]	@ (800297c <HAL_DMA_Abort+0x464>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5f      	ldr	r2, [pc, #380]	@ (8002980 <HAL_DMA_Abort+0x468>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01d      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5e      	ldr	r2, [pc, #376]	@ (8002984 <HAL_DMA_Abort+0x46c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d018      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5c      	ldr	r2, [pc, #368]	@ (8002988 <HAL_DMA_Abort+0x470>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5b      	ldr	r2, [pc, #364]	@ (800298c <HAL_DMA_Abort+0x474>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00e      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a59      	ldr	r2, [pc, #356]	@ (8002990 <HAL_DMA_Abort+0x478>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_DMA_Abort+0x47c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_Abort+0x32a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a56      	ldr	r2, [pc, #344]	@ (8002998 <HAL_DMA_Abort+0x480>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <HAL_DMA_Abort+0x33c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <HAL_DMA_Abort+0x34c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002864:	e013      	b.n	800288e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002866:	f7fe fdeb 	bl	8001440 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b05      	cmp	r3, #5
 8002872:	d90c      	bls.n	800288e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e12d      	b.n	8002aea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e5      	bne.n	8002866 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2f      	ldr	r2, [pc, #188]	@ (800295c <HAL_DMA_Abort+0x444>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002960 <HAL_DMA_Abort+0x448>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002964 <HAL_DMA_Abort+0x44c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002968 <HAL_DMA_Abort+0x450>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a29      	ldr	r2, [pc, #164]	@ (800296c <HAL_DMA_Abort+0x454>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a27      	ldr	r2, [pc, #156]	@ (8002970 <HAL_DMA_Abort+0x458>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a26      	ldr	r2, [pc, #152]	@ (8002974 <HAL_DMA_Abort+0x45c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a24      	ldr	r2, [pc, #144]	@ (8002978 <HAL_DMA_Abort+0x460>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a23      	ldr	r2, [pc, #140]	@ (800297c <HAL_DMA_Abort+0x464>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a21      	ldr	r2, [pc, #132]	@ (8002980 <HAL_DMA_Abort+0x468>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_Abort+0x422>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a20      	ldr	r2, [pc, #128]	@ (8002984 <HAL_DMA_Abort+0x46c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_Abort+0x422>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1e      	ldr	r2, [pc, #120]	@ (8002988 <HAL_DMA_Abort+0x470>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_Abort+0x422>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <HAL_DMA_Abort+0x474>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_Abort+0x422>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1b      	ldr	r2, [pc, #108]	@ (8002990 <HAL_DMA_Abort+0x478>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_Abort+0x422>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1a      	ldr	r2, [pc, #104]	@ (8002994 <HAL_DMA_Abort+0x47c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_Abort+0x422>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <HAL_DMA_Abort+0x480>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_DMA_Abort+0x426>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_DMA_Abort+0x428>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02b      	beq.n	800299c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	223f      	movs	r2, #63	@ 0x3f
 8002954:	409a      	lsls	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	e02a      	b.n	80029b2 <HAL_DMA_Abort+0x49a>
 800295c:	40020010 	.word	0x40020010
 8002960:	40020028 	.word	0x40020028
 8002964:	40020040 	.word	0x40020040
 8002968:	40020058 	.word	0x40020058
 800296c:	40020070 	.word	0x40020070
 8002970:	40020088 	.word	0x40020088
 8002974:	400200a0 	.word	0x400200a0
 8002978:	400200b8 	.word	0x400200b8
 800297c:	40020410 	.word	0x40020410
 8002980:	40020428 	.word	0x40020428
 8002984:	40020440 	.word	0x40020440
 8002988:	40020458 	.word	0x40020458
 800298c:	40020470 	.word	0x40020470
 8002990:	40020488 	.word	0x40020488
 8002994:	400204a0 	.word	0x400204a0
 8002998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2201      	movs	r2, #1
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a4f      	ldr	r2, [pc, #316]	@ (8002af4 <HAL_DMA_Abort+0x5dc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d072      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a4d      	ldr	r2, [pc, #308]	@ (8002af8 <HAL_DMA_Abort+0x5e0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d06d      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4c      	ldr	r2, [pc, #304]	@ (8002afc <HAL_DMA_Abort+0x5e4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d068      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002b00 <HAL_DMA_Abort+0x5e8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d063      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a49      	ldr	r2, [pc, #292]	@ (8002b04 <HAL_DMA_Abort+0x5ec>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d05e      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a47      	ldr	r2, [pc, #284]	@ (8002b08 <HAL_DMA_Abort+0x5f0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d059      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a46      	ldr	r2, [pc, #280]	@ (8002b0c <HAL_DMA_Abort+0x5f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d054      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a44      	ldr	r2, [pc, #272]	@ (8002b10 <HAL_DMA_Abort+0x5f8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d04f      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a43      	ldr	r2, [pc, #268]	@ (8002b14 <HAL_DMA_Abort+0x5fc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04a      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a41      	ldr	r2, [pc, #260]	@ (8002b18 <HAL_DMA_Abort+0x600>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d045      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a40      	ldr	r2, [pc, #256]	@ (8002b1c <HAL_DMA_Abort+0x604>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3e      	ldr	r2, [pc, #248]	@ (8002b20 <HAL_DMA_Abort+0x608>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03b      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b24 <HAL_DMA_Abort+0x60c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a3b      	ldr	r2, [pc, #236]	@ (8002b28 <HAL_DMA_Abort+0x610>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a3a      	ldr	r2, [pc, #232]	@ (8002b2c <HAL_DMA_Abort+0x614>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02c      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a38      	ldr	r2, [pc, #224]	@ (8002b30 <HAL_DMA_Abort+0x618>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a37      	ldr	r2, [pc, #220]	@ (8002b34 <HAL_DMA_Abort+0x61c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a35      	ldr	r2, [pc, #212]	@ (8002b38 <HAL_DMA_Abort+0x620>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a34      	ldr	r2, [pc, #208]	@ (8002b3c <HAL_DMA_Abort+0x624>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a32      	ldr	r2, [pc, #200]	@ (8002b40 <HAL_DMA_Abort+0x628>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a31      	ldr	r2, [pc, #196]	@ (8002b44 <HAL_DMA_Abort+0x62c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2f      	ldr	r2, [pc, #188]	@ (8002b48 <HAL_DMA_Abort+0x630>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2e      	ldr	r2, [pc, #184]	@ (8002b4c <HAL_DMA_Abort+0x634>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_Abort+0x58a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b50 <HAL_DMA_Abort+0x638>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Abort+0x58e>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_DMA_Abort+0x590>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ab4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002acc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ad6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40020010 	.word	0x40020010
 8002af8:	40020028 	.word	0x40020028
 8002afc:	40020040 	.word	0x40020040
 8002b00:	40020058 	.word	0x40020058
 8002b04:	40020070 	.word	0x40020070
 8002b08:	40020088 	.word	0x40020088
 8002b0c:	400200a0 	.word	0x400200a0
 8002b10:	400200b8 	.word	0x400200b8
 8002b14:	40020410 	.word	0x40020410
 8002b18:	40020428 	.word	0x40020428
 8002b1c:	40020440 	.word	0x40020440
 8002b20:	40020458 	.word	0x40020458
 8002b24:	40020470 	.word	0x40020470
 8002b28:	40020488 	.word	0x40020488
 8002b2c:	400204a0 	.word	0x400204a0
 8002b30:	400204b8 	.word	0x400204b8
 8002b34:	58025408 	.word	0x58025408
 8002b38:	5802541c 	.word	0x5802541c
 8002b3c:	58025430 	.word	0x58025430
 8002b40:	58025444 	.word	0x58025444
 8002b44:	58025458 	.word	0x58025458
 8002b48:	5802546c 	.word	0x5802546c
 8002b4c:	58025480 	.word	0x58025480
 8002b50:	58025494 	.word	0x58025494

08002b54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e237      	b.n	8002fd6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d004      	beq.n	8002b7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2280      	movs	r2, #128	@ 0x80
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e22c      	b.n	8002fd6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5c      	ldr	r2, [pc, #368]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d04a      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1a4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d045      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a59      	ldr	r2, [pc, #356]	@ (8002cfc <HAL_DMA_Abort_IT+0x1a8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d040      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a58      	ldr	r2, [pc, #352]	@ (8002d00 <HAL_DMA_Abort_IT+0x1ac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d03b      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <HAL_DMA_Abort_IT+0x1b0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d036      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a55      	ldr	r2, [pc, #340]	@ (8002d08 <HAL_DMA_Abort_IT+0x1b4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d031      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a53      	ldr	r2, [pc, #332]	@ (8002d0c <HAL_DMA_Abort_IT+0x1b8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02c      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a52      	ldr	r2, [pc, #328]	@ (8002d10 <HAL_DMA_Abort_IT+0x1bc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d027      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	@ (8002d14 <HAL_DMA_Abort_IT+0x1c0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d022      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a4f      	ldr	r2, [pc, #316]	@ (8002d18 <HAL_DMA_Abort_IT+0x1c4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d01d      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d1c <HAL_DMA_Abort_IT+0x1c8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d018      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a4c      	ldr	r2, [pc, #304]	@ (8002d20 <HAL_DMA_Abort_IT+0x1cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4a      	ldr	r2, [pc, #296]	@ (8002d24 <HAL_DMA_Abort_IT+0x1d0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00e      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a49      	ldr	r2, [pc, #292]	@ (8002d28 <HAL_DMA_Abort_IT+0x1d4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d009      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	@ (8002d2c <HAL_DMA_Abort_IT+0x1d8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_DMA_Abort_IT+0xc8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a46      	ldr	r2, [pc, #280]	@ (8002d30 <HAL_DMA_Abort_IT+0x1dc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Abort_IT+0xcc>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_DMA_Abort_IT+0xce>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8086 	beq.w	8002d34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2f      	ldr	r2, [pc, #188]	@ (8002cf4 <HAL_DMA_Abort_IT+0x1a0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf8 <HAL_DMA_Abort_IT+0x1a4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2c      	ldr	r2, [pc, #176]	@ (8002cfc <HAL_DMA_Abort_IT+0x1a8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2b      	ldr	r2, [pc, #172]	@ (8002d00 <HAL_DMA_Abort_IT+0x1ac>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a29      	ldr	r2, [pc, #164]	@ (8002d04 <HAL_DMA_Abort_IT+0x1b0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a28      	ldr	r2, [pc, #160]	@ (8002d08 <HAL_DMA_Abort_IT+0x1b4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a26      	ldr	r2, [pc, #152]	@ (8002d0c <HAL_DMA_Abort_IT+0x1b8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a25      	ldr	r2, [pc, #148]	@ (8002d10 <HAL_DMA_Abort_IT+0x1bc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a23      	ldr	r2, [pc, #140]	@ (8002d14 <HAL_DMA_Abort_IT+0x1c0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a22      	ldr	r2, [pc, #136]	@ (8002d18 <HAL_DMA_Abort_IT+0x1c4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a20      	ldr	r2, [pc, #128]	@ (8002d1c <HAL_DMA_Abort_IT+0x1c8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <HAL_DMA_Abort_IT+0x1cc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <HAL_DMA_Abort_IT+0x1d0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002d28 <HAL_DMA_Abort_IT+0x1d4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	@ (8002d2c <HAL_DMA_Abort_IT+0x1d8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x17c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <HAL_DMA_Abort_IT+0x1dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <HAL_DMA_Abort_IT+0x18e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e178      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x480>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e16f      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x480>
 8002cf4:	40020010 	.word	0x40020010
 8002cf8:	40020028 	.word	0x40020028
 8002cfc:	40020040 	.word	0x40020040
 8002d00:	40020058 	.word	0x40020058
 8002d04:	40020070 	.word	0x40020070
 8002d08:	40020088 	.word	0x40020088
 8002d0c:	400200a0 	.word	0x400200a0
 8002d10:	400200b8 	.word	0x400200b8
 8002d14:	40020410 	.word	0x40020410
 8002d18:	40020428 	.word	0x40020428
 8002d1c:	40020440 	.word	0x40020440
 8002d20:	40020458 	.word	0x40020458
 8002d24:	40020470 	.word	0x40020470
 8002d28:	40020488 	.word	0x40020488
 8002d2c:	400204a0 	.word	0x400204a0
 8002d30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 020e 	bic.w	r2, r2, #14
 8002d42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6c      	ldr	r2, [pc, #432]	@ (8002efc <HAL_DMA_Abort_IT+0x3a8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d04a      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6b      	ldr	r2, [pc, #428]	@ (8002f00 <HAL_DMA_Abort_IT+0x3ac>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d045      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a69      	ldr	r2, [pc, #420]	@ (8002f04 <HAL_DMA_Abort_IT+0x3b0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d040      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a68      	ldr	r2, [pc, #416]	@ (8002f08 <HAL_DMA_Abort_IT+0x3b4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d03b      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a66      	ldr	r2, [pc, #408]	@ (8002f0c <HAL_DMA_Abort_IT+0x3b8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d036      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a65      	ldr	r2, [pc, #404]	@ (8002f10 <HAL_DMA_Abort_IT+0x3bc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d031      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a63      	ldr	r2, [pc, #396]	@ (8002f14 <HAL_DMA_Abort_IT+0x3c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02c      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a62      	ldr	r2, [pc, #392]	@ (8002f18 <HAL_DMA_Abort_IT+0x3c4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d027      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a60      	ldr	r2, [pc, #384]	@ (8002f1c <HAL_DMA_Abort_IT+0x3c8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d022      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5f      	ldr	r2, [pc, #380]	@ (8002f20 <HAL_DMA_Abort_IT+0x3cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d01d      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <HAL_DMA_Abort_IT+0x3d0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d018      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f28 <HAL_DMA_Abort_IT+0x3d4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d013      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f2c <HAL_DMA_Abort_IT+0x3d8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00e      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a59      	ldr	r2, [pc, #356]	@ (8002f30 <HAL_DMA_Abort_IT+0x3dc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d009      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a57      	ldr	r2, [pc, #348]	@ (8002f34 <HAL_DMA_Abort_IT+0x3e0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d004      	beq.n	8002de4 <HAL_DMA_Abort_IT+0x290>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a56      	ldr	r2, [pc, #344]	@ (8002f38 <HAL_DMA_Abort_IT+0x3e4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d108      	bne.n	8002df6 <HAL_DMA_Abort_IT+0x2a2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e007      	b.n	8002e06 <HAL_DMA_Abort_IT+0x2b2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002efc <HAL_DMA_Abort_IT+0x3a8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d072      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3a      	ldr	r2, [pc, #232]	@ (8002f00 <HAL_DMA_Abort_IT+0x3ac>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d06d      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a39      	ldr	r2, [pc, #228]	@ (8002f04 <HAL_DMA_Abort_IT+0x3b0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d068      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a37      	ldr	r2, [pc, #220]	@ (8002f08 <HAL_DMA_Abort_IT+0x3b4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d063      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a36      	ldr	r2, [pc, #216]	@ (8002f0c <HAL_DMA_Abort_IT+0x3b8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d05e      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a34      	ldr	r2, [pc, #208]	@ (8002f10 <HAL_DMA_Abort_IT+0x3bc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d059      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a33      	ldr	r2, [pc, #204]	@ (8002f14 <HAL_DMA_Abort_IT+0x3c0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d054      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a31      	ldr	r2, [pc, #196]	@ (8002f18 <HAL_DMA_Abort_IT+0x3c4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d04f      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a30      	ldr	r2, [pc, #192]	@ (8002f1c <HAL_DMA_Abort_IT+0x3c8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04a      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2e      	ldr	r2, [pc, #184]	@ (8002f20 <HAL_DMA_Abort_IT+0x3cc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d045      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f24 <HAL_DMA_Abort_IT+0x3d0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2b      	ldr	r2, [pc, #172]	@ (8002f28 <HAL_DMA_Abort_IT+0x3d4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2a      	ldr	r2, [pc, #168]	@ (8002f2c <HAL_DMA_Abort_IT+0x3d8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d036      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a28      	ldr	r2, [pc, #160]	@ (8002f30 <HAL_DMA_Abort_IT+0x3dc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a27      	ldr	r2, [pc, #156]	@ (8002f34 <HAL_DMA_Abort_IT+0x3e0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d02c      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <HAL_DMA_Abort_IT+0x3e4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a24      	ldr	r2, [pc, #144]	@ (8002f3c <HAL_DMA_Abort_IT+0x3e8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <HAL_DMA_Abort_IT+0x3ec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	@ (8002f44 <HAL_DMA_Abort_IT+0x3f0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_DMA_Abort_IT+0x3f4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <HAL_DMA_Abort_IT+0x3f8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_DMA_Abort_IT+0x3fc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <HAL_DMA_Abort_IT+0x400>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x3a2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <HAL_DMA_Abort_IT+0x404>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d132      	bne.n	8002f5c <HAL_DMA_Abort_IT+0x408>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e031      	b.n	8002f5e <HAL_DMA_Abort_IT+0x40a>
 8002efa:	bf00      	nop
 8002efc:	40020010 	.word	0x40020010
 8002f00:	40020028 	.word	0x40020028
 8002f04:	40020040 	.word	0x40020040
 8002f08:	40020058 	.word	0x40020058
 8002f0c:	40020070 	.word	0x40020070
 8002f10:	40020088 	.word	0x40020088
 8002f14:	400200a0 	.word	0x400200a0
 8002f18:	400200b8 	.word	0x400200b8
 8002f1c:	40020410 	.word	0x40020410
 8002f20:	40020428 	.word	0x40020428
 8002f24:	40020440 	.word	0x40020440
 8002f28:	40020458 	.word	0x40020458
 8002f2c:	40020470 	.word	0x40020470
 8002f30:	40020488 	.word	0x40020488
 8002f34:	400204a0 	.word	0x400204a0
 8002f38:	400204b8 	.word	0x400204b8
 8002f3c:	58025408 	.word	0x58025408
 8002f40:	5802541c 	.word	0x5802541c
 8002f44:	58025430 	.word	0x58025430
 8002f48:	58025444 	.word	0x58025444
 8002f4c:	58025458 	.word	0x58025458
 8002f50:	5802546c 	.word	0x5802546c
 8002f54:	58025480 	.word	0x58025480
 8002f58:	58025494 	.word	0x58025494
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002fb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop

08002fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fec:	4b67      	ldr	r3, [pc, #412]	@ (800318c <HAL_DMA_IRQHandler+0x1ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a67      	ldr	r2, [pc, #412]	@ (8003190 <HAL_DMA_IRQHandler+0x1b0>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5f      	ldr	r2, [pc, #380]	@ (8003194 <HAL_DMA_IRQHandler+0x1b4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5d      	ldr	r2, [pc, #372]	@ (8003198 <HAL_DMA_IRQHandler+0x1b8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5c      	ldr	r2, [pc, #368]	@ (800319c <HAL_DMA_IRQHandler+0x1bc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5a      	ldr	r2, [pc, #360]	@ (80031a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a59      	ldr	r2, [pc, #356]	@ (80031a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a57      	ldr	r2, [pc, #348]	@ (80031a8 <HAL_DMA_IRQHandler+0x1c8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a56      	ldr	r2, [pc, #344]	@ (80031ac <HAL_DMA_IRQHandler+0x1cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a54      	ldr	r2, [pc, #336]	@ (80031b0 <HAL_DMA_IRQHandler+0x1d0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a53      	ldr	r2, [pc, #332]	@ (80031b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a51      	ldr	r2, [pc, #324]	@ (80031b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a50      	ldr	r2, [pc, #320]	@ (80031bc <HAL_DMA_IRQHandler+0x1dc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a4e      	ldr	r2, [pc, #312]	@ (80031c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4d      	ldr	r2, [pc, #308]	@ (80031c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a4b      	ldr	r2, [pc, #300]	@ (80031c8 <HAL_DMA_IRQHandler+0x1e8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4a      	ldr	r2, [pc, #296]	@ (80031cc <HAL_DMA_IRQHandler+0x1ec>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_IRQHandler+0xd2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a48      	ldr	r2, [pc, #288]	@ (80031d0 <HAL_DMA_IRQHandler+0x1f0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_DMA_IRQHandler+0xd6>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 842b 	beq.w	8003914 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2208      	movs	r2, #8
 80030c8:	409a      	lsls	r2, r3
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80a2 	beq.w	8003218 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003194 <HAL_DMA_IRQHandler+0x1b4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04a      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003198 <HAL_DMA_IRQHandler+0x1b8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d045      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2b      	ldr	r2, [pc, #172]	@ (800319c <HAL_DMA_IRQHandler+0x1bc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d040      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2a      	ldr	r2, [pc, #168]	@ (80031a0 <HAL_DMA_IRQHandler+0x1c0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d03b      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a28      	ldr	r2, [pc, #160]	@ (80031a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d036      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a27      	ldr	r2, [pc, #156]	@ (80031a8 <HAL_DMA_IRQHandler+0x1c8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d031      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <HAL_DMA_IRQHandler+0x1cc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02c      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a24      	ldr	r2, [pc, #144]	@ (80031b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d027      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <HAL_DMA_IRQHandler+0x1d4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a21      	ldr	r2, [pc, #132]	@ (80031b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <HAL_DMA_IRQHandler+0x1dc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1e      	ldr	r2, [pc, #120]	@ (80031c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1c      	ldr	r2, [pc, #112]	@ (80031c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <HAL_DMA_IRQHandler+0x1e8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a19      	ldr	r2, [pc, #100]	@ (80031cc <HAL_DMA_IRQHandler+0x1ec>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_DMA_IRQHandler+0x194>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d12f      	bne.n	80031d4 <HAL_DMA_IRQHandler+0x1f4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e02e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x208>
 800318a:	bf00      	nop
 800318c:	24000004 	.word	0x24000004
 8003190:	1b4e81b5 	.word	0x1b4e81b5
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0204 	bic.w	r2, r2, #4
 80031fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2208      	movs	r2, #8
 8003206:	409a      	lsls	r2, r3
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	fa22 f303 	lsr.w	r3, r2, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06e      	beq.n	800330c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a69      	ldr	r2, [pc, #420]	@ (80033d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04a      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a67      	ldr	r2, [pc, #412]	@ (80033dc <HAL_DMA_IRQHandler+0x3fc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d045      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a66      	ldr	r2, [pc, #408]	@ (80033e0 <HAL_DMA_IRQHandler+0x400>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d040      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a64      	ldr	r2, [pc, #400]	@ (80033e4 <HAL_DMA_IRQHandler+0x404>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d03b      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a63      	ldr	r2, [pc, #396]	@ (80033e8 <HAL_DMA_IRQHandler+0x408>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d036      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a61      	ldr	r2, [pc, #388]	@ (80033ec <HAL_DMA_IRQHandler+0x40c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d031      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a60      	ldr	r2, [pc, #384]	@ (80033f0 <HAL_DMA_IRQHandler+0x410>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d02c      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5e      	ldr	r2, [pc, #376]	@ (80033f4 <HAL_DMA_IRQHandler+0x414>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d027      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5d      	ldr	r2, [pc, #372]	@ (80033f8 <HAL_DMA_IRQHandler+0x418>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d022      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5b      	ldr	r2, [pc, #364]	@ (80033fc <HAL_DMA_IRQHandler+0x41c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01d      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5a      	ldr	r2, [pc, #360]	@ (8003400 <HAL_DMA_IRQHandler+0x420>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d018      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a58      	ldr	r2, [pc, #352]	@ (8003404 <HAL_DMA_IRQHandler+0x424>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a57      	ldr	r2, [pc, #348]	@ (8003408 <HAL_DMA_IRQHandler+0x428>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a55      	ldr	r2, [pc, #340]	@ (800340c <HAL_DMA_IRQHandler+0x42c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a54      	ldr	r2, [pc, #336]	@ (8003410 <HAL_DMA_IRQHandler+0x430>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2ee>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a52      	ldr	r2, [pc, #328]	@ (8003414 <HAL_DMA_IRQHandler+0x434>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10a      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x304>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e003      	b.n	80032ec <HAL_DMA_IRQHandler+0x30c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003304:	f043 0202 	orr.w	r2, r3, #2
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2204      	movs	r2, #4
 8003316:	409a      	lsls	r2, r3
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 808f 	beq.w	8003440 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2c      	ldr	r2, [pc, #176]	@ (80033d8 <HAL_DMA_IRQHandler+0x3f8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2a      	ldr	r2, [pc, #168]	@ (80033dc <HAL_DMA_IRQHandler+0x3fc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <HAL_DMA_IRQHandler+0x400>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a27      	ldr	r2, [pc, #156]	@ (80033e4 <HAL_DMA_IRQHandler+0x404>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a26      	ldr	r2, [pc, #152]	@ (80033e8 <HAL_DMA_IRQHandler+0x408>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a24      	ldr	r2, [pc, #144]	@ (80033ec <HAL_DMA_IRQHandler+0x40c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <HAL_DMA_IRQHandler+0x410>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_DMA_IRQHandler+0x414>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a20      	ldr	r2, [pc, #128]	@ (80033f8 <HAL_DMA_IRQHandler+0x418>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <HAL_DMA_IRQHandler+0x41c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_DMA_IRQHandler+0x420>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <HAL_DMA_IRQHandler+0x424>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <HAL_DMA_IRQHandler+0x428>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a18      	ldr	r2, [pc, #96]	@ (800340c <HAL_DMA_IRQHandler+0x42c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <HAL_DMA_IRQHandler+0x430>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x3e2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <HAL_DMA_IRQHandler+0x434>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d12a      	bne.n	8003418 <HAL_DMA_IRQHandler+0x438>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e023      	b.n	8003420 <HAL_DMA_IRQHandler+0x440>
 80033d8:	40020010 	.word	0x40020010
 80033dc:	40020028 	.word	0x40020028
 80033e0:	40020040 	.word	0x40020040
 80033e4:	40020058 	.word	0x40020058
 80033e8:	40020070 	.word	0x40020070
 80033ec:	40020088 	.word	0x40020088
 80033f0:	400200a0 	.word	0x400200a0
 80033f4:	400200b8 	.word	0x400200b8
 80033f8:	40020410 	.word	0x40020410
 80033fc:	40020428 	.word	0x40020428
 8003400:	40020440 	.word	0x40020440
 8003404:	40020458 	.word	0x40020458
 8003408:	40020470 	.word	0x40020470
 800340c:	40020488 	.word	0x40020488
 8003410:	400204a0 	.word	0x400204a0
 8003414:	400204b8 	.word	0x400204b8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2210      	movs	r2, #16
 800344a:	409a      	lsls	r2, r3
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a6 	beq.w	80035a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a85      	ldr	r2, [pc, #532]	@ (8003670 <HAL_DMA_IRQHandler+0x690>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d04a      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a83      	ldr	r2, [pc, #524]	@ (8003674 <HAL_DMA_IRQHandler+0x694>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d045      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a82      	ldr	r2, [pc, #520]	@ (8003678 <HAL_DMA_IRQHandler+0x698>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d040      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a80      	ldr	r2, [pc, #512]	@ (800367c <HAL_DMA_IRQHandler+0x69c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d03b      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7f      	ldr	r2, [pc, #508]	@ (8003680 <HAL_DMA_IRQHandler+0x6a0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d036      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a7d      	ldr	r2, [pc, #500]	@ (8003684 <HAL_DMA_IRQHandler+0x6a4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d031      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a7c      	ldr	r2, [pc, #496]	@ (8003688 <HAL_DMA_IRQHandler+0x6a8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d02c      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a7a      	ldr	r2, [pc, #488]	@ (800368c <HAL_DMA_IRQHandler+0x6ac>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d027      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a79      	ldr	r2, [pc, #484]	@ (8003690 <HAL_DMA_IRQHandler+0x6b0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d022      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a77      	ldr	r2, [pc, #476]	@ (8003694 <HAL_DMA_IRQHandler+0x6b4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a76      	ldr	r2, [pc, #472]	@ (8003698 <HAL_DMA_IRQHandler+0x6b8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a74      	ldr	r2, [pc, #464]	@ (800369c <HAL_DMA_IRQHandler+0x6bc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a73      	ldr	r2, [pc, #460]	@ (80036a0 <HAL_DMA_IRQHandler+0x6c0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a71      	ldr	r2, [pc, #452]	@ (80036a4 <HAL_DMA_IRQHandler+0x6c4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a70      	ldr	r2, [pc, #448]	@ (80036a8 <HAL_DMA_IRQHandler+0x6c8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x516>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6e      	ldr	r2, [pc, #440]	@ (80036ac <HAL_DMA_IRQHandler+0x6cc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10a      	bne.n	800350c <HAL_DMA_IRQHandler+0x52c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e009      	b.n	8003520 <HAL_DMA_IRQHandler+0x540>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03e      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2210      	movs	r2, #16
 800352e:	409a      	lsls	r2, r3
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d024      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e01f      	b.n	80035a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01b      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	4798      	blx	r3
 8003572:	e016      	b.n	80035a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0208 	bic.w	r2, r2, #8
 8003590:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2220      	movs	r2, #32
 80035ac:	409a      	lsls	r2, r3
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8110 	beq.w	80037d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003670 <HAL_DMA_IRQHandler+0x690>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d04a      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003674 <HAL_DMA_IRQHandler+0x694>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d045      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a29      	ldr	r2, [pc, #164]	@ (8003678 <HAL_DMA_IRQHandler+0x698>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d040      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a28      	ldr	r2, [pc, #160]	@ (800367c <HAL_DMA_IRQHandler+0x69c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d03b      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <HAL_DMA_IRQHandler+0x6a0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d036      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a25      	ldr	r2, [pc, #148]	@ (8003684 <HAL_DMA_IRQHandler+0x6a4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d031      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <HAL_DMA_IRQHandler+0x6a8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02c      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a22      	ldr	r2, [pc, #136]	@ (800368c <HAL_DMA_IRQHandler+0x6ac>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d027      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a20      	ldr	r2, [pc, #128]	@ (8003690 <HAL_DMA_IRQHandler+0x6b0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1f      	ldr	r2, [pc, #124]	@ (8003694 <HAL_DMA_IRQHandler+0x6b4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01d      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1d      	ldr	r2, [pc, #116]	@ (8003698 <HAL_DMA_IRQHandler+0x6b8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d018      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1c      	ldr	r2, [pc, #112]	@ (800369c <HAL_DMA_IRQHandler+0x6bc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d013      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1a      	ldr	r2, [pc, #104]	@ (80036a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00e      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d009      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <HAL_DMA_IRQHandler+0x6c8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d004      	beq.n	8003658 <HAL_DMA_IRQHandler+0x678>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <HAL_DMA_IRQHandler+0x6cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d12b      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x6d0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf14      	ite	ne
 8003666:	2301      	movne	r3, #1
 8003668:	2300      	moveq	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e02a      	b.n	80036c4 <HAL_DMA_IRQHandler+0x6e4>
 800366e:	bf00      	nop
 8003670:	40020010 	.word	0x40020010
 8003674:	40020028 	.word	0x40020028
 8003678:	40020040 	.word	0x40020040
 800367c:	40020058 	.word	0x40020058
 8003680:	40020070 	.word	0x40020070
 8003684:	40020088 	.word	0x40020088
 8003688:	400200a0 	.word	0x400200a0
 800368c:	400200b8 	.word	0x400200b8
 8003690:	40020410 	.word	0x40020410
 8003694:	40020428 	.word	0x40020428
 8003698:	40020440 	.word	0x40020440
 800369c:	40020458 	.word	0x40020458
 80036a0:	40020470 	.word	0x40020470
 80036a4:	40020488 	.word	0x40020488
 80036a8:	400204a0 	.word	0x400204a0
 80036ac:	400204b8 	.word	0x400204b8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8087 	beq.w	80037d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2220      	movs	r2, #32
 80036d4:	409a      	lsls	r2, r3
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d139      	bne.n	800375a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0216 	bic.w	r2, r2, #22
 80036f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003704:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_DMA_IRQHandler+0x736>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0208 	bic.w	r2, r2, #8
 8003724:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	223f      	movs	r2, #63	@ 0x3f
 8003730:	409a      	lsls	r2, r3
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 834a 	beq.w	8003de4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
          }
          return;
 8003758:	e344      	b.n	8003de4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d018      	beq.n	800379a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d108      	bne.n	8003788 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02c      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
 8003786:	e027      	b.n	80037d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d023      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
 8003798:	e01e      	b.n	80037d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10f      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0210 	bic.w	r2, r2, #16
 80037b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8306 	beq.w	8003dee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8088 	beq.w	8003900 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2204      	movs	r2, #4
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7a      	ldr	r2, [pc, #488]	@ (80039e8 <HAL_DMA_IRQHandler+0xa08>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04a      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a79      	ldr	r2, [pc, #484]	@ (80039ec <HAL_DMA_IRQHandler+0xa0c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d045      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a77      	ldr	r2, [pc, #476]	@ (80039f0 <HAL_DMA_IRQHandler+0xa10>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d040      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a76      	ldr	r2, [pc, #472]	@ (80039f4 <HAL_DMA_IRQHandler+0xa14>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d03b      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a74      	ldr	r2, [pc, #464]	@ (80039f8 <HAL_DMA_IRQHandler+0xa18>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d036      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a73      	ldr	r2, [pc, #460]	@ (80039fc <HAL_DMA_IRQHandler+0xa1c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d031      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a71      	ldr	r2, [pc, #452]	@ (8003a00 <HAL_DMA_IRQHandler+0xa20>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d02c      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a70      	ldr	r2, [pc, #448]	@ (8003a04 <HAL_DMA_IRQHandler+0xa24>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d027      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a08 <HAL_DMA_IRQHandler+0xa28>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d022      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6d      	ldr	r2, [pc, #436]	@ (8003a0c <HAL_DMA_IRQHandler+0xa2c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d01d      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6b      	ldr	r2, [pc, #428]	@ (8003a10 <HAL_DMA_IRQHandler+0xa30>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d018      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a14 <HAL_DMA_IRQHandler+0xa34>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d013      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a68      	ldr	r2, [pc, #416]	@ (8003a18 <HAL_DMA_IRQHandler+0xa38>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00e      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a67      	ldr	r2, [pc, #412]	@ (8003a1c <HAL_DMA_IRQHandler+0xa3c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a65      	ldr	r2, [pc, #404]	@ (8003a20 <HAL_DMA_IRQHandler+0xa40>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d004      	beq.n	8003898 <HAL_DMA_IRQHandler+0x8b8>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a64      	ldr	r2, [pc, #400]	@ (8003a24 <HAL_DMA_IRQHandler+0xa44>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d108      	bne.n	80038aa <HAL_DMA_IRQHandler+0x8ca>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e007      	b.n	80038ba <HAL_DMA_IRQHandler+0x8da>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d307      	bcc.n	80038d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f2      	bne.n	80038ba <HAL_DMA_IRQHandler+0x8da>
 80038d4:	e000      	b.n	80038d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2203      	movs	r2, #3
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80038ee:	e003      	b.n	80038f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8272 	beq.w	8003dee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
 8003912:	e26c      	b.n	8003dee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a43      	ldr	r2, [pc, #268]	@ (8003a28 <HAL_DMA_IRQHandler+0xa48>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d022      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a42      	ldr	r2, [pc, #264]	@ (8003a2c <HAL_DMA_IRQHandler+0xa4c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d01d      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a40      	ldr	r2, [pc, #256]	@ (8003a30 <HAL_DMA_IRQHandler+0xa50>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d018      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a3f      	ldr	r2, [pc, #252]	@ (8003a34 <HAL_DMA_IRQHandler+0xa54>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3d      	ldr	r2, [pc, #244]	@ (8003a38 <HAL_DMA_IRQHandler+0xa58>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a3c <HAL_DMA_IRQHandler+0xa5c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a3a      	ldr	r2, [pc, #232]	@ (8003a40 <HAL_DMA_IRQHandler+0xa60>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_DMA_IRQHandler+0x984>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a39      	ldr	r2, [pc, #228]	@ (8003a44 <HAL_DMA_IRQHandler+0xa64>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_DMA_IRQHandler+0x988>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_DMA_IRQHandler+0x98a>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 823f 	beq.w	8003dee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2204      	movs	r2, #4
 8003982:	409a      	lsls	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80cd 	beq.w	8003b28 <HAL_DMA_IRQHandler+0xb48>
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80c7 	beq.w	8003b28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2204      	movs	r2, #4
 80039a4:	409a      	lsls	r2, r3
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d049      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8210 	beq.w	8003de8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039d0:	e20a      	b.n	8003de8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8206 	beq.w	8003de8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e4:	e200      	b.n	8003de8 <HAL_DMA_IRQHandler+0xe08>
 80039e6:	bf00      	nop
 80039e8:	40020010 	.word	0x40020010
 80039ec:	40020028 	.word	0x40020028
 80039f0:	40020040 	.word	0x40020040
 80039f4:	40020058 	.word	0x40020058
 80039f8:	40020070 	.word	0x40020070
 80039fc:	40020088 	.word	0x40020088
 8003a00:	400200a0 	.word	0x400200a0
 8003a04:	400200b8 	.word	0x400200b8
 8003a08:	40020410 	.word	0x40020410
 8003a0c:	40020428 	.word	0x40020428
 8003a10:	40020440 	.word	0x40020440
 8003a14:	40020458 	.word	0x40020458
 8003a18:	40020470 	.word	0x40020470
 8003a1c:	40020488 	.word	0x40020488
 8003a20:	400204a0 	.word	0x400204a0
 8003a24:	400204b8 	.word	0x400204b8
 8003a28:	58025408 	.word	0x58025408
 8003a2c:	5802541c 	.word	0x5802541c
 8003a30:	58025430 	.word	0x58025430
 8003a34:	58025444 	.word	0x58025444
 8003a38:	58025458 	.word	0x58025458
 8003a3c:	5802546c 	.word	0x5802546c
 8003a40:	58025480 	.word	0x58025480
 8003a44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d160      	bne.n	8003b14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a7f      	ldr	r2, [pc, #508]	@ (8003c54 <HAL_DMA_IRQHandler+0xc74>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d04a      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a7d      	ldr	r2, [pc, #500]	@ (8003c58 <HAL_DMA_IRQHandler+0xc78>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d045      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c5c <HAL_DMA_IRQHandler+0xc7c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d040      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7a      	ldr	r2, [pc, #488]	@ (8003c60 <HAL_DMA_IRQHandler+0xc80>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d03b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a79      	ldr	r2, [pc, #484]	@ (8003c64 <HAL_DMA_IRQHandler+0xc84>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d036      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a77      	ldr	r2, [pc, #476]	@ (8003c68 <HAL_DMA_IRQHandler+0xc88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d031      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a76      	ldr	r2, [pc, #472]	@ (8003c6c <HAL_DMA_IRQHandler+0xc8c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d02c      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a74      	ldr	r2, [pc, #464]	@ (8003c70 <HAL_DMA_IRQHandler+0xc90>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d027      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a73      	ldr	r2, [pc, #460]	@ (8003c74 <HAL_DMA_IRQHandler+0xc94>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a71      	ldr	r2, [pc, #452]	@ (8003c78 <HAL_DMA_IRQHandler+0xc98>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01d      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a70      	ldr	r2, [pc, #448]	@ (8003c7c <HAL_DMA_IRQHandler+0xc9c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a6e      	ldr	r2, [pc, #440]	@ (8003c80 <HAL_DMA_IRQHandler+0xca0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6d      	ldr	r2, [pc, #436]	@ (8003c84 <HAL_DMA_IRQHandler+0xca4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	@ (8003c88 <HAL_DMA_IRQHandler+0xca8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8003c8c <HAL_DMA_IRQHandler+0xcac>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xb12>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	@ (8003c90 <HAL_DMA_IRQHandler+0xcb0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d108      	bne.n	8003b04 <HAL_DMA_IRQHandler+0xb24>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0208 	bic.w	r2, r2, #8
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e007      	b.n	8003b14 <HAL_DMA_IRQHandler+0xb34>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0204 	bic.w	r2, r2, #4
 8003b12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8165 	beq.w	8003de8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b26:	e15f      	b.n	8003de8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2202      	movs	r2, #2
 8003b32:	409a      	lsls	r2, r3
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80c5 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xce8>
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80bf 	beq.w	8003cc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2202      	movs	r2, #2
 8003b54:	409a      	lsls	r2, r3
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d018      	beq.n	8003b96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 813a 	beq.w	8003dec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b80:	e134      	b.n	8003dec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8130 	beq.w	8003dec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b94:	e12a      	b.n	8003dec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0320 	and.w	r3, r3, #32
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 8089 	bne.w	8003cb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c54 <HAL_DMA_IRQHandler+0xc74>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d04a      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <HAL_DMA_IRQHandler+0xc78>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d045      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <HAL_DMA_IRQHandler+0xc7c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d040      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a26      	ldr	r2, [pc, #152]	@ (8003c60 <HAL_DMA_IRQHandler+0xc80>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d03b      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a25      	ldr	r2, [pc, #148]	@ (8003c64 <HAL_DMA_IRQHandler+0xc84>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d036      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <HAL_DMA_IRQHandler+0xc88>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d031      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_DMA_IRQHandler+0xc8c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d02c      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a20      	ldr	r2, [pc, #128]	@ (8003c70 <HAL_DMA_IRQHandler+0xc90>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d027      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c74 <HAL_DMA_IRQHandler+0xc94>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d022      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <HAL_DMA_IRQHandler+0xc98>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d01d      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <HAL_DMA_IRQHandler+0xc9c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d018      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1a      	ldr	r2, [pc, #104]	@ (8003c80 <HAL_DMA_IRQHandler+0xca0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a19      	ldr	r2, [pc, #100]	@ (8003c84 <HAL_DMA_IRQHandler+0xca4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00e      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <HAL_DMA_IRQHandler+0xca8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d009      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a16      	ldr	r2, [pc, #88]	@ (8003c8c <HAL_DMA_IRQHandler+0xcac>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d004      	beq.n	8003c42 <HAL_DMA_IRQHandler+0xc62>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a14      	ldr	r2, [pc, #80]	@ (8003c90 <HAL_DMA_IRQHandler+0xcb0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d128      	bne.n	8003c94 <HAL_DMA_IRQHandler+0xcb4>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0214 	bic.w	r2, r2, #20
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e027      	b.n	8003ca4 <HAL_DMA_IRQHandler+0xcc4>
 8003c54:	40020010 	.word	0x40020010
 8003c58:	40020028 	.word	0x40020028
 8003c5c:	40020040 	.word	0x40020040
 8003c60:	40020058 	.word	0x40020058
 8003c64:	40020070 	.word	0x40020070
 8003c68:	40020088 	.word	0x40020088
 8003c6c:	400200a0 	.word	0x400200a0
 8003c70:	400200b8 	.word	0x400200b8
 8003c74:	40020410 	.word	0x40020410
 8003c78:	40020428 	.word	0x40020428
 8003c7c:	40020440 	.word	0x40020440
 8003c80:	40020458 	.word	0x40020458
 8003c84:	40020470 	.word	0x40020470
 8003c88:	40020488 	.word	0x40020488
 8003c8c:	400204a0 	.word	0x400204a0
 8003c90:	400204b8 	.word	0x400204b8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 020a 	bic.w	r2, r2, #10
 8003ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8097 	beq.w	8003dec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cc6:	e091      	b.n	8003dec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8088 	beq.w	8003dee <HAL_DMA_IRQHandler+0xe0e>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8082 	beq.w	8003dee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a41      	ldr	r2, [pc, #260]	@ (8003df4 <HAL_DMA_IRQHandler+0xe14>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d04a      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8003df8 <HAL_DMA_IRQHandler+0xe18>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d045      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3e      	ldr	r2, [pc, #248]	@ (8003dfc <HAL_DMA_IRQHandler+0xe1c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d040      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e00 <HAL_DMA_IRQHandler+0xe20>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	@ (8003e04 <HAL_DMA_IRQHandler+0xe24>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d036      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	@ (8003e08 <HAL_DMA_IRQHandler+0xe28>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a38      	ldr	r2, [pc, #224]	@ (8003e0c <HAL_DMA_IRQHandler+0xe2c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02c      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a36      	ldr	r2, [pc, #216]	@ (8003e10 <HAL_DMA_IRQHandler+0xe30>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d027      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a35      	ldr	r2, [pc, #212]	@ (8003e14 <HAL_DMA_IRQHandler+0xe34>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a33      	ldr	r2, [pc, #204]	@ (8003e18 <HAL_DMA_IRQHandler+0xe38>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a32      	ldr	r2, [pc, #200]	@ (8003e1c <HAL_DMA_IRQHandler+0xe3c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a30      	ldr	r2, [pc, #192]	@ (8003e20 <HAL_DMA_IRQHandler+0xe40>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2f      	ldr	r2, [pc, #188]	@ (8003e24 <HAL_DMA_IRQHandler+0xe44>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <HAL_DMA_IRQHandler+0xe48>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <HAL_DMA_IRQHandler+0xe4c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xdaa>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2a      	ldr	r2, [pc, #168]	@ (8003e30 <HAL_DMA_IRQHandler+0xe50>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <HAL_DMA_IRQHandler+0xdbc>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 021c 	bic.w	r2, r2, #28
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e007      	b.n	8003dac <HAL_DMA_IRQHandler+0xdcc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 020e 	bic.w	r2, r2, #14
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
 8003de2:	e004      	b.n	8003dee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003de4:	bf00      	nop
 8003de6:	e002      	b.n	8003dee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de8:	bf00      	nop
 8003dea:	e000      	b.n	8003dee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dee:	3728      	adds	r7, #40	@ 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40020010 	.word	0x40020010
 8003df8:	40020028 	.word	0x40020028
 8003dfc:	40020040 	.word	0x40020040
 8003e00:	40020058 	.word	0x40020058
 8003e04:	40020070 	.word	0x40020070
 8003e08:	40020088 	.word	0x40020088
 8003e0c:	400200a0 	.word	0x400200a0
 8003e10:	400200b8 	.word	0x400200b8
 8003e14:	40020410 	.word	0x40020410
 8003e18:	40020428 	.word	0x40020428
 8003e1c:	40020440 	.word	0x40020440
 8003e20:	40020458 	.word	0x40020458
 8003e24:	40020470 	.word	0x40020470
 8003e28:	40020488 	.word	0x40020488
 8003e2c:	400204a0 	.word	0x400204a0
 8003e30:	400204b8 	.word	0x400204b8

08003e34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a7f      	ldr	r2, [pc, #508]	@ (8004050 <DMA_SetConfig+0x21c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d072      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a7d      	ldr	r2, [pc, #500]	@ (8004054 <DMA_SetConfig+0x220>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d06d      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a7c      	ldr	r2, [pc, #496]	@ (8004058 <DMA_SetConfig+0x224>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d068      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7a      	ldr	r2, [pc, #488]	@ (800405c <DMA_SetConfig+0x228>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d063      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a79      	ldr	r2, [pc, #484]	@ (8004060 <DMA_SetConfig+0x22c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d05e      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a77      	ldr	r2, [pc, #476]	@ (8004064 <DMA_SetConfig+0x230>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d059      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a76      	ldr	r2, [pc, #472]	@ (8004068 <DMA_SetConfig+0x234>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d054      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a74      	ldr	r2, [pc, #464]	@ (800406c <DMA_SetConfig+0x238>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d04f      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a73      	ldr	r2, [pc, #460]	@ (8004070 <DMA_SetConfig+0x23c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d04a      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a71      	ldr	r2, [pc, #452]	@ (8004074 <DMA_SetConfig+0x240>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d045      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a70      	ldr	r2, [pc, #448]	@ (8004078 <DMA_SetConfig+0x244>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d040      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800407c <DMA_SetConfig+0x248>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d03b      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a6d      	ldr	r2, [pc, #436]	@ (8004080 <DMA_SetConfig+0x24c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d036      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8004084 <DMA_SetConfig+0x250>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d031      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6a      	ldr	r2, [pc, #424]	@ (8004088 <DMA_SetConfig+0x254>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d02c      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a68      	ldr	r2, [pc, #416]	@ (800408c <DMA_SetConfig+0x258>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d027      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a67      	ldr	r2, [pc, #412]	@ (8004090 <DMA_SetConfig+0x25c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a65      	ldr	r2, [pc, #404]	@ (8004094 <DMA_SetConfig+0x260>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01d      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a64      	ldr	r2, [pc, #400]	@ (8004098 <DMA_SetConfig+0x264>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a62      	ldr	r2, [pc, #392]	@ (800409c <DMA_SetConfig+0x268>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a61      	ldr	r2, [pc, #388]	@ (80040a0 <DMA_SetConfig+0x26c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5f      	ldr	r2, [pc, #380]	@ (80040a4 <DMA_SetConfig+0x270>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5e      	ldr	r2, [pc, #376]	@ (80040a8 <DMA_SetConfig+0x274>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <DMA_SetConfig+0x10a>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5c      	ldr	r2, [pc, #368]	@ (80040ac <DMA_SetConfig+0x278>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <DMA_SetConfig+0x10e>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <DMA_SetConfig+0x110>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003f50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f62:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	@ (8004050 <DMA_SetConfig+0x21c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04a      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a38      	ldr	r2, [pc, #224]	@ (8004054 <DMA_SetConfig+0x220>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d045      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a36      	ldr	r2, [pc, #216]	@ (8004058 <DMA_SetConfig+0x224>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d040      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a35      	ldr	r2, [pc, #212]	@ (800405c <DMA_SetConfig+0x228>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d03b      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a33      	ldr	r2, [pc, #204]	@ (8004060 <DMA_SetConfig+0x22c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d036      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a32      	ldr	r2, [pc, #200]	@ (8004064 <DMA_SetConfig+0x230>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d031      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <DMA_SetConfig+0x234>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02c      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2f      	ldr	r2, [pc, #188]	@ (800406c <DMA_SetConfig+0x238>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d027      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <DMA_SetConfig+0x23c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004074 <DMA_SetConfig+0x240>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004078 <DMA_SetConfig+0x244>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a29      	ldr	r2, [pc, #164]	@ (800407c <DMA_SetConfig+0x248>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a27      	ldr	r2, [pc, #156]	@ (8004080 <DMA_SetConfig+0x24c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a26      	ldr	r2, [pc, #152]	@ (8004084 <DMA_SetConfig+0x250>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a24      	ldr	r2, [pc, #144]	@ (8004088 <DMA_SetConfig+0x254>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <DMA_SetConfig+0x1d0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a23      	ldr	r2, [pc, #140]	@ (800408c <DMA_SetConfig+0x258>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <DMA_SetConfig+0x1d4>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <DMA_SetConfig+0x1d6>
 8004008:	2300      	movs	r3, #0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d059      	beq.n	80040c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	223f      	movs	r2, #63	@ 0x3f
 8004018:	409a      	lsls	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800402c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	d138      	bne.n	80040b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800404e:	e086      	b.n	800415e <DMA_SetConfig+0x32a>
 8004050:	40020010 	.word	0x40020010
 8004054:	40020028 	.word	0x40020028
 8004058:	40020040 	.word	0x40020040
 800405c:	40020058 	.word	0x40020058
 8004060:	40020070 	.word	0x40020070
 8004064:	40020088 	.word	0x40020088
 8004068:	400200a0 	.word	0x400200a0
 800406c:	400200b8 	.word	0x400200b8
 8004070:	40020410 	.word	0x40020410
 8004074:	40020428 	.word	0x40020428
 8004078:	40020440 	.word	0x40020440
 800407c:	40020458 	.word	0x40020458
 8004080:	40020470 	.word	0x40020470
 8004084:	40020488 	.word	0x40020488
 8004088:	400204a0 	.word	0x400204a0
 800408c:	400204b8 	.word	0x400204b8
 8004090:	58025408 	.word	0x58025408
 8004094:	5802541c 	.word	0x5802541c
 8004098:	58025430 	.word	0x58025430
 800409c:	58025444 	.word	0x58025444
 80040a0:	58025458 	.word	0x58025458
 80040a4:	5802546c 	.word	0x5802546c
 80040a8:	58025480 	.word	0x58025480
 80040ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	60da      	str	r2, [r3, #12]
}
 80040c0:	e04d      	b.n	800415e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a29      	ldr	r2, [pc, #164]	@ (800416c <DMA_SetConfig+0x338>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d022      	beq.n	8004112 <DMA_SetConfig+0x2de>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a27      	ldr	r2, [pc, #156]	@ (8004170 <DMA_SetConfig+0x33c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01d      	beq.n	8004112 <DMA_SetConfig+0x2de>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a26      	ldr	r2, [pc, #152]	@ (8004174 <DMA_SetConfig+0x340>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <DMA_SetConfig+0x2de>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <DMA_SetConfig+0x344>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <DMA_SetConfig+0x2de>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a23      	ldr	r2, [pc, #140]	@ (800417c <DMA_SetConfig+0x348>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <DMA_SetConfig+0x2de>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a21      	ldr	r2, [pc, #132]	@ (8004180 <DMA_SetConfig+0x34c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <DMA_SetConfig+0x2de>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a20      	ldr	r2, [pc, #128]	@ (8004184 <DMA_SetConfig+0x350>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <DMA_SetConfig+0x2de>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1e      	ldr	r2, [pc, #120]	@ (8004188 <DMA_SetConfig+0x354>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <DMA_SetConfig+0x2e2>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <DMA_SetConfig+0x2e4>
 8004116:	2300      	movs	r3, #0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d020      	beq.n	800415e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2201      	movs	r2, #1
 8004126:	409a      	lsls	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b40      	cmp	r3, #64	@ 0x40
 800413a:	d108      	bne.n	800414e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	60da      	str	r2, [r3, #12]
}
 800414c:	e007      	b.n	800415e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	60da      	str	r2, [r3, #12]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	58025408 	.word	0x58025408
 8004170:	5802541c 	.word	0x5802541c
 8004174:	58025430 	.word	0x58025430
 8004178:	58025444 	.word	0x58025444
 800417c:	58025458 	.word	0x58025458
 8004180:	5802546c 	.word	0x5802546c
 8004184:	58025480 	.word	0x58025480
 8004188:	58025494 	.word	0x58025494

0800418c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a42      	ldr	r2, [pc, #264]	@ (80042a4 <DMA_CalcBaseAndBitshift+0x118>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a41      	ldr	r2, [pc, #260]	@ (80042a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3f      	ldr	r2, [pc, #252]	@ (80042ac <DMA_CalcBaseAndBitshift+0x120>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3e      	ldr	r2, [pc, #248]	@ (80042b0 <DMA_CalcBaseAndBitshift+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3c      	ldr	r2, [pc, #240]	@ (80042b4 <DMA_CalcBaseAndBitshift+0x128>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3b      	ldr	r2, [pc, #236]	@ (80042b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a39      	ldr	r2, [pc, #228]	@ (80042bc <DMA_CalcBaseAndBitshift+0x130>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <DMA_CalcBaseAndBitshift+0x134>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a36      	ldr	r2, [pc, #216]	@ (80042c4 <DMA_CalcBaseAndBitshift+0x138>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a35      	ldr	r2, [pc, #212]	@ (80042c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a33      	ldr	r2, [pc, #204]	@ (80042cc <DMA_CalcBaseAndBitshift+0x140>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a32      	ldr	r2, [pc, #200]	@ (80042d0 <DMA_CalcBaseAndBitshift+0x144>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <DMA_CalcBaseAndBitshift+0x148>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2f      	ldr	r2, [pc, #188]	@ (80042d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <DMA_CalcBaseAndBitshift+0x150>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <DMA_CalcBaseAndBitshift+0xa8>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2c      	ldr	r2, [pc, #176]	@ (80042e0 <DMA_CalcBaseAndBitshift+0x154>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <DMA_CalcBaseAndBitshift+0xac>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <DMA_CalcBaseAndBitshift+0xae>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d024      	beq.n	8004288 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	3b10      	subs	r3, #16
 8004246:	4a27      	ldr	r2, [pc, #156]	@ (80042e4 <DMA_CalcBaseAndBitshift+0x158>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	4a24      	ldr	r2, [pc, #144]	@ (80042e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d908      	bls.n	8004278 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	4b1f      	ldr	r3, [pc, #124]	@ (80042ec <DMA_CalcBaseAndBitshift+0x160>)
 800426e:	4013      	ands	r3, r2
 8004270:	1d1a      	adds	r2, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	659a      	str	r2, [r3, #88]	@ 0x58
 8004276:	e00d      	b.n	8004294 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <DMA_CalcBaseAndBitshift+0x160>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6593      	str	r3, [r2, #88]	@ 0x58
 8004286:	e005      	b.n	8004294 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40020010 	.word	0x40020010
 80042a8:	40020028 	.word	0x40020028
 80042ac:	40020040 	.word	0x40020040
 80042b0:	40020058 	.word	0x40020058
 80042b4:	40020070 	.word	0x40020070
 80042b8:	40020088 	.word	0x40020088
 80042bc:	400200a0 	.word	0x400200a0
 80042c0:	400200b8 	.word	0x400200b8
 80042c4:	40020410 	.word	0x40020410
 80042c8:	40020428 	.word	0x40020428
 80042cc:	40020440 	.word	0x40020440
 80042d0:	40020458 	.word	0x40020458
 80042d4:	40020470 	.word	0x40020470
 80042d8:	40020488 	.word	0x40020488
 80042dc:	400204a0 	.word	0x400204a0
 80042e0:	400204b8 	.word	0x400204b8
 80042e4:	aaaaaaab 	.word	0xaaaaaaab
 80042e8:	0800aba0 	.word	0x0800aba0
 80042ec:	fffffc00 	.word	0xfffffc00

080042f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d120      	bne.n	8004346 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004308:	2b03      	cmp	r3, #3
 800430a:	d858      	bhi.n	80043be <DMA_CheckFifoParam+0xce>
 800430c:	a201      	add	r2, pc, #4	@ (adr r2, 8004314 <DMA_CheckFifoParam+0x24>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004325 	.word	0x08004325
 8004318:	08004337 	.word	0x08004337
 800431c:	08004325 	.word	0x08004325
 8004320:	080043bf 	.word	0x080043bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d048      	beq.n	80043c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004334:	e045      	b.n	80043c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800433e:	d142      	bne.n	80043c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004344:	e03f      	b.n	80043c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800434e:	d123      	bne.n	8004398 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004354:	2b03      	cmp	r3, #3
 8004356:	d838      	bhi.n	80043ca <DMA_CheckFifoParam+0xda>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <DMA_CheckFifoParam+0x70>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004371 	.word	0x08004371
 8004364:	08004377 	.word	0x08004377
 8004368:	08004371 	.word	0x08004371
 800436c:	08004389 	.word	0x08004389
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
        break;
 8004374:	e030      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d025      	beq.n	80043ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004386:	e022      	b.n	80043ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004390:	d11f      	bne.n	80043d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004396:	e01c      	b.n	80043d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	2b02      	cmp	r3, #2
 800439e:	d902      	bls.n	80043a6 <DMA_CheckFifoParam+0xb6>
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d003      	beq.n	80043ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80043a4:	e018      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
        break;
 80043aa:	e015      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
    break;
 80043bc:	e00b      	b.n	80043d6 <DMA_CheckFifoParam+0xe6>
        break;
 80043be:	bf00      	nop
 80043c0:	e00a      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        break;
 80043c2:	bf00      	nop
 80043c4:	e008      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        break;
 80043c6:	bf00      	nop
 80043c8:	e006      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
        break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <DMA_CheckFifoParam+0xe8>
    break;
 80043d6:	bf00      	nop
    }
  }

  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop

080043e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a38      	ldr	r2, [pc, #224]	@ (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a36      	ldr	r2, [pc, #216]	@ (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01d      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a35      	ldr	r2, [pc, #212]	@ (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a33      	ldr	r2, [pc, #204]	@ (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a32      	ldr	r2, [pc, #200]	@ (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2f      	ldr	r2, [pc, #188]	@ (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2d      	ldr	r2, [pc, #180]	@ (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01a      	beq.n	8004486 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	3b08      	subs	r3, #8
 8004458:	4a28      	ldr	r2, [pc, #160]	@ (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4b26      	ldr	r3, [pc, #152]	@ (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a24      	ldr	r2, [pc, #144]	@ (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004474:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2201      	movs	r2, #1
 800447e:	409a      	lsls	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004484:	e024      	b.n	80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	3b10      	subs	r3, #16
 800448e:	4a1e      	ldr	r2, [pc, #120]	@ (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a1c      	ldr	r2, [pc, #112]	@ (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d806      	bhi.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d902      	bls.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3308      	adds	r3, #8
 80044ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4b18      	ldr	r3, [pc, #96]	@ (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a16      	ldr	r2, [pc, #88]	@ (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	58025408 	.word	0x58025408
 80044e0:	5802541c 	.word	0x5802541c
 80044e4:	58025430 	.word	0x58025430
 80044e8:	58025444 	.word	0x58025444
 80044ec:	58025458 	.word	0x58025458
 80044f0:	5802546c 	.word	0x5802546c
 80044f4:	58025480 	.word	0x58025480
 80044f8:	58025494 	.word	0x58025494
 80044fc:	cccccccd 	.word	0xcccccccd
 8004500:	16009600 	.word	0x16009600
 8004504:	58025880 	.word	0x58025880
 8004508:	aaaaaaab 	.word	0xaaaaaaab
 800450c:	400204b8 	.word	0x400204b8
 8004510:	4002040f 	.word	0x4002040f
 8004514:	10008200 	.word	0x10008200
 8004518:	40020880 	.word	0x40020880

0800451c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04a      	beq.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d847      	bhi.n	80045c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a25      	ldr	r2, [pc, #148]	@ (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a24      	ldr	r2, [pc, #144]	@ (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d01d      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a22      	ldr	r2, [pc, #136]	@ (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a21      	ldr	r2, [pc, #132]	@ (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1f      	ldr	r2, [pc, #124]	@ (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	@ (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1c      	ldr	r2, [pc, #112]	@ (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	@ (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4b17      	ldr	r3, [pc, #92]	@ (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	461a      	mov	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80045a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80045a6:	e009      	b.n	80045bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a11      	ldr	r2, [pc, #68]	@ (8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b01      	subs	r3, #1
 80045c0:	2201      	movs	r2, #1
 80045c2:	409a      	lsls	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	58025408 	.word	0x58025408
 80045d8:	5802541c 	.word	0x5802541c
 80045dc:	58025430 	.word	0x58025430
 80045e0:	58025444 	.word	0x58025444
 80045e4:	58025458 	.word	0x58025458
 80045e8:	5802546c 	.word	0x5802546c
 80045ec:	58025480 	.word	0x58025480
 80045f0:	58025494 	.word	0x58025494
 80045f4:	1600963f 	.word	0x1600963f
 80045f8:	58025940 	.word	0x58025940
 80045fc:	1000823f 	.word	0x1000823f
 8004600:	40020940 	.word	0x40020940

08004604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004612:	4b86      	ldr	r3, [pc, #536]	@ (800482c <HAL_GPIO_Init+0x228>)
 8004614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004616:	e18c      	b.n	8004932 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 817e 	beq.w	800492c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d005      	beq.n	8004648 <HAL_GPIO_Init+0x44>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d130      	bne.n	80046aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800467e:	2201      	movs	r2, #1
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0201 	and.w	r2, r3, #1
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d017      	beq.n	80046e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	2203      	movs	r2, #3
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d123      	bne.n	800473a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	08da      	lsrs	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3208      	adds	r2, #8
 80046fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	08da      	lsrs	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3208      	adds	r2, #8
 8004734:	69b9      	ldr	r1, [r7, #24]
 8004736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	2203      	movs	r2, #3
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 0203 	and.w	r2, r3, #3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80d8 	beq.w	800492c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477c:	4b2c      	ldr	r3, [pc, #176]	@ (8004830 <HAL_GPIO_Init+0x22c>)
 800477e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004782:	4a2b      	ldr	r2, [pc, #172]	@ (8004830 <HAL_GPIO_Init+0x22c>)
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800478c:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <HAL_GPIO_Init+0x22c>)
 800478e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800479a:	4a26      	ldr	r2, [pc, #152]	@ (8004834 <HAL_GPIO_Init+0x230>)
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	089b      	lsrs	r3, r3, #2
 80047a0:	3302      	adds	r3, #2
 80047a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	220f      	movs	r2, #15
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <HAL_GPIO_Init+0x234>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04a      	beq.n	800485c <HAL_GPIO_Init+0x258>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <HAL_GPIO_Init+0x238>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <HAL_GPIO_Init+0x222>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <HAL_GPIO_Init+0x23c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d025      	beq.n	8004822 <HAL_GPIO_Init+0x21e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004844 <HAL_GPIO_Init+0x240>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <HAL_GPIO_Init+0x21a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <HAL_GPIO_Init+0x244>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x216>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a18      	ldr	r2, [pc, #96]	@ (800484c <HAL_GPIO_Init+0x248>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x212>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <HAL_GPIO_Init+0x24c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x20e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <HAL_GPIO_Init+0x250>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x20a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	@ (8004858 <HAL_GPIO_Init+0x254>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x206>
 8004806:	2309      	movs	r3, #9
 8004808:	e029      	b.n	800485e <HAL_GPIO_Init+0x25a>
 800480a:	230a      	movs	r3, #10
 800480c:	e027      	b.n	800485e <HAL_GPIO_Init+0x25a>
 800480e:	2307      	movs	r3, #7
 8004810:	e025      	b.n	800485e <HAL_GPIO_Init+0x25a>
 8004812:	2306      	movs	r3, #6
 8004814:	e023      	b.n	800485e <HAL_GPIO_Init+0x25a>
 8004816:	2305      	movs	r3, #5
 8004818:	e021      	b.n	800485e <HAL_GPIO_Init+0x25a>
 800481a:	2304      	movs	r3, #4
 800481c:	e01f      	b.n	800485e <HAL_GPIO_Init+0x25a>
 800481e:	2303      	movs	r3, #3
 8004820:	e01d      	b.n	800485e <HAL_GPIO_Init+0x25a>
 8004822:	2302      	movs	r3, #2
 8004824:	e01b      	b.n	800485e <HAL_GPIO_Init+0x25a>
 8004826:	2301      	movs	r3, #1
 8004828:	e019      	b.n	800485e <HAL_GPIO_Init+0x25a>
 800482a:	bf00      	nop
 800482c:	58000080 	.word	0x58000080
 8004830:	58024400 	.word	0x58024400
 8004834:	58000400 	.word	0x58000400
 8004838:	58020000 	.word	0x58020000
 800483c:	58020400 	.word	0x58020400
 8004840:	58020800 	.word	0x58020800
 8004844:	58020c00 	.word	0x58020c00
 8004848:	58021000 	.word	0x58021000
 800484c:	58021400 	.word	0x58021400
 8004850:	58021800 	.word	0x58021800
 8004854:	58021c00 	.word	0x58021c00
 8004858:	58022400 	.word	0x58022400
 800485c:	2300      	movs	r3, #0
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	f002 0203 	and.w	r2, r2, #3
 8004864:	0092      	lsls	r2, r2, #2
 8004866:	4093      	lsls	r3, r2
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800486e:	4938      	ldr	r1, [pc, #224]	@ (8004950 <HAL_GPIO_Init+0x34c>)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	3302      	adds	r3, #2
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80048d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3301      	adds	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	f47f ae6b 	bne.w	8004618 <HAL_GPIO_Init+0x14>
  }
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	3724      	adds	r7, #36	@ 0x24
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	58000400 	.word	0x58000400

08004954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	807b      	strh	r3, [r7, #2]
 8004960:	4613      	mov	r3, r2
 8004962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004964:	787b      	ldrb	r3, [r7, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800496a:	887a      	ldrh	r2, [r7, #2]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004970:	e003      	b.n	800497a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004972:	887b      	ldrh	r3, [r7, #2]
 8004974:	041a      	lsls	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	619a      	str	r2, [r3, #24]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004998:	887a      	ldrh	r2, [r7, #2]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4013      	ands	r3, r2
 800499e:	041a      	lsls	r2, r3, #16
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43d9      	mvns	r1, r3
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	400b      	ands	r3, r1
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	619a      	str	r2, [r3, #24]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	4603      	mov	r3, r0
 80049c2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80049c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc f91f 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_PWREx_ConfigSupply+0x70>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00a      	beq.n	8004a1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a04:	4b16      	ldr	r3, [pc, #88]	@ (8004a60 <HAL_PWREx_ConfigSupply+0x70>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d001      	beq.n	8004a16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e01f      	b.n	8004a56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e01d      	b.n	8004a56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a1a:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <HAL_PWREx_ConfigSupply+0x70>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 0207 	bic.w	r2, r3, #7
 8004a22:	490f      	ldr	r1, [pc, #60]	@ (8004a60 <HAL_PWREx_ConfigSupply+0x70>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a2a:	f7fc fd09 	bl	8001440 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a30:	e009      	b.n	8004a46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a32:	f7fc fd05 	bl	8001440 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a40:	d901      	bls.n	8004a46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e007      	b.n	8004a56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a46:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_PWREx_ConfigSupply+0x70>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a52:	d1ee      	bne.n	8004a32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	58024800 	.word	0x58024800

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	@ 0x30
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e3c8      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8087 	beq.w	8004b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a84:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a8e:	4b86      	ldr	r3, [pc, #536]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d007      	beq.n	8004aaa <HAL_RCC_OscConfig+0x46>
 8004a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9c:	2b18      	cmp	r3, #24
 8004a9e:	d110      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x5e>
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d06c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x12c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d168      	bne.n	8004b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e3a2      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x76>
 8004acc:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a75      	ldr	r2, [pc, #468]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e02e      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x98>
 8004ae2:	4b71      	ldr	r3, [pc, #452]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a70      	ldr	r2, [pc, #448]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b6e      	ldr	r3, [pc, #440]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6d      	ldr	r2, [pc, #436]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0xbc>
 8004b06:	4b68      	ldr	r3, [pc, #416]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b65      	ldr	r3, [pc, #404]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a64      	ldr	r2, [pc, #400]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004b20:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a60      	ldr	r2, [pc, #384]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a5d      	ldr	r2, [pc, #372]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fc fc7e 	bl	8001440 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fc fc7a 	bl	8001440 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e356      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b5a:	4b53      	ldr	r3, [pc, #332]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe4>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fc6a 	bl	8001440 <HAL_GetTick>
 8004b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fc fc66 	bl	8001440 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e342      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b82:	4b49      	ldr	r3, [pc, #292]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x10c>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 808c 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba0:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004baa:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x162>
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	2b18      	cmp	r3, #24
 8004bba:	d137      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1c8>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d132      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc6:	4b38      	ldr	r3, [pc, #224]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x17a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e314      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004bde:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0219 	bic.w	r2, r3, #25
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	492f      	ldr	r1, [pc, #188]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fc fc26 	bl	8001440 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fc fc22 	bl	8001440 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e2fe      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b24      	ldr	r3, [pc, #144]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	4920      	ldr	r1, [pc, #128]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c2a:	e045      	b.n	8004cb8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d026      	beq.n	8004c82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f023 0219 	bic.w	r2, r3, #25
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4919      	ldr	r1, [pc, #100]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fc fbfb 	bl	8001440 <HAL_GetTick>
 8004c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fc fbf7 	bl	8001440 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e2d3      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c60:	4b11      	ldr	r3, [pc, #68]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	490b      	ldr	r1, [pc, #44]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e01a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a08      	ldr	r2, [pc, #32]	@ (8004ca8 <HAL_RCC_OscConfig+0x244>)
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fc fbd7 	bl	8001440 <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c96:	f7fc fbd3 	bl	8001440 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d903      	bls.n	8004cac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e2af      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
 8004ca8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004cac:	4b96      	ldr	r3, [pc, #600]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ee      	bne.n	8004c96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d06a      	beq.n	8004d9a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc4:	4b90      	ldr	r3, [pc, #576]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ccc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cce:	4b8e      	ldr	r3, [pc, #568]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d007      	beq.n	8004cea <HAL_RCC_OscConfig+0x286>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b18      	cmp	r3, #24
 8004cde:	d11b      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2b4>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d116      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cea:	4b87      	ldr	r3, [pc, #540]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_RCC_OscConfig+0x29e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	2b80      	cmp	r3, #128	@ 0x80
 8004cfc:	d001      	beq.n	8004d02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e282      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d02:	4b81      	ldr	r3, [pc, #516]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	061b      	lsls	r3, r3, #24
 8004d10:	497d      	ldr	r1, [pc, #500]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004d16:	e040      	b.n	8004d9a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004d20:	4b79      	ldr	r3, [pc, #484]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a78      	ldr	r2, [pc, #480]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fc fb88 	bl	8001440 <HAL_GetTick>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d34:	f7fc fb84 	bl	8001440 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e260      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d46:	4b70      	ldr	r3, [pc, #448]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004d52:	4b6d      	ldr	r3, [pc, #436]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	4969      	ldr	r1, [pc, #420]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60cb      	str	r3, [r1, #12]
 8004d66:	e018      	b.n	8004d9a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d68:	4b67      	ldr	r3, [pc, #412]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a66      	ldr	r2, [pc, #408]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fb64 	bl	8001440 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d7c:	f7fc fb60 	bl	8001440 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e23c      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d8e:	4b5e      	ldr	r3, [pc, #376]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d019      	beq.n	8004de2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dae:	4b56      	ldr	r3, [pc, #344]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db2:	4a55      	ldr	r2, [pc, #340]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dba:	f7fc fb41 	bl	8001440 <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fc fb3d 	bl	8001440 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e219      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x35e>
 8004de0:	e018      	b.n	8004e14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de2:	4b49      	ldr	r3, [pc, #292]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de6:	4a48      	ldr	r2, [pc, #288]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fc fb27 	bl	8001440 <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df6:	f7fc fb23 	bl	8001440 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e1ff      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e08:	4b3f      	ldr	r3, [pc, #252]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f0      	bne.n	8004df6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d036      	beq.n	8004e8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d019      	beq.n	8004e5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e28:	4b37      	ldr	r3, [pc, #220]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a36      	ldr	r2, [pc, #216]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e34:	f7fc fb04 	bl	8001440 <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3c:	f7fc fb00 	bl	8001440 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e1dc      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x3d8>
 8004e5a:	e018      	b.n	8004e8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a29      	ldr	r2, [pc, #164]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e68:	f7fc faea 	bl	8001440 <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e70:	f7fc fae6 	bl	8001440 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1c2      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e82:	4b21      	ldr	r3, [pc, #132]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8086 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x4a8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f0c <HAL_RCC_OscConfig+0x4a8>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea8:	f7fc faca 	bl	8001440 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fc fac6 	bl	8001440 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	@ 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e1a2      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ec2:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <HAL_RCC_OscConfig+0x4a8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x480>
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	4a0b      	ldr	r2, [pc, #44]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee2:	e032      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d111      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4ac>
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef0:	4a05      	ldr	r2, [pc, #20]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef8:	4b03      	ldr	r3, [pc, #12]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efc:	4a02      	ldr	r2, [pc, #8]	@ (8004f08 <HAL_RCC_OscConfig+0x4a4>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f04:	e021      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e6>
 8004f06:	bf00      	nop
 8004f08:	58024400 	.word	0x58024400
 8004f0c:	58024800 	.word	0x58024800
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d10c      	bne.n	8004f32 <HAL_RCC_OscConfig+0x4ce>
 8004f18:	4b83      	ldr	r3, [pc, #524]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	4a82      	ldr	r2, [pc, #520]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f1e:	f043 0304 	orr.w	r3, r3, #4
 8004f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f24:	4b80      	ldr	r3, [pc, #512]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f28:	4a7f      	ldr	r2, [pc, #508]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f30:	e00b      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e6>
 8004f32:	4b7d      	ldr	r3, [pc, #500]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	4a7c      	ldr	r2, [pc, #496]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	4a79      	ldr	r2, [pc, #484]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f44:	f023 0304 	bic.w	r3, r3, #4
 8004f48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d015      	beq.n	8004f7e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fc fa75 	bl	8001440 <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f58:	e00a      	b.n	8004f70 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5a:	f7fc fa71 	bl	8001440 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e14b      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f70:	4b6d      	ldr	r3, [pc, #436]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0ee      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4f6>
 8004f7c:	e014      	b.n	8004fa8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7e:	f7fc fa5f 	bl	8001440 <HAL_GetTick>
 8004f82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f84:	e00a      	b.n	8004f9c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f86:	f7fc fa5b 	bl	8001440 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e135      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f9c:	4b62      	ldr	r3, [pc, #392]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1ee      	bne.n	8004f86 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 812a 	beq.w	8005206 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fba:	2b18      	cmp	r3, #24
 8004fbc:	f000 80ba 	beq.w	8005134 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	f040 8095 	bne.w	80050f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b57      	ldr	r3, [pc, #348]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a56      	ldr	r2, [pc, #344]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fa33 	bl	8001440 <HAL_GetTick>
 8004fda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fc fa2f 	bl	8001440 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e10b      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8004ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005000:	4b4a      	ldr	r3, [pc, #296]	@ (800512c <HAL_RCC_OscConfig+0x6c8>)
 8005002:	4013      	ands	r3, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800500c:	0112      	lsls	r2, r2, #4
 800500e:	430a      	orrs	r2, r1
 8005010:	4945      	ldr	r1, [pc, #276]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	628b      	str	r3, [r1, #40]	@ 0x28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	3b01      	subs	r3, #1
 800501c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	3b01      	subs	r3, #1
 8005026:	025b      	lsls	r3, r3, #9
 8005028:	b29b      	uxth	r3, r3
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	3b01      	subs	r3, #1
 8005032:	041b      	lsls	r3, r3, #16
 8005034:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503e:	3b01      	subs	r3, #1
 8005040:	061b      	lsls	r3, r3, #24
 8005042:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005046:	4938      	ldr	r1, [pc, #224]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800504c:	4b36      	ldr	r3, [pc, #216]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	4a35      	ldr	r2, [pc, #212]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005058:	4b33      	ldr	r3, [pc, #204]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800505a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800505c:	4b34      	ldr	r3, [pc, #208]	@ (8005130 <HAL_RCC_OscConfig+0x6cc>)
 800505e:	4013      	ands	r3, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005064:	00d2      	lsls	r2, r2, #3
 8005066:	4930      	ldr	r1, [pc, #192]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005068:	4313      	orrs	r3, r2
 800506a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800506c:	4b2e      	ldr	r3, [pc, #184]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005070:	f023 020c 	bic.w	r2, r3, #12
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005078:	492b      	ldr	r1, [pc, #172]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800507e:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	f023 0202 	bic.w	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	4927      	ldr	r1, [pc, #156]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800508c:	4313      	orrs	r3, r2
 800508e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005090:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	4a24      	ldr	r2, [pc, #144]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 8005096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800509a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80050a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80050b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c0:	4b19      	ldr	r3, [pc, #100]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc f9b8 	bl	8001440 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fc f9b4 	bl	8001440 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e090      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050e6:	4b10      	ldr	r3, [pc, #64]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x670>
 80050f2:	e088      	b.n	8005206 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 80050fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fc f99e 	bl	8001440 <HAL_GetTick>
 8005104:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005108:	f7fc f99a 	bl	8001440 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e076      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800511a:	4b03      	ldr	r3, [pc, #12]	@ (8005128 <HAL_RCC_OscConfig+0x6c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x6a4>
 8005126:	e06e      	b.n	8005206 <HAL_RCC_OscConfig+0x7a2>
 8005128:	58024400 	.word	0x58024400
 800512c:	fffffc0c 	.word	0xfffffc0c
 8005130:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005134:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 8005136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005138:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800513a:	4b35      	ldr	r3, [pc, #212]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005144:	2b01      	cmp	r3, #1
 8005146:	d031      	beq.n	80051ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0203 	and.w	r2, r3, #3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d12a      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d122      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d11a      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	0a5b      	lsrs	r3, r3, #9
 800517a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005182:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005184:	429a      	cmp	r2, r3
 8005186:	d111      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d108      	bne.n	80051ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	0e1b      	lsrs	r3, r3, #24
 800519e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d001      	beq.n	80051b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e02b      	b.n	8005208 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80051b0:	4b17      	ldr	r3, [pc, #92]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 80051b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d01f      	beq.n	8005206 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051c6:	4b12      	ldr	r3, [pc, #72]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	4a11      	ldr	r2, [pc, #68]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d2:	f7fc f935 	bl	8001440 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051d8:	bf00      	nop
 80051da:	f7fc f931 	bl	8001440 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d0f9      	beq.n	80051da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 80051e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005214 <HAL_RCC_OscConfig+0x7b0>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051f2:	00d2      	lsls	r2, r2, #3
 80051f4:	4906      	ldr	r1, [pc, #24]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80051fa:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	4a04      	ldr	r2, [pc, #16]	@ (8005210 <HAL_RCC_OscConfig+0x7ac>)
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3730      	adds	r7, #48	@ 0x30
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	58024400 	.word	0x58024400
 8005214:	ffff0007 	.word	0xffff0007

08005218 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e19c      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800522c:	4b8a      	ldr	r3, [pc, #552]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d910      	bls.n	800525c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b87      	ldr	r3, [pc, #540]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f023 020f 	bic.w	r2, r3, #15
 8005242:	4985      	ldr	r1, [pc, #532]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b83      	ldr	r3, [pc, #524]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e184      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	4b7b      	ldr	r3, [pc, #492]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005274:	429a      	cmp	r2, r3
 8005276:	d908      	bls.n	800528a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005278:	4b78      	ldr	r3, [pc, #480]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	4975      	ldr	r1, [pc, #468]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005286:	4313      	orrs	r3, r2
 8005288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	4b70      	ldr	r3, [pc, #448]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d908      	bls.n	80052b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80052a6:	4b6d      	ldr	r3, [pc, #436]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	496a      	ldr	r1, [pc, #424]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	4b64      	ldr	r3, [pc, #400]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d908      	bls.n	80052e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052d4:	4b61      	ldr	r3, [pc, #388]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	495e      	ldr	r1, [pc, #376]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d010      	beq.n	8005314 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	4b59      	ldr	r3, [pc, #356]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052fe:	429a      	cmp	r2, r3
 8005300:	d908      	bls.n	8005314 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005302:	4b56      	ldr	r3, [pc, #344]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	4953      	ldr	r1, [pc, #332]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005310:	4313      	orrs	r3, r2
 8005312:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d010      	beq.n	8005342 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	4b4d      	ldr	r3, [pc, #308]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	429a      	cmp	r2, r3
 800532e:	d908      	bls.n	8005342 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005330:	4b4a      	ldr	r3, [pc, #296]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f023 020f 	bic.w	r2, r3, #15
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4947      	ldr	r1, [pc, #284]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800533e:	4313      	orrs	r3, r2
 8005340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d055      	beq.n	80053fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800534e:	4b43      	ldr	r3, [pc, #268]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4940      	ldr	r1, [pc, #256]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800535c:	4313      	orrs	r3, r2
 800535e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d107      	bne.n	8005378 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005368:	4b3c      	ldr	r3, [pc, #240]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d121      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0f6      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d107      	bne.n	8005390 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005380:	4b36      	ldr	r3, [pc, #216]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d115      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0ea      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d107      	bne.n	80053a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005398:	4b30      	ldr	r3, [pc, #192]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0de      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a8:	4b2c      	ldr	r3, [pc, #176]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0d6      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053b8:	4b28      	ldr	r3, [pc, #160]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f023 0207 	bic.w	r2, r3, #7
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4925      	ldr	r1, [pc, #148]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ca:	f7fc f839 	bl	8001440 <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d2:	f7fc f835 	bl	8001440 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0be      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e8:	4b1c      	ldr	r3, [pc, #112]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d1eb      	bne.n	80053d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	4b14      	ldr	r3, [pc, #80]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	429a      	cmp	r2, r3
 8005414:	d208      	bcs.n	8005428 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005416:	4b11      	ldr	r3, [pc, #68]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f023 020f 	bic.w	r2, r3, #15
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	490e      	ldr	r1, [pc, #56]	@ (800545c <HAL_RCC_ClockConfig+0x244>)
 8005424:	4313      	orrs	r3, r2
 8005426:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d214      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 020f 	bic.w	r2, r3, #15
 800543e:	4906      	ldr	r1, [pc, #24]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <HAL_RCC_ClockConfig+0x240>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d005      	beq.n	8005460 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e086      	b.n	8005566 <HAL_RCC_ClockConfig+0x34e>
 8005458:	52002000 	.word	0x52002000
 800545c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	4b3f      	ldr	r3, [pc, #252]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005478:	429a      	cmp	r2, r3
 800547a:	d208      	bcs.n	800548e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800547c:	4b3c      	ldr	r3, [pc, #240]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	4939      	ldr	r1, [pc, #228]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 800548a:	4313      	orrs	r3, r2
 800548c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	4b34      	ldr	r3, [pc, #208]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d208      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054aa:	4b31      	ldr	r3, [pc, #196]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	492e      	ldr	r1, [pc, #184]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d208      	bcs.n	80054ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054d8:	4b25      	ldr	r3, [pc, #148]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	4922      	ldr	r1, [pc, #136]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69da      	ldr	r2, [r3, #28]
 80054fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005502:	429a      	cmp	r2, r3
 8005504:	d208      	bcs.n	8005518 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005506:	4b1a      	ldr	r3, [pc, #104]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4917      	ldr	r1, [pc, #92]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 8005514:	4313      	orrs	r3, r2
 8005516:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005518:	f000 f834 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 800551c:	4602      	mov	r2, r0
 800551e:	4b14      	ldr	r3, [pc, #80]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	4912      	ldr	r1, [pc, #72]	@ (8005574 <HAL_RCC_ClockConfig+0x35c>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
 8005534:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005536:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <HAL_RCC_ClockConfig+0x358>)
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	4a0d      	ldr	r2, [pc, #52]	@ (8005574 <HAL_RCC_ClockConfig+0x35c>)
 8005540:	5cd3      	ldrb	r3, [r2, r3]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
 800554c:	4a0a      	ldr	r2, [pc, #40]	@ (8005578 <HAL_RCC_ClockConfig+0x360>)
 800554e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005550:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <HAL_RCC_ClockConfig+0x364>)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x368>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fb ff26 	bl	80013ac <HAL_InitTick>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
 8005574:	0800ab90 	.word	0x0800ab90
 8005578:	24000008 	.word	0x24000008
 800557c:	24000004 	.word	0x24000004
 8005580:	2400000c 	.word	0x2400000c

08005584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800558a:	4bb3      	ldr	r3, [pc, #716]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005592:	2b18      	cmp	r3, #24
 8005594:	f200 8155 	bhi.w	8005842 <HAL_RCC_GetSysClockFreq+0x2be>
 8005598:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	08005605 	.word	0x08005605
 80055a4:	08005843 	.word	0x08005843
 80055a8:	08005843 	.word	0x08005843
 80055ac:	08005843 	.word	0x08005843
 80055b0:	08005843 	.word	0x08005843
 80055b4:	08005843 	.word	0x08005843
 80055b8:	08005843 	.word	0x08005843
 80055bc:	08005843 	.word	0x08005843
 80055c0:	0800562b 	.word	0x0800562b
 80055c4:	08005843 	.word	0x08005843
 80055c8:	08005843 	.word	0x08005843
 80055cc:	08005843 	.word	0x08005843
 80055d0:	08005843 	.word	0x08005843
 80055d4:	08005843 	.word	0x08005843
 80055d8:	08005843 	.word	0x08005843
 80055dc:	08005843 	.word	0x08005843
 80055e0:	08005631 	.word	0x08005631
 80055e4:	08005843 	.word	0x08005843
 80055e8:	08005843 	.word	0x08005843
 80055ec:	08005843 	.word	0x08005843
 80055f0:	08005843 	.word	0x08005843
 80055f4:	08005843 	.word	0x08005843
 80055f8:	08005843 	.word	0x08005843
 80055fc:	08005843 	.word	0x08005843
 8005600:	08005637 	.word	0x08005637
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005604:	4b94      	ldr	r3, [pc, #592]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005610:	4b91      	ldr	r3, [pc, #580]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	4a90      	ldr	r2, [pc, #576]	@ (800585c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005622:	e111      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005624:	4b8d      	ldr	r3, [pc, #564]	@ (800585c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005626:	61bb      	str	r3, [r7, #24]
      break;
 8005628:	e10e      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800562a:	4b8d      	ldr	r3, [pc, #564]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800562c:	61bb      	str	r3, [r7, #24]
      break;
 800562e:	e10b      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005630:	4b8c      	ldr	r3, [pc, #560]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005632:	61bb      	str	r3, [r7, #24]
      break;
 8005634:	e108      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005636:	4b88      	ldr	r3, [pc, #544]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005640:	4b85      	ldr	r3, [pc, #532]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	091b      	lsrs	r3, r3, #4
 8005646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800564a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800564c:	4b82      	ldr	r3, [pc, #520]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005656:	4b80      	ldr	r3, [pc, #512]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565a:	08db      	lsrs	r3, r3, #3
 800565c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80e1 	beq.w	800583c <HAL_RCC_GetSysClockFreq+0x2b8>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b02      	cmp	r3, #2
 800567e:	f000 8083 	beq.w	8005788 <HAL_RCC_GetSysClockFreq+0x204>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b02      	cmp	r3, #2
 8005686:	f200 80a1 	bhi.w	80057cc <HAL_RCC_GetSysClockFreq+0x248>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_RCC_GetSysClockFreq+0x114>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d056      	beq.n	8005744 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005696:	e099      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005698:	4b6f      	ldr	r3, [pc, #444]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d02d      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056a4:	4b6c      	ldr	r3, [pc, #432]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	08db      	lsrs	r3, r3, #3
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	4a6b      	ldr	r2, [pc, #428]	@ (800585c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
 80056b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ce:	4b62      	ldr	r3, [pc, #392]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056de:	ed97 6a02 	vldr	s12, [r7, #8]
 80056e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80056fe:	e087      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800586c <HAL_RCC_GetSysClockFreq+0x2e8>
 800570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005712:	4b51      	ldr	r3, [pc, #324]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571a:	ee07 3a90 	vmov	s15, r3
 800571e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005722:	ed97 6a02 	vldr	s12, [r7, #8]
 8005726:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800572a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800572e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005742:	e065      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005870 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005756:	4b40      	ldr	r3, [pc, #256]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575e:	ee07 3a90 	vmov	s15, r3
 8005762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005766:	ed97 6a02 	vldr	s12, [r7, #8]
 800576a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800576e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005782:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005786:	e043      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005874 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579a:	4b2f      	ldr	r3, [pc, #188]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80057ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057ca:	e021      	b.n	8005810 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005870 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057de:	4b1e      	ldr	r3, [pc, #120]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800580e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005810:	4b11      	ldr	r3, [pc, #68]	@ (8005858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	0a5b      	lsrs	r3, r3, #9
 8005816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800581a:	3301      	adds	r3, #1
 800581c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005828:	edd7 6a07 	vldr	s13, [r7, #28]
 800582c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005834:	ee17 3a90 	vmov	r3, s15
 8005838:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800583a:	e005      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
      break;
 8005840:	e002      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005842:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005844:	61bb      	str	r3, [r7, #24]
      break;
 8005846:	bf00      	nop
  }

  return sysclockfreq;
 8005848:	69bb      	ldr	r3, [r7, #24]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3724      	adds	r7, #36	@ 0x24
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	58024400 	.word	0x58024400
 800585c:	03d09000 	.word	0x03d09000
 8005860:	003d0900 	.word	0x003d0900
 8005864:	017d7840 	.word	0x017d7840
 8005868:	46000000 	.word	0x46000000
 800586c:	4c742400 	.word	0x4c742400
 8005870:	4a742400 	.word	0x4a742400
 8005874:	4bbebc20 	.word	0x4bbebc20

08005878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800587e:	f7ff fe81 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8005882:	4602      	mov	r2, r0
 8005884:	4b10      	ldr	r3, [pc, #64]	@ (80058c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	490f      	ldr	r1, [pc, #60]	@ (80058cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005890:	5ccb      	ldrb	r3, [r1, r3]
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800589c:	4b0a      	ldr	r3, [pc, #40]	@ (80058c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <HAL_RCC_GetHCLKFreq+0x54>)
 80058a6:	5cd3      	ldrb	r3, [r2, r3]
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	fa22 f303 	lsr.w	r3, r2, r3
 80058b2:	4a07      	ldr	r2, [pc, #28]	@ (80058d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80058b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058b6:	4a07      	ldr	r2, [pc, #28]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058bc:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	58024400 	.word	0x58024400
 80058cc:	0800ab90 	.word	0x0800ab90
 80058d0:	24000008 	.word	0x24000008
 80058d4:	24000004 	.word	0x24000004

080058d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058dc:	f7ff ffcc 	bl	8005878 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4904      	ldr	r1, [pc, #16]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	58024400 	.word	0x58024400
 8005900:	0800ab90 	.word	0x0800ab90

08005904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005908:	f7ff ffb6 	bl	8005878 <HAL_RCC_GetHCLKFreq>
 800590c:	4602      	mov	r2, r0
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	4904      	ldr	r1, [pc, #16]	@ (800592c <HAL_RCC_GetPCLK2Freq+0x28>)
 800591a:	5ccb      	ldrb	r3, [r1, r3]
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	58024400 	.word	0x58024400
 800592c:	0800ab90 	.word	0x0800ab90

08005930 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005934:	b0c6      	sub	sp, #280	@ 0x118
 8005936:	af00      	add	r7, sp, #0
 8005938:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005942:	2300      	movs	r3, #0
 8005944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005954:	2500      	movs	r5, #0
 8005956:	ea54 0305 	orrs.w	r3, r4, r5
 800595a:	d049      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005962:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005966:	d02f      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005968:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800596c:	d828      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800596e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005972:	d01a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005978:	d822      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800597e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005982:	d007      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005984:	e01c      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005986:	4bab      	ldr	r3, [pc, #684]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	4aaa      	ldr	r2, [pc, #680]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800598c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005992:	e01a      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005998:	3308      	adds	r3, #8
 800599a:	2102      	movs	r1, #2
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fc25 	bl	80071ec <RCCEx_PLL2_Config>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059a8:	e00f      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ae:	3328      	adds	r3, #40	@ 0x28
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 fccc 	bl	8007350 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059be:	e004      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059d2:	4b98      	ldr	r3, [pc, #608]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e0:	4a94      	ldr	r2, [pc, #592]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059e2:	430b      	orrs	r3, r1
 80059e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80059e6:	e003      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80059fc:	f04f 0900 	mov.w	r9, #0
 8005a00:	ea58 0309 	orrs.w	r3, r8, r9
 8005a04:	d047      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d82a      	bhi.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a10:	a201      	add	r2, pc, #4	@ (adr r2, 8005a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a2d 	.word	0x08005a2d
 8005a1c:	08005a3b 	.word	0x08005a3b
 8005a20:	08005a51 	.word	0x08005a51
 8005a24:	08005a6f 	.word	0x08005a6f
 8005a28:	08005a6f 	.word	0x08005a6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4b81      	ldr	r3, [pc, #516]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	4a80      	ldr	r2, [pc, #512]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a38:	e01a      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3e:	3308      	adds	r3, #8
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fbd2 	bl	80071ec <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a4e:	e00f      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a54:	3328      	adds	r3, #40	@ 0x28
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 fc79 	bl	8007350 <RCCEx_PLL3_Config>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a64:	e004      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a6c:	e000      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a78:	4b6e      	ldr	r3, [pc, #440]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a7c:	f023 0107 	bic.w	r1, r3, #7
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a86:	4a6b      	ldr	r2, [pc, #428]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a8c:	e003      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005aa2:	f04f 0b00 	mov.w	fp, #0
 8005aa6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005aaa:	d05b      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ab4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ab8:	d03b      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005aba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005abe:	d834      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ac4:	d037      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005ac6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005aca:	d82e      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005acc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ad0:	d033      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ad6:	d828      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005adc:	d01a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ae2:	d822      	bhi.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aec:	d007      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005aee:	e01c      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af0:	4b50      	ldr	r3, [pc, #320]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	4a4f      	ldr	r2, [pc, #316]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005afc:	e01e      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b02:	3308      	adds	r3, #8
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 fb70 	bl	80071ec <RCCEx_PLL2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b12:	e013      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b18:	3328      	adds	r3, #40	@ 0x28
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fc17 	bl	8007350 <RCCEx_PLL3_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b28:	e008      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b30:	e004      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b44:	4b3b      	ldr	r3, [pc, #236]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b48:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b54:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b56:	430b      	orrs	r3, r1
 8005b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b5a:	e003      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d05d      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b8c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b90:	d03b      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005b92:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b96:	d834      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b9c:	d037      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ba2:	d82e      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ba4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005ba8:	d033      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005baa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bae:	d828      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005bb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bb4:	d01a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bba:	d822      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bc4:	d007      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005bc6:	e01c      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bd4:	e01e      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bda:	3308      	adds	r3, #8
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fb04 	bl	80071ec <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bea:	e013      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf0:	3328      	adds	r3, #40	@ 0x28
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fbab 	bl	8007350 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c00:	e008      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10d      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c20:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c2c:	4a01      	ldr	r2, [pc, #4]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c32:	e005      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c50:	2300      	movs	r3, #0
 8005c52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005c56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	d03a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c66:	2b30      	cmp	r3, #48	@ 0x30
 8005c68:	d01f      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005c6a:	2b30      	cmp	r3, #48	@ 0x30
 8005c6c:	d819      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d00c      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d815      	bhi.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d019      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d111      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c7e:	4baa      	ldr	r3, [pc, #680]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c82:	4aa9      	ldr	r2, [pc, #676]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c8a:	e011      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	3308      	adds	r3, #8
 8005c92:	2102      	movs	r1, #2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 faa9 	bl	80071ec <RCCEx_PLL2_Config>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ca0:	e006      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cb8:	4b9b      	ldr	r3, [pc, #620]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc6:	4a98      	ldr	r2, [pc, #608]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ccc:	e003      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005cec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	d051      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d00:	d035      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005d02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d06:	d82e      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d0c:	d031      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005d0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d12:	d828      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d18:	d01a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1e:	d822      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d28:	d007      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005d2a:	e01c      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	4a7d      	ldr	r2, [pc, #500]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d38:	e01c      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d3e:	3308      	adds	r3, #8
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 fa52 	bl	80071ec <RCCEx_PLL2_Config>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d4e:	e011      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 faf9 	bl	8007350 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d64:	e006      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d6c:	e002      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8a:	4a67      	ldr	r2, [pc, #412]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d90:	e003      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005da6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005daa:	2300      	movs	r3, #0
 8005dac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005db0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	d053      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dc4:	d033      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005dc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dca:	d82c      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005dcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dd0:	d02f      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005dd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dd6:	d826      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005dd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ddc:	d02b      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005dde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005de2:	d820      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de8:	d012      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dee:	d81a      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d022      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df8:	d115      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfe:	3308      	adds	r3, #8
 8005e00:	2101      	movs	r1, #1
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f9f2 	bl	80071ec <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e0e:	e015      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e14:	3328      	adds	r3, #40	@ 0x28
 8005e16:	2101      	movs	r1, #1
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fa99 	bl	8007350 <RCCEx_PLL3_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e24:	e00a      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e2c:	e006      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e004      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e32:	bf00      	nop
 8005e34:	e002      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e36:	bf00      	nop
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e44:	4b38      	ldr	r3, [pc, #224]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e52:	4a35      	ldr	r2, [pc, #212]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e58:	e003      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e72:	2300      	movs	r3, #0
 8005e74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	d058      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e8e:	d033      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e94:	d82c      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9a:	d02f      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea0:	d826      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ea6:	d02b      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005ea8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eac:	d820      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb2:	d012      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb8:	d81a      	bhi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d022      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ec2:	d115      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	3308      	adds	r3, #8
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 f98d 	bl	80071ec <RCCEx_PLL2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ed8:	e015      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ede:	3328      	adds	r3, #40	@ 0x28
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fa34 	bl	8007350 <RCCEx_PLL3_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005eee:	e00a      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ef6:	e006      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ef8:	bf00      	nop
 8005efa:	e004      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005efc:	bf00      	nop
 8005efe:	e002      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f00:	bf00      	nop
 8005f02:	e000      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10e      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f0e:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f1e:	4a02      	ldr	r2, [pc, #8]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f24:	e006      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f44:	2300      	movs	r3, #0
 8005f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005f4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4313      	orrs	r3, r2
 8005f52:	d037      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f5e:	d00e      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f64:	d816      	bhi.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d018      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f6e:	d111      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f70:	4bc4      	ldr	r3, [pc, #784]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f74:	4ac3      	ldr	r2, [pc, #780]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f7c:	e00f      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f82:	3308      	adds	r3, #8
 8005f84:	2101      	movs	r1, #1
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 f930 	bl	80071ec <RCCEx_PLL2_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005f92:	e004      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f9a:	e000      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fa6:	4bb7      	ldr	r3, [pc, #732]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005faa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb4:	4ab3      	ldr	r2, [pc, #716]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fba:	e003      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	d039      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d81c      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006031 	.word	0x08006031
 8005ff8:	08006005 	.word	0x08006005
 8005ffc:	08006013 	.word	0x08006013
 8006000:	08006031 	.word	0x08006031
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006004:	4b9f      	ldr	r3, [pc, #636]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	4a9e      	ldr	r2, [pc, #632]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800600a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800600e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006010:	e00f      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006016:	3308      	adds	r3, #8
 8006018:	2102      	movs	r1, #2
 800601a:	4618      	mov	r0, r3
 800601c:	f001 f8e6 	bl	80071ec <RCCEx_PLL2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006026:	e004      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800603a:	4b92      	ldr	r3, [pc, #584]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800603c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800603e:	f023 0103 	bic.w	r1, r3, #3
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006048:	4a8e      	ldr	r2, [pc, #568]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800604a:	430b      	orrs	r3, r1
 800604c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800604e:	e003      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800606e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	f000 8099 	beq.w	80061ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800607a:	4b83      	ldr	r3, [pc, #524]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a82      	ldr	r2, [pc, #520]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006084:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006086:	f7fb f9db 	bl	8001440 <HAL_GetTick>
 800608a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800608e:	e00b      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006090:	f7fb f9d6 	bl	8001440 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b64      	cmp	r3, #100	@ 0x64
 800609e:	d903      	bls.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060a6:	e005      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060a8:	4b77      	ldr	r3, [pc, #476]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ed      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80060b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d173      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80060bc:	4b71      	ldr	r3, [pc, #452]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060c8:	4053      	eors	r3, r2
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d015      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060de:	4b69      	ldr	r3, [pc, #420]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	4a68      	ldr	r2, [pc, #416]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ea:	4b66      	ldr	r3, [pc, #408]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ee:	4a65      	ldr	r2, [pc, #404]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80060f6:	4a63      	ldr	r2, [pc, #396]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80060fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80060fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610a:	d118      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fb f998 	bl	8001440 <HAL_GetTick>
 8006110:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006114:	e00d      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f7fb f993 	bl	8001440 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006126:	429a      	cmp	r2, r3
 8006128:	d903      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006130:	e005      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006132:	4b54      	ldr	r3, [pc, #336]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0eb      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800613e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006142:	2b00      	cmp	r3, #0
 8006144:	d129      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800614e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006156:	d10e      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006158:	4b4a      	ldr	r3, [pc, #296]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006168:	091a      	lsrs	r2, r3, #4
 800616a:	4b48      	ldr	r3, [pc, #288]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800616c:	4013      	ands	r3, r2
 800616e:	4a45      	ldr	r2, [pc, #276]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006170:	430b      	orrs	r3, r1
 8006172:	6113      	str	r3, [r2, #16]
 8006174:	e005      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006176:	4b43      	ldr	r3, [pc, #268]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	4a42      	ldr	r2, [pc, #264]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800617c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006180:	6113      	str	r3, [r2, #16]
 8006182:	4b40      	ldr	r3, [pc, #256]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006184:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800618e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006192:	4a3c      	ldr	r2, [pc, #240]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006194:	430b      	orrs	r3, r1
 8006196:	6713      	str	r3, [r2, #112]	@ 0x70
 8006198:	e008      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800619a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800619e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80061a2:	e003      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	f002 0301 	and.w	r3, r2, #1
 80061b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061bc:	2300      	movs	r3, #0
 80061be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80061c6:	460b      	mov	r3, r1
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f000 808f 	beq.w	80062ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80061ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061d4:	2b28      	cmp	r3, #40	@ 0x28
 80061d6:	d871      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80061d8:	a201      	add	r2, pc, #4	@ (adr r2, 80061e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	080062c5 	.word	0x080062c5
 80061e4:	080062bd 	.word	0x080062bd
 80061e8:	080062bd 	.word	0x080062bd
 80061ec:	080062bd 	.word	0x080062bd
 80061f0:	080062bd 	.word	0x080062bd
 80061f4:	080062bd 	.word	0x080062bd
 80061f8:	080062bd 	.word	0x080062bd
 80061fc:	080062bd 	.word	0x080062bd
 8006200:	08006291 	.word	0x08006291
 8006204:	080062bd 	.word	0x080062bd
 8006208:	080062bd 	.word	0x080062bd
 800620c:	080062bd 	.word	0x080062bd
 8006210:	080062bd 	.word	0x080062bd
 8006214:	080062bd 	.word	0x080062bd
 8006218:	080062bd 	.word	0x080062bd
 800621c:	080062bd 	.word	0x080062bd
 8006220:	080062a7 	.word	0x080062a7
 8006224:	080062bd 	.word	0x080062bd
 8006228:	080062bd 	.word	0x080062bd
 800622c:	080062bd 	.word	0x080062bd
 8006230:	080062bd 	.word	0x080062bd
 8006234:	080062bd 	.word	0x080062bd
 8006238:	080062bd 	.word	0x080062bd
 800623c:	080062bd 	.word	0x080062bd
 8006240:	080062c5 	.word	0x080062c5
 8006244:	080062bd 	.word	0x080062bd
 8006248:	080062bd 	.word	0x080062bd
 800624c:	080062bd 	.word	0x080062bd
 8006250:	080062bd 	.word	0x080062bd
 8006254:	080062bd 	.word	0x080062bd
 8006258:	080062bd 	.word	0x080062bd
 800625c:	080062bd 	.word	0x080062bd
 8006260:	080062c5 	.word	0x080062c5
 8006264:	080062bd 	.word	0x080062bd
 8006268:	080062bd 	.word	0x080062bd
 800626c:	080062bd 	.word	0x080062bd
 8006270:	080062bd 	.word	0x080062bd
 8006274:	080062bd 	.word	0x080062bd
 8006278:	080062bd 	.word	0x080062bd
 800627c:	080062bd 	.word	0x080062bd
 8006280:	080062c5 	.word	0x080062c5
 8006284:	58024400 	.word	0x58024400
 8006288:	58024800 	.word	0x58024800
 800628c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006294:	3308      	adds	r3, #8
 8006296:	2101      	movs	r1, #1
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ffa7 	bl	80071ec <RCCEx_PLL2_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062a4:	e00f      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062aa:	3328      	adds	r3, #40	@ 0x28
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f84e 	bl	8007350 <RCCEx_PLL3_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80062ba:	e004      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062c2:	e000      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80062c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062ce:	4bbf      	ldr	r3, [pc, #764]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062dc:	4abb      	ldr	r2, [pc, #748]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80062e2:	e003      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f002 0302 	and.w	r3, r2, #2
 80062f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006302:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d041      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006312:	2b05      	cmp	r3, #5
 8006314:	d824      	bhi.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006369 	.word	0x08006369
 8006320:	08006335 	.word	0x08006335
 8006324:	0800634b 	.word	0x0800634b
 8006328:	08006369 	.word	0x08006369
 800632c:	08006369 	.word	0x08006369
 8006330:	08006369 	.word	0x08006369
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006338:	3308      	adds	r3, #8
 800633a:	2101      	movs	r1, #1
 800633c:	4618      	mov	r0, r3
 800633e:	f000 ff55 	bl	80071ec <RCCEx_PLL2_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006348:	e00f      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800634a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800634e:	3328      	adds	r3, #40	@ 0x28
 8006350:	2101      	movs	r1, #1
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fffc 	bl	8007350 <RCCEx_PLL3_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800635e:	e004      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006372:	4b96      	ldr	r3, [pc, #600]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006376:	f023 0107 	bic.w	r1, r3, #7
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006380:	4a92      	ldr	r2, [pc, #584]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006382:	430b      	orrs	r3, r1
 8006384:	6553      	str	r3, [r2, #84]	@ 0x54
 8006386:	e003      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800638c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f002 0304 	and.w	r3, r2, #4
 800639c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d044      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b8:	2b05      	cmp	r3, #5
 80063ba:	d825      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80063bc:	a201      	add	r2, pc, #4	@ (adr r2, 80063c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	08006411 	.word	0x08006411
 80063c8:	080063dd 	.word	0x080063dd
 80063cc:	080063f3 	.word	0x080063f3
 80063d0:	08006411 	.word	0x08006411
 80063d4:	08006411 	.word	0x08006411
 80063d8:	08006411 	.word	0x08006411
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	3308      	adds	r3, #8
 80063e2:	2101      	movs	r1, #1
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 ff01 	bl	80071ec <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80063f0:	e00f      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	3328      	adds	r3, #40	@ 0x28
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 ffa8 	bl	8007350 <RCCEx_PLL3_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006406:	e004      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800640e:	e000      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800641a:	4b6c      	ldr	r3, [pc, #432]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641e:	f023 0107 	bic.w	r1, r3, #7
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	4a68      	ldr	r2, [pc, #416]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800642c:	430b      	orrs	r3, r1
 800642e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006430:	e003      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f002 0320 	and.w	r3, r2, #32
 8006446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800644a:	2300      	movs	r3, #0
 800644c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006450:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006454:	460b      	mov	r3, r1
 8006456:	4313      	orrs	r3, r2
 8006458:	d055      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006466:	d033      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800646c:	d82c      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006472:	d02f      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006478:	d826      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800647a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800647e:	d02b      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006484:	d820      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648a:	d012      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800648c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006490:	d81a      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d022      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800649a:	d115      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	3308      	adds	r3, #8
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fea1 	bl	80071ec <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064b0:	e015      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b6:	3328      	adds	r3, #40	@ 0x28
 80064b8:	2102      	movs	r1, #2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 ff48 	bl	8007350 <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80064c6:	e00a      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064ce:	e006      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064d0:	bf00      	nop
 80064d2:	e004      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064d4:	bf00      	nop
 80064d6:	e002      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064d8:	bf00      	nop
 80064da:	e000      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80064dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10b      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e6:	4b39      	ldr	r3, [pc, #228]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064f6:	4a35      	ldr	r2, [pc, #212]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80064fc:	e003      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006502:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006512:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006516:	2300      	movs	r3, #0
 8006518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800651c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d058      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800652e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006532:	d033      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006534:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006538:	d82c      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	d02f      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006544:	d826      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006546:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800654a:	d02b      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800654c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006550:	d820      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006556:	d012      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800655c:	d81a      	bhi.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d022      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006566:	d115      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	3308      	adds	r3, #8
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fe3b 	bl	80071ec <RCCEx_PLL2_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800657c:	e015      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800657e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006582:	3328      	adds	r3, #40	@ 0x28
 8006584:	2102      	movs	r1, #2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fee2 	bl	8007350 <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006592:	e00a      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800659a:	e006      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800659c:	bf00      	nop
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80065a0:	bf00      	nop
 80065a2:	e002      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80065a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10e      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065b2:	4b06      	ldr	r3, [pc, #24]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065c2:	4a02      	ldr	r2, [pc, #8]	@ (80065cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c8:	e006      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80065ca:	bf00      	nop
 80065cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80065e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065e8:	2300      	movs	r3, #0
 80065ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80065f2:	460b      	mov	r3, r1
 80065f4:	4313      	orrs	r3, r2
 80065f6:	d055      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006600:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006604:	d033      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006606:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800660a:	d82c      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800660c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006610:	d02f      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006616:	d826      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006618:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800661c:	d02b      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800661e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006622:	d820      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006628:	d012      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800662a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800662e:	d81a      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d022      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006638:	d115      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	3308      	adds	r3, #8
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fdd2 	bl	80071ec <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800664e:	e015      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006654:	3328      	adds	r3, #40	@ 0x28
 8006656:	2102      	movs	r1, #2
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fe79 	bl	8007350 <RCCEx_PLL3_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006664:	e00a      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800666c:	e006      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800666e:	bf00      	nop
 8006670:	e004      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006672:	bf00      	nop
 8006674:	e002      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006676:	bf00      	nop
 8006678:	e000      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800667a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006684:	4ba0      	ldr	r3, [pc, #640]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006688:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006694:	4a9c      	ldr	r2, [pc, #624]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006696:	430b      	orrs	r3, r1
 8006698:	6593      	str	r3, [r2, #88]	@ 0x58
 800669a:	e003      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f002 0308 	and.w	r3, r2, #8
 80066b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d01e      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d0:	d10c      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	3328      	adds	r3, #40	@ 0x28
 80066d8:	2102      	movs	r1, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fe38 	bl	8007350 <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80066ec:	4b86      	ldr	r3, [pc, #536]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066fc:	4a82      	ldr	r2, [pc, #520]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066fe:	430b      	orrs	r3, r1
 8006700:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f002 0310 	and.w	r3, r2, #16
 800670e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006718:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d01e      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800672a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800672e:	d10c      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006734:	3328      	adds	r3, #40	@ 0x28
 8006736:	2102      	movs	r1, #2
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fe09 	bl	8007350 <RCCEx_PLL3_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800674a:	4b6f      	ldr	r3, [pc, #444]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800675a:	4a6b      	ldr	r2, [pc, #428]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800676c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800676e:	2300      	movs	r3, #0
 8006770:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006772:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006776:	460b      	mov	r3, r1
 8006778:	4313      	orrs	r3, r2
 800677a:	d03e      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006788:	d022      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800678a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800678e:	d81b      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006798:	d00b      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800679a:	e015      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800679c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a0:	3308      	adds	r3, #8
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fd21 	bl	80071ec <RCCEx_PLL2_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067b0:	e00f      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	3328      	adds	r3, #40	@ 0x28
 80067b8:	2102      	movs	r1, #2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fdc8 	bl	8007350 <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80067c6:	e004      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067ce:	e000      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80067d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067da:	4b4b      	ldr	r3, [pc, #300]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067ea:	4a47      	ldr	r2, [pc, #284]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067ec:	430b      	orrs	r3, r1
 80067ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f0:	e003      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006806:	673b      	str	r3, [r7, #112]	@ 0x70
 8006808:	2300      	movs	r3, #0
 800680a:	677b      	str	r3, [r7, #116]	@ 0x74
 800680c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006810:	460b      	mov	r3, r1
 8006812:	4313      	orrs	r3, r2
 8006814:	d03b      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006822:	d01f      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006824:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006828:	d818      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800682e:	d003      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006830:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006834:	d007      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006836:	e011      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006838:	4b33      	ldr	r3, [pc, #204]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	4a32      	ldr	r2, [pc, #200]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800683e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006844:	e00f      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	3328      	adds	r3, #40	@ 0x28
 800684c:	2101      	movs	r1, #1
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fd7e 	bl	8007350 <RCCEx_PLL3_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800685a:	e004      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10b      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800686e:	4b26      	ldr	r3, [pc, #152]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006872:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687e:	4a22      	ldr	r2, [pc, #136]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006880:	430b      	orrs	r3, r1
 8006882:	6553      	str	r3, [r2, #84]	@ 0x54
 8006884:	e003      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800688a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800689a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800689c:	2300      	movs	r3, #0
 800689e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80068a4:	460b      	mov	r3, r1
 80068a6:	4313      	orrs	r3, r2
 80068a8:	d034      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80068aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b8:	d007      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80068ba:	e011      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068bc:	4b12      	ldr	r3, [pc, #72]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c0:	4a11      	ldr	r2, [pc, #68]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068c8:	e00e      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	3308      	adds	r3, #8
 80068d0:	2102      	movs	r1, #2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc8a 	bl	80071ec <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80068de:	e003      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10d      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068f0:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fe:	4a02      	ldr	r2, [pc, #8]	@ (8006908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006900:	430b      	orrs	r3, r1
 8006902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006904:	e006      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006910:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006920:	663b      	str	r3, [r7, #96]	@ 0x60
 8006922:	2300      	movs	r3, #0
 8006924:	667b      	str	r3, [r7, #100]	@ 0x64
 8006926:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d00c      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006934:	3328      	adds	r3, #40	@ 0x28
 8006936:	2102      	movs	r1, #2
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fd09 	bl	8007350 <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006958:	2300      	movs	r3, #0
 800695a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800695c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	d036      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800696c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006970:	d018      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006976:	d811      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800697c:	d014      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800697e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006982:	d80b      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d011      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698c:	d106      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698e:	4bb7      	ldr	r3, [pc, #732]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	4ab6      	ldr	r2, [pc, #728]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800699a:	e008      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069a2:	e004      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80069a4:	bf00      	nop
 80069a6:	e002      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80069ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80069b6:	4bad      	ldr	r3, [pc, #692]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069c4:	4aa9      	ldr	r2, [pc, #676]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069c6:	430b      	orrs	r3, r1
 80069c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80069ca:	e003      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80069e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e2:	2300      	movs	r3, #0
 80069e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80069e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069f0:	4b9e      	ldr	r3, [pc, #632]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fe:	4a9b      	ldr	r2, [pc, #620]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a12:	2300      	movs	r3, #0
 8006a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d009      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a20:	4b92      	ldr	r3, [pc, #584]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a24:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a2e:	4a8f      	ldr	r2, [pc, #572]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a42:	2300      	movs	r3, #0
 8006a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a50:	4b86      	ldr	r3, [pc, #536]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	4a85      	ldr	r2, [pc, #532]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a5a:	6113      	str	r3, [r2, #16]
 8006a5c:	4b83      	ldr	r3, [pc, #524]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a5e:	6919      	ldr	r1, [r3, #16]
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a68:	4a80      	ldr	r2, [pc, #512]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006a84:	460b      	mov	r3, r1
 8006a86:	4313      	orrs	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a8a:	4b78      	ldr	r3, [pc, #480]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a98:	4a74      	ldr	r2, [pc, #464]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aac:	2300      	movs	r3, #0
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	d00a      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006aba:	4b6c      	ldr	r3, [pc, #432]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006abe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aca:	4a68      	ldr	r2, [pc, #416]	@ (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006acc:	430b      	orrs	r3, r1
 8006ace:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	2100      	movs	r1, #0
 8006ada:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d011      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af0:	3308      	adds	r3, #8
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fb79 	bl	80071ec <RCCEx_PLL2_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6239      	str	r1, [r7, #32]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b26:	460b      	mov	r3, r1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	d011      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b30:	3308      	adds	r3, #8
 8006b32:	2101      	movs	r1, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fb59 	bl	80071ec <RCCEx_PLL2_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	2100      	movs	r1, #0
 8006b5a:	61b9      	str	r1, [r7, #24]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b66:	460b      	mov	r3, r1
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	d011      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	3308      	adds	r3, #8
 8006b72:	2102      	movs	r1, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fb39 	bl	80071ec <RCCEx_PLL2_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	6139      	str	r1, [r7, #16]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d011      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	3328      	adds	r3, #40	@ 0x28
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fbcb 	bl	8007350 <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006be6:	460b      	mov	r3, r1
 8006be8:	4313      	orrs	r3, r2
 8006bea:	d011      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	3328      	adds	r3, #40	@ 0x28
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fbab 	bl	8007350 <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6039      	str	r1, [r7, #0]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	607b      	str	r3, [r7, #4]
 8006c22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d011      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c30:	3328      	adds	r3, #40	@ 0x28
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 fb8b 	bl	8007350 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006c50:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e000      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006c64:	46bd      	mov	sp, r7
 8006c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c6a:	bf00      	nop
 8006c6c:	58024400 	.word	0x58024400

08006c70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c74:	f7fe fe00 	bl	8005878 <HAL_RCC_GetHCLKFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b06      	ldr	r3, [pc, #24]	@ (8006c94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	4904      	ldr	r1, [pc, #16]	@ (8006c98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	58024400 	.word	0x58024400
 8006c98:	0800ab90 	.word	0x0800ab90

08006c9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b089      	sub	sp, #36	@ 0x24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ca4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006cae:	4b9f      	ldr	r3, [pc, #636]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb2:	0b1b      	lsrs	r3, r3, #12
 8006cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cba:	4b9c      	ldr	r3, [pc, #624]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006cc6:	4b99      	ldr	r3, [pc, #612]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	08db      	lsrs	r3, r3, #3
 8006ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8111 	beq.w	8006f0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f000 8083 	beq.w	8006df8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	f200 80a1 	bhi.w	8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d056      	beq.n	8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d06:	e099      	b.n	8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d08:	4b88      	ldr	r3, [pc, #544]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02d      	beq.n	8006d70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d14:	4b85      	ldr	r3, [pc, #532]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	08db      	lsrs	r3, r3, #3
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	4a84      	ldr	r2, [pc, #528]	@ (8006f30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d20:	fa22 f303 	lsr.w	r3, r2, r3
 8006d24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d6e:	e087      	b.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d82:	4b6a      	ldr	r3, [pc, #424]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db2:	e065      	b.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	ee07 3a90 	vmov	s15, r3
 8006dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	4b59      	ldr	r3, [pc, #356]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006df6:	e043      	b.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0a:	4b48      	ldr	r3, [pc, #288]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e3a:	e021      	b.n	8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b37      	ldr	r3, [pc, #220]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006e80:	4b2a      	ldr	r3, [pc, #168]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e84:	0a5b      	lsrs	r3, r3, #9
 8006e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea6:	ee17 2a90 	vmov	r2, s15
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006eae:	4b1f      	ldr	r3, [pc, #124]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed4:	ee17 2a90 	vmov	r2, s15
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006edc:	4b13      	ldr	r3, [pc, #76]	@ (8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	0e1b      	lsrs	r3, r3, #24
 8006ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f02:	ee17 2a90 	vmov	r2, s15
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f0a:	e008      	b.n	8006f1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	609a      	str	r2, [r3, #8]
}
 8006f1e:	bf00      	nop
 8006f20:	3724      	adds	r7, #36	@ 0x24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	03d09000 	.word	0x03d09000
 8006f34:	46000000 	.word	0x46000000
 8006f38:	4c742400 	.word	0x4c742400
 8006f3c:	4a742400 	.word	0x4a742400
 8006f40:	4bbebc20 	.word	0x4bbebc20

08006f44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b089      	sub	sp, #36	@ 0x24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f4c:	4ba1      	ldr	r3, [pc, #644]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006f56:	4b9f      	ldr	r3, [pc, #636]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	0d1b      	lsrs	r3, r3, #20
 8006f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f62:	4b9c      	ldr	r3, [pc, #624]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006f6e:	4b99      	ldr	r3, [pc, #612]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f72:	08db      	lsrs	r3, r3, #3
 8006f74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8111 	beq.w	80071b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f000 8083 	beq.w	80070a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f200 80a1 	bhi.w	80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d056      	beq.n	800705c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fae:	e099      	b.n	80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb0:	4b88      	ldr	r3, [pc, #544]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0320 	and.w	r3, r3, #32
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d02d      	beq.n	8007018 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fbc:	4b85      	ldr	r3, [pc, #532]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	4a84      	ldr	r2, [pc, #528]	@ (80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	ee07 3a90 	vmov	s15, r3
 8006fd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800700a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800700e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007012:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007016:	e087      	b.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007022:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702a:	4b6a      	ldr	r3, [pc, #424]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703a:	ed97 6a03 	vldr	s12, [r7, #12]
 800703e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800704e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800705a:	e065      	b.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800706a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800706e:	4b59      	ldr	r3, [pc, #356]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007082:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800708e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800709e:	e043      	b.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b2:	4b48      	ldr	r3, [pc, #288]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e2:	e021      	b.n	8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f6:	4b37      	ldr	r3, [pc, #220]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007106:	ed97 6a03 	vldr	s12, [r7, #12]
 800710a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800710e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007126:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007128:	4b2a      	ldr	r3, [pc, #168]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712c:	0a5b      	lsrs	r3, r3, #9
 800712e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800713e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007142:	edd7 6a07 	vldr	s13, [r7, #28]
 8007146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800714a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800714e:	ee17 2a90 	vmov	r2, s15
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007156:	4b1f      	ldr	r3, [pc, #124]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715a:	0c1b      	lsrs	r3, r3, #16
 800715c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007168:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800716c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007170:	edd7 6a07 	vldr	s13, [r7, #28]
 8007174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800717c:	ee17 2a90 	vmov	r2, s15
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007184:	4b13      	ldr	r3, [pc, #76]	@ (80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	0e1b      	lsrs	r3, r3, #24
 800718a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800719a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800719e:	edd7 6a07 	vldr	s13, [r7, #28]
 80071a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071aa:	ee17 2a90 	vmov	r2, s15
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071b2:	e008      	b.n	80071c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
}
 80071c6:	bf00      	nop
 80071c8:	3724      	adds	r7, #36	@ 0x24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	58024400 	.word	0x58024400
 80071d8:	03d09000 	.word	0x03d09000
 80071dc:	46000000 	.word	0x46000000
 80071e0:	4c742400 	.word	0x4c742400
 80071e4:	4a742400 	.word	0x4a742400
 80071e8:	4bbebc20 	.word	0x4bbebc20

080071ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071fa:	4b53      	ldr	r3, [pc, #332]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	2b03      	cmp	r3, #3
 8007204:	d101      	bne.n	800720a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e099      	b.n	800733e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800720a:	4b4f      	ldr	r3, [pc, #316]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a4e      	ldr	r2, [pc, #312]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007210:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007216:	f7fa f913 	bl	8001440 <HAL_GetTick>
 800721a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800721c:	e008      	b.n	8007230 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800721e:	f7fa f90f 	bl	8001440 <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d901      	bls.n	8007230 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e086      	b.n	800733e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007230:	4b45      	ldr	r3, [pc, #276]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f0      	bne.n	800721e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800723c:	4b42      	ldr	r3, [pc, #264]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 800723e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007240:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	031b      	lsls	r3, r3, #12
 800724a:	493f      	ldr	r1, [pc, #252]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	3b01      	subs	r3, #1
 8007256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	3b01      	subs	r3, #1
 8007260:	025b      	lsls	r3, r3, #9
 8007262:	b29b      	uxth	r3, r3
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	3b01      	subs	r3, #1
 800726c:	041b      	lsls	r3, r3, #16
 800726e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	3b01      	subs	r3, #1
 800727a:	061b      	lsls	r3, r3, #24
 800727c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007280:	4931      	ldr	r1, [pc, #196]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007282:	4313      	orrs	r3, r2
 8007284:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007286:	4b30      	ldr	r3, [pc, #192]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	492d      	ldr	r1, [pc, #180]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007294:	4313      	orrs	r3, r2
 8007296:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007298:	4b2b      	ldr	r3, [pc, #172]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	f023 0220 	bic.w	r2, r3, #32
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	4928      	ldr	r1, [pc, #160]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072aa:	4b27      	ldr	r3, [pc, #156]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	4a26      	ldr	r2, [pc, #152]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072b0:	f023 0310 	bic.w	r3, r3, #16
 80072b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072b6:	4b24      	ldr	r3, [pc, #144]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ba:	4b24      	ldr	r3, [pc, #144]	@ (800734c <RCCEx_PLL2_Config+0x160>)
 80072bc:	4013      	ands	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	69d2      	ldr	r2, [r2, #28]
 80072c2:	00d2      	lsls	r2, r2, #3
 80072c4:	4920      	ldr	r1, [pc, #128]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072d0:	f043 0310 	orr.w	r3, r3, #16
 80072d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e0:	4a19      	ldr	r2, [pc, #100]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072e8:	e00f      	b.n	800730a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d106      	bne.n	80072fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072f0:	4b15      	ldr	r3, [pc, #84]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	4a14      	ldr	r2, [pc, #80]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 80072f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072fc:	e005      	b.n	800730a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072fe:	4b12      	ldr	r3, [pc, #72]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007302:	4a11      	ldr	r2, [pc, #68]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007304:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007308:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800730a:	4b0f      	ldr	r3, [pc, #60]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a0e      	ldr	r2, [pc, #56]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007310:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007316:	f7fa f893 	bl	8001440 <HAL_GetTick>
 800731a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800731c:	e008      	b.n	8007330 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800731e:	f7fa f88f 	bl	8001440 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	2b02      	cmp	r3, #2
 800732a:	d901      	bls.n	8007330 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e006      	b.n	800733e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <RCCEx_PLL2_Config+0x15c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0f0      	beq.n	800731e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
 800734c:	ffff0007 	.word	0xffff0007

08007350 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800735e:	4b53      	ldr	r3, [pc, #332]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007362:	f003 0303 	and.w	r3, r3, #3
 8007366:	2b03      	cmp	r3, #3
 8007368:	d101      	bne.n	800736e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e099      	b.n	80074a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800736e:	4b4f      	ldr	r3, [pc, #316]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a4e      	ldr	r2, [pc, #312]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800737a:	f7fa f861 	bl	8001440 <HAL_GetTick>
 800737e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007380:	e008      	b.n	8007394 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007382:	f7fa f85d 	bl	8001440 <HAL_GetTick>
 8007386:	4602      	mov	r2, r0
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e086      	b.n	80074a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007394:	4b45      	ldr	r3, [pc, #276]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f0      	bne.n	8007382 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073a0:	4b42      	ldr	r3, [pc, #264]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	051b      	lsls	r3, r3, #20
 80073ae:	493f      	ldr	r1, [pc, #252]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	025b      	lsls	r3, r3, #9
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	3b01      	subs	r3, #1
 80073de:	061b      	lsls	r3, r3, #24
 80073e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073e4:	4931      	ldr	r1, [pc, #196]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073ea:	4b30      	ldr	r3, [pc, #192]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	492d      	ldr	r1, [pc, #180]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073fc:	4b2b      	ldr	r3, [pc, #172]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	4928      	ldr	r1, [pc, #160]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800740e:	4b27      	ldr	r3, [pc, #156]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007412:	4a26      	ldr	r2, [pc, #152]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800741a:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 800741c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800741e:	4b24      	ldr	r3, [pc, #144]	@ (80074b0 <RCCEx_PLL3_Config+0x160>)
 8007420:	4013      	ands	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	69d2      	ldr	r2, [r2, #28]
 8007426:	00d2      	lsls	r2, r2, #3
 8007428:	4920      	ldr	r1, [pc, #128]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800742e:	4b1f      	ldr	r3, [pc, #124]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	4a1e      	ldr	r2, [pc, #120]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007438:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007440:	4b1a      	ldr	r3, [pc, #104]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	4a19      	ldr	r2, [pc, #100]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007446:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800744a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800744c:	e00f      	b.n	800746e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007454:	4b15      	ldr	r3, [pc, #84]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 800745a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800745e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007460:	e005      	b.n	800746e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007462:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007466:	4a11      	ldr	r2, [pc, #68]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007468:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800746c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800746e:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a0e      	ldr	r2, [pc, #56]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800747a:	f7f9 ffe1 	bl	8001440 <HAL_GetTick>
 800747e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007480:	e008      	b.n	8007494 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007482:	f7f9 ffdd 	bl	8001440 <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e006      	b.n	80074a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007494:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <RCCEx_PLL3_Config+0x15c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0f0      	beq.n	8007482 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400
 80074b0:	ffff0007 	.word	0xffff0007

080074b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e049      	b.n	800755a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7f9 fccc 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4619      	mov	r1, r3
 80074f2:	4610      	mov	r0, r2
 80074f4:	f000 fc58 	bl	8007da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d001      	beq.n	800757c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e05e      	b.n	800763a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68da      	ldr	r2, [r3, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a2b      	ldr	r2, [pc, #172]	@ (8007648 <HAL_TIM_Base_Start_IT+0xe4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02c      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a6:	d027      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a27      	ldr	r2, [pc, #156]	@ (800764c <HAL_TIM_Base_Start_IT+0xe8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d022      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a26      	ldr	r2, [pc, #152]	@ (8007650 <HAL_TIM_Base_Start_IT+0xec>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01d      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a24      	ldr	r2, [pc, #144]	@ (8007654 <HAL_TIM_Base_Start_IT+0xf0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d018      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a23      	ldr	r2, [pc, #140]	@ (8007658 <HAL_TIM_Base_Start_IT+0xf4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a21      	ldr	r2, [pc, #132]	@ (800765c <HAL_TIM_Base_Start_IT+0xf8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00e      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a20      	ldr	r2, [pc, #128]	@ (8007660 <HAL_TIM_Base_Start_IT+0xfc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007664 <HAL_TIM_Base_Start_IT+0x100>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_TIM_Base_Start_IT+0x94>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007668 <HAL_TIM_Base_Start_IT+0x104>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d115      	bne.n	8007624 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	4b1b      	ldr	r3, [pc, #108]	@ (800766c <HAL_TIM_Base_Start_IT+0x108>)
 8007600:	4013      	ands	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b06      	cmp	r3, #6
 8007608:	d015      	beq.n	8007636 <HAL_TIM_Base_Start_IT+0xd2>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007610:	d011      	beq.n	8007636 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007622:	e008      	b.n	8007636 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	e000      	b.n	8007638 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40010000 	.word	0x40010000
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40000c00 	.word	0x40000c00
 8007658:	40010400 	.word	0x40010400
 800765c:	40001800 	.word	0x40001800
 8007660:	40014000 	.word	0x40014000
 8007664:	4000e000 	.word	0x4000e000
 8007668:	4000e400 	.word	0x4000e400
 800766c:	00010007 	.word	0x00010007

08007670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e049      	b.n	8007716 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f841 	bl	800771e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f000 fb7a 	bl	8007da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d020      	beq.n	8007796 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d01b      	beq.n	8007796 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f06f 0202 	mvn.w	r2, #2
 8007766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	f003 0303 	and.w	r3, r3, #3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 faf5 	bl	8007d6c <HAL_TIM_IC_CaptureCallback>
 8007782:	e005      	b.n	8007790 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fae7 	bl	8007d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 faf8 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d020      	beq.n	80077e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 0304 	and.w	r3, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01b      	beq.n	80077e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f06f 0204 	mvn.w	r2, #4
 80077b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 facf 	bl	8007d6c <HAL_TIM_IC_CaptureCallback>
 80077ce:	e005      	b.n	80077dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fac1 	bl	8007d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fad2 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d020      	beq.n	800782e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 0308 	and.w	r3, r3, #8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01b      	beq.n	800782e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f06f 0208 	mvn.w	r2, #8
 80077fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2204      	movs	r2, #4
 8007804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 faa9 	bl	8007d6c <HAL_TIM_IC_CaptureCallback>
 800781a:	e005      	b.n	8007828 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fa9b 	bl	8007d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 faac 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d020      	beq.n	800787a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01b      	beq.n	800787a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0210 	mvn.w	r2, #16
 800784a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2208      	movs	r2, #8
 8007850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa83 	bl	8007d6c <HAL_TIM_IC_CaptureCallback>
 8007866:	e005      	b.n	8007874 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa75 	bl	8007d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa86 	bl	8007d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00c      	beq.n	800789e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d007      	beq.n	800789e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f06f 0201 	mvn.w	r2, #1
 8007896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7f9 f9d7 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80078c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 ff3a 	bl	8008740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00c      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 ff32 	bl	8008754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800790c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa40 	bl	8007d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 0220 	mvn.w	r2, #32
 8007930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fefa 	bl	800872c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800795a:	2302      	movs	r3, #2
 800795c:	e0ff      	b.n	8007b5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b14      	cmp	r3, #20
 800796a:	f200 80f0 	bhi.w	8007b4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800796e:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	080079c9 	.word	0x080079c9
 8007978:	08007b4f 	.word	0x08007b4f
 800797c:	08007b4f 	.word	0x08007b4f
 8007980:	08007b4f 	.word	0x08007b4f
 8007984:	08007a09 	.word	0x08007a09
 8007988:	08007b4f 	.word	0x08007b4f
 800798c:	08007b4f 	.word	0x08007b4f
 8007990:	08007b4f 	.word	0x08007b4f
 8007994:	08007a4b 	.word	0x08007a4b
 8007998:	08007b4f 	.word	0x08007b4f
 800799c:	08007b4f 	.word	0x08007b4f
 80079a0:	08007b4f 	.word	0x08007b4f
 80079a4:	08007a8b 	.word	0x08007a8b
 80079a8:	08007b4f 	.word	0x08007b4f
 80079ac:	08007b4f 	.word	0x08007b4f
 80079b0:	08007b4f 	.word	0x08007b4f
 80079b4:	08007acd 	.word	0x08007acd
 80079b8:	08007b4f 	.word	0x08007b4f
 80079bc:	08007b4f 	.word	0x08007b4f
 80079c0:	08007b4f 	.word	0x08007b4f
 80079c4:	08007b0d 	.word	0x08007b0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fa9c 	bl	8007f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699a      	ldr	r2, [r3, #24]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0208 	orr.w	r2, r2, #8
 80079e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0204 	bic.w	r2, r2, #4
 80079f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6999      	ldr	r1, [r3, #24]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	619a      	str	r2, [r3, #24]
      break;
 8007a06:	e0a5      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fb0c 	bl	800802c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6999      	ldr	r1, [r3, #24]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	619a      	str	r2, [r3, #24]
      break;
 8007a48:	e084      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fb75 	bl	8008140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0208 	orr.w	r2, r2, #8
 8007a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0204 	bic.w	r2, r2, #4
 8007a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69d9      	ldr	r1, [r3, #28]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	61da      	str	r2, [r3, #28]
      break;
 8007a88:	e064      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68b9      	ldr	r1, [r7, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fbdd 	bl	8008250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69d9      	ldr	r1, [r3, #28]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	021a      	lsls	r2, r3, #8
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	61da      	str	r2, [r3, #28]
      break;
 8007aca:	e043      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fc26 	bl	8008324 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0208 	orr.w	r2, r2, #8
 8007ae6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0204 	bic.w	r2, r2, #4
 8007af6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b0a:	e023      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fc6a 	bl	80083ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	021a      	lsls	r2, r3, #8
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b4c:	e002      	b.n	8007b54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]
      break;
 8007b52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop

08007b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIM_ConfigClockSource+0x1c>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e0dc      	b.n	8007d3e <HAL_TIM_ConfigClockSource+0x1d6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8007d48 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a64      	ldr	r2, [pc, #400]	@ (8007d4c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	f000 80a9 	beq.w	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bc0:	4a62      	ldr	r2, [pc, #392]	@ (8007d4c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	f200 80ae 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bc8:	4a61      	ldr	r2, [pc, #388]	@ (8007d50 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	f000 80a1 	beq.w	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bd0:	4a5f      	ldr	r2, [pc, #380]	@ (8007d50 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	f200 80a6 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bd8:	4a5e      	ldr	r2, [pc, #376]	@ (8007d54 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	f000 8099 	beq.w	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007be0:	4a5c      	ldr	r2, [pc, #368]	@ (8007d54 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	f200 809e 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007be8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bec:	f000 8091 	beq.w	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bf0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007bf4:	f200 8096 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bfc:	f000 8089 	beq.w	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c04:	f200 808e 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c0c:	d03e      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0x124>
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c12:	f200 8087 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1a:	f000 8086 	beq.w	8007d2a <HAL_TIM_ConfigClockSource+0x1c2>
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c22:	d87f      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c24:	2b70      	cmp	r3, #112	@ 0x70
 8007c26:	d01a      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0xf6>
 8007c28:	2b70      	cmp	r3, #112	@ 0x70
 8007c2a:	d87b      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c2c:	2b60      	cmp	r3, #96	@ 0x60
 8007c2e:	d050      	beq.n	8007cd2 <HAL_TIM_ConfigClockSource+0x16a>
 8007c30:	2b60      	cmp	r3, #96	@ 0x60
 8007c32:	d877      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c34:	2b50      	cmp	r3, #80	@ 0x50
 8007c36:	d03c      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x14a>
 8007c38:	2b50      	cmp	r3, #80	@ 0x50
 8007c3a:	d873      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c3c:	2b40      	cmp	r3, #64	@ 0x40
 8007c3e:	d058      	beq.n	8007cf2 <HAL_TIM_ConfigClockSource+0x18a>
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d86f      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c44:	2b30      	cmp	r3, #48	@ 0x30
 8007c46:	d064      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c48:	2b30      	cmp	r3, #48	@ 0x30
 8007c4a:	d86b      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d060      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d867      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05c      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d05a      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c5c:	e062      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c6e:	f000 fca1 	bl	80085b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
      break;
 8007c8a:	e04f      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c9c:	f000 fc8a 	bl	80085b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cae:	609a      	str	r2, [r3, #8]
      break;
 8007cb0:	e03c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f000 fbfa 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2150      	movs	r1, #80	@ 0x50
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fc54 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 8007cd0:	e02c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f000 fc19 	bl	8008516 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2160      	movs	r1, #96	@ 0x60
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fc44 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 8007cf0:	e01c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f000 fbda 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2140      	movs	r1, #64	@ 0x40
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fc34 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 8007d10:	e00c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f000 fc2b 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 8007d22:	e003      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
      break;
 8007d28:	e000      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	ffceff88 	.word	0xffceff88
 8007d4c:	00100040 	.word	0x00100040
 8007d50:	00100030 	.word	0x00100030
 8007d54:	00100020 	.word	0x00100020

08007d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a4a      	ldr	r2, [pc, #296]	@ (8007ee4 <TIM_Base_SetConfig+0x13c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <TIM_Base_SetConfig+0x40>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc6:	d00f      	beq.n	8007de8 <TIM_Base_SetConfig+0x40>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a47      	ldr	r2, [pc, #284]	@ (8007ee8 <TIM_Base_SetConfig+0x140>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d00b      	beq.n	8007de8 <TIM_Base_SetConfig+0x40>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a46      	ldr	r2, [pc, #280]	@ (8007eec <TIM_Base_SetConfig+0x144>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d007      	beq.n	8007de8 <TIM_Base_SetConfig+0x40>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a45      	ldr	r2, [pc, #276]	@ (8007ef0 <TIM_Base_SetConfig+0x148>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d003      	beq.n	8007de8 <TIM_Base_SetConfig+0x40>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a44      	ldr	r2, [pc, #272]	@ (8007ef4 <TIM_Base_SetConfig+0x14c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d108      	bne.n	8007dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a39      	ldr	r2, [pc, #228]	@ (8007ee4 <TIM_Base_SetConfig+0x13c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d027      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e08:	d023      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a36      	ldr	r2, [pc, #216]	@ (8007ee8 <TIM_Base_SetConfig+0x140>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01f      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a35      	ldr	r2, [pc, #212]	@ (8007eec <TIM_Base_SetConfig+0x144>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d01b      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a34      	ldr	r2, [pc, #208]	@ (8007ef0 <TIM_Base_SetConfig+0x148>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d017      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a33      	ldr	r2, [pc, #204]	@ (8007ef4 <TIM_Base_SetConfig+0x14c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a32      	ldr	r2, [pc, #200]	@ (8007ef8 <TIM_Base_SetConfig+0x150>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00f      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a31      	ldr	r2, [pc, #196]	@ (8007efc <TIM_Base_SetConfig+0x154>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a30      	ldr	r2, [pc, #192]	@ (8007f00 <TIM_Base_SetConfig+0x158>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d007      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a2f      	ldr	r2, [pc, #188]	@ (8007f04 <TIM_Base_SetConfig+0x15c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_Base_SetConfig+0xaa>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f08 <TIM_Base_SetConfig+0x160>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d108      	bne.n	8007e64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	@ (8007ee4 <TIM_Base_SetConfig+0x13c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_Base_SetConfig+0x108>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a18      	ldr	r2, [pc, #96]	@ (8007ef4 <TIM_Base_SetConfig+0x14c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_Base_SetConfig+0x108>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a17      	ldr	r2, [pc, #92]	@ (8007ef8 <TIM_Base_SetConfig+0x150>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_Base_SetConfig+0x108>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	@ (8007efc <TIM_Base_SetConfig+0x154>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_Base_SetConfig+0x108>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a15      	ldr	r2, [pc, #84]	@ (8007f00 <TIM_Base_SetConfig+0x158>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d103      	bne.n	8007eb8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d105      	bne.n	8007ed6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40010400 	.word	0x40010400
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	40014800 	.word	0x40014800
 8007f04:	4000e000 	.word	0x4000e000
 8007f08:	4000e400 	.word	0x4000e400

08007f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f023 0201 	bic.w	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4b37      	ldr	r3, [pc, #220]	@ (8008014 <TIM_OC1_SetConfig+0x108>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0303 	bic.w	r3, r3, #3
 8007f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f023 0302 	bic.w	r3, r3, #2
 8007f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a2d      	ldr	r2, [pc, #180]	@ (8008018 <TIM_OC1_SetConfig+0x10c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d00f      	beq.n	8007f88 <TIM_OC1_SetConfig+0x7c>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800801c <TIM_OC1_SetConfig+0x110>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <TIM_OC1_SetConfig+0x7c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a2b      	ldr	r2, [pc, #172]	@ (8008020 <TIM_OC1_SetConfig+0x114>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d007      	beq.n	8007f88 <TIM_OC1_SetConfig+0x7c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8008024 <TIM_OC1_SetConfig+0x118>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC1_SetConfig+0x7c>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a29      	ldr	r2, [pc, #164]	@ (8008028 <TIM_OC1_SetConfig+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d10c      	bne.n	8007fa2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f023 0308 	bic.w	r3, r3, #8
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f023 0304 	bic.w	r3, r3, #4
 8007fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8008018 <TIM_OC1_SetConfig+0x10c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00f      	beq.n	8007fca <TIM_OC1_SetConfig+0xbe>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1b      	ldr	r2, [pc, #108]	@ (800801c <TIM_OC1_SetConfig+0x110>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <TIM_OC1_SetConfig+0xbe>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8008020 <TIM_OC1_SetConfig+0x114>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d007      	beq.n	8007fca <TIM_OC1_SetConfig+0xbe>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <TIM_OC1_SetConfig+0x118>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_OC1_SetConfig+0xbe>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a18      	ldr	r2, [pc, #96]	@ (8008028 <TIM_OC1_SetConfig+0x11c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d111      	bne.n	8007fee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	fffeff8f 	.word	0xfffeff8f
 8008018:	40010000 	.word	0x40010000
 800801c:	40010400 	.word	0x40010400
 8008020:	40014000 	.word	0x40014000
 8008024:	40014400 	.word	0x40014400
 8008028:	40014800 	.word	0x40014800

0800802c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	f023 0210 	bic.w	r2, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4b34      	ldr	r3, [pc, #208]	@ (8008128 <TIM_OC2_SetConfig+0xfc>)
 8008058:	4013      	ands	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	021b      	lsls	r3, r3, #8
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4313      	orrs	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f023 0320 	bic.w	r3, r3, #32
 8008076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a29      	ldr	r2, [pc, #164]	@ (800812c <TIM_OC2_SetConfig+0x100>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_OC2_SetConfig+0x68>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a28      	ldr	r2, [pc, #160]	@ (8008130 <TIM_OC2_SetConfig+0x104>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d10d      	bne.n	80080b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800809a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	011b      	lsls	r3, r3, #4
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a1e      	ldr	r2, [pc, #120]	@ (800812c <TIM_OC2_SetConfig+0x100>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00f      	beq.n	80080d8 <TIM_OC2_SetConfig+0xac>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008130 <TIM_OC2_SetConfig+0x104>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00b      	beq.n	80080d8 <TIM_OC2_SetConfig+0xac>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008134 <TIM_OC2_SetConfig+0x108>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d007      	beq.n	80080d8 <TIM_OC2_SetConfig+0xac>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008138 <TIM_OC2_SetConfig+0x10c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_OC2_SetConfig+0xac>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a1a      	ldr	r2, [pc, #104]	@ (800813c <TIM_OC2_SetConfig+0x110>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d113      	bne.n	8008100 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	feff8fff 	.word	0xfeff8fff
 800812c:	40010000 	.word	0x40010000
 8008130:	40010400 	.word	0x40010400
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400
 800813c:	40014800 	.word	0x40014800

08008140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a1b      	ldr	r3, [r3, #32]
 8008154:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4b33      	ldr	r3, [pc, #204]	@ (8008238 <TIM_OC3_SetConfig+0xf8>)
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a28      	ldr	r2, [pc, #160]	@ (800823c <TIM_OC3_SetConfig+0xfc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d003      	beq.n	80081a6 <TIM_OC3_SetConfig+0x66>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a27      	ldr	r2, [pc, #156]	@ (8008240 <TIM_OC3_SetConfig+0x100>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d10d      	bne.n	80081c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	021b      	lsls	r3, r3, #8
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a1d      	ldr	r2, [pc, #116]	@ (800823c <TIM_OC3_SetConfig+0xfc>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00f      	beq.n	80081ea <TIM_OC3_SetConfig+0xaa>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008240 <TIM_OC3_SetConfig+0x100>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00b      	beq.n	80081ea <TIM_OC3_SetConfig+0xaa>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <TIM_OC3_SetConfig+0x104>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d007      	beq.n	80081ea <TIM_OC3_SetConfig+0xaa>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008248 <TIM_OC3_SetConfig+0x108>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_OC3_SetConfig+0xaa>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a19      	ldr	r2, [pc, #100]	@ (800824c <TIM_OC3_SetConfig+0x10c>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d113      	bne.n	8008212 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4313      	orrs	r3, r2
 8008204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	621a      	str	r2, [r3, #32]
}
 800822c:	bf00      	nop
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	fffeff8f 	.word	0xfffeff8f
 800823c:	40010000 	.word	0x40010000
 8008240:	40010400 	.word	0x40010400
 8008244:	40014000 	.word	0x40014000
 8008248:	40014400 	.word	0x40014400
 800824c:	40014800 	.word	0x40014800

08008250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4b24      	ldr	r3, [pc, #144]	@ (800830c <TIM_OC4_SetConfig+0xbc>)
 800827c:	4013      	ands	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800829a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	031b      	lsls	r3, r3, #12
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a19      	ldr	r2, [pc, #100]	@ (8008310 <TIM_OC4_SetConfig+0xc0>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00f      	beq.n	80082d0 <TIM_OC4_SetConfig+0x80>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a18      	ldr	r2, [pc, #96]	@ (8008314 <TIM_OC4_SetConfig+0xc4>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00b      	beq.n	80082d0 <TIM_OC4_SetConfig+0x80>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a17      	ldr	r2, [pc, #92]	@ (8008318 <TIM_OC4_SetConfig+0xc8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d007      	beq.n	80082d0 <TIM_OC4_SetConfig+0x80>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a16      	ldr	r2, [pc, #88]	@ (800831c <TIM_OC4_SetConfig+0xcc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_OC4_SetConfig+0x80>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a15      	ldr	r2, [pc, #84]	@ (8008320 <TIM_OC4_SetConfig+0xd0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d109      	bne.n	80082e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	019b      	lsls	r3, r3, #6
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	621a      	str	r2, [r3, #32]
}
 80082fe:	bf00      	nop
 8008300:	371c      	adds	r7, #28
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	feff8fff 	.word	0xfeff8fff
 8008310:	40010000 	.word	0x40010000
 8008314:	40010400 	.word	0x40010400
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800

08008324 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4b21      	ldr	r3, [pc, #132]	@ (80083d4 <TIM_OC5_SetConfig+0xb0>)
 8008350:	4013      	ands	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	041b      	lsls	r3, r3, #16
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <TIM_OC5_SetConfig+0xb4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00f      	beq.n	800839a <TIM_OC5_SetConfig+0x76>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a17      	ldr	r2, [pc, #92]	@ (80083dc <TIM_OC5_SetConfig+0xb8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00b      	beq.n	800839a <TIM_OC5_SetConfig+0x76>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a16      	ldr	r2, [pc, #88]	@ (80083e0 <TIM_OC5_SetConfig+0xbc>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d007      	beq.n	800839a <TIM_OC5_SetConfig+0x76>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <TIM_OC5_SetConfig+0xc0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d003      	beq.n	800839a <TIM_OC5_SetConfig+0x76>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a14      	ldr	r2, [pc, #80]	@ (80083e8 <TIM_OC5_SetConfig+0xc4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d109      	bne.n	80083ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	621a      	str	r2, [r3, #32]
}
 80083c8:	bf00      	nop
 80083ca:	371c      	adds	r7, #28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	fffeff8f 	.word	0xfffeff8f
 80083d8:	40010000 	.word	0x40010000
 80083dc:	40010400 	.word	0x40010400
 80083e0:	40014000 	.word	0x40014000
 80083e4:	40014400 	.word	0x40014400
 80083e8:	40014800 	.word	0x40014800

080083ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b087      	sub	sp, #28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4b22      	ldr	r3, [pc, #136]	@ (80084a0 <TIM_OC6_SetConfig+0xb4>)
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800842e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	051b      	lsls	r3, r3, #20
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a19      	ldr	r2, [pc, #100]	@ (80084a4 <TIM_OC6_SetConfig+0xb8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00f      	beq.n	8008464 <TIM_OC6_SetConfig+0x78>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a18      	ldr	r2, [pc, #96]	@ (80084a8 <TIM_OC6_SetConfig+0xbc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d00b      	beq.n	8008464 <TIM_OC6_SetConfig+0x78>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a17      	ldr	r2, [pc, #92]	@ (80084ac <TIM_OC6_SetConfig+0xc0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d007      	beq.n	8008464 <TIM_OC6_SetConfig+0x78>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a16      	ldr	r2, [pc, #88]	@ (80084b0 <TIM_OC6_SetConfig+0xc4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d003      	beq.n	8008464 <TIM_OC6_SetConfig+0x78>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a15      	ldr	r2, [pc, #84]	@ (80084b4 <TIM_OC6_SetConfig+0xc8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d109      	bne.n	8008478 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800846a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	feff8fff 	.word	0xfeff8fff
 80084a4:	40010000 	.word	0x40010000
 80084a8:	40010400 	.word	0x40010400
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40014400 	.word	0x40014400
 80084b4:	40014800 	.word	0x40014800

080084b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 030a 	bic.w	r3, r3, #10
 80084f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008516:	b480      	push	{r7}
 8008518:	b087      	sub	sp, #28
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	f023 0210 	bic.w	r2, r3, #16
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	031b      	lsls	r3, r3, #12
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008552:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	621a      	str	r2, [r3, #32]
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <TIM_ITRx_SetConfig+0x38>)
 800858c:	4013      	ands	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	f043 0307 	orr.w	r3, r3, #7
 800859a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	609a      	str	r2, [r3, #8]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	ffcfff8f 	.word	0xffcfff8f

080085b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	021a      	lsls	r2, r3, #8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4313      	orrs	r3, r2
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	609a      	str	r2, [r3, #8]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008608:	2302      	movs	r3, #2
 800860a:	e077      	b.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a35      	ldr	r2, [pc, #212]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d004      	beq.n	8008640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a34      	ldr	r2, [pc, #208]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a25      	ldr	r2, [pc, #148]	@ (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d02c      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800867e:	d027      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a22      	ldr	r2, [pc, #136]	@ (8008710 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d022      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a21      	ldr	r2, [pc, #132]	@ (8008714 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d01d      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a1f      	ldr	r2, [pc, #124]	@ (8008718 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d018      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1a      	ldr	r2, [pc, #104]	@ (800870c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1b      	ldr	r2, [pc, #108]	@ (800871c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d00e      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008720 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d009      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a18      	ldr	r2, [pc, #96]	@ (8008724 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d004      	beq.n	80086d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a17      	ldr	r2, [pc, #92]	@ (8008728 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10c      	bne.n	80086ea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	40010000 	.word	0x40010000
 800870c:	40010400 	.word	0x40010400
 8008710:	40000400 	.word	0x40000400
 8008714:	40000800 	.word	0x40000800
 8008718:	40000c00 	.word	0x40000c00
 800871c:	40001800 	.word	0x40001800
 8008720:	40014000 	.word	0x40014000
 8008724:	4000e000 	.word	0x4000e000
 8008728:	4000e400 	.word	0x4000e400

0800872c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e04a      	b.n	8008810 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7f8 fb99 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2224      	movs	r2, #36	@ 0x24
 8008796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f001 fba6 	bl	8009f04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fd37 	bl	800922c <UART_SetConfig>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e023      	b.n	8008810 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80087e6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0208 	orr.w	r2, r2, #8
 80087f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 fc1d 	bl	800a048 <UART_CheckIdleState>
 800880e:	4603      	mov	r3, r0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	@ 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800882c:	2b20      	cmp	r3, #32
 800882e:	d167      	bne.n	8008900 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <HAL_UART_Transmit_DMA+0x24>
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e060      	b.n	8008902 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	88fa      	ldrh	r2, [r7, #6]
 800884a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2221      	movs	r2, #33	@ 0x21
 8008862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d028      	beq.n	80088c0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008872:	4a26      	ldr	r2, [pc, #152]	@ (800890c <HAL_UART_Transmit_DMA+0xf4>)
 8008874:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800887a:	4a25      	ldr	r2, [pc, #148]	@ (8008910 <HAL_UART_Transmit_DMA+0xf8>)
 800887c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008882:	4a24      	ldr	r2, [pc, #144]	@ (8008914 <HAL_UART_Transmit_DMA+0xfc>)
 8008884:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800888a:	2200      	movs	r2, #0
 800888c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008896:	4619      	mov	r1, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3328      	adds	r3, #40	@ 0x28
 800889e:	461a      	mov	r2, r3
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	f7f9 fbcf 	bl	8002044 <HAL_DMA_Start_IT>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2210      	movs	r2, #16
 80088b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e020      	b.n	8008902 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2240      	movs	r2, #64	@ 0x40
 80088c6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3308      	adds	r3, #8
 80088ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	613b      	str	r3, [r7, #16]
   return(result);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088de:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088e8:	623a      	str	r2, [r7, #32]
 80088ea:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e5      	bne.n	80088c8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e000      	b.n	8008902 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008900:	2302      	movs	r3, #2
  }
}
 8008902:	4618      	mov	r0, r3
 8008904:	3728      	adds	r7, #40	@ 0x28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	0800a515 	.word	0x0800a515
 8008910:	0800a5ab 	.word	0x0800a5ab
 8008914:	0800a72d 	.word	0x0800a72d

08008918 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b0ba      	sub	sp, #232	@ 0xe8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800893e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008942:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008946:	4013      	ands	r3, r2
 8008948:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800894c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d11b      	bne.n	800898c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008958:	f003 0320 	and.w	r3, r3, #32
 800895c:	2b00      	cmp	r3, #0
 800895e:	d015      	beq.n	800898c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008964:	f003 0320 	and.w	r3, r3, #32
 8008968:	2b00      	cmp	r3, #0
 800896a:	d105      	bne.n	8008978 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800896c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8377 	beq.w	8009070 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
      }
      return;
 800898a:	e371      	b.n	8009070 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800898c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 8123 	beq.w	8008bdc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008996:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800899a:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd0 <HAL_UART_IRQHandler+0x2b8>)
 800899c:	4013      	ands	r3, r2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d106      	bne.n	80089b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80089a6:	4b8b      	ldr	r3, [pc, #556]	@ (8008bd4 <HAL_UART_IRQHandler+0x2bc>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8116 	beq.w	8008bdc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d011      	beq.n	80089e0 <HAL_UART_IRQHandler+0xc8>
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00b      	beq.n	80089e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2201      	movs	r2, #1
 80089ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d6:	f043 0201 	orr.w	r2, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d011      	beq.n	8008a10 <HAL_UART_IRQHandler+0xf8>
 80089ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2202      	movs	r2, #2
 80089fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a06:	f043 0204 	orr.w	r2, r3, #4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d011      	beq.n	8008a40 <HAL_UART_IRQHandler+0x128>
 8008a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a36:	f043 0202 	orr.w	r2, r3, #2
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a44:	f003 0308 	and.w	r3, r3, #8
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d017      	beq.n	8008a7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d105      	bne.n	8008a64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <HAL_UART_IRQHandler+0x2b8>)
 8008a5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a72:	f043 0208 	orr.w	r2, r3, #8
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d012      	beq.n	8008aae <HAL_UART_IRQHandler+0x196>
 8008a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00c      	beq.n	8008aae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa4:	f043 0220 	orr.w	r2, r3, #32
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 82dd 	beq.w	8009074 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d013      	beq.n	8008aee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d105      	bne.n	8008ade <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b02:	2b40      	cmp	r3, #64	@ 0x40
 8008b04:	d005      	beq.n	8008b12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b0a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d054      	beq.n	8008bbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fc98 	bl	800a448 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b22:	2b40      	cmp	r3, #64	@ 0x40
 8008b24:	d146      	bne.n	8008bb4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b52:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1d9      	bne.n	8008b26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b82:	4a15      	ldr	r2, [pc, #84]	@ (8008bd8 <HAL_UART_IRQHandler+0x2c0>)
 8008b84:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7f9 ffe1 	bl	8002b54 <HAL_DMA_Abort_IT>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d019      	beq.n	8008bcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008baa:	e00f      	b.n	8008bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fa8b 	bl	80090c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb2:	e00b      	b.n	8008bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fa87 	bl	80090c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bba:	e007      	b.n	8008bcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fa83 	bl	80090c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008bca:	e253      	b.n	8009074 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bcc:	bf00      	nop
    return;
 8008bce:	e251      	b.n	8009074 <HAL_UART_IRQHandler+0x75c>
 8008bd0:	10000001 	.word	0x10000001
 8008bd4:	04000120 	.word	0x04000120
 8008bd8:	0800a7ad 	.word	0x0800a7ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	f040 81e7 	bne.w	8008fb4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bea:	f003 0310 	and.w	r3, r3, #16
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 81e0 	beq.w	8008fb4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 81d9 	beq.w	8008fb4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2210      	movs	r2, #16
 8008c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c14:	2b40      	cmp	r3, #64	@ 0x40
 8008c16:	f040 8151 	bne.w	8008ebc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a96      	ldr	r2, [pc, #600]	@ (8008e7c <HAL_UART_IRQHandler+0x564>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d068      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a93      	ldr	r2, [pc, #588]	@ (8008e80 <HAL_UART_IRQHandler+0x568>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d061      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a91      	ldr	r2, [pc, #580]	@ (8008e84 <HAL_UART_IRQHandler+0x56c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d05a      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8008e88 <HAL_UART_IRQHandler+0x570>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d053      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a8c      	ldr	r2, [pc, #560]	@ (8008e8c <HAL_UART_IRQHandler+0x574>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d04c      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a89      	ldr	r2, [pc, #548]	@ (8008e90 <HAL_UART_IRQHandler+0x578>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d045      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a87      	ldr	r2, [pc, #540]	@ (8008e94 <HAL_UART_IRQHandler+0x57c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d03e      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a84      	ldr	r2, [pc, #528]	@ (8008e98 <HAL_UART_IRQHandler+0x580>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d037      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a82      	ldr	r2, [pc, #520]	@ (8008e9c <HAL_UART_IRQHandler+0x584>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d030      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a7f      	ldr	r2, [pc, #508]	@ (8008ea0 <HAL_UART_IRQHandler+0x588>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d029      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a7d      	ldr	r2, [pc, #500]	@ (8008ea4 <HAL_UART_IRQHandler+0x58c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d022      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8008ea8 <HAL_UART_IRQHandler+0x590>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d01b      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a78      	ldr	r2, [pc, #480]	@ (8008eac <HAL_UART_IRQHandler+0x594>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d014      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a75      	ldr	r2, [pc, #468]	@ (8008eb0 <HAL_UART_IRQHandler+0x598>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00d      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a73      	ldr	r2, [pc, #460]	@ (8008eb4 <HAL_UART_IRQHandler+0x59c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d006      	beq.n	8008cfa <HAL_UART_IRQHandler+0x3e2>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a70      	ldr	r2, [pc, #448]	@ (8008eb8 <HAL_UART_IRQHandler+0x5a0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d106      	bne.n	8008d08 <HAL_UART_IRQHandler+0x3f0>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	e005      	b.n	8008d14 <HAL_UART_IRQHandler+0x3fc>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 81ab 	beq.w	8009078 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	f080 81a3 	bcs.w	8009078 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d48:	f000 8087 	beq.w	8008e5a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1da      	bne.n	8008d4c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008da8:	f023 0301 	bic.w	r3, r3, #1
 8008dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008dba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008dbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e1      	bne.n	8008d96 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008de2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008df8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008dfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e3      	bne.n	8008dd2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e28:	f023 0310 	bic.w	r3, r3, #16
 8008e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e4      	bne.n	8008e18 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7f9 fb5f 	bl	8002518 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	1ad3      	subs	r3, r2, r3
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7f7 ff4d 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e7a:	e0fd      	b.n	8009078 <HAL_UART_IRQHandler+0x760>
 8008e7c:	40020010 	.word	0x40020010
 8008e80:	40020028 	.word	0x40020028
 8008e84:	40020040 	.word	0x40020040
 8008e88:	40020058 	.word	0x40020058
 8008e8c:	40020070 	.word	0x40020070
 8008e90:	40020088 	.word	0x40020088
 8008e94:	400200a0 	.word	0x400200a0
 8008e98:	400200b8 	.word	0x400200b8
 8008e9c:	40020410 	.word	0x40020410
 8008ea0:	40020428 	.word	0x40020428
 8008ea4:	40020440 	.word	0x40020440
 8008ea8:	40020458 	.word	0x40020458
 8008eac:	40020470 	.word	0x40020470
 8008eb0:	40020488 	.word	0x40020488
 8008eb4:	400204a0 	.word	0x400204a0
 8008eb8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80cf 	beq.w	800907c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008ede:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80ca 	beq.w	800907c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f0c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e4      	bne.n	8008ee8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	4b55      	ldr	r3, [pc, #340]	@ (8009088 <HAL_UART_IRQHandler+0x770>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e3      	bne.n	8008f1e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 0310 	bic.w	r3, r3, #16
 8008f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	69b9      	ldr	r1, [r7, #24]
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e4      	bne.n	8008f6a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7f7 feb1 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008fb2:	e063      	b.n	800907c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00e      	beq.n	8008fde <HAL_UART_IRQHandler+0x6c6>
 8008fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 fc29 	bl	800a82e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fdc:	e051      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d014      	beq.n	8009014 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03a      	beq.n	8009080 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4798      	blx	r3
    }
    return;
 8009012:	e035      	b.n	8009080 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d009      	beq.n	8009034 <HAL_UART_IRQHandler+0x71c>
 8009020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d003      	beq.n	8009034 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fbd3 	bl	800a7d8 <UART_EndTransmit_IT>
    return;
 8009032:	e026      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <HAL_UART_IRQHandler+0x73c>
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009044:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 fc02 	bl	800a856 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009052:	e016      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d010      	beq.n	8009082 <HAL_UART_IRQHandler+0x76a>
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009064:	2b00      	cmp	r3, #0
 8009066:	da0c      	bge.n	8009082 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f001 fbea 	bl	800a842 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800906e:	e008      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
      return;
 8009070:	bf00      	nop
 8009072:	e006      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
    return;
 8009074:	bf00      	nop
 8009076:	e004      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
      return;
 8009078:	bf00      	nop
 800907a:	e002      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
      return;
 800907c:	bf00      	nop
 800907e:	e000      	b.n	8009082 <HAL_UART_IRQHandler+0x76a>
    return;
 8009080:	bf00      	nop
  }
}
 8009082:	37e8      	adds	r7, #232	@ 0xe8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	effffffe 	.word	0xeffffffe

0800908c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80090dc:	b480      	push	{r7}
 80090de:	b08f      	sub	sp, #60	@ 0x3c
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e042      	b.n	8009178 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2224      	movs	r2, #36	@ 0x24
 80090fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	6a3b      	ldr	r3, [r7, #32]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	f023 030c 	bic.w	r3, r3, #12
 8009116:	637b      	str	r3, [r7, #52]	@ 0x34
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009122:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	60bb      	str	r3, [r7, #8]
   return(result);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f043 0308 	orr.w	r3, r3, #8
 8009148:	633b      	str	r3, [r7, #48]	@ 0x30
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	61bb      	str	r3, [r7, #24]
 8009154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6979      	ldr	r1, [r7, #20]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	613b      	str	r3, [r7, #16]
   return(result);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e6      	bne.n	8009134 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	373c      	adds	r7, #60	@ 0x3c
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8009184:	b480      	push	{r7}
 8009186:	b08f      	sub	sp, #60	@ 0x3c
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009192:	2b01      	cmp	r3, #1
 8009194:	d101      	bne.n	800919a <HAL_HalfDuplex_EnableReceiver+0x16>
 8009196:	2302      	movs	r3, #2
 8009198:	e042      	b.n	8009220 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2224      	movs	r2, #36	@ 0x24
 80091a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	f023 030c 	bic.w	r3, r3, #12
 80091be:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f043 0304 	orr.w	r3, r3, #4
 80091f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	61bb      	str	r3, [r7, #24]
 80091fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	e841 2300 	strex	r3, r2, [r1]
 8009206:	613b      	str	r3, [r7, #16]
   return(result);
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1e6      	bne.n	80091dc <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2220      	movs	r2, #32
 8009212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	373c      	adds	r7, #60	@ 0x3c
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800922c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009230:	b092      	sub	sp, #72	@ 0x48
 8009232:	af00      	add	r7, sp, #0
 8009234:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	431a      	orrs	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	431a      	orrs	r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	4313      	orrs	r3, r2
 8009252:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	4bbe      	ldr	r3, [pc, #760]	@ (8009554 <UART_SetConfig+0x328>)
 800925c:	4013      	ands	r3, r2
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009264:	430b      	orrs	r3, r1
 8009266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4ab3      	ldr	r2, [pc, #716]	@ (8009558 <UART_SetConfig+0x32c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d004      	beq.n	8009298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009294:	4313      	orrs	r3, r2
 8009296:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	4baf      	ldr	r3, [pc, #700]	@ (800955c <UART_SetConfig+0x330>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	6812      	ldr	r2, [r2, #0]
 80092a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092a8:	430b      	orrs	r3, r1
 80092aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b2:	f023 010f 	bic.w	r1, r3, #15
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4aa6      	ldr	r2, [pc, #664]	@ (8009560 <UART_SetConfig+0x334>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d177      	bne.n	80093bc <UART_SetConfig+0x190>
 80092cc:	4ba5      	ldr	r3, [pc, #660]	@ (8009564 <UART_SetConfig+0x338>)
 80092ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092d4:	2b28      	cmp	r3, #40	@ 0x28
 80092d6:	d86d      	bhi.n	80093b4 <UART_SetConfig+0x188>
 80092d8:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <UART_SetConfig+0xb4>)
 80092da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092de:	bf00      	nop
 80092e0:	08009385 	.word	0x08009385
 80092e4:	080093b5 	.word	0x080093b5
 80092e8:	080093b5 	.word	0x080093b5
 80092ec:	080093b5 	.word	0x080093b5
 80092f0:	080093b5 	.word	0x080093b5
 80092f4:	080093b5 	.word	0x080093b5
 80092f8:	080093b5 	.word	0x080093b5
 80092fc:	080093b5 	.word	0x080093b5
 8009300:	0800938d 	.word	0x0800938d
 8009304:	080093b5 	.word	0x080093b5
 8009308:	080093b5 	.word	0x080093b5
 800930c:	080093b5 	.word	0x080093b5
 8009310:	080093b5 	.word	0x080093b5
 8009314:	080093b5 	.word	0x080093b5
 8009318:	080093b5 	.word	0x080093b5
 800931c:	080093b5 	.word	0x080093b5
 8009320:	08009395 	.word	0x08009395
 8009324:	080093b5 	.word	0x080093b5
 8009328:	080093b5 	.word	0x080093b5
 800932c:	080093b5 	.word	0x080093b5
 8009330:	080093b5 	.word	0x080093b5
 8009334:	080093b5 	.word	0x080093b5
 8009338:	080093b5 	.word	0x080093b5
 800933c:	080093b5 	.word	0x080093b5
 8009340:	0800939d 	.word	0x0800939d
 8009344:	080093b5 	.word	0x080093b5
 8009348:	080093b5 	.word	0x080093b5
 800934c:	080093b5 	.word	0x080093b5
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093b5 	.word	0x080093b5
 8009358:	080093b5 	.word	0x080093b5
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093a5 	.word	0x080093a5
 8009364:	080093b5 	.word	0x080093b5
 8009368:	080093b5 	.word	0x080093b5
 800936c:	080093b5 	.word	0x080093b5
 8009370:	080093b5 	.word	0x080093b5
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093b5 	.word	0x080093b5
 800937c:	080093b5 	.word	0x080093b5
 8009380:	080093ad 	.word	0x080093ad
 8009384:	2301      	movs	r3, #1
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938a:	e326      	b.n	80099da <UART_SetConfig+0x7ae>
 800938c:	2304      	movs	r3, #4
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009392:	e322      	b.n	80099da <UART_SetConfig+0x7ae>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939a:	e31e      	b.n	80099da <UART_SetConfig+0x7ae>
 800939c:	2310      	movs	r3, #16
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a2:	e31a      	b.n	80099da <UART_SetConfig+0x7ae>
 80093a4:	2320      	movs	r3, #32
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093aa:	e316      	b.n	80099da <UART_SetConfig+0x7ae>
 80093ac:	2340      	movs	r3, #64	@ 0x40
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093b2:	e312      	b.n	80099da <UART_SetConfig+0x7ae>
 80093b4:	2380      	movs	r3, #128	@ 0x80
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ba:	e30e      	b.n	80099da <UART_SetConfig+0x7ae>
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a69      	ldr	r2, [pc, #420]	@ (8009568 <UART_SetConfig+0x33c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d130      	bne.n	8009428 <UART_SetConfig+0x1fc>
 80093c6:	4b67      	ldr	r3, [pc, #412]	@ (8009564 <UART_SetConfig+0x338>)
 80093c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d826      	bhi.n	8009420 <UART_SetConfig+0x1f4>
 80093d2:	a201      	add	r2, pc, #4	@ (adr r2, 80093d8 <UART_SetConfig+0x1ac>)
 80093d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d8:	080093f1 	.word	0x080093f1
 80093dc:	080093f9 	.word	0x080093f9
 80093e0:	08009401 	.word	0x08009401
 80093e4:	08009409 	.word	0x08009409
 80093e8:	08009411 	.word	0x08009411
 80093ec:	08009419 	.word	0x08009419
 80093f0:	2300      	movs	r3, #0
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e2f0      	b.n	80099da <UART_SetConfig+0x7ae>
 80093f8:	2304      	movs	r3, #4
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e2ec      	b.n	80099da <UART_SetConfig+0x7ae>
 8009400:	2308      	movs	r3, #8
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e2e8      	b.n	80099da <UART_SetConfig+0x7ae>
 8009408:	2310      	movs	r3, #16
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e2e4      	b.n	80099da <UART_SetConfig+0x7ae>
 8009410:	2320      	movs	r3, #32
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e2e0      	b.n	80099da <UART_SetConfig+0x7ae>
 8009418:	2340      	movs	r3, #64	@ 0x40
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e2dc      	b.n	80099da <UART_SetConfig+0x7ae>
 8009420:	2380      	movs	r3, #128	@ 0x80
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e2d8      	b.n	80099da <UART_SetConfig+0x7ae>
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a4f      	ldr	r2, [pc, #316]	@ (800956c <UART_SetConfig+0x340>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d130      	bne.n	8009494 <UART_SetConfig+0x268>
 8009432:	4b4c      	ldr	r3, [pc, #304]	@ (8009564 <UART_SetConfig+0x338>)
 8009434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b05      	cmp	r3, #5
 800943c:	d826      	bhi.n	800948c <UART_SetConfig+0x260>
 800943e:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <UART_SetConfig+0x218>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	0800945d 	.word	0x0800945d
 8009448:	08009465 	.word	0x08009465
 800944c:	0800946d 	.word	0x0800946d
 8009450:	08009475 	.word	0x08009475
 8009454:	0800947d 	.word	0x0800947d
 8009458:	08009485 	.word	0x08009485
 800945c:	2300      	movs	r3, #0
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e2ba      	b.n	80099da <UART_SetConfig+0x7ae>
 8009464:	2304      	movs	r3, #4
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e2b6      	b.n	80099da <UART_SetConfig+0x7ae>
 800946c:	2308      	movs	r3, #8
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e2b2      	b.n	80099da <UART_SetConfig+0x7ae>
 8009474:	2310      	movs	r3, #16
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e2ae      	b.n	80099da <UART_SetConfig+0x7ae>
 800947c:	2320      	movs	r3, #32
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e2aa      	b.n	80099da <UART_SetConfig+0x7ae>
 8009484:	2340      	movs	r3, #64	@ 0x40
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e2a6      	b.n	80099da <UART_SetConfig+0x7ae>
 800948c:	2380      	movs	r3, #128	@ 0x80
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e2a2      	b.n	80099da <UART_SetConfig+0x7ae>
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a35      	ldr	r2, [pc, #212]	@ (8009570 <UART_SetConfig+0x344>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d130      	bne.n	8009500 <UART_SetConfig+0x2d4>
 800949e:	4b31      	ldr	r3, [pc, #196]	@ (8009564 <UART_SetConfig+0x338>)
 80094a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	2b05      	cmp	r3, #5
 80094a8:	d826      	bhi.n	80094f8 <UART_SetConfig+0x2cc>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <UART_SetConfig+0x284>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c9 	.word	0x080094c9
 80094b4:	080094d1 	.word	0x080094d1
 80094b8:	080094d9 	.word	0x080094d9
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094e9 	.word	0x080094e9
 80094c4:	080094f1 	.word	0x080094f1
 80094c8:	2300      	movs	r3, #0
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e284      	b.n	80099da <UART_SetConfig+0x7ae>
 80094d0:	2304      	movs	r3, #4
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e280      	b.n	80099da <UART_SetConfig+0x7ae>
 80094d8:	2308      	movs	r3, #8
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e27c      	b.n	80099da <UART_SetConfig+0x7ae>
 80094e0:	2310      	movs	r3, #16
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e278      	b.n	80099da <UART_SetConfig+0x7ae>
 80094e8:	2320      	movs	r3, #32
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e274      	b.n	80099da <UART_SetConfig+0x7ae>
 80094f0:	2340      	movs	r3, #64	@ 0x40
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e270      	b.n	80099da <UART_SetConfig+0x7ae>
 80094f8:	2380      	movs	r3, #128	@ 0x80
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e26c      	b.n	80099da <UART_SetConfig+0x7ae>
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1b      	ldr	r2, [pc, #108]	@ (8009574 <UART_SetConfig+0x348>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d142      	bne.n	8009590 <UART_SetConfig+0x364>
 800950a:	4b16      	ldr	r3, [pc, #88]	@ (8009564 <UART_SetConfig+0x338>)
 800950c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800950e:	f003 0307 	and.w	r3, r3, #7
 8009512:	2b05      	cmp	r3, #5
 8009514:	d838      	bhi.n	8009588 <UART_SetConfig+0x35c>
 8009516:	a201      	add	r2, pc, #4	@ (adr r2, 800951c <UART_SetConfig+0x2f0>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	08009535 	.word	0x08009535
 8009520:	0800953d 	.word	0x0800953d
 8009524:	08009545 	.word	0x08009545
 8009528:	0800954d 	.word	0x0800954d
 800952c:	08009579 	.word	0x08009579
 8009530:	08009581 	.word	0x08009581
 8009534:	2300      	movs	r3, #0
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e24e      	b.n	80099da <UART_SetConfig+0x7ae>
 800953c:	2304      	movs	r3, #4
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e24a      	b.n	80099da <UART_SetConfig+0x7ae>
 8009544:	2308      	movs	r3, #8
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e246      	b.n	80099da <UART_SetConfig+0x7ae>
 800954c:	2310      	movs	r3, #16
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e242      	b.n	80099da <UART_SetConfig+0x7ae>
 8009554:	cfff69f3 	.word	0xcfff69f3
 8009558:	58000c00 	.word	0x58000c00
 800955c:	11fff4ff 	.word	0x11fff4ff
 8009560:	40011000 	.word	0x40011000
 8009564:	58024400 	.word	0x58024400
 8009568:	40004400 	.word	0x40004400
 800956c:	40004800 	.word	0x40004800
 8009570:	40004c00 	.word	0x40004c00
 8009574:	40005000 	.word	0x40005000
 8009578:	2320      	movs	r3, #32
 800957a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800957e:	e22c      	b.n	80099da <UART_SetConfig+0x7ae>
 8009580:	2340      	movs	r3, #64	@ 0x40
 8009582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009586:	e228      	b.n	80099da <UART_SetConfig+0x7ae>
 8009588:	2380      	movs	r3, #128	@ 0x80
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e224      	b.n	80099da <UART_SetConfig+0x7ae>
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4ab1      	ldr	r2, [pc, #708]	@ (800985c <UART_SetConfig+0x630>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d176      	bne.n	8009688 <UART_SetConfig+0x45c>
 800959a:	4bb1      	ldr	r3, [pc, #708]	@ (8009860 <UART_SetConfig+0x634>)
 800959c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800959e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095a2:	2b28      	cmp	r3, #40	@ 0x28
 80095a4:	d86c      	bhi.n	8009680 <UART_SetConfig+0x454>
 80095a6:	a201      	add	r2, pc, #4	@ (adr r2, 80095ac <UART_SetConfig+0x380>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	08009651 	.word	0x08009651
 80095b0:	08009681 	.word	0x08009681
 80095b4:	08009681 	.word	0x08009681
 80095b8:	08009681 	.word	0x08009681
 80095bc:	08009681 	.word	0x08009681
 80095c0:	08009681 	.word	0x08009681
 80095c4:	08009681 	.word	0x08009681
 80095c8:	08009681 	.word	0x08009681
 80095cc:	08009659 	.word	0x08009659
 80095d0:	08009681 	.word	0x08009681
 80095d4:	08009681 	.word	0x08009681
 80095d8:	08009681 	.word	0x08009681
 80095dc:	08009681 	.word	0x08009681
 80095e0:	08009681 	.word	0x08009681
 80095e4:	08009681 	.word	0x08009681
 80095e8:	08009681 	.word	0x08009681
 80095ec:	08009661 	.word	0x08009661
 80095f0:	08009681 	.word	0x08009681
 80095f4:	08009681 	.word	0x08009681
 80095f8:	08009681 	.word	0x08009681
 80095fc:	08009681 	.word	0x08009681
 8009600:	08009681 	.word	0x08009681
 8009604:	08009681 	.word	0x08009681
 8009608:	08009681 	.word	0x08009681
 800960c:	08009669 	.word	0x08009669
 8009610:	08009681 	.word	0x08009681
 8009614:	08009681 	.word	0x08009681
 8009618:	08009681 	.word	0x08009681
 800961c:	08009681 	.word	0x08009681
 8009620:	08009681 	.word	0x08009681
 8009624:	08009681 	.word	0x08009681
 8009628:	08009681 	.word	0x08009681
 800962c:	08009671 	.word	0x08009671
 8009630:	08009681 	.word	0x08009681
 8009634:	08009681 	.word	0x08009681
 8009638:	08009681 	.word	0x08009681
 800963c:	08009681 	.word	0x08009681
 8009640:	08009681 	.word	0x08009681
 8009644:	08009681 	.word	0x08009681
 8009648:	08009681 	.word	0x08009681
 800964c:	08009679 	.word	0x08009679
 8009650:	2301      	movs	r3, #1
 8009652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009656:	e1c0      	b.n	80099da <UART_SetConfig+0x7ae>
 8009658:	2304      	movs	r3, #4
 800965a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800965e:	e1bc      	b.n	80099da <UART_SetConfig+0x7ae>
 8009660:	2308      	movs	r3, #8
 8009662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009666:	e1b8      	b.n	80099da <UART_SetConfig+0x7ae>
 8009668:	2310      	movs	r3, #16
 800966a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800966e:	e1b4      	b.n	80099da <UART_SetConfig+0x7ae>
 8009670:	2320      	movs	r3, #32
 8009672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009676:	e1b0      	b.n	80099da <UART_SetConfig+0x7ae>
 8009678:	2340      	movs	r3, #64	@ 0x40
 800967a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967e:	e1ac      	b.n	80099da <UART_SetConfig+0x7ae>
 8009680:	2380      	movs	r3, #128	@ 0x80
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009686:	e1a8      	b.n	80099da <UART_SetConfig+0x7ae>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a75      	ldr	r2, [pc, #468]	@ (8009864 <UART_SetConfig+0x638>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d130      	bne.n	80096f4 <UART_SetConfig+0x4c8>
 8009692:	4b73      	ldr	r3, [pc, #460]	@ (8009860 <UART_SetConfig+0x634>)
 8009694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	2b05      	cmp	r3, #5
 800969c:	d826      	bhi.n	80096ec <UART_SetConfig+0x4c0>
 800969e:	a201      	add	r2, pc, #4	@ (adr r2, 80096a4 <UART_SetConfig+0x478>)
 80096a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096cd 	.word	0x080096cd
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096dd 	.word	0x080096dd
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e18a      	b.n	80099da <UART_SetConfig+0x7ae>
 80096c4:	2304      	movs	r3, #4
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e186      	b.n	80099da <UART_SetConfig+0x7ae>
 80096cc:	2308      	movs	r3, #8
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e182      	b.n	80099da <UART_SetConfig+0x7ae>
 80096d4:	2310      	movs	r3, #16
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e17e      	b.n	80099da <UART_SetConfig+0x7ae>
 80096dc:	2320      	movs	r3, #32
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e17a      	b.n	80099da <UART_SetConfig+0x7ae>
 80096e4:	2340      	movs	r3, #64	@ 0x40
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e176      	b.n	80099da <UART_SetConfig+0x7ae>
 80096ec:	2380      	movs	r3, #128	@ 0x80
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e172      	b.n	80099da <UART_SetConfig+0x7ae>
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a5b      	ldr	r2, [pc, #364]	@ (8009868 <UART_SetConfig+0x63c>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d130      	bne.n	8009760 <UART_SetConfig+0x534>
 80096fe:	4b58      	ldr	r3, [pc, #352]	@ (8009860 <UART_SetConfig+0x634>)
 8009700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b05      	cmp	r3, #5
 8009708:	d826      	bhi.n	8009758 <UART_SetConfig+0x52c>
 800970a:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <UART_SetConfig+0x4e4>)
 800970c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009710:	08009729 	.word	0x08009729
 8009714:	08009731 	.word	0x08009731
 8009718:	08009739 	.word	0x08009739
 800971c:	08009741 	.word	0x08009741
 8009720:	08009749 	.word	0x08009749
 8009724:	08009751 	.word	0x08009751
 8009728:	2300      	movs	r3, #0
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e154      	b.n	80099da <UART_SetConfig+0x7ae>
 8009730:	2304      	movs	r3, #4
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e150      	b.n	80099da <UART_SetConfig+0x7ae>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e14c      	b.n	80099da <UART_SetConfig+0x7ae>
 8009740:	2310      	movs	r3, #16
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e148      	b.n	80099da <UART_SetConfig+0x7ae>
 8009748:	2320      	movs	r3, #32
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e144      	b.n	80099da <UART_SetConfig+0x7ae>
 8009750:	2340      	movs	r3, #64	@ 0x40
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e140      	b.n	80099da <UART_SetConfig+0x7ae>
 8009758:	2380      	movs	r3, #128	@ 0x80
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e13c      	b.n	80099da <UART_SetConfig+0x7ae>
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a41      	ldr	r2, [pc, #260]	@ (800986c <UART_SetConfig+0x640>)
 8009766:	4293      	cmp	r3, r2
 8009768:	f040 8082 	bne.w	8009870 <UART_SetConfig+0x644>
 800976c:	4b3c      	ldr	r3, [pc, #240]	@ (8009860 <UART_SetConfig+0x634>)
 800976e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009770:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009774:	2b28      	cmp	r3, #40	@ 0x28
 8009776:	d86d      	bhi.n	8009854 <UART_SetConfig+0x628>
 8009778:	a201      	add	r2, pc, #4	@ (adr r2, 8009780 <UART_SetConfig+0x554>)
 800977a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977e:	bf00      	nop
 8009780:	08009825 	.word	0x08009825
 8009784:	08009855 	.word	0x08009855
 8009788:	08009855 	.word	0x08009855
 800978c:	08009855 	.word	0x08009855
 8009790:	08009855 	.word	0x08009855
 8009794:	08009855 	.word	0x08009855
 8009798:	08009855 	.word	0x08009855
 800979c:	08009855 	.word	0x08009855
 80097a0:	0800982d 	.word	0x0800982d
 80097a4:	08009855 	.word	0x08009855
 80097a8:	08009855 	.word	0x08009855
 80097ac:	08009855 	.word	0x08009855
 80097b0:	08009855 	.word	0x08009855
 80097b4:	08009855 	.word	0x08009855
 80097b8:	08009855 	.word	0x08009855
 80097bc:	08009855 	.word	0x08009855
 80097c0:	08009835 	.word	0x08009835
 80097c4:	08009855 	.word	0x08009855
 80097c8:	08009855 	.word	0x08009855
 80097cc:	08009855 	.word	0x08009855
 80097d0:	08009855 	.word	0x08009855
 80097d4:	08009855 	.word	0x08009855
 80097d8:	08009855 	.word	0x08009855
 80097dc:	08009855 	.word	0x08009855
 80097e0:	0800983d 	.word	0x0800983d
 80097e4:	08009855 	.word	0x08009855
 80097e8:	08009855 	.word	0x08009855
 80097ec:	08009855 	.word	0x08009855
 80097f0:	08009855 	.word	0x08009855
 80097f4:	08009855 	.word	0x08009855
 80097f8:	08009855 	.word	0x08009855
 80097fc:	08009855 	.word	0x08009855
 8009800:	08009845 	.word	0x08009845
 8009804:	08009855 	.word	0x08009855
 8009808:	08009855 	.word	0x08009855
 800980c:	08009855 	.word	0x08009855
 8009810:	08009855 	.word	0x08009855
 8009814:	08009855 	.word	0x08009855
 8009818:	08009855 	.word	0x08009855
 800981c:	08009855 	.word	0x08009855
 8009820:	0800984d 	.word	0x0800984d
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982a:	e0d6      	b.n	80099da <UART_SetConfig+0x7ae>
 800982c:	2304      	movs	r3, #4
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009832:	e0d2      	b.n	80099da <UART_SetConfig+0x7ae>
 8009834:	2308      	movs	r3, #8
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983a:	e0ce      	b.n	80099da <UART_SetConfig+0x7ae>
 800983c:	2310      	movs	r3, #16
 800983e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009842:	e0ca      	b.n	80099da <UART_SetConfig+0x7ae>
 8009844:	2320      	movs	r3, #32
 8009846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984a:	e0c6      	b.n	80099da <UART_SetConfig+0x7ae>
 800984c:	2340      	movs	r3, #64	@ 0x40
 800984e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009852:	e0c2      	b.n	80099da <UART_SetConfig+0x7ae>
 8009854:	2380      	movs	r3, #128	@ 0x80
 8009856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985a:	e0be      	b.n	80099da <UART_SetConfig+0x7ae>
 800985c:	40011400 	.word	0x40011400
 8009860:	58024400 	.word	0x58024400
 8009864:	40007800 	.word	0x40007800
 8009868:	40007c00 	.word	0x40007c00
 800986c:	40011800 	.word	0x40011800
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4aad      	ldr	r2, [pc, #692]	@ (8009b2c <UART_SetConfig+0x900>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d176      	bne.n	8009968 <UART_SetConfig+0x73c>
 800987a:	4bad      	ldr	r3, [pc, #692]	@ (8009b30 <UART_SetConfig+0x904>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009882:	2b28      	cmp	r3, #40	@ 0x28
 8009884:	d86c      	bhi.n	8009960 <UART_SetConfig+0x734>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <UART_SetConfig+0x660>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	08009931 	.word	0x08009931
 8009890:	08009961 	.word	0x08009961
 8009894:	08009961 	.word	0x08009961
 8009898:	08009961 	.word	0x08009961
 800989c:	08009961 	.word	0x08009961
 80098a0:	08009961 	.word	0x08009961
 80098a4:	08009961 	.word	0x08009961
 80098a8:	08009961 	.word	0x08009961
 80098ac:	08009939 	.word	0x08009939
 80098b0:	08009961 	.word	0x08009961
 80098b4:	08009961 	.word	0x08009961
 80098b8:	08009961 	.word	0x08009961
 80098bc:	08009961 	.word	0x08009961
 80098c0:	08009961 	.word	0x08009961
 80098c4:	08009961 	.word	0x08009961
 80098c8:	08009961 	.word	0x08009961
 80098cc:	08009941 	.word	0x08009941
 80098d0:	08009961 	.word	0x08009961
 80098d4:	08009961 	.word	0x08009961
 80098d8:	08009961 	.word	0x08009961
 80098dc:	08009961 	.word	0x08009961
 80098e0:	08009961 	.word	0x08009961
 80098e4:	08009961 	.word	0x08009961
 80098e8:	08009961 	.word	0x08009961
 80098ec:	08009949 	.word	0x08009949
 80098f0:	08009961 	.word	0x08009961
 80098f4:	08009961 	.word	0x08009961
 80098f8:	08009961 	.word	0x08009961
 80098fc:	08009961 	.word	0x08009961
 8009900:	08009961 	.word	0x08009961
 8009904:	08009961 	.word	0x08009961
 8009908:	08009961 	.word	0x08009961
 800990c:	08009951 	.word	0x08009951
 8009910:	08009961 	.word	0x08009961
 8009914:	08009961 	.word	0x08009961
 8009918:	08009961 	.word	0x08009961
 800991c:	08009961 	.word	0x08009961
 8009920:	08009961 	.word	0x08009961
 8009924:	08009961 	.word	0x08009961
 8009928:	08009961 	.word	0x08009961
 800992c:	08009959 	.word	0x08009959
 8009930:	2301      	movs	r3, #1
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e050      	b.n	80099da <UART_SetConfig+0x7ae>
 8009938:	2304      	movs	r3, #4
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e04c      	b.n	80099da <UART_SetConfig+0x7ae>
 8009940:	2308      	movs	r3, #8
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e048      	b.n	80099da <UART_SetConfig+0x7ae>
 8009948:	2310      	movs	r3, #16
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800994e:	e044      	b.n	80099da <UART_SetConfig+0x7ae>
 8009950:	2320      	movs	r3, #32
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009956:	e040      	b.n	80099da <UART_SetConfig+0x7ae>
 8009958:	2340      	movs	r3, #64	@ 0x40
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995e:	e03c      	b.n	80099da <UART_SetConfig+0x7ae>
 8009960:	2380      	movs	r3, #128	@ 0x80
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009966:	e038      	b.n	80099da <UART_SetConfig+0x7ae>
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a71      	ldr	r2, [pc, #452]	@ (8009b34 <UART_SetConfig+0x908>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d130      	bne.n	80099d4 <UART_SetConfig+0x7a8>
 8009972:	4b6f      	ldr	r3, [pc, #444]	@ (8009b30 <UART_SetConfig+0x904>)
 8009974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b05      	cmp	r3, #5
 800997c:	d826      	bhi.n	80099cc <UART_SetConfig+0x7a0>
 800997e:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <UART_SetConfig+0x758>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	0800999d 	.word	0x0800999d
 8009988:	080099a5 	.word	0x080099a5
 800998c:	080099ad 	.word	0x080099ad
 8009990:	080099b5 	.word	0x080099b5
 8009994:	080099bd 	.word	0x080099bd
 8009998:	080099c5 	.word	0x080099c5
 800999c:	2302      	movs	r3, #2
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e01a      	b.n	80099da <UART_SetConfig+0x7ae>
 80099a4:	2304      	movs	r3, #4
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e016      	b.n	80099da <UART_SetConfig+0x7ae>
 80099ac:	2308      	movs	r3, #8
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b2:	e012      	b.n	80099da <UART_SetConfig+0x7ae>
 80099b4:	2310      	movs	r3, #16
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ba:	e00e      	b.n	80099da <UART_SetConfig+0x7ae>
 80099bc:	2320      	movs	r3, #32
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c2:	e00a      	b.n	80099da <UART_SetConfig+0x7ae>
 80099c4:	2340      	movs	r3, #64	@ 0x40
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ca:	e006      	b.n	80099da <UART_SetConfig+0x7ae>
 80099cc:	2380      	movs	r3, #128	@ 0x80
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d2:	e002      	b.n	80099da <UART_SetConfig+0x7ae>
 80099d4:	2380      	movs	r3, #128	@ 0x80
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a55      	ldr	r2, [pc, #340]	@ (8009b34 <UART_SetConfig+0x908>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	f040 80f8 	bne.w	8009bd6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	dc46      	bgt.n	8009a7c <UART_SetConfig+0x850>
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	db75      	blt.n	8009ade <UART_SetConfig+0x8b2>
 80099f2:	3b02      	subs	r3, #2
 80099f4:	2b1e      	cmp	r3, #30
 80099f6:	d872      	bhi.n	8009ade <UART_SetConfig+0x8b2>
 80099f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <UART_SetConfig+0x7d4>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a83 	.word	0x08009a83
 8009a04:	08009adf 	.word	0x08009adf
 8009a08:	08009a8b 	.word	0x08009a8b
 8009a0c:	08009adf 	.word	0x08009adf
 8009a10:	08009adf 	.word	0x08009adf
 8009a14:	08009adf 	.word	0x08009adf
 8009a18:	08009a9b 	.word	0x08009a9b
 8009a1c:	08009adf 	.word	0x08009adf
 8009a20:	08009adf 	.word	0x08009adf
 8009a24:	08009adf 	.word	0x08009adf
 8009a28:	08009adf 	.word	0x08009adf
 8009a2c:	08009adf 	.word	0x08009adf
 8009a30:	08009adf 	.word	0x08009adf
 8009a34:	08009adf 	.word	0x08009adf
 8009a38:	08009aab 	.word	0x08009aab
 8009a3c:	08009adf 	.word	0x08009adf
 8009a40:	08009adf 	.word	0x08009adf
 8009a44:	08009adf 	.word	0x08009adf
 8009a48:	08009adf 	.word	0x08009adf
 8009a4c:	08009adf 	.word	0x08009adf
 8009a50:	08009adf 	.word	0x08009adf
 8009a54:	08009adf 	.word	0x08009adf
 8009a58:	08009adf 	.word	0x08009adf
 8009a5c:	08009adf 	.word	0x08009adf
 8009a60:	08009adf 	.word	0x08009adf
 8009a64:	08009adf 	.word	0x08009adf
 8009a68:	08009adf 	.word	0x08009adf
 8009a6c:	08009adf 	.word	0x08009adf
 8009a70:	08009adf 	.word	0x08009adf
 8009a74:	08009adf 	.word	0x08009adf
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	2b40      	cmp	r3, #64	@ 0x40
 8009a7e:	d02a      	beq.n	8009ad6 <UART_SetConfig+0x8aa>
 8009a80:	e02d      	b.n	8009ade <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a82:	f7fd f8f5 	bl	8006c70 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a88:	e02f      	b.n	8009aea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fd f904 	bl	8006c9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a98:	e027      	b.n	8009aea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a9a:	f107 0318 	add.w	r3, r7, #24
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd fa50 	bl	8006f44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa8:	e01f      	b.n	8009aea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aaa:	4b21      	ldr	r3, [pc, #132]	@ (8009b30 <UART_SetConfig+0x904>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d009      	beq.n	8009aca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b30 <UART_SetConfig+0x904>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	08db      	lsrs	r3, r3, #3
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b38 <UART_SetConfig+0x90c>)
 8009ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ac8:	e00f      	b.n	8009aea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009aca:	4b1b      	ldr	r3, [pc, #108]	@ (8009b38 <UART_SetConfig+0x90c>)
 8009acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ace:	e00c      	b.n	8009aea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b3c <UART_SetConfig+0x910>)
 8009ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ad4:	e009      	b.n	8009aea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009adc:	e005      	b.n	8009aea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ae8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 81ee 	beq.w	8009ece <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af6:	4a12      	ldr	r2, [pc, #72]	@ (8009b40 <UART_SetConfig+0x914>)
 8009af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009afc:	461a      	mov	r2, r3
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b04:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	005b      	lsls	r3, r3, #1
 8009b0e:	4413      	add	r3, r2
 8009b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d305      	bcc.n	8009b22 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d910      	bls.n	8009b44 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b28:	e1d1      	b.n	8009ece <UART_SetConfig+0xca2>
 8009b2a:	bf00      	nop
 8009b2c:	40011c00 	.word	0x40011c00
 8009b30:	58024400 	.word	0x58024400
 8009b34:	58000c00 	.word	0x58000c00
 8009b38:	03d09000 	.word	0x03d09000
 8009b3c:	003d0900 	.word	0x003d0900
 8009b40:	0800aba8 	.word	0x0800aba8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b46:	2200      	movs	r2, #0
 8009b48:	60bb      	str	r3, [r7, #8]
 8009b4a:	60fa      	str	r2, [r7, #12]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b50:	4ac0      	ldr	r2, [pc, #768]	@ (8009e54 <UART_SetConfig+0xc28>)
 8009b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2200      	movs	r2, #0
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	607a      	str	r2, [r7, #4]
 8009b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009b66:	f7f6 fbd1 	bl	800030c <__aeabi_uldivmod>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4610      	mov	r0, r2
 8009b70:	4619      	mov	r1, r3
 8009b72:	f04f 0200 	mov.w	r2, #0
 8009b76:	f04f 0300 	mov.w	r3, #0
 8009b7a:	020b      	lsls	r3, r1, #8
 8009b7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009b80:	0202      	lsls	r2, r0, #8
 8009b82:	6979      	ldr	r1, [r7, #20]
 8009b84:	6849      	ldr	r1, [r1, #4]
 8009b86:	0849      	lsrs	r1, r1, #1
 8009b88:	2000      	movs	r0, #0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	eb12 0804 	adds.w	r8, r2, r4
 8009b92:	eb43 0905 	adc.w	r9, r3, r5
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	469a      	mov	sl, r3
 8009b9e:	4693      	mov	fp, r2
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	4649      	mov	r1, r9
 8009ba8:	f7f6 fbb0 	bl	800030c <__aeabi_uldivmod>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bba:	d308      	bcc.n	8009bce <UART_SetConfig+0x9a2>
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bc2:	d204      	bcs.n	8009bce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bca:	60da      	str	r2, [r3, #12]
 8009bcc:	e17f      	b.n	8009ece <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009bd4:	e17b      	b.n	8009ece <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bde:	f040 80bd 	bne.w	8009d5c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009be2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	dc48      	bgt.n	8009c7c <UART_SetConfig+0xa50>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	db7b      	blt.n	8009ce6 <UART_SetConfig+0xaba>
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d879      	bhi.n	8009ce6 <UART_SetConfig+0xaba>
 8009bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf8 <UART_SetConfig+0x9cc>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c83 	.word	0x08009c83
 8009bfc:	08009c8b 	.word	0x08009c8b
 8009c00:	08009ce7 	.word	0x08009ce7
 8009c04:	08009ce7 	.word	0x08009ce7
 8009c08:	08009c93 	.word	0x08009c93
 8009c0c:	08009ce7 	.word	0x08009ce7
 8009c10:	08009ce7 	.word	0x08009ce7
 8009c14:	08009ce7 	.word	0x08009ce7
 8009c18:	08009ca3 	.word	0x08009ca3
 8009c1c:	08009ce7 	.word	0x08009ce7
 8009c20:	08009ce7 	.word	0x08009ce7
 8009c24:	08009ce7 	.word	0x08009ce7
 8009c28:	08009ce7 	.word	0x08009ce7
 8009c2c:	08009ce7 	.word	0x08009ce7
 8009c30:	08009ce7 	.word	0x08009ce7
 8009c34:	08009ce7 	.word	0x08009ce7
 8009c38:	08009cb3 	.word	0x08009cb3
 8009c3c:	08009ce7 	.word	0x08009ce7
 8009c40:	08009ce7 	.word	0x08009ce7
 8009c44:	08009ce7 	.word	0x08009ce7
 8009c48:	08009ce7 	.word	0x08009ce7
 8009c4c:	08009ce7 	.word	0x08009ce7
 8009c50:	08009ce7 	.word	0x08009ce7
 8009c54:	08009ce7 	.word	0x08009ce7
 8009c58:	08009ce7 	.word	0x08009ce7
 8009c5c:	08009ce7 	.word	0x08009ce7
 8009c60:	08009ce7 	.word	0x08009ce7
 8009c64:	08009ce7 	.word	0x08009ce7
 8009c68:	08009ce7 	.word	0x08009ce7
 8009c6c:	08009ce7 	.word	0x08009ce7
 8009c70:	08009ce7 	.word	0x08009ce7
 8009c74:	08009ce7 	.word	0x08009ce7
 8009c78:	08009cd9 	.word	0x08009cd9
 8009c7c:	2b40      	cmp	r3, #64	@ 0x40
 8009c7e:	d02e      	beq.n	8009cde <UART_SetConfig+0xab2>
 8009c80:	e031      	b.n	8009ce6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c82:	f7fb fe29 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8009c86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c88:	e033      	b.n	8009cf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c8a:	f7fb fe3b 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 8009c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c90:	e02f      	b.n	8009cf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fd f800 	bl	8006c9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca0:	e027      	b.n	8009cf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ca2:	f107 0318 	add.w	r3, r7, #24
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fd f94c 	bl	8006f44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb0:	e01f      	b.n	8009cf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cb2:	4b69      	ldr	r3, [pc, #420]	@ (8009e58 <UART_SetConfig+0xc2c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d009      	beq.n	8009cd2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009cbe:	4b66      	ldr	r3, [pc, #408]	@ (8009e58 <UART_SetConfig+0xc2c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	f003 0303 	and.w	r3, r3, #3
 8009cc8:	4a64      	ldr	r2, [pc, #400]	@ (8009e5c <UART_SetConfig+0xc30>)
 8009cca:	fa22 f303 	lsr.w	r3, r2, r3
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cd0:	e00f      	b.n	8009cf2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009cd2:	4b62      	ldr	r3, [pc, #392]	@ (8009e5c <UART_SetConfig+0xc30>)
 8009cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd6:	e00c      	b.n	8009cf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cd8:	4b61      	ldr	r3, [pc, #388]	@ (8009e60 <UART_SetConfig+0xc34>)
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cdc:	e009      	b.n	8009cf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce4:	e005      	b.n	8009cf2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 80ea 	beq.w	8009ece <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfe:	4a55      	ldr	r2, [pc, #340]	@ (8009e54 <UART_SetConfig+0xc28>)
 8009d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d04:	461a      	mov	r2, r3
 8009d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d0c:	005a      	lsls	r2, r3, #1
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	085b      	lsrs	r3, r3, #1
 8009d14:	441a      	add	r2, r3
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d22:	2b0f      	cmp	r3, #15
 8009d24:	d916      	bls.n	8009d54 <UART_SetConfig+0xb28>
 8009d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d2c:	d212      	bcs.n	8009d54 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	f023 030f 	bic.w	r3, r3, #15
 8009d36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	085b      	lsrs	r3, r3, #1
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d46:	4313      	orrs	r3, r2
 8009d48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	e0bc      	b.n	8009ece <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009d5a:	e0b8      	b.n	8009ece <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d5c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	dc4b      	bgt.n	8009dfc <UART_SetConfig+0xbd0>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f2c0 8087 	blt.w	8009e78 <UART_SetConfig+0xc4c>
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	f200 8084 	bhi.w	8009e78 <UART_SetConfig+0xc4c>
 8009d70:	a201      	add	r2, pc, #4	@ (adr r2, 8009d78 <UART_SetConfig+0xb4c>)
 8009d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d76:	bf00      	nop
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e0b 	.word	0x08009e0b
 8009d80:	08009e79 	.word	0x08009e79
 8009d84:	08009e79 	.word	0x08009e79
 8009d88:	08009e13 	.word	0x08009e13
 8009d8c:	08009e79 	.word	0x08009e79
 8009d90:	08009e79 	.word	0x08009e79
 8009d94:	08009e79 	.word	0x08009e79
 8009d98:	08009e23 	.word	0x08009e23
 8009d9c:	08009e79 	.word	0x08009e79
 8009da0:	08009e79 	.word	0x08009e79
 8009da4:	08009e79 	.word	0x08009e79
 8009da8:	08009e79 	.word	0x08009e79
 8009dac:	08009e79 	.word	0x08009e79
 8009db0:	08009e79 	.word	0x08009e79
 8009db4:	08009e79 	.word	0x08009e79
 8009db8:	08009e33 	.word	0x08009e33
 8009dbc:	08009e79 	.word	0x08009e79
 8009dc0:	08009e79 	.word	0x08009e79
 8009dc4:	08009e79 	.word	0x08009e79
 8009dc8:	08009e79 	.word	0x08009e79
 8009dcc:	08009e79 	.word	0x08009e79
 8009dd0:	08009e79 	.word	0x08009e79
 8009dd4:	08009e79 	.word	0x08009e79
 8009dd8:	08009e79 	.word	0x08009e79
 8009ddc:	08009e79 	.word	0x08009e79
 8009de0:	08009e79 	.word	0x08009e79
 8009de4:	08009e79 	.word	0x08009e79
 8009de8:	08009e79 	.word	0x08009e79
 8009dec:	08009e79 	.word	0x08009e79
 8009df0:	08009e79 	.word	0x08009e79
 8009df4:	08009e79 	.word	0x08009e79
 8009df8:	08009e6b 	.word	0x08009e6b
 8009dfc:	2b40      	cmp	r3, #64	@ 0x40
 8009dfe:	d037      	beq.n	8009e70 <UART_SetConfig+0xc44>
 8009e00:	e03a      	b.n	8009e78 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e02:	f7fb fd69 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8009e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e08:	e03c      	b.n	8009e84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e0a:	f7fb fd7b 	bl	8005904 <HAL_RCC_GetPCLK2Freq>
 8009e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e10:	e038      	b.n	8009e84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fc ff40 	bl	8006c9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e20:	e030      	b.n	8009e84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e22:	f107 0318 	add.w	r3, r7, #24
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fd f88c 	bl	8006f44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e30:	e028      	b.n	8009e84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e32:	4b09      	ldr	r3, [pc, #36]	@ (8009e58 <UART_SetConfig+0xc2c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d012      	beq.n	8009e64 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e3e:	4b06      	ldr	r3, [pc, #24]	@ (8009e58 <UART_SetConfig+0xc2c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	08db      	lsrs	r3, r3, #3
 8009e44:	f003 0303 	and.w	r3, r3, #3
 8009e48:	4a04      	ldr	r2, [pc, #16]	@ (8009e5c <UART_SetConfig+0xc30>)
 8009e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e50:	e018      	b.n	8009e84 <UART_SetConfig+0xc58>
 8009e52:	bf00      	nop
 8009e54:	0800aba8 	.word	0x0800aba8
 8009e58:	58024400 	.word	0x58024400
 8009e5c:	03d09000 	.word	0x03d09000
 8009e60:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009e64:	4b24      	ldr	r3, [pc, #144]	@ (8009ef8 <UART_SetConfig+0xccc>)
 8009e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e68:	e00c      	b.n	8009e84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e6a:	4b24      	ldr	r3, [pc, #144]	@ (8009efc <UART_SetConfig+0xcd0>)
 8009e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e6e:	e009      	b.n	8009e84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e76:	e005      	b.n	8009e84 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e82:	bf00      	nop
    }

    if (pclk != 0U)
 8009e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d021      	beq.n	8009ece <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009f00 <UART_SetConfig+0xcd4>)
 8009e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e94:	461a      	mov	r2, r3
 8009e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e98:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	085b      	lsrs	r3, r3, #1
 8009ea2:	441a      	add	r2, r3
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eac:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb0:	2b0f      	cmp	r3, #15
 8009eb2:	d909      	bls.n	8009ec8 <UART_SetConfig+0xc9c>
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009eba:	d205      	bcs.n	8009ec8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60da      	str	r2, [r3, #12]
 8009ec6:	e002      	b.n	8009ece <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009eea:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3748      	adds	r7, #72	@ 0x48
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ef8:	03d09000 	.word	0x03d09000
 8009efc:	003d0900 	.word	0x003d0900
 8009f00:	0800aba8 	.word	0x0800aba8

08009f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	f003 0308 	and.w	r3, r3, #8
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f54:	f003 0302 	and.w	r3, r3, #2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00a      	beq.n	8009fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01a      	beq.n	800a01a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a002:	d10a      	bne.n	800a01a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	605a      	str	r2, [r3, #4]
  }
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b098      	sub	sp, #96	@ 0x60
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a058:	f7f7 f9f2 	bl	8001440 <HAL_GetTick>
 800a05c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d12f      	bne.n	800a0cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a06c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a074:	2200      	movs	r2, #0
 800a076:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f88e 	bl	800a19c <UART_WaitOnFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d022      	beq.n	800a0cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a09a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e6      	bne.n	800a086 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e063      	b.n	800a194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d149      	bne.n	800a16e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f857 	bl	800a19c <UART_WaitOnFlagUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d03c      	beq.n	800a16e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	623b      	str	r3, [r7, #32]
   return(result);
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a112:	633b      	str	r3, [r7, #48]	@ 0x30
 800a114:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e6      	bne.n	800a0f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3308      	adds	r3, #8
 800a12c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	e853 3f00 	ldrex	r3, [r3]
 800a134:	60fb      	str	r3, [r7, #12]
   return(result);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f023 0301 	bic.w	r3, r3, #1
 800a13c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3308      	adds	r3, #8
 800a144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a146:	61fa      	str	r2, [r7, #28]
 800a148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	69b9      	ldr	r1, [r7, #24]
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	617b      	str	r3, [r7, #20]
   return(result);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e5      	bne.n	800a126 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e012      	b.n	800a194 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2220      	movs	r2, #32
 800a172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3758      	adds	r7, #88	@ 0x58
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ac:	e04f      	b.n	800a24e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b4:	d04b      	beq.n	800a24e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1b6:	f7f7 f943 	bl	8001440 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d302      	bcc.n	800a1cc <UART_WaitOnFlagUntilTimeout+0x30>
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	e04e      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d037      	beq.n	800a24e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b80      	cmp	r3, #128	@ 0x80
 800a1e2:	d034      	beq.n	800a24e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b40      	cmp	r3, #64	@ 0x40
 800a1e8:	d031      	beq.n	800a24e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d110      	bne.n	800a21a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f921 	bl	800a448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2208      	movs	r2, #8
 800a20a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e029      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a228:	d111      	bne.n	800a24e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f907 	bl	800a448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e00f      	b.n	800a26e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	69da      	ldr	r2, [r3, #28]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	4013      	ands	r3, r2
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	bf0c      	ite	eq
 800a25e:	2301      	moveq	r3, #1
 800a260:	2300      	movne	r3, #0
 800a262:	b2db      	uxtb	r3, r3
 800a264:	461a      	mov	r2, r3
 800a266:	79fb      	ldrb	r3, [r7, #7]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d0a0      	beq.n	800a1ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
	...

0800a278 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b096      	sub	sp, #88	@ 0x58
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	88fa      	ldrh	r2, [r7, #6]
 800a290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2222      	movs	r2, #34	@ 0x22
 800a2a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d02d      	beq.n	800a30a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2b4:	4a40      	ldr	r2, [pc, #256]	@ (800a3b8 <UART_Start_Receive_DMA+0x140>)
 800a2b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2be:	4a3f      	ldr	r2, [pc, #252]	@ (800a3bc <UART_Start_Receive_DMA+0x144>)
 800a2c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2c8:	4a3d      	ldr	r2, [pc, #244]	@ (800a3c0 <UART_Start_Receive_DMA+0x148>)
 800a2ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3324      	adds	r3, #36	@ 0x24
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	88fb      	ldrh	r3, [r7, #6]
 800a2ec:	f7f7 feaa 	bl	8002044 <HAL_DMA_Start_IT>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2210      	movs	r2, #16
 800a2fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e051      	b.n	800a3ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d018      	beq.n	800a344 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a326:	657b      	str	r3, [r7, #84]	@ 0x54
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a332:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a33e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e6      	bne.n	800a312 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3308      	adds	r3, #8
 800a34a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34e:	e853 3f00 	ldrex	r3, [r3]
 800a352:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a364:	637a      	str	r2, [r7, #52]	@ 0x34
 800a366:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a368:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a36a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a36c:	e841 2300 	strex	r3, r2, [r1]
 800a370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1e5      	bne.n	800a344 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3308      	adds	r3, #8
 800a37e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	613b      	str	r3, [r7, #16]
   return(result);
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a38e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a398:	623a      	str	r2, [r7, #32]
 800a39a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	69f9      	ldr	r1, [r7, #28]
 800a39e:	6a3a      	ldr	r2, [r7, #32]
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e5      	bne.n	800a378 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3758      	adds	r7, #88	@ 0x58
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800a5c7 	.word	0x0800a5c7
 800a3bc:	0800a6ef 	.word	0x0800a6ef
 800a3c0:	0800a72d 	.word	0x0800a72d

0800a3c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b08f      	sub	sp, #60	@ 0x3c
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e6      	bne.n	800a3cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a414:	633b      	str	r3, [r7, #48]	@ 0x30
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3308      	adds	r3, #8
 800a41c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a41e:	61ba      	str	r2, [r7, #24]
 800a420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	6979      	ldr	r1, [r7, #20]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	613b      	str	r3, [r7, #16]
   return(result);
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e5      	bne.n	800a3fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2220      	movs	r2, #32
 800a436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a43a:	bf00      	nop
 800a43c:	373c      	adds	r7, #60	@ 0x3c
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
	...

0800a448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a448:	b480      	push	{r7}
 800a44a:	b095      	sub	sp, #84	@ 0x54
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a46e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a470:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e6      	bne.n	800a450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3308      	adds	r3, #8
 800a488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	61fb      	str	r3, [r7, #28]
   return(result);
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	4b1e      	ldr	r3, [pc, #120]	@ (800a510 <UART_EndRxTransfer+0xc8>)
 800a496:	4013      	ands	r3, r2
 800a498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e5      	bne.n	800a482 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d118      	bne.n	800a4f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f023 0310 	bic.w	r3, r3, #16
 800a4d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a504:	bf00      	nop
 800a506:	3754      	adds	r7, #84	@ 0x54
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	effffffe 	.word	0xeffffffe

0800a514 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b090      	sub	sp, #64	@ 0x40
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a52a:	d037      	beq.n	800a59c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a52e:	2200      	movs	r2, #0
 800a530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3308      	adds	r3, #8
 800a53a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	623b      	str	r3, [r7, #32]
   return(result);
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a54a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a54c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3308      	adds	r3, #8
 800a552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a554:	633a      	str	r2, [r7, #48]	@ 0x30
 800a556:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e5      	bne.n	800a534 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	60fb      	str	r3, [r7, #12]
   return(result);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a586:	61fb      	str	r3, [r7, #28]
 800a588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58a:	69b9      	ldr	r1, [r7, #24]
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	617b      	str	r3, [r7, #20]
   return(result);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1e6      	bne.n	800a568 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a59a:	e002      	b.n	800a5a2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a59c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a59e:	f7f6 fbaf 	bl	8000d00 <HAL_UART_TxCpltCallback>
}
 800a5a2:	bf00      	nop
 800a5a4:	3740      	adds	r7, #64	@ 0x40
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7fe fd67 	bl	800908c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5be:	bf00      	nop
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b09c      	sub	sp, #112	@ 0x70
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	69db      	ldr	r3, [r3, #28]
 800a5d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5dc:	d071      	beq.n	800a6c2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a604:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a606:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a608:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a60a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a60c:	e841 2300 	strex	r3, r2, [r1]
 800a610:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e6      	bne.n	800a5e6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3308      	adds	r3, #8
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62a:	f023 0301 	bic.w	r3, r3, #1
 800a62e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3308      	adds	r3, #8
 800a636:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a638:	647a      	str	r2, [r7, #68]	@ 0x44
 800a63a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a63e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e5      	bne.n	800a618 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a64c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3308      	adds	r3, #8
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	e853 3f00 	ldrex	r3, [r3]
 800a65a:	623b      	str	r3, [r7, #32]
   return(result);
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a662:	663b      	str	r3, [r7, #96]	@ 0x60
 800a664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3308      	adds	r3, #8
 800a66a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a66c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a674:	e841 2300 	strex	r3, r2, [r1]
 800a678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e5      	bne.n	800a64c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a682:	2220      	movs	r2, #32
 800a684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d118      	bne.n	800a6c2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f023 0310 	bic.w	r3, r3, #16
 800a6a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6ae:	61fb      	str	r3, [r7, #28]
 800a6b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	69b9      	ldr	r1, [r7, #24]
 800a6b4:	69fa      	ldr	r2, [r7, #28]
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	617b      	str	r3, [r7, #20]
   return(result);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e6      	bne.n	800a690 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d107      	bne.n	800a6e0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6da:	f7f6 fb1b 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6de:	e002      	b.n	800a6e6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a6e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6e2:	f7fe fcdd 	bl	80090a0 <HAL_UART_RxCpltCallback>
}
 800a6e6:	bf00      	nop
 800a6e8:	3770      	adds	r7, #112	@ 0x70
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2201      	movs	r2, #1
 800a700:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a706:	2b01      	cmp	r3, #1
 800a708:	d109      	bne.n	800a71e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a710:	085b      	lsrs	r3, r3, #1
 800a712:	b29b      	uxth	r3, r3
 800a714:	4619      	mov	r1, r3
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7f6 fafc 	bl	8000d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a71c:	e002      	b.n	800a724 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7fe fcc8 	bl	80090b4 <HAL_UART_RxHalfCpltCallback>
}
 800a724:	bf00      	nop
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a738:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a740:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a748:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a754:	2b80      	cmp	r3, #128	@ 0x80
 800a756:	d109      	bne.n	800a76c <UART_DMAError+0x40>
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2b21      	cmp	r3, #33	@ 0x21
 800a75c:	d106      	bne.n	800a76c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2200      	movs	r2, #0
 800a762:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a766:	6978      	ldr	r0, [r7, #20]
 800a768:	f7ff fe2c 	bl	800a3c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a776:	2b40      	cmp	r3, #64	@ 0x40
 800a778:	d109      	bne.n	800a78e <UART_DMAError+0x62>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2b22      	cmp	r3, #34	@ 0x22
 800a77e:	d106      	bne.n	800a78e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2200      	movs	r2, #0
 800a784:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f7ff fe5d 	bl	800a448 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a794:	f043 0210 	orr.w	r2, r3, #16
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a79e:	6978      	ldr	r0, [r7, #20]
 800a7a0:	f7fe fc92 	bl	80090c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a4:	bf00      	nop
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f7fe fc7c 	bl	80090c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7d0:	bf00      	nop
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	61bb      	str	r3, [r7, #24]
 800a800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6979      	ldr	r1, [r7, #20]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	613b      	str	r3, [r7, #16]
   return(result);
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e6      	bne.n	800a7e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7f6 fa6d 	bl	8000d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a826:	bf00      	nop
 800a828:	3720      	adds	r7, #32
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a842:	b480      	push	{r7}
 800a844:	b083      	sub	sp, #12
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b085      	sub	sp, #20
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d101      	bne.n	800a880 <HAL_UARTEx_DisableFifoMode+0x16>
 800a87c:	2302      	movs	r3, #2
 800a87e:	e027      	b.n	800a8d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2224      	movs	r2, #36	@ 0x24
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0201 	bic.w	r2, r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d101      	bne.n	800a8f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	e02d      	b.n	800a950 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2224      	movs	r2, #36	@ 0x24
 800a900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f022 0201 	bic.w	r2, r2, #1
 800a91a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f8a3 	bl	800aa7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2220      	movs	r2, #32
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3710      	adds	r7, #16
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d101      	bne.n	800a970 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e02d      	b.n	800a9cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2224      	movs	r2, #36	@ 0x24
 800a97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0201 	bic.w	r2, r2, #1
 800a996:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f865 	bl	800aa7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08c      	sub	sp, #48	@ 0x30
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9e8:	2b20      	cmp	r3, #32
 800a9ea:	d142      	bne.n	800aa72 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e03b      	b.n	800aa74 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aa08:	88fb      	ldrh	r3, [r7, #6]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68b9      	ldr	r1, [r7, #8]
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7ff fc32 	bl	800a278 <UART_Start_Receive_DMA>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aa1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d124      	bne.n	800aa6c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d11d      	bne.n	800aa66 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2210      	movs	r2, #16
 800aa30:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	e853 3f00 	ldrex	r3, [r3]
 800aa3e:	617b      	str	r3, [r7, #20]
   return(result);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f043 0310 	orr.w	r3, r3, #16
 800aa46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa52:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa54:	6a39      	ldr	r1, [r7, #32]
 800aa56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa58:	e841 2300 	strex	r3, r2, [r1]
 800aa5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e6      	bne.n	800aa32 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800aa64:	e002      	b.n	800aa6c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800aa6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa70:	e000      	b.n	800aa74 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aa72:	2302      	movs	r3, #2
  }
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3730      	adds	r7, #48	@ 0x30
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d108      	bne.n	800aa9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa9c:	e031      	b.n	800ab02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa9e:	2310      	movs	r3, #16
 800aaa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aaa2:	2310      	movs	r3, #16
 800aaa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	0e5b      	lsrs	r3, r3, #25
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	0f5b      	lsrs	r3, r3, #29
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	f003 0307 	and.w	r3, r3, #7
 800aac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	7b3a      	ldrb	r2, [r7, #12]
 800aaca:	4911      	ldr	r1, [pc, #68]	@ (800ab10 <UARTEx_SetNbDataToProcess+0x94>)
 800aacc:	5c8a      	ldrb	r2, [r1, r2]
 800aace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aad2:	7b3a      	ldrb	r2, [r7, #12]
 800aad4:	490f      	ldr	r1, [pc, #60]	@ (800ab14 <UARTEx_SetNbDataToProcess+0x98>)
 800aad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aad8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aadc:	b29a      	uxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	7b7a      	ldrb	r2, [r7, #13]
 800aae8:	4909      	ldr	r1, [pc, #36]	@ (800ab10 <UARTEx_SetNbDataToProcess+0x94>)
 800aaea:	5c8a      	ldrb	r2, [r1, r2]
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aaf0:	7b7a      	ldrb	r2, [r7, #13]
 800aaf2:	4908      	ldr	r1, [pc, #32]	@ (800ab14 <UARTEx_SetNbDataToProcess+0x98>)
 800aaf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab02:	bf00      	nop
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	0800abc0 	.word	0x0800abc0
 800ab14:	0800abc8 	.word	0x0800abc8

0800ab18 <memset>:
 800ab18:	4402      	add	r2, r0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d100      	bne.n	800ab22 <memset+0xa>
 800ab20:	4770      	bx	lr
 800ab22:	f803 1b01 	strb.w	r1, [r3], #1
 800ab26:	e7f9      	b.n	800ab1c <memset+0x4>

0800ab28 <__libc_init_array>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	4d0d      	ldr	r5, [pc, #52]	@ (800ab60 <__libc_init_array+0x38>)
 800ab2c:	4c0d      	ldr	r4, [pc, #52]	@ (800ab64 <__libc_init_array+0x3c>)
 800ab2e:	1b64      	subs	r4, r4, r5
 800ab30:	10a4      	asrs	r4, r4, #2
 800ab32:	2600      	movs	r6, #0
 800ab34:	42a6      	cmp	r6, r4
 800ab36:	d109      	bne.n	800ab4c <__libc_init_array+0x24>
 800ab38:	4d0b      	ldr	r5, [pc, #44]	@ (800ab68 <__libc_init_array+0x40>)
 800ab3a:	4c0c      	ldr	r4, [pc, #48]	@ (800ab6c <__libc_init_array+0x44>)
 800ab3c:	f000 f818 	bl	800ab70 <_init>
 800ab40:	1b64      	subs	r4, r4, r5
 800ab42:	10a4      	asrs	r4, r4, #2
 800ab44:	2600      	movs	r6, #0
 800ab46:	42a6      	cmp	r6, r4
 800ab48:	d105      	bne.n	800ab56 <__libc_init_array+0x2e>
 800ab4a:	bd70      	pop	{r4, r5, r6, pc}
 800ab4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab50:	4798      	blx	r3
 800ab52:	3601      	adds	r6, #1
 800ab54:	e7ee      	b.n	800ab34 <__libc_init_array+0xc>
 800ab56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab5a:	4798      	blx	r3
 800ab5c:	3601      	adds	r6, #1
 800ab5e:	e7f2      	b.n	800ab46 <__libc_init_array+0x1e>
 800ab60:	0800abd8 	.word	0x0800abd8
 800ab64:	0800abd8 	.word	0x0800abd8
 800ab68:	0800abd8 	.word	0x0800abd8
 800ab6c:	0800abdc 	.word	0x0800abdc

0800ab70 <_init>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	bf00      	nop
 800ab74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab76:	bc08      	pop	{r3}
 800ab78:	469e      	mov	lr, r3
 800ab7a:	4770      	bx	lr

0800ab7c <_fini>:
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab7e:	bf00      	nop
 800ab80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab82:	bc08      	pop	{r3}
 800ab84:	469e      	mov	lr, r3
 800ab86:	4770      	bx	lr
