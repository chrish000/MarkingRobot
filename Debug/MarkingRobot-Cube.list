
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006b2c  08006b2c  00007b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b64  08006b64  00007b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006b74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000174  24000010  08006b84  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000184  08006b84  00008184  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000112e5  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002396  00000000  00000000  00019323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bd0  00000000  00000000  0001b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000090e  00000000  00000000  0001c290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00002c0b  00000000  00000000  0001cb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012a1d  00000000  00000000  0001f7a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014013c  00000000  00000000  000321c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00172302  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002fe0  00000000  00000000  00172348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  00175328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006b14 	.word	0x08006b14

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08006b14 	.word	0x08006b14

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000600:	f000 fa3a 	bl	8000a78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc68 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f836 	bl	8000678 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f966 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f914 	bl	800083c <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000614:	f000 f8a0 	bl	8000758 <MX_CRC_Init>
  MX_UART8_Init();
 8000618:	f000 f8c0 	bl	800079c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 800061c:	2200      	movs	r2, #0
 800061e:	2140      	movs	r1, #64	@ 0x40
 8000620:	4812      	ldr	r0, [pc, #72]	@ (800066c <main+0x70>)
 8000622:	f001 fe95 	bl	8002350 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET); //Direction-Pin von Treiber X setzen
 8000626:	2201      	movs	r2, #1
 8000628:	2108      	movs	r1, #8
 800062a:	4810      	ldr	r0, [pc, #64]	@ (800066c <main+0x70>)
 800062c:	f001 fe90 	bl	8002350 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BatteryAlarm)
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <main+0x74>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <main+0x4e>
	  {
		  //TODO gebe leeren Batteriestand auf Display aus
		  if(Move_To_Pos(HomePos))
 800063a:	480e      	ldr	r0, [pc, #56]	@ (8000674 <main+0x78>)
 800063c:	f000 fa4e 	bl	8000adc <Move_To_Pos>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x4e>
			  Error_Handler();
 8000646:	f000 fa43 	bl	8000ad0 <Error_Handler>
	  }
	  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2110      	movs	r1, #16
 800064e:	4807      	ldr	r0, [pc, #28]	@ (800066c <main+0x70>)
 8000650:	f001 fe7e 	bl	8002350 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fcd1 	bl	8000ffc <HAL_Delay>
	  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2110      	movs	r1, #16
 800065e:	4803      	ldr	r0, [pc, #12]	@ (800066c <main+0x70>)
 8000660:	f001 fe76 	bl	8002350 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 fcc9 	bl	8000ffc <HAL_Delay>
	  if(BatteryAlarm)
 800066a:	e7e1      	b.n	8000630 <main+0x34>
 800066c:	58020c00 	.word	0x58020c00
 8000670:	24000178 	.word	0x24000178
 8000674:	2400017c 	.word	0x2400017c

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	@ 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fa18 	bl	8006abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fa12 	bl	8006abc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000698:	2002      	movs	r0, #2
 800069a:	f001 fe8d 	bl	80023b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <SystemClock_Config+0xdc>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <SystemClock_Config+0xdc>)
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <SystemClock_Config+0xdc>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <SystemClock_Config+0xdc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006c8:	d1f8      	bne.n	80006bc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ca:	2302      	movs	r3, #2
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2300      	movs	r3, #0
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006de:	2304      	movs	r3, #4
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80006e2:	2322      	movs	r3, #34	@ 0x22
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006ea:	2303      	movs	r3, #3
 80006ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f2:	230c      	movs	r3, #12
 80006f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80006fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fe91 	bl	800242c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000710:	f000 f9de 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	233f      	movs	r3, #63	@ 0x3f
 8000716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2303      	movs	r3, #3
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000720:	2308      	movs	r3, #8
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000724:	2340      	movs	r3, #64	@ 0x40
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000728:	2340      	movs	r3, #64	@ 0x40
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800072c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000730:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000732:	2340      	movs	r3, #64	@ 0x40
 8000734:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2103      	movs	r1, #3
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fa50 	bl	8002be0 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000746:	f000 f9c3 	bl	8000ad0 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3770      	adds	r7, #112	@ 0x70
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	58024800 	.word	0x58024800

08000758 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_CRC_Init+0x3c>)
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <MX_CRC_Init+0x40>)
 8000760:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000764:	2200      	movs	r2, #0
 8000766:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_CRC_Init+0x3c>)
 800076a:	2200      	movs	r2, #0
 800076c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_CRC_Init+0x3c>)
 800077c:	2201      	movs	r2, #1
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000782:	f000 fde7 	bl	8001354 <HAL_CRC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800078c:	f000 f9a0 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2400002c 	.word	0x2400002c
 8000798:	58024c00 	.word	0x58024c00

0800079c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_UART8_Init+0x98>)
 80007a2:	4a25      	ldr	r2, [pc, #148]	@ (8000838 <MX_UART8_Init+0x9c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_UART8_Init+0x98>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_UART8_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_UART8_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_UART8_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_UART8_Init+0x98>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_UART8_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_UART8_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_UART8_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_UART8_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 80007de:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_UART8_Init+0x98>)
 80007e0:	2280      	movs	r2, #128	@ 0x80
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart8.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_UART8_Init+0x98>)
 80007e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 80007ec:	4811      	ldr	r0, [pc, #68]	@ (8000834 <MX_UART8_Init+0x98>)
 80007ee:	f004 fb45 	bl	8004e7c <HAL_HalfDuplex_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_UART8_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f96a 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_UART8_Init+0x98>)
 8000800:	f006 f892 	bl	8006928 <HAL_UARTEx_SetTxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_UART8_Init+0x72>
  {
    Error_Handler();
 800080a:	f000 f961 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4808      	ldr	r0, [pc, #32]	@ (8000834 <MX_UART8_Init+0x98>)
 8000812:	f006 f8c7 	bl	80069a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_UART8_Init+0x84>
  {
    Error_Handler();
 800081c:	f000 f958 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000820:	4804      	ldr	r0, [pc, #16]	@ (8000834 <MX_UART8_Init+0x98>)
 8000822:	f006 f848 	bl	80068b6 <HAL_UARTEx_DisableFifoMode>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_UART8_Init+0x94>
  {
    Error_Handler();
 800082c:	f000 f950 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	24000050 	.word	0x24000050
 8000838:	40007c00 	.word	0x40007c00

0800083c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000842:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <MX_USART2_UART_Init+0x9c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 8000886:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800088a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 800088e:	f004 faf5 	bl	8004e7c <HAL_HalfDuplex_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 f91a 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 80008a0:	f006 f842 	bl	8006928 <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80008aa:	f000 f911 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 80008b2:	f006 f877 	bl	80069a4 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80008bc:	f000 f908 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_USART2_UART_Init+0x98>)
 80008c2:	f005 fff8 	bl	80068b6 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80008cc:	f000 f900 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	240000e4 	.word	0x240000e4
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	4b52      	ldr	r3, [pc, #328]	@ (8000a3c <MX_GPIO_Init+0x160>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	4a50      	ldr	r2, [pc, #320]	@ (8000a3c <MX_GPIO_Init+0x160>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000902:	4b4e      	ldr	r3, [pc, #312]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	f003 0310 	and.w	r3, r3, #16
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	4b4a      	ldr	r3, [pc, #296]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a49      	ldr	r2, [pc, #292]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b46      	ldr	r3, [pc, #280]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b43      	ldr	r3, [pc, #268]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	4a41      	ldr	r2, [pc, #260]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a3c <MX_GPIO_Init+0x160>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	4a3a      	ldr	r2, [pc, #232]	@ (8000a3c <MX_GPIO_Init+0x160>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095c:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <MX_GPIO_Init+0x160>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	210c      	movs	r1, #12
 800096e:	4834      	ldr	r0, [pc, #208]	@ (8000a40 <MX_GPIO_Init+0x164>)
 8000970:	f001 fcee 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2118      	movs	r1, #24
 8000978:	4832      	ldr	r0, [pc, #200]	@ (8000a44 <MX_GPIO_Init+0x168>)
 800097a:	f001 fce9 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2140      	movs	r1, #64	@ 0x40
 8000982:	4830      	ldr	r0, [pc, #192]	@ (8000a44 <MX_GPIO_Init+0x168>)
 8000984:	f001 fce4 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2108      	movs	r1, #8
 800098c:	482e      	ldr	r0, [pc, #184]	@ (8000a48 <MX_GPIO_Init+0x16c>)
 800098e:	f001 fcdf 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2101      	movs	r1, #1
 8000996:	482a      	ldr	r0, [pc, #168]	@ (8000a40 <MX_GPIO_Init+0x164>)
 8000998:	f001 fcda 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
  GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 800099c:	230d      	movs	r3, #13
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4823      	ldr	r0, [pc, #140]	@ (8000a40 <MX_GPIO_Init+0x164>)
 80009b4:	f001 fb24 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRDET_Pin */
  GPIO_InitStruct.Pin = PWRDET_Pin;
 80009b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	481f      	ldr	r0, [pc, #124]	@ (8000a4c <MX_GPIO_Init+0x170>)
 80009d0:	f001 fb16 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
  GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 80009d4:	2303      	movs	r3, #3
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4819      	ldr	r0, [pc, #100]	@ (8000a4c <MX_GPIO_Init+0x170>)
 80009e8:	f001 fb0a 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 80009ec:	2358      	movs	r3, #88	@ 0x58
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4810      	ldr	r0, [pc, #64]	@ (8000a44 <MX_GPIO_Init+0x168>)
 8000a04:	f001 fafc 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : HE0_PWM_Pin */
  GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480a      	ldr	r0, [pc, #40]	@ (8000a48 <MX_GPIO_Init+0x16c>)
 8000a20:	f001 faee 	bl	8002000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	2028      	movs	r0, #40	@ 0x28
 8000a2a:	f000 fbe6 	bl	80011fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2e:	2028      	movs	r0, #40	@ 0x28
 8000a30:	f000 fbfd 	bl	800122e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	@ 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58020400 	.word	0x58020400
 8000a4c:	58020800 	.word	0x58020800

08000a50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == PWRDET_Pin)
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a60:	d102      	bne.n	8000a68 <HAL_GPIO_EXTI_Callback+0x18>
    {
        BatteryAlarm = true;
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	701a      	strb	r2, [r3, #0]
    }
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	24000178 	.word	0x24000178

08000a78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a8a:	f000 fbeb 	bl	8001264 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a9a:	231f      	movs	r3, #31
 8000a9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a9e:	2387      	movs	r3, #135	@ 0x87
 8000aa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fc09 	bl	80012d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f000 fbe6 	bl	8001294 <HAL_MPU_Enable>

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <Move_To_Pos>:
 *      Author: chris
 */
#include "main.h"

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	return true;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <HAL_MspInit+0x30>)
 8000afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b00:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x30>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x30>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58024400 	.word	0x58024400

08000b28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_CRC_MspInit+0x3c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10e      	bne.n	8000b58 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_CRC_MspInit+0x40>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <HAL_CRC_MspInit+0x40>)
 8000b42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_CRC_MspInit+0x40>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	58024c00 	.word	0x58024c00
 8000b68:	58024400 	.word	0x58024400

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0ba      	sub	sp, #232	@ 0xe8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	22b8      	movs	r2, #184	@ 0xb8
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f005 ff95 	bl	8006abc <memset>
  if(huart->Instance==UART8)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a54      	ldr	r2, [pc, #336]	@ (8000ce8 <HAL_UART_MspInit+0x17c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d14e      	bne.n	8000c3a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000b9c:	f04f 0202 	mov.w	r2, #2
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fba0 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bbe:	f7ff ff87 	bl	8000ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bc8:	4a48      	ldr	r2, [pc, #288]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bd2:	4b46      	ldr	r3, [pc, #280]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be0:	4b42      	ldr	r3, [pc, #264]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a41      	ldr	r2, [pc, #260]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000be8:	f043 0310 	orr.w	r3, r3, #16
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000c16:	2308      	movs	r3, #8
 8000c18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4833      	ldr	r0, [pc, #204]	@ (8000cf0 <HAL_UART_MspInit+0x184>)
 8000c24:	f001 f9ec 	bl	8002000 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2053      	movs	r0, #83	@ 0x53
 8000c2e:	f000 fae4 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000c32:	2053      	movs	r0, #83	@ 0x53
 8000c34:	f000 fafb 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c38:	e052      	b.n	8000ce0 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <HAL_UART_MspInit+0x188>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d14d      	bne.n	8000ce0 <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c44:	f04f 0202 	mov.w	r2, #2
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fb4c 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000c66:	f7ff ff33 	bl	8000ad0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6a:	4b20      	ldr	r3, [pc, #128]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c70:	4a1e      	ldr	r2, [pc, #120]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000c7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_UART_MspInit+0x180>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <HAL_UART_MspInit+0x18c>)
 8000ccc:	f001 f998 	bl	8002000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2026      	movs	r0, #38	@ 0x26
 8000cd6:	f000 fa90 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cda:	2026      	movs	r0, #38	@ 0x26
 8000cdc:	f000 faa7 	bl	800122e <HAL_NVIC_EnableIRQ>
}
 8000ce0:	bf00      	nop
 8000ce2:	37e8      	adds	r7, #232	@ 0xe8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40007c00 	.word	0x40007c00
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021000 	.word	0x58021000
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	58020c00 	.word	0x58020c00

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <MemManage_Handler+0x4>

08000d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f933 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <USART2_IRQHandler+0x10>)
 8000d62:	f004 f8e3 	bl	8004f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	240000e4 	.word	0x240000e4

08000d70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8000d74:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000d78:	f001 fb03 	bl	8002382 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <UART8_IRQHandler+0x10>)
 8000d86:	f004 f8d1 	bl	8004f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000050 	.word	0x24000050

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <SystemInit+0xd0>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9e:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <SystemInit+0xd0>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000da8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <SystemInit+0xd4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	2b06      	cmp	r3, #6
 8000db2:	d807      	bhi.n	8000dc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000db4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <SystemInit+0xd4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f023 030f 	bic.w	r3, r3, #15
 8000dbc:	4a2a      	ldr	r2, [pc, #168]	@ (8000e68 <SystemInit+0xd4>)
 8000dbe:	f043 0307 	orr.w	r3, r3, #7
 8000dc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dc4:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <SystemInit+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a28      	ldr	r2, [pc, #160]	@ (8000e6c <SystemInit+0xd8>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	@ (8000e6c <SystemInit+0xd8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dd6:	4b25      	ldr	r3, [pc, #148]	@ (8000e6c <SystemInit+0xd8>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4924      	ldr	r1, [pc, #144]	@ (8000e6c <SystemInit+0xd8>)
 8000ddc:	4b24      	ldr	r3, [pc, #144]	@ (8000e70 <SystemInit+0xdc>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <SystemInit+0xd4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dee:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <SystemInit+0xd4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 030f 	bic.w	r3, r3, #15
 8000df6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e68 <SystemInit+0xd4>)
 8000df8:	f043 0307 	orr.w	r3, r3, #7
 8000dfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <SystemInit+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <SystemInit+0xd8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e0a:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <SystemInit+0xd8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e10:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <SystemInit+0xd8>)
 8000e12:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <SystemInit+0xe0>)
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <SystemInit+0xd8>)
 8000e18:	4a17      	ldr	r2, [pc, #92]	@ (8000e78 <SystemInit+0xe4>)
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <SystemInit+0xd8>)
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <SystemInit+0xe8>)
 8000e20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e22:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <SystemInit+0xd8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e28:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <SystemInit+0xd8>)
 8000e2a:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <SystemInit+0xe8>)
 8000e2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <SystemInit+0xd8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <SystemInit+0xd8>)
 8000e36:	4a11      	ldr	r2, [pc, #68]	@ (8000e7c <SystemInit+0xe8>)
 8000e38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <SystemInit+0xd8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <SystemInit+0xd8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a09      	ldr	r2, [pc, #36]	@ (8000e6c <SystemInit+0xd8>)
 8000e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <SystemInit+0xd8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <SystemInit+0xec>)
 8000e54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00
 8000e68:	52002000 	.word	0x52002000
 8000e6c:	58024400 	.word	0x58024400
 8000e70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e74:	02020200 	.word	0x02020200
 8000e78:	01ff0000 	.word	0x01ff0000
 8000e7c:	01010280 	.word	0x01010280
 8000e80:	52004000 	.word	0x52004000

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ebc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff ff84 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f005 fe0b 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fba1 	bl	80005fc <main>
  bx  lr
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ec8:	08006b74 	.word	0x08006b74
  ldr r2, =_sbss
 8000ecc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ed0:	24000184 	.word	0x24000184

08000ed4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC3_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f980 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee4:	f002 f832 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_Init+0x68>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	4913      	ldr	r1, [pc, #76]	@ (8000f44 <HAL_Init+0x6c>)
 8000ef6:	5ccb      	ldrb	r3, [r1, r3]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <HAL_Init+0x6c>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_Init+0x70>)
 8000f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <HAL_Init+0x74>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f814 	bl	8000f50 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e002      	b.n	8000f38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f32:	f7ff fddf 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024400 	.word	0x58024400
 8000f44:	08006b2c 	.word	0x08006b2c
 8000f48:	24000004 	.word	0x24000004
 8000f4c:	24000000 	.word	0x24000000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <HAL_InitTick+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e021      	b.n	8000fa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_InitTick+0x64>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f965 	bl	800124a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f000 f92f 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_InitTick+0x68>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400000c 	.word	0x2400000c
 8000fb4:	24000000 	.word	0x24000000
 8000fb8:	24000008 	.word	0x24000008

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2400000c 	.word	0x2400000c
 8000fe0:	24000180 	.word	0x24000180

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	24000180 	.word	0x24000180

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2400000c 	.word	0x2400000c

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	4313      	orrs	r3, r2
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x40>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	05fa0000 	.word	0x05fa0000

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	@ (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	@ (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	@ (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff29 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff40 	bl	800108c <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff90 	bl	8001138 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5f 	bl	80010e4 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff33 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa4 	bl	80011a0 <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001268:	f3bf 8f5f 	dmb	sy
}
 800126c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_MPU_Disable+0x28>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	4a06      	ldr	r2, [pc, #24]	@ (800128c <HAL_MPU_Disable+0x28>)
 8001274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001278:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <HAL_MPU_Disable+0x2c>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00
 8001290:	e000ed90 	.word	0xe000ed90

08001294 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_MPU_Enable+0x38>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_MPU_Enable+0x3c>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	4a09      	ldr	r2, [pc, #36]	@ (80012d0 <HAL_MPU_Enable+0x3c>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012b2:	f3bf 8f4f 	dsb	sy
}
 80012b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012b8:	f3bf 8f6f 	isb	sy
}
 80012bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed90 	.word	0xe000ed90
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	785a      	ldrb	r2, [r3, #1]
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_MPU_ConfigRegion+0x7c>)
 80012e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_MPU_ConfigRegion+0x7c>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <HAL_MPU_ConfigRegion+0x7c>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012f0:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_MPU_ConfigRegion+0x7c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7b1b      	ldrb	r3, [r3, #12]
 80012fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7adb      	ldrb	r3, [r3, #11]
 8001302:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001304:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7a9b      	ldrb	r3, [r3, #10]
 800130a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800130c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7b5b      	ldrb	r3, [r3, #13]
 8001312:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001314:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7b9b      	ldrb	r3, [r3, #14]
 800131a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800131c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7bdb      	ldrb	r3, [r3, #15]
 8001322:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001324:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7a5b      	ldrb	r3, [r3, #9]
 800132a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800132c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7a1b      	ldrb	r3, [r3, #8]
 8001332:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001334:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800133e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001340:	6113      	str	r3, [r2, #16]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed90 	.word	0xe000ed90

08001354 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e054      	b.n	8001410 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f5b      	ldrb	r3, [r3, #29]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fbd6 	bl	8000b28 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_CRC_Init+0xc4>)
 8001390:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0218 	bic.w	r2, r2, #24
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	e00c      	b.n	80013be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	461a      	mov	r2, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f834 	bl	800141c <HAL_CRCEx_Polynomial_Set>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e028      	b.n	8001410 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	795b      	ldrb	r3, [r3, #5]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	e004      	b.n	80013dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6912      	ldr	r2, [r2, #16]
 80013da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695a      	ldr	r2, [r3, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699a      	ldr	r2, [r3, #24]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	04c11db7 	.word	0x04c11db7

0800141c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800142c:	231f      	movs	r3, #31
 800142e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
 800143e:	e063      	b.n	8001508 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001440:	bf00      	nop
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	613a      	str	r2, [r7, #16]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d009      	beq.n	8001460 <HAL_CRCEx_Polynomial_Set+0x44>
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b18      	cmp	r3, #24
 8001464:	d846      	bhi.n	80014f4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001466:	a201      	add	r2, pc, #4	@ (adr r2, 800146c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	080014fb 	.word	0x080014fb
 8001470:	080014f5 	.word	0x080014f5
 8001474:	080014f5 	.word	0x080014f5
 8001478:	080014f5 	.word	0x080014f5
 800147c:	080014f5 	.word	0x080014f5
 8001480:	080014f5 	.word	0x080014f5
 8001484:	080014f5 	.word	0x080014f5
 8001488:	080014f5 	.word	0x080014f5
 800148c:	080014e9 	.word	0x080014e9
 8001490:	080014f5 	.word	0x080014f5
 8001494:	080014f5 	.word	0x080014f5
 8001498:	080014f5 	.word	0x080014f5
 800149c:	080014f5 	.word	0x080014f5
 80014a0:	080014f5 	.word	0x080014f5
 80014a4:	080014f5 	.word	0x080014f5
 80014a8:	080014f5 	.word	0x080014f5
 80014ac:	080014dd 	.word	0x080014dd
 80014b0:	080014f5 	.word	0x080014f5
 80014b4:	080014f5 	.word	0x080014f5
 80014b8:	080014f5 	.word	0x080014f5
 80014bc:	080014f5 	.word	0x080014f5
 80014c0:	080014f5 	.word	0x080014f5
 80014c4:	080014f5 	.word	0x080014f5
 80014c8:	080014f5 	.word	0x080014f5
 80014cc:	080014d1 	.word	0x080014d1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d913      	bls.n	80014fe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80014da:	e010      	b.n	80014fe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d90f      	bls.n	8001502 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80014e6:	e00c      	b.n	8001502 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	d90b      	bls.n	8001506 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80014f2:	e008      	b.n	8001506 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	75fb      	strb	r3, [r7, #23]
        break;
 80014f8:	e006      	b.n	8001508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80014fa:	bf00      	nop
 80014fc:	e004      	b.n	8001508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80014fe:	bf00      	nop
 8001500:	e002      	b.n	8001508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001506:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f023 0118 	bic.w	r1, r3, #24
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800152a:	7dfb      	ldrb	r3, [r7, #23]
}
 800152c:	4618      	mov	r0, r3
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff fd50 	bl	8000fe4 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e2dc      	b.n	8001b0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d008      	beq.n	800156e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2280      	movs	r2, #128	@ 0x80
 8001560:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e2cd      	b.n	8001b0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a76      	ldr	r2, [pc, #472]	@ (800174c <HAL_DMA_Abort+0x214>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d04a      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a74      	ldr	r2, [pc, #464]	@ (8001750 <HAL_DMA_Abort+0x218>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d045      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a73      	ldr	r2, [pc, #460]	@ (8001754 <HAL_DMA_Abort+0x21c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d040      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a71      	ldr	r2, [pc, #452]	@ (8001758 <HAL_DMA_Abort+0x220>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d03b      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a70      	ldr	r2, [pc, #448]	@ (800175c <HAL_DMA_Abort+0x224>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d036      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001760 <HAL_DMA_Abort+0x228>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d031      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6d      	ldr	r2, [pc, #436]	@ (8001764 <HAL_DMA_Abort+0x22c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d02c      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a6b      	ldr	r2, [pc, #428]	@ (8001768 <HAL_DMA_Abort+0x230>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d027      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6a      	ldr	r2, [pc, #424]	@ (800176c <HAL_DMA_Abort+0x234>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d022      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a68      	ldr	r2, [pc, #416]	@ (8001770 <HAL_DMA_Abort+0x238>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01d      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a67      	ldr	r2, [pc, #412]	@ (8001774 <HAL_DMA_Abort+0x23c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d018      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a65      	ldr	r2, [pc, #404]	@ (8001778 <HAL_DMA_Abort+0x240>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a64      	ldr	r2, [pc, #400]	@ (800177c <HAL_DMA_Abort+0x244>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00e      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a62      	ldr	r2, [pc, #392]	@ (8001780 <HAL_DMA_Abort+0x248>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d009      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a61      	ldr	r2, [pc, #388]	@ (8001784 <HAL_DMA_Abort+0x24c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d004      	beq.n	800160e <HAL_DMA_Abort+0xd6>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a5f      	ldr	r2, [pc, #380]	@ (8001788 <HAL_DMA_Abort+0x250>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_DMA_Abort+0xda>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_DMA_Abort+0xdc>
 8001612:	2300      	movs	r3, #0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 021e 	bic.w	r2, r2, #30
 8001626:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001636:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00a      	b.n	8001656 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 020e 	bic.w	r2, r2, #14
 800164e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a3c      	ldr	r2, [pc, #240]	@ (800174c <HAL_DMA_Abort+0x214>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d072      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a3a      	ldr	r2, [pc, #232]	@ (8001750 <HAL_DMA_Abort+0x218>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d06d      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a39      	ldr	r2, [pc, #228]	@ (8001754 <HAL_DMA_Abort+0x21c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d068      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <HAL_DMA_Abort+0x220>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d063      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a36      	ldr	r2, [pc, #216]	@ (800175c <HAL_DMA_Abort+0x224>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d05e      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a34      	ldr	r2, [pc, #208]	@ (8001760 <HAL_DMA_Abort+0x228>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d059      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a33      	ldr	r2, [pc, #204]	@ (8001764 <HAL_DMA_Abort+0x22c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d054      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a31      	ldr	r2, [pc, #196]	@ (8001768 <HAL_DMA_Abort+0x230>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d04f      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a30      	ldr	r2, [pc, #192]	@ (800176c <HAL_DMA_Abort+0x234>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d04a      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001770 <HAL_DMA_Abort+0x238>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d045      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a2d      	ldr	r2, [pc, #180]	@ (8001774 <HAL_DMA_Abort+0x23c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d040      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001778 <HAL_DMA_Abort+0x240>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d03b      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a2a      	ldr	r2, [pc, #168]	@ (800177c <HAL_DMA_Abort+0x244>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d036      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a28      	ldr	r2, [pc, #160]	@ (8001780 <HAL_DMA_Abort+0x248>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d031      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a27      	ldr	r2, [pc, #156]	@ (8001784 <HAL_DMA_Abort+0x24c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d02c      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a25      	ldr	r2, [pc, #148]	@ (8001788 <HAL_DMA_Abort+0x250>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d027      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_DMA_Abort+0x254>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d022      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a22      	ldr	r2, [pc, #136]	@ (8001790 <HAL_DMA_Abort+0x258>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01d      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <HAL_DMA_Abort+0x25c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d018      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1f      	ldr	r2, [pc, #124]	@ (8001798 <HAL_DMA_Abort+0x260>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a1e      	ldr	r2, [pc, #120]	@ (800179c <HAL_DMA_Abort+0x264>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00e      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <HAL_DMA_Abort+0x268>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d009      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <HAL_DMA_Abort+0x26c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d004      	beq.n	8001746 <HAL_DMA_Abort+0x20e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <HAL_DMA_Abort+0x270>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d132      	bne.n	80017ac <HAL_DMA_Abort+0x274>
 8001746:	2301      	movs	r3, #1
 8001748:	e031      	b.n	80017ae <HAL_DMA_Abort+0x276>
 800174a:	bf00      	nop
 800174c:	40020010 	.word	0x40020010
 8001750:	40020028 	.word	0x40020028
 8001754:	40020040 	.word	0x40020040
 8001758:	40020058 	.word	0x40020058
 800175c:	40020070 	.word	0x40020070
 8001760:	40020088 	.word	0x40020088
 8001764:	400200a0 	.word	0x400200a0
 8001768:	400200b8 	.word	0x400200b8
 800176c:	40020410 	.word	0x40020410
 8001770:	40020428 	.word	0x40020428
 8001774:	40020440 	.word	0x40020440
 8001778:	40020458 	.word	0x40020458
 800177c:	40020470 	.word	0x40020470
 8001780:	40020488 	.word	0x40020488
 8001784:	400204a0 	.word	0x400204a0
 8001788:	400204b8 	.word	0x400204b8
 800178c:	58025408 	.word	0x58025408
 8001790:	5802541c 	.word	0x5802541c
 8001794:	58025430 	.word	0x58025430
 8001798:	58025444 	.word	0x58025444
 800179c:	58025458 	.word	0x58025458
 80017a0:	5802546c 	.word	0x5802546c
 80017a4:	58025480 	.word	0x58025480
 80017a8:	58025494 	.word	0x58025494
 80017ac:	2300      	movs	r3, #0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6d      	ldr	r2, [pc, #436]	@ (800197c <HAL_DMA_Abort+0x444>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04a      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001980 <HAL_DMA_Abort+0x448>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d045      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6a      	ldr	r2, [pc, #424]	@ (8001984 <HAL_DMA_Abort+0x44c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d040      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a68      	ldr	r2, [pc, #416]	@ (8001988 <HAL_DMA_Abort+0x450>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d03b      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a67      	ldr	r2, [pc, #412]	@ (800198c <HAL_DMA_Abort+0x454>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d036      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a65      	ldr	r2, [pc, #404]	@ (8001990 <HAL_DMA_Abort+0x458>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a64      	ldr	r2, [pc, #400]	@ (8001994 <HAL_DMA_Abort+0x45c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d02c      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a62      	ldr	r2, [pc, #392]	@ (8001998 <HAL_DMA_Abort+0x460>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d027      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a61      	ldr	r2, [pc, #388]	@ (800199c <HAL_DMA_Abort+0x464>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a5f      	ldr	r2, [pc, #380]	@ (80019a0 <HAL_DMA_Abort+0x468>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01d      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a5e      	ldr	r2, [pc, #376]	@ (80019a4 <HAL_DMA_Abort+0x46c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d018      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a5c      	ldr	r2, [pc, #368]	@ (80019a8 <HAL_DMA_Abort+0x470>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ac <HAL_DMA_Abort+0x474>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a59      	ldr	r2, [pc, #356]	@ (80019b0 <HAL_DMA_Abort+0x478>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <HAL_DMA_Abort+0x47c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d004      	beq.n	8001862 <HAL_DMA_Abort+0x32a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a56      	ldr	r2, [pc, #344]	@ (80019b8 <HAL_DMA_Abort+0x480>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d108      	bne.n	8001874 <HAL_DMA_Abort+0x33c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	e007      	b.n	8001884 <HAL_DMA_Abort+0x34c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001884:	e013      	b.n	80018ae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001886:	f7ff fbad 	bl	8000fe4 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b05      	cmp	r3, #5
 8001892:	d90c      	bls.n	80018ae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2220      	movs	r2, #32
 8001898:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2203      	movs	r2, #3
 800189e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e12d      	b.n	8001b0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1e5      	bne.n	8001886 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2f      	ldr	r2, [pc, #188]	@ (800197c <HAL_DMA_Abort+0x444>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04a      	beq.n	800195a <HAL_DMA_Abort+0x422>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001980 <HAL_DMA_Abort+0x448>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d045      	beq.n	800195a <HAL_DMA_Abort+0x422>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001984 <HAL_DMA_Abort+0x44c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d040      	beq.n	800195a <HAL_DMA_Abort+0x422>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001988 <HAL_DMA_Abort+0x450>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03b      	beq.n	800195a <HAL_DMA_Abort+0x422>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a29      	ldr	r2, [pc, #164]	@ (800198c <HAL_DMA_Abort+0x454>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d036      	beq.n	800195a <HAL_DMA_Abort+0x422>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <HAL_DMA_Abort+0x458>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_DMA_Abort+0x422>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <HAL_DMA_Abort+0x45c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d02c      	beq.n	800195a <HAL_DMA_Abort+0x422>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a24      	ldr	r2, [pc, #144]	@ (8001998 <HAL_DMA_Abort+0x460>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d027      	beq.n	800195a <HAL_DMA_Abort+0x422>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a23      	ldr	r2, [pc, #140]	@ (800199c <HAL_DMA_Abort+0x464>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_Abort+0x422>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a21      	ldr	r2, [pc, #132]	@ (80019a0 <HAL_DMA_Abort+0x468>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_DMA_Abort+0x422>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a20      	ldr	r2, [pc, #128]	@ (80019a4 <HAL_DMA_Abort+0x46c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d018      	beq.n	800195a <HAL_DMA_Abort+0x422>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <HAL_DMA_Abort+0x470>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_DMA_Abort+0x422>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <HAL_DMA_Abort+0x474>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00e      	beq.n	800195a <HAL_DMA_Abort+0x422>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <HAL_DMA_Abort+0x478>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_DMA_Abort+0x422>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1a      	ldr	r2, [pc, #104]	@ (80019b4 <HAL_DMA_Abort+0x47c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Abort+0x422>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <HAL_DMA_Abort+0x480>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_DMA_Abort+0x426>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_DMA_Abort+0x428>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02b      	beq.n	80019bc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	223f      	movs	r2, #63	@ 0x3f
 8001974:	409a      	lsls	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	e02a      	b.n	80019d2 <HAL_DMA_Abort+0x49a>
 800197c:	40020010 	.word	0x40020010
 8001980:	40020028 	.word	0x40020028
 8001984:	40020040 	.word	0x40020040
 8001988:	40020058 	.word	0x40020058
 800198c:	40020070 	.word	0x40020070
 8001990:	40020088 	.word	0x40020088
 8001994:	400200a0 	.word	0x400200a0
 8001998:	400200b8 	.word	0x400200b8
 800199c:	40020410 	.word	0x40020410
 80019a0:	40020428 	.word	0x40020428
 80019a4:	40020440 	.word	0x40020440
 80019a8:	40020458 	.word	0x40020458
 80019ac:	40020470 	.word	0x40020470
 80019b0:	40020488 	.word	0x40020488
 80019b4:	400204a0 	.word	0x400204a0
 80019b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	2201      	movs	r2, #1
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a4f      	ldr	r2, [pc, #316]	@ (8001b14 <HAL_DMA_Abort+0x5dc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d072      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001b18 <HAL_DMA_Abort+0x5e0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d06d      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4c      	ldr	r2, [pc, #304]	@ (8001b1c <HAL_DMA_Abort+0x5e4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d068      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001b20 <HAL_DMA_Abort+0x5e8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d063      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a49      	ldr	r2, [pc, #292]	@ (8001b24 <HAL_DMA_Abort+0x5ec>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d05e      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a47      	ldr	r2, [pc, #284]	@ (8001b28 <HAL_DMA_Abort+0x5f0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d059      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a46      	ldr	r2, [pc, #280]	@ (8001b2c <HAL_DMA_Abort+0x5f4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d054      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a44      	ldr	r2, [pc, #272]	@ (8001b30 <HAL_DMA_Abort+0x5f8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d04f      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a43      	ldr	r2, [pc, #268]	@ (8001b34 <HAL_DMA_Abort+0x5fc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04a      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a41      	ldr	r2, [pc, #260]	@ (8001b38 <HAL_DMA_Abort+0x600>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d045      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a40      	ldr	r2, [pc, #256]	@ (8001b3c <HAL_DMA_Abort+0x604>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d040      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a3e      	ldr	r2, [pc, #248]	@ (8001b40 <HAL_DMA_Abort+0x608>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d03b      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b44 <HAL_DMA_Abort+0x60c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d036      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a3b      	ldr	r2, [pc, #236]	@ (8001b48 <HAL_DMA_Abort+0x610>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d031      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a3a      	ldr	r2, [pc, #232]	@ (8001b4c <HAL_DMA_Abort+0x614>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d02c      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a38      	ldr	r2, [pc, #224]	@ (8001b50 <HAL_DMA_Abort+0x618>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d027      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a37      	ldr	r2, [pc, #220]	@ (8001b54 <HAL_DMA_Abort+0x61c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d022      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a35      	ldr	r2, [pc, #212]	@ (8001b58 <HAL_DMA_Abort+0x620>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01d      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <HAL_DMA_Abort+0x624>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d018      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <HAL_DMA_Abort+0x628>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a31      	ldr	r2, [pc, #196]	@ (8001b64 <HAL_DMA_Abort+0x62c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b68 <HAL_DMA_Abort+0x630>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8001b6c <HAL_DMA_Abort+0x634>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d004      	beq.n	8001ac2 <HAL_DMA_Abort+0x58a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b70 <HAL_DMA_Abort+0x638>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_DMA_Abort+0x58e>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_DMA_Abort+0x590>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d015      	beq.n	8001af8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ad4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00c      	beq.n	8001af8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001af6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020010 	.word	0x40020010
 8001b18:	40020028 	.word	0x40020028
 8001b1c:	40020040 	.word	0x40020040
 8001b20:	40020058 	.word	0x40020058
 8001b24:	40020070 	.word	0x40020070
 8001b28:	40020088 	.word	0x40020088
 8001b2c:	400200a0 	.word	0x400200a0
 8001b30:	400200b8 	.word	0x400200b8
 8001b34:	40020410 	.word	0x40020410
 8001b38:	40020428 	.word	0x40020428
 8001b3c:	40020440 	.word	0x40020440
 8001b40:	40020458 	.word	0x40020458
 8001b44:	40020470 	.word	0x40020470
 8001b48:	40020488 	.word	0x40020488
 8001b4c:	400204a0 	.word	0x400204a0
 8001b50:	400204b8 	.word	0x400204b8
 8001b54:	58025408 	.word	0x58025408
 8001b58:	5802541c 	.word	0x5802541c
 8001b5c:	58025430 	.word	0x58025430
 8001b60:	58025444 	.word	0x58025444
 8001b64:	58025458 	.word	0x58025458
 8001b68:	5802546c 	.word	0x5802546c
 8001b6c:	58025480 	.word	0x58025480
 8001b70:	58025494 	.word	0x58025494

08001b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e237      	b.n	8001ff6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d004      	beq.n	8001b9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2280      	movs	r2, #128	@ 0x80
 8001b96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e22c      	b.n	8001ff6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d14 <HAL_DMA_Abort_IT+0x1a0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d04a      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a5b      	ldr	r2, [pc, #364]	@ (8001d18 <HAL_DMA_Abort_IT+0x1a4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d045      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a59      	ldr	r2, [pc, #356]	@ (8001d1c <HAL_DMA_Abort_IT+0x1a8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a58      	ldr	r2, [pc, #352]	@ (8001d20 <HAL_DMA_Abort_IT+0x1ac>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d03b      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a56      	ldr	r2, [pc, #344]	@ (8001d24 <HAL_DMA_Abort_IT+0x1b0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d036      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a55      	ldr	r2, [pc, #340]	@ (8001d28 <HAL_DMA_Abort_IT+0x1b4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d031      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a53      	ldr	r2, [pc, #332]	@ (8001d2c <HAL_DMA_Abort_IT+0x1b8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02c      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a52      	ldr	r2, [pc, #328]	@ (8001d30 <HAL_DMA_Abort_IT+0x1bc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d027      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a50      	ldr	r2, [pc, #320]	@ (8001d34 <HAL_DMA_Abort_IT+0x1c0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d022      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a4f      	ldr	r2, [pc, #316]	@ (8001d38 <HAL_DMA_Abort_IT+0x1c4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01d      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a4d      	ldr	r2, [pc, #308]	@ (8001d3c <HAL_DMA_Abort_IT+0x1c8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d018      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d40 <HAL_DMA_Abort_IT+0x1cc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	@ (8001d44 <HAL_DMA_Abort_IT+0x1d0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a49      	ldr	r2, [pc, #292]	@ (8001d48 <HAL_DMA_Abort_IT+0x1d4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a47      	ldr	r2, [pc, #284]	@ (8001d4c <HAL_DMA_Abort_IT+0x1d8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_DMA_Abort_IT+0xc8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a46      	ldr	r2, [pc, #280]	@ (8001d50 <HAL_DMA_Abort_IT+0x1dc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_DMA_Abort_IT+0xcc>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_DMA_Abort_IT+0xce>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8086 	beq.w	8001d54 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <HAL_DMA_Abort_IT+0x1a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d04a      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d18 <HAL_DMA_Abort_IT+0x1a4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d045      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2c      	ldr	r2, [pc, #176]	@ (8001d1c <HAL_DMA_Abort_IT+0x1a8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d040      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <HAL_DMA_Abort_IT+0x1ac>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d03b      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a29      	ldr	r2, [pc, #164]	@ (8001d24 <HAL_DMA_Abort_IT+0x1b0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d036      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a28      	ldr	r2, [pc, #160]	@ (8001d28 <HAL_DMA_Abort_IT+0x1b4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d031      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <HAL_DMA_Abort_IT+0x1b8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d02c      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a25      	ldr	r2, [pc, #148]	@ (8001d30 <HAL_DMA_Abort_IT+0x1bc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d027      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <HAL_DMA_Abort_IT+0x1c0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d022      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_DMA_Abort_IT+0x1c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a20      	ldr	r2, [pc, #128]	@ (8001d3c <HAL_DMA_Abort_IT+0x1c8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d018      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_DMA_Abort_IT+0x1cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_DMA_Abort_IT+0x1d0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d48 <HAL_DMA_Abort_IT+0x1d4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d4c <HAL_DMA_Abort_IT+0x1d8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d004      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x17c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_DMA_Abort_IT+0x1dc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d108      	bne.n	8001d02 <HAL_DMA_Abort_IT+0x18e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e178      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x480>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e16f      	b.n	8001ff4 <HAL_DMA_Abort_IT+0x480>
 8001d14:	40020010 	.word	0x40020010
 8001d18:	40020028 	.word	0x40020028
 8001d1c:	40020040 	.word	0x40020040
 8001d20:	40020058 	.word	0x40020058
 8001d24:	40020070 	.word	0x40020070
 8001d28:	40020088 	.word	0x40020088
 8001d2c:	400200a0 	.word	0x400200a0
 8001d30:	400200b8 	.word	0x400200b8
 8001d34:	40020410 	.word	0x40020410
 8001d38:	40020428 	.word	0x40020428
 8001d3c:	40020440 	.word	0x40020440
 8001d40:	40020458 	.word	0x40020458
 8001d44:	40020470 	.word	0x40020470
 8001d48:	40020488 	.word	0x40020488
 8001d4c:	400204a0 	.word	0x400204a0
 8001d50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 020e 	bic.w	r2, r2, #14
 8001d62:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a6c      	ldr	r2, [pc, #432]	@ (8001f1c <HAL_DMA_Abort_IT+0x3a8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d04a      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6b      	ldr	r2, [pc, #428]	@ (8001f20 <HAL_DMA_Abort_IT+0x3ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d045      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a69      	ldr	r2, [pc, #420]	@ (8001f24 <HAL_DMA_Abort_IT+0x3b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d040      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a68      	ldr	r2, [pc, #416]	@ (8001f28 <HAL_DMA_Abort_IT+0x3b4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d03b      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a66      	ldr	r2, [pc, #408]	@ (8001f2c <HAL_DMA_Abort_IT+0x3b8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d036      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	@ (8001f30 <HAL_DMA_Abort_IT+0x3bc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d031      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a63      	ldr	r2, [pc, #396]	@ (8001f34 <HAL_DMA_Abort_IT+0x3c0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02c      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a62      	ldr	r2, [pc, #392]	@ (8001f38 <HAL_DMA_Abort_IT+0x3c4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d027      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a60      	ldr	r2, [pc, #384]	@ (8001f3c <HAL_DMA_Abort_IT+0x3c8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d022      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f40 <HAL_DMA_Abort_IT+0x3cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d01d      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f44 <HAL_DMA_Abort_IT+0x3d0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d018      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f48 <HAL_DMA_Abort_IT+0x3d4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f4c <HAL_DMA_Abort_IT+0x3d8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00e      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a59      	ldr	r2, [pc, #356]	@ (8001f50 <HAL_DMA_Abort_IT+0x3dc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_DMA_Abort_IT+0x3e0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x290>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a56      	ldr	r2, [pc, #344]	@ (8001f58 <HAL_DMA_Abort_IT+0x3e4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <HAL_DMA_Abort_IT+0x2a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e007      	b.n	8001e26 <HAL_DMA_Abort_IT+0x2b2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f1c <HAL_DMA_Abort_IT+0x3a8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d072      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3a      	ldr	r2, [pc, #232]	@ (8001f20 <HAL_DMA_Abort_IT+0x3ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d06d      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a39      	ldr	r2, [pc, #228]	@ (8001f24 <HAL_DMA_Abort_IT+0x3b0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d068      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a37      	ldr	r2, [pc, #220]	@ (8001f28 <HAL_DMA_Abort_IT+0x3b4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d063      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a36      	ldr	r2, [pc, #216]	@ (8001f2c <HAL_DMA_Abort_IT+0x3b8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d05e      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	@ (8001f30 <HAL_DMA_Abort_IT+0x3bc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d059      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a33      	ldr	r2, [pc, #204]	@ (8001f34 <HAL_DMA_Abort_IT+0x3c0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d054      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_DMA_Abort_IT+0x3c4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d04f      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a30      	ldr	r2, [pc, #192]	@ (8001f3c <HAL_DMA_Abort_IT+0x3c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04a      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <HAL_DMA_Abort_IT+0x3cc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d045      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_DMA_Abort_IT+0x3d0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d040      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	@ (8001f48 <HAL_DMA_Abort_IT+0x3d4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d03b      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_DMA_Abort_IT+0x3d8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d036      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a28      	ldr	r2, [pc, #160]	@ (8001f50 <HAL_DMA_Abort_IT+0x3dc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d031      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <HAL_DMA_Abort_IT+0x3e0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d02c      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <HAL_DMA_Abort_IT+0x3e4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d027      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a24      	ldr	r2, [pc, #144]	@ (8001f5c <HAL_DMA_Abort_IT+0x3e8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <HAL_DMA_Abort_IT+0x3ec>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_DMA_Abort_IT+0x3f0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_DMA_Abort_IT+0x3f4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_DMA_Abort_IT+0x3f8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00e      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_DMA_Abort_IT+0x3fc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d009      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <HAL_DMA_Abort_IT+0x400>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x3a2>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_DMA_Abort_IT+0x404>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d132      	bne.n	8001f7c <HAL_DMA_Abort_IT+0x408>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e031      	b.n	8001f7e <HAL_DMA_Abort_IT+0x40a>
 8001f1a:	bf00      	nop
 8001f1c:	40020010 	.word	0x40020010
 8001f20:	40020028 	.word	0x40020028
 8001f24:	40020040 	.word	0x40020040
 8001f28:	40020058 	.word	0x40020058
 8001f2c:	40020070 	.word	0x40020070
 8001f30:	40020088 	.word	0x40020088
 8001f34:	400200a0 	.word	0x400200a0
 8001f38:	400200b8 	.word	0x400200b8
 8001f3c:	40020410 	.word	0x40020410
 8001f40:	40020428 	.word	0x40020428
 8001f44:	40020440 	.word	0x40020440
 8001f48:	40020458 	.word	0x40020458
 8001f4c:	40020470 	.word	0x40020470
 8001f50:	40020488 	.word	0x40020488
 8001f54:	400204a0 	.word	0x400204a0
 8001f58:	400204b8 	.word	0x400204b8
 8001f5c:	58025408 	.word	0x58025408
 8001f60:	5802541c 	.word	0x5802541c
 8001f64:	58025430 	.word	0x58025430
 8001f68:	58025444 	.word	0x58025444
 8001f6c:	58025458 	.word	0x58025458
 8001f70:	5802546c 	.word	0x5802546c
 8001f74:	58025480 	.word	0x58025480
 8001f78:	58025494 	.word	0x58025494
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d028      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800200e:	4b86      	ldr	r3, [pc, #536]	@ (8002228 <HAL_GPIO_Init+0x228>)
 8002010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002012:	e18c      	b.n	800232e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 817e 	beq.w	8002328 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d005      	beq.n	8002044 <HAL_GPIO_Init+0x44>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d130      	bne.n	80020a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800207a:	2201      	movs	r2, #1
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	f003 0201 	and.w	r2, r3, #1
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d017      	beq.n	80020e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d123      	bne.n	8002136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	69b9      	ldr	r1, [r7, #24]
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0203 	and.w	r2, r3, #3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80d8 	beq.w	8002328 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002178:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <HAL_GPIO_Init+0x22c>)
 800217a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800217e:	4a2b      	ldr	r2, [pc, #172]	@ (800222c <HAL_GPIO_Init+0x22c>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002188:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_GPIO_Init+0x22c>)
 800218a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002196:	4a26      	ldr	r2, [pc, #152]	@ (8002230 <HAL_GPIO_Init+0x230>)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <HAL_GPIO_Init+0x234>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d04a      	beq.n	8002258 <HAL_GPIO_Init+0x258>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_GPIO_Init+0x238>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02b      	beq.n	8002222 <HAL_GPIO_Init+0x222>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <HAL_GPIO_Init+0x23c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x21e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002240 <HAL_GPIO_Init+0x240>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x21a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a19      	ldr	r2, [pc, #100]	@ (8002244 <HAL_GPIO_Init+0x244>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x216>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <HAL_GPIO_Init+0x248>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x212>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a17      	ldr	r2, [pc, #92]	@ (800224c <HAL_GPIO_Init+0x24c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a16      	ldr	r2, [pc, #88]	@ (8002250 <HAL_GPIO_Init+0x250>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x20a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_GPIO_Init+0x254>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x206>
 8002202:	2309      	movs	r3, #9
 8002204:	e029      	b.n	800225a <HAL_GPIO_Init+0x25a>
 8002206:	230a      	movs	r3, #10
 8002208:	e027      	b.n	800225a <HAL_GPIO_Init+0x25a>
 800220a:	2307      	movs	r3, #7
 800220c:	e025      	b.n	800225a <HAL_GPIO_Init+0x25a>
 800220e:	2306      	movs	r3, #6
 8002210:	e023      	b.n	800225a <HAL_GPIO_Init+0x25a>
 8002212:	2305      	movs	r3, #5
 8002214:	e021      	b.n	800225a <HAL_GPIO_Init+0x25a>
 8002216:	2304      	movs	r3, #4
 8002218:	e01f      	b.n	800225a <HAL_GPIO_Init+0x25a>
 800221a:	2303      	movs	r3, #3
 800221c:	e01d      	b.n	800225a <HAL_GPIO_Init+0x25a>
 800221e:	2302      	movs	r3, #2
 8002220:	e01b      	b.n	800225a <HAL_GPIO_Init+0x25a>
 8002222:	2301      	movs	r3, #1
 8002224:	e019      	b.n	800225a <HAL_GPIO_Init+0x25a>
 8002226:	bf00      	nop
 8002228:	58000080 	.word	0x58000080
 800222c:	58024400 	.word	0x58024400
 8002230:	58000400 	.word	0x58000400
 8002234:	58020000 	.word	0x58020000
 8002238:	58020400 	.word	0x58020400
 800223c:	58020800 	.word	0x58020800
 8002240:	58020c00 	.word	0x58020c00
 8002244:	58021000 	.word	0x58021000
 8002248:	58021400 	.word	0x58021400
 800224c:	58021800 	.word	0x58021800
 8002250:	58021c00 	.word	0x58021c00
 8002254:	58022400 	.word	0x58022400
 8002258:	2300      	movs	r3, #0
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	f002 0203 	and.w	r2, r2, #3
 8002260:	0092      	lsls	r2, r2, #2
 8002262:	4093      	lsls	r3, r2
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800226a:	4938      	ldr	r1, [pc, #224]	@ (800234c <HAL_GPIO_Init+0x34c>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	f47f ae6b 	bne.w	8002014 <HAL_GPIO_Init+0x14>
  }
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3724      	adds	r7, #36	@ 0x24
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	58000400 	.word	0x58000400

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800236c:	e003      	b.n	8002376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002390:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800239c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fb51 	bl	8000a50 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_PWREx_ConfigSupply+0x70>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d00a      	beq.n	80023e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023cc:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <HAL_PWREx_ConfigSupply+0x70>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e01f      	b.n	800241e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e01d      	b.n	800241e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023e2:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <HAL_PWREx_ConfigSupply+0x70>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	490f      	ldr	r1, [pc, #60]	@ (8002428 <HAL_PWREx_ConfigSupply+0x70>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023f2:	f7fe fdf7 	bl	8000fe4 <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f8:	e009      	b.n	800240e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023fa:	f7fe fdf3 	bl	8000fe4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002408:	d901      	bls.n	800240e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e007      	b.n	800241e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_PWREx_ConfigSupply+0x70>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241a:	d1ee      	bne.n	80023fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	58024800 	.word	0x58024800

0800242c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e3c8      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244c:	4b88      	ldr	r3, [pc, #544]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002456:	4b86      	ldr	r3, [pc, #536]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	2b10      	cmp	r3, #16
 8002460:	d007      	beq.n	8002472 <HAL_RCC_OscConfig+0x46>
 8002462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002464:	2b18      	cmp	r3, #24
 8002466:	d110      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d10b      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002472:	4b7f      	ldr	r3, [pc, #508]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d06c      	beq.n	8002558 <HAL_RCC_OscConfig+0x12c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d168      	bne.n	8002558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e3a2      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x76>
 8002494:	4b76      	ldr	r3, [pc, #472]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a75      	ldr	r2, [pc, #468]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800249a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	e02e      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x98>
 80024aa:	4b71      	ldr	r3, [pc, #452]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a70      	ldr	r2, [pc, #448]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0xbc>
 80024ce:	4b68      	ldr	r3, [pc, #416]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a67      	ldr	r2, [pc, #412]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b65      	ldr	r3, [pc, #404]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a64      	ldr	r2, [pc, #400]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xd4>
 80024e8:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a60      	ldr	r2, [pc, #384]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fd6c 	bl	8000fe4 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe fd68 	bl	8000fe4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e356      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002522:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xe4>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fd58 	bl	8000fe4 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fd54 	bl	8000fe4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e342      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800254a:	4b49      	ldr	r3, [pc, #292]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x10c>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 808c 	beq.w	8002680 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002568:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002570:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002572:	4b3f      	ldr	r3, [pc, #252]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_RCC_OscConfig+0x162>
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2b18      	cmp	r3, #24
 8002582:	d137      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c8>
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d132      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258e:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e314      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025a6:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0219 	bic.w	r2, r3, #25
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	492f      	ldr	r1, [pc, #188]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fd14 	bl	8000fe4 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c0:	f7fe fd10 	bl	8000fe4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e2fe      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025d2:	4b27      	ldr	r3, [pc, #156]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4920      	ldr	r1, [pc, #128]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f2:	e045      	b.n	8002680 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d026      	beq.n	800264a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 0219 	bic.w	r2, r3, #25
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4919      	ldr	r1, [pc, #100]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fce9 	bl	8000fe4 <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7fe fce5 	bl	8000fe4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e2d3      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	490b      	ldr	r1, [pc, #44]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	e01a      	b.n	8002680 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <HAL_RCC_OscConfig+0x244>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fcc5 	bl	8000fe4 <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fcc1 	bl	8000fe4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d903      	bls.n	8002674 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e2af      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
 8002670:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002674:	4b96      	ldr	r3, [pc, #600]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d06a      	beq.n	8002762 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268c:	4b90      	ldr	r3, [pc, #576]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002694:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002696:	4b8e      	ldr	r3, [pc, #568]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_OscConfig+0x286>
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b18      	cmp	r3, #24
 80026a6:	d11b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2b4>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b2:	4b87      	ldr	r3, [pc, #540]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x29e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b80      	cmp	r3, #128	@ 0x80
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e282      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ca:	4b81      	ldr	r3, [pc, #516]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	497d      	ldr	r1, [pc, #500]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026de:	e040      	b.n	8002762 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d023      	beq.n	8002730 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026e8:	4b79      	ldr	r3, [pc, #484]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a78      	ldr	r2, [pc, #480]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80026ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc76 	bl	8000fe4 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026fc:	f7fe fc72 	bl	8000fe4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e260      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800270e:	4b70      	ldr	r3, [pc, #448]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800271a:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	4969      	ldr	r1, [pc, #420]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	60cb      	str	r3, [r1, #12]
 800272e:	e018      	b.n	8002762 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002730:	4b67      	ldr	r3, [pc, #412]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a66      	ldr	r2, [pc, #408]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800273a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fc52 	bl	8000fe4 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002744:	f7fe fc4e 	bl	8000fe4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e23c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002756:	4b5e      	ldr	r3, [pc, #376]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d036      	beq.n	80027dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d019      	beq.n	80027aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002776:	4b56      	ldr	r3, [pc, #344]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800277a:	4a55      	ldr	r2, [pc, #340]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002782:	f7fe fc2f 	bl	8000fe4 <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800278a:	f7fe fc2b 	bl	8000fe4 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e219      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800279c:	4b4c      	ldr	r3, [pc, #304]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800279e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x35e>
 80027a8:	e018      	b.n	80027dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027aa:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ae:	4a48      	ldr	r2, [pc, #288]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fc15 	bl	8000fe4 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe fc11 	bl	8000fe4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1ff      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d0:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80027d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d036      	beq.n	8002856 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d019      	beq.n	8002824 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f0:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a36      	ldr	r2, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80027f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fbf2 	bl	8000fe4 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002804:	f7fe fbee 	bl	8000fe4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1dc      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x3d8>
 8002822:	e018      	b.n	8002856 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002824:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800282a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800282e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002830:	f7fe fbd8 	bl	8000fe4 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002838:	f7fe fbd4 	bl	8000fe4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e1c2      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800284a:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8086 	beq.w	8002970 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x4a8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a1a      	ldr	r2, [pc, #104]	@ (80028d4 <HAL_RCC_OscConfig+0x4a8>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800286e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002870:	f7fe fbb8 	bl	8000fe4 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe fbb4 	bl	8000fe4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1a2      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288a:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <HAL_RCC_OscConfig+0x4a8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d106      	bne.n	80028ac <HAL_RCC_OscConfig+0x480>
 800289e:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	4a0b      	ldr	r2, [pc, #44]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028aa:	e032      	b.n	8002912 <HAL_RCC_OscConfig+0x4e6>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4ac>
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	4a02      	ldr	r2, [pc, #8]	@ (80028d0 <HAL_RCC_OscConfig+0x4a4>)
 80028c6:	f023 0304 	bic.w	r3, r3, #4
 80028ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80028cc:	e021      	b.n	8002912 <HAL_RCC_OscConfig+0x4e6>
 80028ce:	bf00      	nop
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58024800 	.word	0x58024800
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x4ce>
 80028e0:	4b83      	ldr	r3, [pc, #524]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a82      	ldr	r2, [pc, #520]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ec:	4b80      	ldr	r3, [pc, #512]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4a7f      	ldr	r2, [pc, #508]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x4e6>
 80028fa:	4b7d      	ldr	r3, [pc, #500]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	4a7c      	ldr	r2, [pc, #496]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	@ 0x70
 8002906:	4b7a      	ldr	r3, [pc, #488]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	4a79      	ldr	r2, [pc, #484]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fb63 	bl	8000fe4 <HAL_GetTick>
 800291e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe fb5f 	bl	8000fe4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e14b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002938:	4b6d      	ldr	r3, [pc, #436]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ee      	beq.n	8002922 <HAL_RCC_OscConfig+0x4f6>
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fb4d 	bl	8000fe4 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fb49 	bl	8000fe4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e135      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002964:	4b62      	ldr	r3, [pc, #392]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 812a 	beq.w	8002bce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800297a:	4b5d      	ldr	r3, [pc, #372]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002982:	2b18      	cmp	r3, #24
 8002984:	f000 80ba 	beq.w	8002afc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 8095 	bne.w	8002abc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b57      	ldr	r3, [pc, #348]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a56      	ldr	r2, [pc, #344]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fb21 	bl	8000fe4 <HAL_GetTick>
 80029a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe fb1d 	bl	8000fe4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e10b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b8:	4b4d      	ldr	r3, [pc, #308]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c4:	4b4a      	ldr	r3, [pc, #296]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80029c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c8:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <HAL_RCC_OscConfig+0x6c8>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	430a      	orrs	r2, r1
 80029d8:	4945      	ldr	r1, [pc, #276]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	3b01      	subs	r3, #1
 80029e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ec:	3b01      	subs	r3, #1
 80029ee:	025b      	lsls	r3, r3, #9
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a06:	3b01      	subs	r3, #1
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a0e:	4938      	ldr	r1, [pc, #224]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a14:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	4a35      	ldr	r2, [pc, #212]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a20:	4b33      	ldr	r3, [pc, #204]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a24:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <HAL_RCC_OscConfig+0x6cc>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a2c:	00d2      	lsls	r2, r2, #3
 8002a2e:	4930      	ldr	r1, [pc, #192]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a34:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	f023 020c 	bic.w	r2, r3, #12
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	492b      	ldr	r1, [pc, #172]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a46:	4b2a      	ldr	r3, [pc, #168]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	f023 0202 	bic.w	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	4927      	ldr	r1, [pc, #156]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a64:	4b22      	ldr	r3, [pc, #136]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	4a21      	ldr	r2, [pc, #132]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe faa6 	bl	8000fe4 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7fe faa2 	bl	8000fe4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e090      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x670>
 8002aba:	e088      	b.n	8002bce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fa8c 	bl	8000fe4 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fa88 	bl	8000fe4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e076      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	4b03      	ldr	r3, [pc, #12]	@ (8002af0 <HAL_RCC_OscConfig+0x6c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x6a4>
 8002aee:	e06e      	b.n	8002bce <HAL_RCC_OscConfig+0x7a2>
 8002af0:	58024400 	.word	0x58024400
 8002af4:	fffffc0c 	.word	0xfffffc0c
 8002af8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002afc:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b02:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d031      	beq.n	8002b74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0203 	and.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d12a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d122      	bne.n	8002b74 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d108      	bne.n	8002b74 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e02b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b78:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d01f      	beq.n	8002bce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	4a11      	ldr	r2, [pc, #68]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b9a:	f7fe fa23 	bl	8000fe4 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ba0:	bf00      	nop
 8002ba2:	f7fe fa1f 	bl	8000fe4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d0f9      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_RCC_OscConfig+0x7b0>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bba:	00d2      	lsls	r2, r2, #3
 8002bbc:	4906      	ldr	r1, [pc, #24]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_RCC_OscConfig+0x7ac>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3730      	adds	r7, #48	@ 0x30
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	58024400 	.word	0x58024400
 8002bdc:	ffff0007 	.word	0xffff0007

08002be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e19c      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d910      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b87      	ldr	r3, [pc, #540]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 020f 	bic.w	r2, r3, #15
 8002c0a:	4985      	ldr	r1, [pc, #532]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b83      	ldr	r3, [pc, #524]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e184      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	4b7b      	ldr	r3, [pc, #492]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c40:	4b78      	ldr	r3, [pc, #480]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	4975      	ldr	r1, [pc, #468]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	4b70      	ldr	r3, [pc, #448]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	496a      	ldr	r1, [pc, #424]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4b64      	ldr	r3, [pc, #400]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c9c:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	495e      	ldr	r1, [pc, #376]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d908      	bls.n	8002cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cca:	4b56      	ldr	r3, [pc, #344]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4953      	ldr	r1, [pc, #332]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d908      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f023 020f 	bic.w	r2, r3, #15
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4947      	ldr	r1, [pc, #284]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d055      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d16:	4b43      	ldr	r3, [pc, #268]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	4940      	ldr	r1, [pc, #256]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d30:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d121      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0f6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d115      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ea      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d60:	4b30      	ldr	r3, [pc, #192]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0de      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d70:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d6      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d80:	4b28      	ldr	r3, [pc, #160]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f023 0207 	bic.w	r2, r3, #7
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4925      	ldr	r1, [pc, #148]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d92:	f7fe f927 	bl	8000fe4 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9a:	f7fe f923 	bl	8000fe4 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0be      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d1eb      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d208      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dde:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f023 020f 	bic.w	r2, r3, #15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d214      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4906      	ldr	r1, [pc, #24]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e086      	b.n	8002f2e <HAL_RCC_ClockConfig+0x34e>
 8002e20:	52002000 	.word	0x52002000
 8002e24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e44:	4b3c      	ldr	r3, [pc, #240]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	4939      	ldr	r1, [pc, #228]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d208      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e72:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	492e      	ldr	r1, [pc, #184]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4b28      	ldr	r3, [pc, #160]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d208      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4922      	ldr	r1, [pc, #136]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d208      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4917      	ldr	r1, [pc, #92]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ee0:	f000 f834 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	4912      	ldr	r1, [pc, #72]	@ (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002efe:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <HAL_RCC_ClockConfig+0x35c>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_RCC_ClockConfig+0x360>)
 8002f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f18:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <HAL_RCC_ClockConfig+0x364>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <HAL_RCC_ClockConfig+0x368>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f814 	bl	8000f50 <HAL_InitTick>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	08006b2c 	.word	0x08006b2c
 8002f40:	24000004 	.word	0x24000004
 8002f44:	24000000 	.word	0x24000000
 8002f48:	24000008 	.word	0x24000008

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f52:	4bb3      	ldr	r3, [pc, #716]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f5a:	2b18      	cmp	r3, #24
 8002f5c:	f200 8155 	bhi.w	800320a <HAL_RCC_GetSysClockFreq+0x2be>
 8002f60:	a201      	add	r2, pc, #4	@ (adr r2, 8002f68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002fcd 	.word	0x08002fcd
 8002f6c:	0800320b 	.word	0x0800320b
 8002f70:	0800320b 	.word	0x0800320b
 8002f74:	0800320b 	.word	0x0800320b
 8002f78:	0800320b 	.word	0x0800320b
 8002f7c:	0800320b 	.word	0x0800320b
 8002f80:	0800320b 	.word	0x0800320b
 8002f84:	0800320b 	.word	0x0800320b
 8002f88:	08002ff3 	.word	0x08002ff3
 8002f8c:	0800320b 	.word	0x0800320b
 8002f90:	0800320b 	.word	0x0800320b
 8002f94:	0800320b 	.word	0x0800320b
 8002f98:	0800320b 	.word	0x0800320b
 8002f9c:	0800320b 	.word	0x0800320b
 8002fa0:	0800320b 	.word	0x0800320b
 8002fa4:	0800320b 	.word	0x0800320b
 8002fa8:	08002ff9 	.word	0x08002ff9
 8002fac:	0800320b 	.word	0x0800320b
 8002fb0:	0800320b 	.word	0x0800320b
 8002fb4:	0800320b 	.word	0x0800320b
 8002fb8:	0800320b 	.word	0x0800320b
 8002fbc:	0800320b 	.word	0x0800320b
 8002fc0:	0800320b 	.word	0x0800320b
 8002fc4:	0800320b 	.word	0x0800320b
 8002fc8:	08002fff 	.word	0x08002fff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fcc:	4b94      	ldr	r3, [pc, #592]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fd8:	4b91      	ldr	r3, [pc, #580]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	4a90      	ldr	r2, [pc, #576]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fea:	e111      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fec:	4b8d      	ldr	r3, [pc, #564]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fee:	61bb      	str	r3, [r7, #24]
      break;
 8002ff0:	e10e      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ff4:	61bb      	str	r3, [r7, #24]
      break;
 8002ff6:	e10b      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ff8:	4b8c      	ldr	r3, [pc, #560]	@ (800322c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ffa:	61bb      	str	r3, [r7, #24]
      break;
 8002ffc:	e108      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ffe:	4b88      	ldr	r3, [pc, #544]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003008:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003012:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003014:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800301e:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80e1 	beq.w	8003204 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b02      	cmp	r3, #2
 8003046:	f000 8083 	beq.w	8003150 <HAL_RCC_GetSysClockFreq+0x204>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f200 80a1 	bhi.w	8003194 <HAL_RCC_GetSysClockFreq+0x248>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x114>
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d056      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x1c0>
 800305e:	e099      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003060:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02d      	beq.n	80030c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800306c:	4b6c      	ldr	r3, [pc, #432]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	4a6b      	ldr	r2, [pc, #428]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	ee07 3a90 	vmov	s15, r3
 8003084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b62      	ldr	r3, [pc, #392]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030c6:	e087      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003234 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b51      	ldr	r3, [pc, #324]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800310a:	e065      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003132:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800314e:	e043      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800323c <HAL_RCC_GetSysClockFreq+0x2f0>
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003192:	e021      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003238 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031e2:	3301      	adds	r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	ee07 3a90 	vmov	s15, r3
 80031ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fc:	ee17 3a90 	vmov	r3, s15
 8003200:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003202:	e005      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
      break;
 8003208:	e002      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800320a:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800320c:	61bb      	str	r3, [r7, #24]
      break;
 800320e:	bf00      	nop
  }

  return sysclockfreq;
 8003210:	69bb      	ldr	r3, [r7, #24]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	03d09000 	.word	0x03d09000
 8003228:	003d0900 	.word	0x003d0900
 800322c:	017d7840 	.word	0x017d7840
 8003230:	46000000 	.word	0x46000000
 8003234:	4c742400 	.word	0x4c742400
 8003238:	4a742400 	.word	0x4a742400
 800323c:	4bbebc20 	.word	0x4bbebc20

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003246:	f7ff fe81 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <HAL_RCC_GetHCLKFreq+0x50>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490f      	ldr	r1, [pc, #60]	@ (8003294 <HAL_RCC_GetHCLKFreq+0x54>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003264:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <HAL_RCC_GetHCLKFreq+0x50>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_GetHCLKFreq+0x54>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a07      	ldr	r2, [pc, #28]	@ (8003298 <HAL_RCC_GetHCLKFreq+0x58>)
 800327c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800327e:	4a07      	ldr	r2, [pc, #28]	@ (800329c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <HAL_RCC_GetHCLKFreq+0x58>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	08006b2c 	.word	0x08006b2c
 8003298:	24000004 	.word	0x24000004
 800329c:	24000000 	.word	0x24000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032a4:	f7ff ffcc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b06      	ldr	r3, [pc, #24]	@ (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4904      	ldr	r1, [pc, #16]	@ (80032c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	08006b2c 	.word	0x08006b2c

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032d0:	f7ff ffb6 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	0a1b      	lsrs	r3, r3, #8
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4904      	ldr	r1, [pc, #16]	@ (80032f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	58024400 	.word	0x58024400
 80032f4:	08006b2c 	.word	0x08006b2c

080032f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b0c6      	sub	sp, #280	@ 0x118
 80032fe:	af00      	add	r7, sp, #0
 8003300:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800331c:	2500      	movs	r5, #0
 800331e:	ea54 0305 	orrs.w	r3, r4, r5
 8003322:	d049      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800332a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800332e:	d02f      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003334:	d828      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003336:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800333a:	d01a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800333c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003340:	d822      	bhi.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800334a:	d007      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800334c:	e01c      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334e:	4bab      	ldr	r3, [pc, #684]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	4aaa      	ldr	r2, [pc, #680]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800335a:	e01a      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800335c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003360:	3308      	adds	r3, #8
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 fc25 	bl	8004bb4 <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003370:	e00f      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003376:	3328      	adds	r3, #40	@ 0x28
 8003378:	2102      	movs	r1, #2
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fccc 	bl	8004d18 <RCCEx_PLL3_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003386:	e004      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003392:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800339a:	4b98      	ldr	r3, [pc, #608]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800339c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a8:	4a94      	ldr	r2, [pc, #592]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033c4:	f04f 0900 	mov.w	r9, #0
 80033c8:	ea58 0309 	orrs.w	r3, r8, r9
 80033cc:	d047      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d82a      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033d8:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	080033f5 	.word	0x080033f5
 80033e4:	08003403 	.word	0x08003403
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003437 	.word	0x08003437
 80033f0:	08003437 	.word	0x08003437
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4b81      	ldr	r3, [pc, #516]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	4a80      	ldr	r2, [pc, #512]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003400:	e01a      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003406:	3308      	adds	r3, #8
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fbd2 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003416:	e00f      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341c:	3328      	adds	r3, #40	@ 0x28
 800341e:	2100      	movs	r1, #0
 8003420:	4618      	mov	r0, r3
 8003422:	f001 fc79 	bl	8004d18 <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b6e      	ldr	r3, [pc, #440]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	f023 0107 	bic.w	r1, r3, #7
 8003448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	4a6b      	ldr	r2, [pc, #428]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003450:	430b      	orrs	r3, r1
 8003452:	6513      	str	r3, [r2, #80]	@ 0x50
 8003454:	e003      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800345a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800345e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800346a:	f04f 0b00 	mov.w	fp, #0
 800346e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003472:	d05b      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003478:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800347c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003480:	d03b      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003482:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003486:	d834      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003488:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800348c:	d037      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800348e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003492:	d82e      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003494:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003498:	d033      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800349a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800349e:	d828      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034a4:	d01a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034aa:	d822      	bhi.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80034b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034b4:	d007      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80034b6:	e01c      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b8:	4b50      	ldr	r3, [pc, #320]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034bc:	4a4f      	ldr	r2, [pc, #316]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c4:	e01e      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ca:	3308      	adds	r3, #8
 80034cc:	2100      	movs	r1, #0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fb70 	bl	8004bb4 <RCCEx_PLL2_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034da:	e013      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e0:	3328      	adds	r3, #40	@ 0x28
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fc17 	bl	8004d18 <RCCEx_PLL3_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034f0:	e008      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034f8:	e004      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034fa:	bf00      	nop
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800350c:	4b3b      	ldr	r3, [pc, #236]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800351c:	4a37      	ldr	r2, [pc, #220]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351e:	430b      	orrs	r3, r1
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58
 8003522:	e003      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003542:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003546:	460b      	mov	r3, r1
 8003548:	4313      	orrs	r3, r2
 800354a:	d05d      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800354c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003550:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003554:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003558:	d03b      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800355a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800355e:	d834      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003560:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003564:	d037      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003566:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800356a:	d82e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800356c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003570:	d033      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003572:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003576:	d828      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800357c:	d01a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800357e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003582:	d822      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800358c:	d007      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800358e:	e01c      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b1a      	ldr	r3, [pc, #104]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003594:	4a19      	ldr	r2, [pc, #100]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800359c:	e01e      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a2:	3308      	adds	r3, #8
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fb04 	bl	8004bb4 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035b2:	e013      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b8:	3328      	adds	r3, #40	@ 0x28
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fbab 	bl	8004d18 <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035c8:	e008      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035d0:	e004      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035e4:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035f4:	4a01      	ldr	r2, [pc, #4]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035fa:	e005      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003614:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800361e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d03a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	2b30      	cmp	r3, #48	@ 0x30
 8003630:	d01f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003632:	2b30      	cmp	r3, #48	@ 0x30
 8003634:	d819      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003636:	2b20      	cmp	r3, #32
 8003638:	d00c      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800363a:	2b20      	cmp	r3, #32
 800363c:	d815      	bhi.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d019      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003642:	2b10      	cmp	r3, #16
 8003644:	d111      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003646:	4baa      	ldr	r3, [pc, #680]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	4aa9      	ldr	r2, [pc, #676]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003652:	e011      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003658:	3308      	adds	r3, #8
 800365a:	2102      	movs	r1, #2
 800365c:	4618      	mov	r0, r3
 800365e:	f001 faa9 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003680:	4b9b      	ldr	r3, [pc, #620]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003684:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	4a98      	ldr	r2, [pc, #608]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003690:	430b      	orrs	r3, r1
 8003692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800369a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800369e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036b4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d051      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c8:	d035      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80036ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ce:	d82e      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036d4:	d031      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80036d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036da:	d828      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e0:	d01a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80036e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036e6:	d822      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80036ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f0:	d007      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80036f2:	e01c      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f4:	4b7e      	ldr	r3, [pc, #504]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	4a7d      	ldr	r2, [pc, #500]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003700:	e01c      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003706:	3308      	adds	r3, #8
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fa52 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371c:	3328      	adds	r3, #40	@ 0x28
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 faf9 	bl	8004d18 <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003744:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003748:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800374c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	4a67      	ldr	r2, [pc, #412]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6513      	str	r3, [r2, #80]	@ 0x50
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800375e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800376e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003778:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d053      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800378c:	d033      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800378e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003792:	d82c      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003794:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003798:	d02f      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800379a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800379e:	d826      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037a4:	d02b      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80037a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037aa:	d820      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037b0:	d012      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80037b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037b6:	d81a      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d022      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c0:	d115      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c6:	3308      	adds	r3, #8
 80037c8:	2101      	movs	r1, #1
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f9f2 	bl	8004bb4 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037d6:	e015      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037dc:	3328      	adds	r3, #40	@ 0x28
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fa99 	bl	8004d18 <RCCEx_PLL3_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037ec:	e00a      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037f6:	bf00      	nop
 80037f8:	e004      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037fa:	bf00      	nop
 80037fc:	e002      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037fe:	bf00      	nop
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800380c:	4b38      	ldr	r3, [pc, #224]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800380e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003810:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	4a35      	ldr	r2, [pc, #212]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003826:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800382a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003840:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d058      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800384a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800384e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003856:	d033      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800385c:	d82c      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003862:	d02f      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003868:	d826      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800386a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800386e:	d02b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003870:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003874:	d820      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003876:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800387a:	d012      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800387c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003880:	d81a      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d022      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800388a:	d115      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003890:	3308      	adds	r3, #8
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f001 f98d 	bl	8004bb4 <RCCEx_PLL2_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038a0:	e015      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a6:	3328      	adds	r3, #40	@ 0x28
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fa34 	bl	8004d18 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038b6:	e00a      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038be:	e006      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038c0:	bf00      	nop
 80038c2:	e004      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038c4:	bf00      	nop
 80038c6:	e002      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038c8:	bf00      	nop
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038e6:	4a02      	ldr	r2, [pc, #8]	@ (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ec:	e006      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80038ee:	bf00      	nop
 80038f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003912:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	d037      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800391c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003926:	d00e      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392c:	d816      	bhi.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003936:	d111      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003938:	4bc4      	ldr	r3, [pc, #784]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	4ac3      	ldr	r2, [pc, #780]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800393e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003944:	e00f      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394a:	3308      	adds	r3, #8
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f930 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800395a:	e004      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10a      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800396e:	4bb7      	ldr	r3, [pc, #732]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003972:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397c:	4ab3      	ldr	r2, [pc, #716]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800397e:	430b      	orrs	r3, r1
 8003980:	6513      	str	r3, [r2, #80]	@ 0x50
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039a6:	460b      	mov	r3, r1
 80039a8:	4313      	orrs	r3, r2
 80039aa:	d039      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d81c      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80039b6:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039f9 	.word	0x080039f9
 80039c0:	080039cd 	.word	0x080039cd
 80039c4:	080039db 	.word	0x080039db
 80039c8:	080039f9 	.word	0x080039f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4b9f      	ldr	r3, [pc, #636]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	4a9e      	ldr	r2, [pc, #632]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039d8:	e00f      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039de:	3308      	adds	r3, #8
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f8e6 	bl	8004bb4 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039ee:	e004      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80039f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a02:	4b92      	ldr	r3, [pc, #584]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	f023 0103 	bic.w	r1, r3, #3
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	4a8e      	ldr	r2, [pc, #568]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f000 8099 	beq.w	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a42:	4b83      	ldr	r3, [pc, #524]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a82      	ldr	r2, [pc, #520]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a4e:	f7fd fac9 	bl	8000fe4 <HAL_GetTick>
 8003a52:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a56:	e00b      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fd fac4 	bl	8000fe4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b64      	cmp	r3, #100	@ 0x64
 8003a66:	d903      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a6e:	e005      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a70:	4b77      	ldr	r3, [pc, #476]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ed      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d173      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a84:	4b71      	ldr	r3, [pc, #452]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a90:	4053      	eors	r3, r2
 8003a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa6:	4b69      	ldr	r3, [pc, #420]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	4a68      	ldr	r2, [pc, #416]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab2:	4b66      	ldr	r3, [pc, #408]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	4a65      	ldr	r2, [pc, #404]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003abc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003abe:	4a63      	ldr	r2, [pc, #396]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ac4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad2:	d118      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fd fa86 	bl	8000fe4 <HAL_GetTick>
 8003ad8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003adc:	e00d      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fd fa81 	bl	8000fe4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ae8:	1ad2      	subs	r2, r2, r3
 8003aea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d903      	bls.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003af8:	e005      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afa:	4b54      	ldr	r3, [pc, #336]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0eb      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d129      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b1e:	d10e      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b20:	4b4a      	ldr	r3, [pc, #296]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b30:	091a      	lsrs	r2, r3, #4
 8003b32:	4b48      	ldr	r3, [pc, #288]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	4a45      	ldr	r2, [pc, #276]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6113      	str	r3, [r2, #16]
 8003b3c:	e005      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003b3e:	4b43      	ldr	r3, [pc, #268]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	4a42      	ldr	r2, [pc, #264]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b48:	6113      	str	r3, [r2, #16]
 8003b4a:	4b40      	ldr	r3, [pc, #256]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b60:	e008      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003b6a:	e003      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f002 0301 	and.w	r3, r2, #1
 8003b80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f000 808f 	beq.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b9c:	2b28      	cmp	r3, #40	@ 0x28
 8003b9e:	d871      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003c8d 	.word	0x08003c8d
 8003bac:	08003c85 	.word	0x08003c85
 8003bb0:	08003c85 	.word	0x08003c85
 8003bb4:	08003c85 	.word	0x08003c85
 8003bb8:	08003c85 	.word	0x08003c85
 8003bbc:	08003c85 	.word	0x08003c85
 8003bc0:	08003c85 	.word	0x08003c85
 8003bc4:	08003c85 	.word	0x08003c85
 8003bc8:	08003c59 	.word	0x08003c59
 8003bcc:	08003c85 	.word	0x08003c85
 8003bd0:	08003c85 	.word	0x08003c85
 8003bd4:	08003c85 	.word	0x08003c85
 8003bd8:	08003c85 	.word	0x08003c85
 8003bdc:	08003c85 	.word	0x08003c85
 8003be0:	08003c85 	.word	0x08003c85
 8003be4:	08003c85 	.word	0x08003c85
 8003be8:	08003c6f 	.word	0x08003c6f
 8003bec:	08003c85 	.word	0x08003c85
 8003bf0:	08003c85 	.word	0x08003c85
 8003bf4:	08003c85 	.word	0x08003c85
 8003bf8:	08003c85 	.word	0x08003c85
 8003bfc:	08003c85 	.word	0x08003c85
 8003c00:	08003c85 	.word	0x08003c85
 8003c04:	08003c85 	.word	0x08003c85
 8003c08:	08003c8d 	.word	0x08003c8d
 8003c0c:	08003c85 	.word	0x08003c85
 8003c10:	08003c85 	.word	0x08003c85
 8003c14:	08003c85 	.word	0x08003c85
 8003c18:	08003c85 	.word	0x08003c85
 8003c1c:	08003c85 	.word	0x08003c85
 8003c20:	08003c85 	.word	0x08003c85
 8003c24:	08003c85 	.word	0x08003c85
 8003c28:	08003c8d 	.word	0x08003c8d
 8003c2c:	08003c85 	.word	0x08003c85
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c85 	.word	0x08003c85
 8003c3c:	08003c85 	.word	0x08003c85
 8003c40:	08003c85 	.word	0x08003c85
 8003c44:	08003c85 	.word	0x08003c85
 8003c48:	08003c8d 	.word	0x08003c8d
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	58024800 	.word	0x58024800
 8003c54:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 ffa7 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e00f      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c72:	3328      	adds	r3, #40	@ 0x28
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 f84e 	bl	8004d18 <RCCEx_PLL3_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c82:	e004      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c8a:	e000      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c96:	4bbf      	ldr	r3, [pc, #764]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ca4:	4abb      	ldr	r2, [pc, #748]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003caa:	e003      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbc:	f002 0302 	and.w	r3, r2, #2
 8003cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	d041      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d824      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003cde:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d31 	.word	0x08003d31
 8003ce8:	08003cfd 	.word	0x08003cfd
 8003cec:	08003d13 	.word	0x08003d13
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d31 	.word	0x08003d31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d00:	3308      	adds	r3, #8
 8003d02:	2101      	movs	r1, #1
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 ff55 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d10:	e00f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d16:	3328      	adds	r3, #40	@ 0x28
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fffc 	bl	8004d18 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d3a:	4b96      	ldr	r3, [pc, #600]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f023 0107 	bic.w	r1, r3, #7
 8003d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d48:	4a92      	ldr	r2, [pc, #584]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f002 0304 	and.w	r3, r2, #4
 8003d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d6e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d72:	460b      	mov	r3, r1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	d044      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d825      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003dd9 	.word	0x08003dd9
 8003d90:	08003da5 	.word	0x08003da5
 8003d94:	08003dbb 	.word	0x08003dbb
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003dd9 	.word	0x08003dd9
 8003da0:	08003dd9 	.word	0x08003dd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da8:	3308      	adds	r3, #8
 8003daa:	2101      	movs	r1, #1
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 ff01 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003db8:	e00f      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbe:	3328      	adds	r3, #40	@ 0x28
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 ffa8 	bl	8004d18 <RCCEx_PLL3_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003de2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	f023 0107 	bic.w	r1, r3, #7
 8003dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df2:	4a68      	ldr	r2, [pc, #416]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f002 0320 	and.w	r3, r2, #32
 8003e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	d055      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e2e:	d033      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e34:	d82c      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d02f      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e40:	d826      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e46:	d02b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003e48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e4c:	d820      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e52:	d012      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e58:	d81a      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d022      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e62:	d115      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	3308      	adds	r3, #8
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fea1 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e78:	e015      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7e:	3328      	adds	r3, #40	@ 0x28
 8003e80:	2102      	movs	r1, #2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ff48 	bl	8004d18 <RCCEx_PLL3_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e96:	e006      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e98:	bf00      	nop
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eae:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebe:	4a35      	ldr	r2, [pc, #212]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003eda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ee4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d058      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003efa:	d033      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003efc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f00:	d82c      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f06:	d02f      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0c:	d826      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f12:	d02b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f18:	d820      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f1e:	d012      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f24:	d81a      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d022      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2e:	d115      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f34:	3308      	adds	r3, #8
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fe3b 	bl	8004bb4 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f44:	e015      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	3328      	adds	r3, #40	@ 0x28
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fee2 	bl	8004d18 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f62:	e006      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f64:	bf00      	nop
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f68:	bf00      	nop
 8003f6a:	e002      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10e      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f8a:	4a02      	ldr	r2, [pc, #8]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f90:	e006      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003fac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fb6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d055      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fcc:	d033      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003fce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fd2:	d82c      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd8:	d02f      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fde:	d826      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fe0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fe4:	d02b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003fe6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fea:	d820      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff0:	d012      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff6:	d81a      	bhi.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004000:	d115      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004006:	3308      	adds	r3, #8
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fdd2 	bl	8004bb4 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004016:	e015      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401c:	3328      	adds	r3, #40	@ 0x28
 800401e:	2102      	movs	r1, #2
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fe79 	bl	8004d18 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800402c:	e00a      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004036:	bf00      	nop
 8004038:	e004      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800404c:	4ba0      	ldr	r3, [pc, #640]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800404e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004050:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800405c:	4a9c      	ldr	r2, [pc, #624]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800405e:	430b      	orrs	r3, r1
 8004060:	6593      	str	r3, [r2, #88]	@ 0x58
 8004062:	e003      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f002 0308 	and.w	r3, r2, #8
 8004078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004082:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004086:	460b      	mov	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	d01e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409e:	3328      	adds	r3, #40	@ 0x28
 80040a0:	2102      	movs	r1, #2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fe38 	bl	8004d18 <RCCEx_PLL3_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80040b4:	4b86      	ldr	r3, [pc, #536]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040c4:	4a82      	ldr	r2, [pc, #520]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040c6:	430b      	orrs	r3, r1
 80040c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f002 0310 	and.w	r3, r2, #16
 80040d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040da:	2300      	movs	r3, #0
 80040dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040e4:	460b      	mov	r3, r1
 80040e6:	4313      	orrs	r3, r2
 80040e8:	d01e      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040f6:	d10c      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fc:	3328      	adds	r3, #40	@ 0x28
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fe09 	bl	8004d18 <RCCEx_PLL3_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004112:	4b6f      	ldr	r3, [pc, #444]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004116:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800411a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004122:	4a6b      	ldr	r2, [pc, #428]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004124:	430b      	orrs	r3, r1
 8004126:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004136:	2300      	movs	r3, #0
 8004138:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800413a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d03e      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800414c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004150:	d022      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004156:	d81b      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004160:	d00b      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004162:	e015      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004168:	3308      	adds	r3, #8
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fd21 	bl	8004bb4 <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004178:	e00f      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417e:	3328      	adds	r3, #40	@ 0x28
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fdc8 	bl	8004d18 <RCCEx_PLL3_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800418e:	e004      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a2:	4b4b      	ldr	r3, [pc, #300]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80041aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041b2:	4a47      	ldr	r2, [pc, #284]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041b4:	430b      	orrs	r3, r1
 80041b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b8:	e003      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80041d0:	2300      	movs	r3, #0
 80041d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80041d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041d8:	460b      	mov	r3, r1
 80041da:	4313      	orrs	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041ea:	d01f      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80041ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041f0:	d818      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80041f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80041f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041fc:	d007      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80041fe:	e011      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004200:	4b33      	ldr	r3, [pc, #204]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	4a32      	ldr	r2, [pc, #200]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800420a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800420c:	e00f      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800420e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004212:	3328      	adds	r3, #40	@ 0x28
 8004214:	2101      	movs	r1, #1
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd7e 	bl	8004d18 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004222:	e004      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800422c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004236:	4b26      	ldr	r3, [pc, #152]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800423e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004246:	4a22      	ldr	r2, [pc, #136]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6553      	str	r3, [r2, #84]	@ 0x54
 800424c:	e003      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004252:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004262:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004264:	2300      	movs	r3, #0
 8004266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004268:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d034      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004280:	d007      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004282:	e011      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004284:	4b12      	ldr	r3, [pc, #72]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	4a11      	ldr	r2, [pc, #68]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800428a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800428e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004290:	e00e      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	3308      	adds	r3, #8
 8004298:	2102      	movs	r1, #2
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fc8a 	bl	8004bb4 <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042a6:	e003      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10d      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c6:	4a02      	ldr	r2, [pc, #8]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042c8:	430b      	orrs	r3, r1
 80042ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ea:	2300      	movs	r3, #0
 80042ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80042ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d00c      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fc:	3328      	adds	r3, #40	@ 0x28
 80042fe:	2102      	movs	r1, #2
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fd09 	bl	8004d18 <RCCEx_PLL3_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d002      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800431e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004320:	2300      	movs	r3, #0
 8004322:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004324:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004328:	460b      	mov	r3, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800432e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004338:	d018      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800433a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800433e:	d811      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004344:	d014      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800434a:	d80b      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d011      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004354:	d106      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004356:	4bb7      	ldr	r3, [pc, #732]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	4ab6      	ldr	r2, [pc, #728]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800435c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004362:	e008      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800436a:	e004      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800437e:	4bad      	ldr	r3, [pc, #692]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004382:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	4aa9      	ldr	r2, [pc, #676]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800438e:	430b      	orrs	r3, r1
 8004390:	6553      	str	r3, [r2, #84]	@ 0x54
 8004392:	e003      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80043aa:	2300      	movs	r3, #0
 80043ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043b8:	4b9e      	ldr	r3, [pc, #632]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a9b      	ldr	r2, [pc, #620]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043da:	2300      	movs	r3, #0
 80043dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e8:	4b92      	ldr	r3, [pc, #584]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f6:	4a8f      	ldr	r2, [pc, #572]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004408:	643b      	str	r3, [r7, #64]	@ 0x40
 800440a:	2300      	movs	r3, #0
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004418:	4b86      	ldr	r3, [pc, #536]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	4a85      	ldr	r2, [pc, #532]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800441e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004422:	6113      	str	r3, [r2, #16]
 8004424:	4b83      	ldr	r3, [pc, #524]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004426:	6919      	ldr	r1, [r3, #16]
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004430:	4a80      	ldr	r2, [pc, #512]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004432:	430b      	orrs	r3, r1
 8004434:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004448:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004452:	4b78      	ldr	r3, [pc, #480]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	4a74      	ldr	r2, [pc, #464]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004462:	430b      	orrs	r3, r1
 8004464:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30
 8004474:	2300      	movs	r3, #0
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
 8004478:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004482:	4b6c      	ldr	r3, [pc, #432]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800448a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	4a68      	ldr	r2, [pc, #416]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	2100      	movs	r1, #0
 80044a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044ae:	460b      	mov	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d011      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b8:	3308      	adds	r3, #8
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fb79 	bl	8004bb4 <RCCEx_PLL2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	2100      	movs	r1, #0
 80044e2:	6239      	str	r1, [r7, #32]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d011      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f8:	3308      	adds	r3, #8
 80044fa:	2101      	movs	r1, #1
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fb59 	bl	8004bb4 <RCCEx_PLL2_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	2100      	movs	r1, #0
 8004522:	61b9      	str	r1, [r7, #24]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	3308      	adds	r3, #8
 800453a:	2102      	movs	r1, #2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fb39 	bl	8004bb4 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	2100      	movs	r1, #0
 8004562:	6139      	str	r1, [r7, #16]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d011      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	3328      	adds	r3, #40	@ 0x28
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fbcb 	bl	8004d18 <RCCEx_PLL3_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	2100      	movs	r1, #0
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d011      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	3328      	adds	r3, #40	@ 0x28
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fbab 	bl	8004d18 <RCCEx_PLL3_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	2100      	movs	r1, #0
 80045e2:	6039      	str	r1, [r7, #0]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d011      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f8:	3328      	adds	r3, #40	@ 0x28
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fb8b 	bl	8004d18 <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004618:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
}
 8004626:	4618      	mov	r0, r3
 8004628:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004632:	bf00      	nop
 8004634:	58024400 	.word	0x58024400

08004638 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800463c:	f7fe fe00 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b06      	ldr	r3, [pc, #24]	@ (800465c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	091b      	lsrs	r3, r3, #4
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4904      	ldr	r1, [pc, #16]	@ (8004660 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004658:	4618      	mov	r0, r3
 800465a:	bd80      	pop	{r7, pc}
 800465c:	58024400 	.word	0x58024400
 8004660:	08006b2c 	.word	0x08006b2c

08004664 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004664:	b480      	push	{r7}
 8004666:	b089      	sub	sp, #36	@ 0x24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800466c:	4ba1      	ldr	r3, [pc, #644]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004676:	4b9f      	ldr	r3, [pc, #636]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467a:	0b1b      	lsrs	r3, r3, #12
 800467c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004680:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004682:	4b9c      	ldr	r3, [pc, #624]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800468e:	4b99      	ldr	r3, [pc, #612]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004692:	08db      	lsrs	r3, r3, #3
 8004694:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8111 	beq.w	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	f000 8083 	beq.w	80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	f200 80a1 	bhi.w	8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d056      	beq.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046ce:	e099      	b.n	8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046d0:	4b88      	ldr	r3, [pc, #544]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02d      	beq.n	8004738 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046dc:	4b85      	ldr	r3, [pc, #532]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	08db      	lsrs	r3, r3, #3
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	4a84      	ldr	r2, [pc, #528]	@ (80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	4b7b      	ldr	r3, [pc, #492]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004716:	ed97 6a03 	vldr	s12, [r7, #12]
 800471a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800471e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800472a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004732:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004736:	e087      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004900 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b6a      	ldr	r3, [pc, #424]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a03 	vldr	s12, [r7, #12]
 800475e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477a:	e065      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b59      	ldr	r3, [pc, #356]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047be:	e043      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b48      	ldr	r3, [pc, #288]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004802:	e021      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b37      	ldr	r3, [pc, #220]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004846:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004848:	4b2a      	ldr	r3, [pc, #168]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	0a5b      	lsrs	r3, r3, #9
 800484e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800485e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004862:	edd7 6a07 	vldr	s13, [r7, #28]
 8004866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486e:	ee17 2a90 	vmov	r2, s15
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004876:	4b1f      	ldr	r3, [pc, #124]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004880:	ee07 3a90 	vmov	s15, r3
 8004884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004888:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800488c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004890:	edd7 6a07 	vldr	s13, [r7, #28]
 8004894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489c:	ee17 2a90 	vmov	r2, s15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048a4:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	0e1b      	lsrs	r3, r3, #24
 80048aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048be:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ca:	ee17 2a90 	vmov	r2, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048d2:	e008      	b.n	80048e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	3724      	adds	r7, #36	@ 0x24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	58024400 	.word	0x58024400
 80048f8:	03d09000 	.word	0x03d09000
 80048fc:	46000000 	.word	0x46000000
 8004900:	4c742400 	.word	0x4c742400
 8004904:	4a742400 	.word	0x4a742400
 8004908:	4bbebc20 	.word	0x4bbebc20

0800490c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	@ 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004914:	4ba1      	ldr	r3, [pc, #644]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800491e:	4b9f      	ldr	r3, [pc, #636]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004922:	0d1b      	lsrs	r3, r3, #20
 8004924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004928:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800492a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004936:	4b99      	ldr	r3, [pc, #612]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8111 	beq.w	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b02      	cmp	r3, #2
 800495e:	f000 8083 	beq.w	8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b02      	cmp	r3, #2
 8004966:	f200 80a1 	bhi.w	8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d056      	beq.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004976:	e099      	b.n	8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004978:	4b88      	ldr	r3, [pc, #544]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02d      	beq.n	80049e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004984:	4b85      	ldr	r3, [pc, #532]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	08db      	lsrs	r3, r3, #3
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	4a84      	ldr	r2, [pc, #528]	@ (8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b7b      	ldr	r3, [pc, #492]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049de:	e087      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	e065      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b59      	ldr	r3, [pc, #356]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e043      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b48      	ldr	r3, [pc, #288]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	e021      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004af0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af4:	0a5b      	lsrs	r3, r3, #9
 8004af6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b16:	ee17 2a90 	vmov	r2, s15
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b44:	ee17 2a90 	vmov	r2, s15
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b4c:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	0e1b      	lsrs	r3, r3, #24
 8004b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	ee17 2a90 	vmov	r2, s15
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b7a:	e008      	b.n	8004b8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
}
 8004b8e:	bf00      	nop
 8004b90:	3724      	adds	r7, #36	@ 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	03d09000 	.word	0x03d09000
 8004ba4:	46000000 	.word	0x46000000
 8004ba8:	4c742400 	.word	0x4c742400
 8004bac:	4a742400 	.word	0x4a742400
 8004bb0:	4bbebc20 	.word	0x4bbebc20

08004bb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bc2:	4b53      	ldr	r3, [pc, #332]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d101      	bne.n	8004bd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e099      	b.n	8004d06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bde:	f7fc fa01 	bl	8000fe4 <HAL_GetTick>
 8004be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004be6:	f7fc f9fd 	bl	8000fe4 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e086      	b.n	8004d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bf8:	4b45      	ldr	r3, [pc, #276]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c04:	4b42      	ldr	r3, [pc, #264]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	031b      	lsls	r3, r3, #12
 8004c12:	493f      	ldr	r1, [pc, #252]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	025b      	lsls	r3, r3, #9
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c48:	4931      	ldr	r1, [pc, #196]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c4e:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	492d      	ldr	r1, [pc, #180]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c60:	4b2b      	ldr	r3, [pc, #172]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	f023 0220 	bic.w	r2, r3, #32
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	4928      	ldr	r1, [pc, #160]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c72:	4b27      	ldr	r3, [pc, #156]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	4a26      	ldr	r2, [pc, #152]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	f023 0310 	bic.w	r3, r3, #16
 8004c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c82:	4b24      	ldr	r3, [pc, #144]	@ (8004d14 <RCCEx_PLL2_Config+0x160>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	69d2      	ldr	r2, [r2, #28]
 8004c8a:	00d2      	lsls	r2, r2, #3
 8004c8c:	4920      	ldr	r1, [pc, #128]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c92:	4b1f      	ldr	r3, [pc, #124]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	4a1e      	ldr	r2, [pc, #120]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	f043 0310 	orr.w	r3, r3, #16
 8004c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cb0:	e00f      	b.n	8004cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d106      	bne.n	8004cc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cb8:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	4a14      	ldr	r2, [pc, #80]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cc4:	e005      	b.n	8004cd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cc6:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	4a11      	ldr	r2, [pc, #68]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cde:	f7fc f981 	bl	8000fe4 <HAL_GetTick>
 8004ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce4:	e008      	b.n	8004cf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ce6:	f7fc f97d 	bl	8000fe4 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e006      	b.n	8004d06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cf8:	4b05      	ldr	r3, [pc, #20]	@ (8004d10 <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	58024400 	.word	0x58024400
 8004d14:	ffff0007 	.word	0xffff0007

08004d18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d26:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d101      	bne.n	8004d36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e099      	b.n	8004e6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d36:	4b4f      	ldr	r3, [pc, #316]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fc f94f 	bl	8000fe4 <HAL_GetTick>
 8004d46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d4a:	f7fc f94b 	bl	8000fe4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e086      	b.n	8004e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d5c:	4b45      	ldr	r3, [pc, #276]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f0      	bne.n	8004d4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d68:	4b42      	ldr	r3, [pc, #264]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	051b      	lsls	r3, r3, #20
 8004d76:	493f      	ldr	r1, [pc, #252]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	025b      	lsls	r3, r3, #9
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dac:	4931      	ldr	r1, [pc, #196]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	492d      	ldr	r1, [pc, #180]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	4928      	ldr	r1, [pc, #160]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dd6:	4b27      	ldr	r3, [pc, #156]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004de2:	4b24      	ldr	r3, [pc, #144]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004de6:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <RCCEx_PLL3_Config+0x160>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	69d2      	ldr	r2, [r2, #28]
 8004dee:	00d2      	lsls	r2, r2, #3
 8004df0:	4920      	ldr	r1, [pc, #128]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004df6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e08:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e14:	e00f      	b.n	8004e36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d106      	bne.n	8004e2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e28:	e005      	b.n	8004e36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	4a11      	ldr	r2, [pc, #68]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e36:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e42:	f7fc f8cf 	bl	8000fe4 <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e4a:	f7fc f8cb 	bl	8000fe4 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e006      	b.n	8004e6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
 8004e78:	ffff0007 	.word	0xffff0007

08004e7c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e04a      	b.n	8004f24 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fb fe63 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2224      	movs	r2, #36	@ 0x24
 8004eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fa76 	bl	80063b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fc07 	bl	80056e0 <UART_SetConfig>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e023      	b.n	8004f24 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004efa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f001 faed 	bl	80064fc <UART_CheckIdleState>
 8004f22:	4603      	mov	r3, r0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11b      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8377 	beq.w	8005684 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
      }
      return;
 8004f9e:	e371      	b.n	8005684 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8123 	beq.w	80051f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004faa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004fae:	4b8d      	ldr	r3, [pc, #564]	@ (80051e4 <HAL_UART_IRQHandler+0x2b8>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004fba:	4b8b      	ldr	r3, [pc, #556]	@ (80051e8 <HAL_UART_IRQHandler+0x2bc>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 8116 	beq.w	80051f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d011      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xc8>
 8004fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d011      	beq.n	8005024 <HAL_UART_IRQHandler+0xf8>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2202      	movs	r2, #2
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <HAL_UART_IRQHandler+0x128>
 8005030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2204      	movs	r2, #4
 8005042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f043 0202 	orr.w	r2, r3, #2
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800506c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005070:	4b5c      	ldr	r3, [pc, #368]	@ (80051e4 <HAL_UART_IRQHandler+0x2b8>)
 8005072:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2208      	movs	r2, #8
 800507e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005086:	f043 0208 	orr.w	r2, r3, #8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005098:	2b00      	cmp	r3, #0
 800509a:	d012      	beq.n	80050c2 <HAL_UART_IRQHandler+0x196>
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00c      	beq.n	80050c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f043 0220 	orr.w	r2, r3, #32
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 82dd 	beq.w	8005688 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005108:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800511e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d054      	beq.n	80051d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 fb00 	bl	800672c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d146      	bne.n	80051c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800516a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800517e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1d9      	bne.n	800513a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518c:	2b00      	cmp	r3, #0
 800518e:	d017      	beq.n	80051c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005196:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <HAL_UART_IRQHandler+0x2c0>)
 8005198:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fc fce7 	bl	8001b74 <HAL_DMA_Abort_IT>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d019      	beq.n	80051e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80051ba:	4610      	mov	r0, r2
 80051bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051be:	e00f      	b.n	80051e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa77 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c6:	e00b      	b.n	80051e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fa73 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ce:	e007      	b.n	80051e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fa6f 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80051de:	e253      	b.n	8005688 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	bf00      	nop
    return;
 80051e2:	e251      	b.n	8005688 <HAL_UART_IRQHandler+0x75c>
 80051e4:	10000001 	.word	0x10000001
 80051e8:	04000120 	.word	0x04000120
 80051ec:	080067f9 	.word	0x080067f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 81e7 	bne.w	80055c8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 81e0 	beq.w	80055c8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 81d9 	beq.w	80055c8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2210      	movs	r2, #16
 800521c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	f040 8151 	bne.w	80054d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a96      	ldr	r2, [pc, #600]	@ (8005490 <HAL_UART_IRQHandler+0x564>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d068      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a93      	ldr	r2, [pc, #588]	@ (8005494 <HAL_UART_IRQHandler+0x568>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d061      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a91      	ldr	r2, [pc, #580]	@ (8005498 <HAL_UART_IRQHandler+0x56c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d05a      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a8e      	ldr	r2, [pc, #568]	@ (800549c <HAL_UART_IRQHandler+0x570>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d053      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a8c      	ldr	r2, [pc, #560]	@ (80054a0 <HAL_UART_IRQHandler+0x574>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d04c      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a89      	ldr	r2, [pc, #548]	@ (80054a4 <HAL_UART_IRQHandler+0x578>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d045      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a87      	ldr	r2, [pc, #540]	@ (80054a8 <HAL_UART_IRQHandler+0x57c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d03e      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a84      	ldr	r2, [pc, #528]	@ (80054ac <HAL_UART_IRQHandler+0x580>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d037      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a82      	ldr	r2, [pc, #520]	@ (80054b0 <HAL_UART_IRQHandler+0x584>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d030      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7f      	ldr	r2, [pc, #508]	@ (80054b4 <HAL_UART_IRQHandler+0x588>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d029      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a7d      	ldr	r2, [pc, #500]	@ (80054b8 <HAL_UART_IRQHandler+0x58c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d022      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a7a      	ldr	r2, [pc, #488]	@ (80054bc <HAL_UART_IRQHandler+0x590>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01b      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a78      	ldr	r2, [pc, #480]	@ (80054c0 <HAL_UART_IRQHandler+0x594>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d014      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a75      	ldr	r2, [pc, #468]	@ (80054c4 <HAL_UART_IRQHandler+0x598>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00d      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a73      	ldr	r2, [pc, #460]	@ (80054c8 <HAL_UART_IRQHandler+0x59c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d006      	beq.n	800530e <HAL_UART_IRQHandler+0x3e2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a70      	ldr	r2, [pc, #448]	@ (80054cc <HAL_UART_IRQHandler+0x5a0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d106      	bne.n	800531c <HAL_UART_IRQHandler+0x3f0>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	b29b      	uxth	r3, r3
 800531a:	e005      	b.n	8005328 <HAL_UART_IRQHandler+0x3fc>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800532c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 81ab 	beq.w	800568c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800533c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005340:	429a      	cmp	r2, r3
 8005342:	f080 81a3 	bcs.w	800568c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800534c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800535c:	f000 8087 	beq.w	800546e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005374:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800537c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800538a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800538e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005396:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1da      	bne.n	8005360 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e1      	bne.n	80053aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3308      	adds	r3, #8
 80053ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800540a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800540c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005410:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e3      	bne.n	80053e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800543a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800543c:	f023 0310 	bic.w	r3, r3, #16
 8005440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800544e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005450:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005454:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800545c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e4      	bne.n	800542c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005468:	4618      	mov	r0, r3
 800546a:	f7fc f865 	bl	8001538 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005480:	b29b      	uxth	r3, r3
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f91d 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800548e:	e0fd      	b.n	800568c <HAL_UART_IRQHandler+0x760>
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80cf 	beq.w	8005690 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80054f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80ca 	beq.w	8005690 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800550a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005510:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800551e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005520:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800552c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e4      	bne.n	80054fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	623b      	str	r3, [r7, #32]
   return(result);
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	4b55      	ldr	r3, [pc, #340]	@ (800569c <HAL_UART_IRQHandler+0x770>)
 8005546:	4013      	ands	r3, r2
 8005548:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005556:	633a      	str	r2, [r7, #48]	@ 0x30
 8005558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800555c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e3      	bne.n	8005532 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	60fb      	str	r3, [r7, #12]
   return(result);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0310 	bic.w	r3, r3, #16
 8005592:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	617b      	str	r3, [r7, #20]
   return(result);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e4      	bne.n	800557e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f881 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055c6:	e063      	b.n	8005690 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <HAL_UART_IRQHandler+0x6c6>
 80055d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80055e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f945 	bl	800687a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055f0:	e051      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d014      	beq.n	8005628 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800560a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800560e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800561a:	2b00      	cmp	r3, #0
 800561c:	d03a      	beq.n	8005694 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
    }
    return;
 8005626:	e035      	b.n	8005694 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d009      	beq.n	8005648 <HAL_UART_IRQHandler+0x71c>
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f8ef 	bl	8006824 <UART_EndTransmit_IT>
    return;
 8005646:	e026      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d009      	beq.n	8005668 <HAL_UART_IRQHandler+0x73c>
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005658:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f91e 	bl	80068a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005666:	e016      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_UART_IRQHandler+0x76a>
 8005674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005678:	2b00      	cmp	r3, #0
 800567a:	da0c      	bge.n	8005696 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 f906 	bl	800688e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005682:	e008      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
      return;
 8005684:	bf00      	nop
 8005686:	e006      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
    return;
 8005688:	bf00      	nop
 800568a:	e004      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
      return;
 800568c:	bf00      	nop
 800568e:	e002      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
      return;
 8005690:	bf00      	nop
 8005692:	e000      	b.n	8005696 <HAL_UART_IRQHandler+0x76a>
    return;
 8005694:	bf00      	nop
  }
}
 8005696:	37e8      	adds	r7, #232	@ 0xe8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	effffffe 	.word	0xeffffffe

080056a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056e4:	b092      	sub	sp, #72	@ 0x48
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	431a      	orrs	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	4313      	orrs	r3, r2
 8005706:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4bbe      	ldr	r3, [pc, #760]	@ (8005a08 <UART_SetConfig+0x328>)
 8005710:	4013      	ands	r3, r2
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005718:	430b      	orrs	r3, r1
 800571a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4ab3      	ldr	r2, [pc, #716]	@ (8005a0c <UART_SetConfig+0x32c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005748:	4313      	orrs	r3, r2
 800574a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	4baf      	ldr	r3, [pc, #700]	@ (8005a10 <UART_SetConfig+0x330>)
 8005754:	4013      	ands	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800575c:	430b      	orrs	r3, r1
 800575e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	f023 010f 	bic.w	r1, r3, #15
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4aa6      	ldr	r2, [pc, #664]	@ (8005a14 <UART_SetConfig+0x334>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d177      	bne.n	8005870 <UART_SetConfig+0x190>
 8005780:	4ba5      	ldr	r3, [pc, #660]	@ (8005a18 <UART_SetConfig+0x338>)
 8005782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005788:	2b28      	cmp	r3, #40	@ 0x28
 800578a:	d86d      	bhi.n	8005868 <UART_SetConfig+0x188>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <UART_SetConfig+0xb4>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	08005839 	.word	0x08005839
 8005798:	08005869 	.word	0x08005869
 800579c:	08005869 	.word	0x08005869
 80057a0:	08005869 	.word	0x08005869
 80057a4:	08005869 	.word	0x08005869
 80057a8:	08005869 	.word	0x08005869
 80057ac:	08005869 	.word	0x08005869
 80057b0:	08005869 	.word	0x08005869
 80057b4:	08005841 	.word	0x08005841
 80057b8:	08005869 	.word	0x08005869
 80057bc:	08005869 	.word	0x08005869
 80057c0:	08005869 	.word	0x08005869
 80057c4:	08005869 	.word	0x08005869
 80057c8:	08005869 	.word	0x08005869
 80057cc:	08005869 	.word	0x08005869
 80057d0:	08005869 	.word	0x08005869
 80057d4:	08005849 	.word	0x08005849
 80057d8:	08005869 	.word	0x08005869
 80057dc:	08005869 	.word	0x08005869
 80057e0:	08005869 	.word	0x08005869
 80057e4:	08005869 	.word	0x08005869
 80057e8:	08005869 	.word	0x08005869
 80057ec:	08005869 	.word	0x08005869
 80057f0:	08005869 	.word	0x08005869
 80057f4:	08005851 	.word	0x08005851
 80057f8:	08005869 	.word	0x08005869
 80057fc:	08005869 	.word	0x08005869
 8005800:	08005869 	.word	0x08005869
 8005804:	08005869 	.word	0x08005869
 8005808:	08005869 	.word	0x08005869
 800580c:	08005869 	.word	0x08005869
 8005810:	08005869 	.word	0x08005869
 8005814:	08005859 	.word	0x08005859
 8005818:	08005869 	.word	0x08005869
 800581c:	08005869 	.word	0x08005869
 8005820:	08005869 	.word	0x08005869
 8005824:	08005869 	.word	0x08005869
 8005828:	08005869 	.word	0x08005869
 800582c:	08005869 	.word	0x08005869
 8005830:	08005869 	.word	0x08005869
 8005834:	08005861 	.word	0x08005861
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e326      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e322      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e31e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e31a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e316      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005860:	2340      	movs	r3, #64	@ 0x40
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e312      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005868:	2380      	movs	r3, #128	@ 0x80
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e30e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a69      	ldr	r2, [pc, #420]	@ (8005a1c <UART_SetConfig+0x33c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d130      	bne.n	80058dc <UART_SetConfig+0x1fc>
 800587a:	4b67      	ldr	r3, [pc, #412]	@ (8005a18 <UART_SetConfig+0x338>)
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	2b05      	cmp	r3, #5
 8005884:	d826      	bhi.n	80058d4 <UART_SetConfig+0x1f4>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <UART_SetConfig+0x1ac>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058a5 	.word	0x080058a5
 8005890:	080058ad 	.word	0x080058ad
 8005894:	080058b5 	.word	0x080058b5
 8005898:	080058bd 	.word	0x080058bd
 800589c:	080058c5 	.word	0x080058c5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e2f0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e2ec      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e2e8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e2e4      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058c4:	2320      	movs	r3, #32
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e2e0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058cc:	2340      	movs	r3, #64	@ 0x40
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e2dc      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e2d8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a4f      	ldr	r2, [pc, #316]	@ (8005a20 <UART_SetConfig+0x340>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <UART_SetConfig+0x268>
 80058e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005a18 <UART_SetConfig+0x338>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d826      	bhi.n	8005940 <UART_SetConfig+0x260>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <UART_SetConfig+0x218>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005911 	.word	0x08005911
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005921 	.word	0x08005921
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e2ba      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e2b6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e2b2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e2ae      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e2aa      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005938:	2340      	movs	r3, #64	@ 0x40
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e2a6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e2a2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a35      	ldr	r2, [pc, #212]	@ (8005a24 <UART_SetConfig+0x344>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d130      	bne.n	80059b4 <UART_SetConfig+0x2d4>
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <UART_SetConfig+0x338>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d826      	bhi.n	80059ac <UART_SetConfig+0x2cc>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x284>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e284      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e280      	b.n	8005e8e <UART_SetConfig+0x7ae>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e27c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e278      	b.n	8005e8e <UART_SetConfig+0x7ae>
 800599c:	2320      	movs	r3, #32
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e274      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059a4:	2340      	movs	r3, #64	@ 0x40
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e270      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e26c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a28 <UART_SetConfig+0x348>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d142      	bne.n	8005a44 <UART_SetConfig+0x364>
 80059be:	4b16      	ldr	r3, [pc, #88]	@ (8005a18 <UART_SetConfig+0x338>)
 80059c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d838      	bhi.n	8005a3c <UART_SetConfig+0x35c>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x2f0>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059e9 	.word	0x080059e9
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a2d 	.word	0x08005a2d
 80059e4:	08005a35 	.word	0x08005a35
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e24e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e24a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e246      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e242      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a08:	cfff69f3 	.word	0xcfff69f3
 8005a0c:	58000c00 	.word	0x58000c00
 8005a10:	11fff4ff 	.word	0x11fff4ff
 8005a14:	40011000 	.word	0x40011000
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	40004400 	.word	0x40004400
 8005a20:	40004800 	.word	0x40004800
 8005a24:	40004c00 	.word	0x40004c00
 8005a28:	40005000 	.word	0x40005000
 8005a2c:	2320      	movs	r3, #32
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e22c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a34:	2340      	movs	r3, #64	@ 0x40
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e228      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e224      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4ab1      	ldr	r2, [pc, #708]	@ (8005d10 <UART_SetConfig+0x630>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d176      	bne.n	8005b3c <UART_SetConfig+0x45c>
 8005a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8005d14 <UART_SetConfig+0x634>)
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a56:	2b28      	cmp	r3, #40	@ 0x28
 8005a58:	d86c      	bhi.n	8005b34 <UART_SetConfig+0x454>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <UART_SetConfig+0x380>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005b05 	.word	0x08005b05
 8005a64:	08005b35 	.word	0x08005b35
 8005a68:	08005b35 	.word	0x08005b35
 8005a6c:	08005b35 	.word	0x08005b35
 8005a70:	08005b35 	.word	0x08005b35
 8005a74:	08005b35 	.word	0x08005b35
 8005a78:	08005b35 	.word	0x08005b35
 8005a7c:	08005b35 	.word	0x08005b35
 8005a80:	08005b0d 	.word	0x08005b0d
 8005a84:	08005b35 	.word	0x08005b35
 8005a88:	08005b35 	.word	0x08005b35
 8005a8c:	08005b35 	.word	0x08005b35
 8005a90:	08005b35 	.word	0x08005b35
 8005a94:	08005b35 	.word	0x08005b35
 8005a98:	08005b35 	.word	0x08005b35
 8005a9c:	08005b35 	.word	0x08005b35
 8005aa0:	08005b15 	.word	0x08005b15
 8005aa4:	08005b35 	.word	0x08005b35
 8005aa8:	08005b35 	.word	0x08005b35
 8005aac:	08005b35 	.word	0x08005b35
 8005ab0:	08005b35 	.word	0x08005b35
 8005ab4:	08005b35 	.word	0x08005b35
 8005ab8:	08005b35 	.word	0x08005b35
 8005abc:	08005b35 	.word	0x08005b35
 8005ac0:	08005b1d 	.word	0x08005b1d
 8005ac4:	08005b35 	.word	0x08005b35
 8005ac8:	08005b35 	.word	0x08005b35
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005b35 	.word	0x08005b35
 8005ad4:	08005b35 	.word	0x08005b35
 8005ad8:	08005b35 	.word	0x08005b35
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b35 	.word	0x08005b35
 8005af0:	08005b35 	.word	0x08005b35
 8005af4:	08005b35 	.word	0x08005b35
 8005af8:	08005b35 	.word	0x08005b35
 8005afc:	08005b35 	.word	0x08005b35
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e1c0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e1bc      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e1b8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e1b4      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b24:	2320      	movs	r3, #32
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e1b0      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b2c:	2340      	movs	r3, #64	@ 0x40
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e1ac      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b34:	2380      	movs	r3, #128	@ 0x80
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e1a8      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a75      	ldr	r2, [pc, #468]	@ (8005d18 <UART_SetConfig+0x638>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d130      	bne.n	8005ba8 <UART_SetConfig+0x4c8>
 8005b46:	4b73      	ldr	r3, [pc, #460]	@ (8005d14 <UART_SetConfig+0x634>)
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d826      	bhi.n	8005ba0 <UART_SetConfig+0x4c0>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <UART_SetConfig+0x478>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b71 	.word	0x08005b71
 8005b5c:	08005b79 	.word	0x08005b79
 8005b60:	08005b81 	.word	0x08005b81
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e18a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e186      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e182      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e17e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b90:	2320      	movs	r3, #32
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e17a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005b98:	2340      	movs	r3, #64	@ 0x40
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e176      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ba0:	2380      	movs	r3, #128	@ 0x80
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e172      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5b      	ldr	r2, [pc, #364]	@ (8005d1c <UART_SetConfig+0x63c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d130      	bne.n	8005c14 <UART_SetConfig+0x534>
 8005bb2:	4b58      	ldr	r3, [pc, #352]	@ (8005d14 <UART_SetConfig+0x634>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d826      	bhi.n	8005c0c <UART_SetConfig+0x52c>
 8005bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc4 <UART_SetConfig+0x4e4>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bdd 	.word	0x08005bdd
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bed 	.word	0x08005bed
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e154      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e150      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e14c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e148      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e144      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005c04:	2340      	movs	r3, #64	@ 0x40
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e140      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005c0c:	2380      	movs	r3, #128	@ 0x80
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e13c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a41      	ldr	r2, [pc, #260]	@ (8005d20 <UART_SetConfig+0x640>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f040 8082 	bne.w	8005d24 <UART_SetConfig+0x644>
 8005c20:	4b3c      	ldr	r3, [pc, #240]	@ (8005d14 <UART_SetConfig+0x634>)
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c28:	2b28      	cmp	r3, #40	@ 0x28
 8005c2a:	d86d      	bhi.n	8005d08 <UART_SetConfig+0x628>
 8005c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <UART_SetConfig+0x554>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005cd9 	.word	0x08005cd9
 8005c38:	08005d09 	.word	0x08005d09
 8005c3c:	08005d09 	.word	0x08005d09
 8005c40:	08005d09 	.word	0x08005d09
 8005c44:	08005d09 	.word	0x08005d09
 8005c48:	08005d09 	.word	0x08005d09
 8005c4c:	08005d09 	.word	0x08005d09
 8005c50:	08005d09 	.word	0x08005d09
 8005c54:	08005ce1 	.word	0x08005ce1
 8005c58:	08005d09 	.word	0x08005d09
 8005c5c:	08005d09 	.word	0x08005d09
 8005c60:	08005d09 	.word	0x08005d09
 8005c64:	08005d09 	.word	0x08005d09
 8005c68:	08005d09 	.word	0x08005d09
 8005c6c:	08005d09 	.word	0x08005d09
 8005c70:	08005d09 	.word	0x08005d09
 8005c74:	08005ce9 	.word	0x08005ce9
 8005c78:	08005d09 	.word	0x08005d09
 8005c7c:	08005d09 	.word	0x08005d09
 8005c80:	08005d09 	.word	0x08005d09
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d09 	.word	0x08005d09
 8005c8c:	08005d09 	.word	0x08005d09
 8005c90:	08005d09 	.word	0x08005d09
 8005c94:	08005cf1 	.word	0x08005cf1
 8005c98:	08005d09 	.word	0x08005d09
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005d09 	.word	0x08005d09
 8005ca8:	08005d09 	.word	0x08005d09
 8005cac:	08005d09 	.word	0x08005d09
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005cf9 	.word	0x08005cf9
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d09 	.word	0x08005d09
 8005cc0:	08005d09 	.word	0x08005d09
 8005cc4:	08005d09 	.word	0x08005d09
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005d09 	.word	0x08005d09
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e0d6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e0d2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e0ce      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e0ca      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e0c6      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005d00:	2340      	movs	r3, #64	@ 0x40
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e0c2      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e0be      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005d10:	40011400 	.word	0x40011400
 8005d14:	58024400 	.word	0x58024400
 8005d18:	40007800 	.word	0x40007800
 8005d1c:	40007c00 	.word	0x40007c00
 8005d20:	40011800 	.word	0x40011800
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4aad      	ldr	r2, [pc, #692]	@ (8005fe0 <UART_SetConfig+0x900>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d176      	bne.n	8005e1c <UART_SetConfig+0x73c>
 8005d2e:	4bad      	ldr	r3, [pc, #692]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d36:	2b28      	cmp	r3, #40	@ 0x28
 8005d38:	d86c      	bhi.n	8005e14 <UART_SetConfig+0x734>
 8005d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <UART_SetConfig+0x660>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005de5 	.word	0x08005de5
 8005d44:	08005e15 	.word	0x08005e15
 8005d48:	08005e15 	.word	0x08005e15
 8005d4c:	08005e15 	.word	0x08005e15
 8005d50:	08005e15 	.word	0x08005e15
 8005d54:	08005e15 	.word	0x08005e15
 8005d58:	08005e15 	.word	0x08005e15
 8005d5c:	08005e15 	.word	0x08005e15
 8005d60:	08005ded 	.word	0x08005ded
 8005d64:	08005e15 	.word	0x08005e15
 8005d68:	08005e15 	.word	0x08005e15
 8005d6c:	08005e15 	.word	0x08005e15
 8005d70:	08005e15 	.word	0x08005e15
 8005d74:	08005e15 	.word	0x08005e15
 8005d78:	08005e15 	.word	0x08005e15
 8005d7c:	08005e15 	.word	0x08005e15
 8005d80:	08005df5 	.word	0x08005df5
 8005d84:	08005e15 	.word	0x08005e15
 8005d88:	08005e15 	.word	0x08005e15
 8005d8c:	08005e15 	.word	0x08005e15
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e15 	.word	0x08005e15
 8005d98:	08005e15 	.word	0x08005e15
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005dfd 	.word	0x08005dfd
 8005da4:	08005e15 	.word	0x08005e15
 8005da8:	08005e15 	.word	0x08005e15
 8005dac:	08005e15 	.word	0x08005e15
 8005db0:	08005e15 	.word	0x08005e15
 8005db4:	08005e15 	.word	0x08005e15
 8005db8:	08005e15 	.word	0x08005e15
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e05 	.word	0x08005e05
 8005dc4:	08005e15 	.word	0x08005e15
 8005dc8:	08005e15 	.word	0x08005e15
 8005dcc:	08005e15 	.word	0x08005e15
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	08005e15 	.word	0x08005e15
 8005dd8:	08005e15 	.word	0x08005e15
 8005ddc:	08005e15 	.word	0x08005e15
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e050      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e04c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e048      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e044      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e04:	2320      	movs	r3, #32
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e040      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e0c:	2340      	movs	r3, #64	@ 0x40
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e03c      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e14:	2380      	movs	r3, #128	@ 0x80
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e038      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a71      	ldr	r2, [pc, #452]	@ (8005fe8 <UART_SetConfig+0x908>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d130      	bne.n	8005e88 <UART_SetConfig+0x7a8>
 8005e26:	4b6f      	ldr	r3, [pc, #444]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d826      	bhi.n	8005e80 <UART_SetConfig+0x7a0>
 8005e32:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <UART_SetConfig+0x758>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e61 	.word	0x08005e61
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2302      	movs	r3, #2
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e01a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e016      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e012      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e00e      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e00a      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e78:	2340      	movs	r3, #64	@ 0x40
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e006      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e002      	b.n	8005e8e <UART_SetConfig+0x7ae>
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a55      	ldr	r2, [pc, #340]	@ (8005fe8 <UART_SetConfig+0x908>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	f040 80f8 	bne.w	800608a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	dc46      	bgt.n	8005f30 <UART_SetConfig+0x850>
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	db75      	blt.n	8005f92 <UART_SetConfig+0x8b2>
 8005ea6:	3b02      	subs	r3, #2
 8005ea8:	2b1e      	cmp	r3, #30
 8005eaa:	d872      	bhi.n	8005f92 <UART_SetConfig+0x8b2>
 8005eac:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0x7d4>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005f37 	.word	0x08005f37
 8005eb8:	08005f93 	.word	0x08005f93
 8005ebc:	08005f3f 	.word	0x08005f3f
 8005ec0:	08005f93 	.word	0x08005f93
 8005ec4:	08005f93 	.word	0x08005f93
 8005ec8:	08005f93 	.word	0x08005f93
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005f93 	.word	0x08005f93
 8005ed4:	08005f93 	.word	0x08005f93
 8005ed8:	08005f93 	.word	0x08005f93
 8005edc:	08005f93 	.word	0x08005f93
 8005ee0:	08005f93 	.word	0x08005f93
 8005ee4:	08005f93 	.word	0x08005f93
 8005ee8:	08005f93 	.word	0x08005f93
 8005eec:	08005f5f 	.word	0x08005f5f
 8005ef0:	08005f93 	.word	0x08005f93
 8005ef4:	08005f93 	.word	0x08005f93
 8005ef8:	08005f93 	.word	0x08005f93
 8005efc:	08005f93 	.word	0x08005f93
 8005f00:	08005f93 	.word	0x08005f93
 8005f04:	08005f93 	.word	0x08005f93
 8005f08:	08005f93 	.word	0x08005f93
 8005f0c:	08005f93 	.word	0x08005f93
 8005f10:	08005f93 	.word	0x08005f93
 8005f14:	08005f93 	.word	0x08005f93
 8005f18:	08005f93 	.word	0x08005f93
 8005f1c:	08005f93 	.word	0x08005f93
 8005f20:	08005f93 	.word	0x08005f93
 8005f24:	08005f93 	.word	0x08005f93
 8005f28:	08005f93 	.word	0x08005f93
 8005f2c:	08005f85 	.word	0x08005f85
 8005f30:	2b40      	cmp	r3, #64	@ 0x40
 8005f32:	d02a      	beq.n	8005f8a <UART_SetConfig+0x8aa>
 8005f34:	e02d      	b.n	8005f92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f36:	f7fe fb7f 	bl	8004638 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f3c:	e02f      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fb8e 	bl	8004664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f4c:	e027      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fcda 	bl	800490c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f5c:	e01f      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f5e:	4b21      	ldr	r3, [pc, #132]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe4 <UART_SetConfig+0x904>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	4a1d      	ldr	r2, [pc, #116]	@ (8005fec <UART_SetConfig+0x90c>)
 8005f76:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f7c:	e00f      	b.n	8005f9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <UART_SetConfig+0x90c>)
 8005f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f82:	e00c      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f84:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <UART_SetConfig+0x910>)
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f88:	e009      	b.n	8005f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f90:	e005      	b.n	8005f9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 81ee 	beq.w	8006382 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	4a12      	ldr	r2, [pc, #72]	@ (8005ff4 <UART_SetConfig+0x914>)
 8005fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d305      	bcc.n	8005fd6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d910      	bls.n	8005ff8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005fdc:	e1d1      	b.n	8006382 <UART_SetConfig+0xca2>
 8005fde:	bf00      	nop
 8005fe0:	40011c00 	.word	0x40011c00
 8005fe4:	58024400 	.word	0x58024400
 8005fe8:	58000c00 	.word	0x58000c00
 8005fec:	03d09000 	.word	0x03d09000
 8005ff0:	003d0900 	.word	0x003d0900
 8005ff4:	08006b3c 	.word	0x08006b3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006004:	4ac0      	ldr	r2, [pc, #768]	@ (8006308 <UART_SetConfig+0xc28>)
 8006006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800600a:	b29b      	uxth	r3, r3
 800600c:	2200      	movs	r2, #0
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800601a:	f7fa f977 	bl	800030c <__aeabi_uldivmod>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	f04f 0200 	mov.w	r2, #0
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	020b      	lsls	r3, r1, #8
 8006030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006034:	0202      	lsls	r2, r0, #8
 8006036:	6979      	ldr	r1, [r7, #20]
 8006038:	6849      	ldr	r1, [r1, #4]
 800603a:	0849      	lsrs	r1, r1, #1
 800603c:	2000      	movs	r0, #0
 800603e:	460c      	mov	r4, r1
 8006040:	4605      	mov	r5, r0
 8006042:	eb12 0804 	adds.w	r8, r2, r4
 8006046:	eb43 0905 	adc.w	r9, r3, r5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	469a      	mov	sl, r3
 8006052:	4693      	mov	fp, r2
 8006054:	4652      	mov	r2, sl
 8006056:	465b      	mov	r3, fp
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa f956 	bl	800030c <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4613      	mov	r3, r2
 8006066:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800606e:	d308      	bcc.n	8006082 <UART_SetConfig+0x9a2>
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006076:	d204      	bcs.n	8006082 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800607e:	60da      	str	r2, [r3, #12]
 8006080:	e17f      	b.n	8006382 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006088:	e17b      	b.n	8006382 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006092:	f040 80bd 	bne.w	8006210 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006096:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800609a:	2b20      	cmp	r3, #32
 800609c:	dc48      	bgt.n	8006130 <UART_SetConfig+0xa50>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db7b      	blt.n	800619a <UART_SetConfig+0xaba>
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d879      	bhi.n	800619a <UART_SetConfig+0xaba>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <UART_SetConfig+0x9cc>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	08006137 	.word	0x08006137
 80060b0:	0800613f 	.word	0x0800613f
 80060b4:	0800619b 	.word	0x0800619b
 80060b8:	0800619b 	.word	0x0800619b
 80060bc:	08006147 	.word	0x08006147
 80060c0:	0800619b 	.word	0x0800619b
 80060c4:	0800619b 	.word	0x0800619b
 80060c8:	0800619b 	.word	0x0800619b
 80060cc:	08006157 	.word	0x08006157
 80060d0:	0800619b 	.word	0x0800619b
 80060d4:	0800619b 	.word	0x0800619b
 80060d8:	0800619b 	.word	0x0800619b
 80060dc:	0800619b 	.word	0x0800619b
 80060e0:	0800619b 	.word	0x0800619b
 80060e4:	0800619b 	.word	0x0800619b
 80060e8:	0800619b 	.word	0x0800619b
 80060ec:	08006167 	.word	0x08006167
 80060f0:	0800619b 	.word	0x0800619b
 80060f4:	0800619b 	.word	0x0800619b
 80060f8:	0800619b 	.word	0x0800619b
 80060fc:	0800619b 	.word	0x0800619b
 8006100:	0800619b 	.word	0x0800619b
 8006104:	0800619b 	.word	0x0800619b
 8006108:	0800619b 	.word	0x0800619b
 800610c:	0800619b 	.word	0x0800619b
 8006110:	0800619b 	.word	0x0800619b
 8006114:	0800619b 	.word	0x0800619b
 8006118:	0800619b 	.word	0x0800619b
 800611c:	0800619b 	.word	0x0800619b
 8006120:	0800619b 	.word	0x0800619b
 8006124:	0800619b 	.word	0x0800619b
 8006128:	0800619b 	.word	0x0800619b
 800612c:	0800618d 	.word	0x0800618d
 8006130:	2b40      	cmp	r3, #64	@ 0x40
 8006132:	d02e      	beq.n	8006192 <UART_SetConfig+0xab2>
 8006134:	e031      	b.n	800619a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006136:	f7fd f8b3 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 800613a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800613c:	e033      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800613e:	f7fd f8c5 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8006142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006144:	e02f      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fa8a 	bl	8004664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006154:	e027      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006156:	f107 0318 	add.w	r3, r7, #24
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fbd6 	bl	800490c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006164:	e01f      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006166:	4b69      	ldr	r3, [pc, #420]	@ (800630c <UART_SetConfig+0xc2c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006172:	4b66      	ldr	r3, [pc, #408]	@ (800630c <UART_SetConfig+0xc2c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	08db      	lsrs	r3, r3, #3
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	4a64      	ldr	r2, [pc, #400]	@ (8006310 <UART_SetConfig+0xc30>)
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006184:	e00f      	b.n	80061a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006186:	4b62      	ldr	r3, [pc, #392]	@ (8006310 <UART_SetConfig+0xc30>)
 8006188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800618a:	e00c      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800618c:	4b61      	ldr	r3, [pc, #388]	@ (8006314 <UART_SetConfig+0xc34>)
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e009      	b.n	80061a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006198:	e005      	b.n	80061a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 80ea 	beq.w	8006382 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	4a55      	ldr	r2, [pc, #340]	@ (8006308 <UART_SetConfig+0xc28>)
 80061b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b8:	461a      	mov	r2, r3
 80061ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c0:	005a      	lsls	r2, r3, #1
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	085b      	lsrs	r3, r3, #1
 80061c8:	441a      	add	r2, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d6:	2b0f      	cmp	r3, #15
 80061d8:	d916      	bls.n	8006208 <UART_SetConfig+0xb28>
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e0:	d212      	bcs.n	8006208 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	f023 030f 	bic.w	r3, r3, #15
 80061ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061fa:	4313      	orrs	r3, r2
 80061fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006204:	60da      	str	r2, [r3, #12]
 8006206:	e0bc      	b.n	8006382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800620e:	e0b8      	b.n	8006382 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006210:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006214:	2b20      	cmp	r3, #32
 8006216:	dc4b      	bgt.n	80062b0 <UART_SetConfig+0xbd0>
 8006218:	2b00      	cmp	r3, #0
 800621a:	f2c0 8087 	blt.w	800632c <UART_SetConfig+0xc4c>
 800621e:	2b20      	cmp	r3, #32
 8006220:	f200 8084 	bhi.w	800632c <UART_SetConfig+0xc4c>
 8006224:	a201      	add	r2, pc, #4	@ (adr r2, 800622c <UART_SetConfig+0xb4c>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062bf 	.word	0x080062bf
 8006234:	0800632d 	.word	0x0800632d
 8006238:	0800632d 	.word	0x0800632d
 800623c:	080062c7 	.word	0x080062c7
 8006240:	0800632d 	.word	0x0800632d
 8006244:	0800632d 	.word	0x0800632d
 8006248:	0800632d 	.word	0x0800632d
 800624c:	080062d7 	.word	0x080062d7
 8006250:	0800632d 	.word	0x0800632d
 8006254:	0800632d 	.word	0x0800632d
 8006258:	0800632d 	.word	0x0800632d
 800625c:	0800632d 	.word	0x0800632d
 8006260:	0800632d 	.word	0x0800632d
 8006264:	0800632d 	.word	0x0800632d
 8006268:	0800632d 	.word	0x0800632d
 800626c:	080062e7 	.word	0x080062e7
 8006270:	0800632d 	.word	0x0800632d
 8006274:	0800632d 	.word	0x0800632d
 8006278:	0800632d 	.word	0x0800632d
 800627c:	0800632d 	.word	0x0800632d
 8006280:	0800632d 	.word	0x0800632d
 8006284:	0800632d 	.word	0x0800632d
 8006288:	0800632d 	.word	0x0800632d
 800628c:	0800632d 	.word	0x0800632d
 8006290:	0800632d 	.word	0x0800632d
 8006294:	0800632d 	.word	0x0800632d
 8006298:	0800632d 	.word	0x0800632d
 800629c:	0800632d 	.word	0x0800632d
 80062a0:	0800632d 	.word	0x0800632d
 80062a4:	0800632d 	.word	0x0800632d
 80062a8:	0800632d 	.word	0x0800632d
 80062ac:	0800631f 	.word	0x0800631f
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d037      	beq.n	8006324 <UART_SetConfig+0xc44>
 80062b4:	e03a      	b.n	800632c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fc fff3 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 80062ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062bc:	e03c      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062be:	f7fd f805 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 80062c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80062c4:	e038      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe f9ca 	bl	8004664 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d4:	e030      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062d6:	f107 0318 	add.w	r3, r7, #24
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fb16 	bl	800490c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062e4:	e028      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e6:	4b09      	ldr	r3, [pc, #36]	@ (800630c <UART_SetConfig+0xc2c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d012      	beq.n	8006318 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062f2:	4b06      	ldr	r3, [pc, #24]	@ (800630c <UART_SetConfig+0xc2c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	08db      	lsrs	r3, r3, #3
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	4a04      	ldr	r2, [pc, #16]	@ (8006310 <UART_SetConfig+0xc30>)
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006304:	e018      	b.n	8006338 <UART_SetConfig+0xc58>
 8006306:	bf00      	nop
 8006308:	08006b3c 	.word	0x08006b3c
 800630c:	58024400 	.word	0x58024400
 8006310:	03d09000 	.word	0x03d09000
 8006314:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006318:	4b24      	ldr	r3, [pc, #144]	@ (80063ac <UART_SetConfig+0xccc>)
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800631c:	e00c      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800631e:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <UART_SetConfig+0xcd0>)
 8006320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006322:	e009      	b.n	8006338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632a:	e005      	b.n	8006338 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006336:	bf00      	nop
    }

    if (pclk != 0U)
 8006338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	4a1c      	ldr	r2, [pc, #112]	@ (80063b4 <UART_SetConfig+0xcd4>)
 8006344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006348:	461a      	mov	r2, r3
 800634a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	441a      	add	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d909      	bls.n	800637c <UART_SetConfig+0xc9c>
 8006368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636e:	d205      	bcs.n	800637c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	b29a      	uxth	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e002      	b.n	8006382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2201      	movs	r2, #1
 8006386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2201      	movs	r2, #1
 800638e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2200      	movs	r2, #0
 800639c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800639e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3748      	adds	r7, #72	@ 0x48
 80063a6:	46bd      	mov	sp, r7
 80063a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ac:	03d09000 	.word	0x03d09000
 80063b0:	003d0900 	.word	0x003d0900
 80063b4:	08006b3c 	.word	0x08006b3c

080063b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01a      	beq.n	80064ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b6:	d10a      	bne.n	80064ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b098      	sub	sp, #96	@ 0x60
 8006500:	af02      	add	r7, sp, #8
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800650c:	f7fa fd6a 	bl	8000fe4 <HAL_GetTick>
 8006510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b08      	cmp	r3, #8
 800651e:	d12f      	bne.n	8006580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006528:	2200      	movs	r2, #0
 800652a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f88e 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d022      	beq.n	8006580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800654e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006558:	647b      	str	r3, [r7, #68]	@ 0x44
 800655a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800655e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006560:	e841 2300 	strex	r3, r2, [r1]
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1e6      	bne.n	800653a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e063      	b.n	8006648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b04      	cmp	r3, #4
 800658c:	d149      	bne.n	8006622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800658e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006596:	2200      	movs	r2, #0
 8006598:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f857 	bl	8006650 <UART_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d03c      	beq.n	8006622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	623b      	str	r3, [r7, #32]
   return(result);
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e6      	bne.n	80065a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	69b9      	ldr	r1, [r7, #24]
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	617b      	str	r3, [r7, #20]
   return(result);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e012      	b.n	8006648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3758      	adds	r7, #88	@ 0x58
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006660:	e04f      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d04b      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666a:	f7fa fcbb 	bl	8000fe4 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	429a      	cmp	r2, r3
 8006678:	d302      	bcc.n	8006680 <UART_WaitOnFlagUntilTimeout+0x30>
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e04e      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d037      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b80      	cmp	r3, #128	@ 0x80
 8006696:	d034      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b40      	cmp	r3, #64	@ 0x40
 800669c:	d031      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d110      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f839 	bl	800672c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2208      	movs	r2, #8
 80066be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e029      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066dc:	d111      	bne.n	8006702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f81f 	bl	800672c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e00f      	b.n	8006722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	429a      	cmp	r2, r3
 800671e:	d0a0      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b095      	sub	sp, #84	@ 0x54
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006752:	643b      	str	r3, [r7, #64]	@ 0x40
 8006754:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e6      	bne.n	8006734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	61fb      	str	r3, [r7, #28]
   return(result);
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	4b1e      	ldr	r3, [pc, #120]	@ (80067f4 <UART_EndRxTransfer+0xc8>)
 800677a:	4013      	ands	r3, r2
 800677c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3308      	adds	r3, #8
 8006784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800678c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d118      	bne.n	80067d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f023 0310 	bic.w	r3, r3, #16
 80067b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6979      	ldr	r1, [r7, #20]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	613b      	str	r3, [r7, #16]
   return(result);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067e8:	bf00      	nop
 80067ea:	3754      	adds	r7, #84	@ 0x54
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	effffffe 	.word	0xeffffffe

080067f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7fe ff4c 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	60bb      	str	r3, [r7, #8]
   return(result);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006840:	61fb      	str	r3, [r7, #28]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6979      	ldr	r1, [r7, #20]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	613b      	str	r3, [r7, #16]
   return(result);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7fe ff17 	bl	80056a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006872:	bf00      	nop
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_UARTEx_DisableFifoMode+0x16>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e027      	b.n	800691c <HAL_UARTEx_DisableFifoMode+0x66>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2224      	movs	r2, #36	@ 0x24
 80068d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80068fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800693c:	2302      	movs	r3, #2
 800693e:	e02d      	b.n	800699c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2224      	movs	r2, #36	@ 0x24
 800694c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f84f 	bl	8006a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e02d      	b.n	8006a18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2224      	movs	r2, #36	@ 0x24
 80069c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0201 	bic.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f811 	bl	8006a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d108      	bne.n	8006a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a40:	e031      	b.n	8006aa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a42:	2310      	movs	r3, #16
 8006a44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a46:	2310      	movs	r3, #16
 8006a48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	0e5b      	lsrs	r3, r3, #25
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	0f5b      	lsrs	r3, r3, #29
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	7b3a      	ldrb	r2, [r7, #12]
 8006a6e:	4911      	ldr	r1, [pc, #68]	@ (8006ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8006a70:	5c8a      	ldrb	r2, [r1, r2]
 8006a72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a76:	7b3a      	ldrb	r2, [r7, #12]
 8006a78:	490f      	ldr	r1, [pc, #60]	@ (8006ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8006a7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	7b7a      	ldrb	r2, [r7, #13]
 8006a8c:	4909      	ldr	r1, [pc, #36]	@ (8006ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8006a8e:	5c8a      	ldrb	r2, [r1, r2]
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a94:	7b7a      	ldrb	r2, [r7, #13]
 8006a96:	4908      	ldr	r1, [pc, #32]	@ (8006ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8006a98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	08006b54 	.word	0x08006b54
 8006ab8:	08006b5c 	.word	0x08006b5c

08006abc <memset>:
 8006abc:	4402      	add	r2, r0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d100      	bne.n	8006ac6 <memset+0xa>
 8006ac4:	4770      	bx	lr
 8006ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aca:	e7f9      	b.n	8006ac0 <memset+0x4>

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	@ (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	@ (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	@ (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f000 f818 	bl	8006b14 <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08006b6c 	.word	0x08006b6c
 8006b08:	08006b6c 	.word	0x08006b6c
 8006b0c:	08006b6c 	.word	0x08006b6c
 8006b10:	08006b70 	.word	0x08006b70

08006b14 <_init>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr

08006b20 <_fini>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	bf00      	nop
 8006b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b26:	bc08      	pop	{r3}
 8006b28:	469e      	mov	lr, r3
 8006b2a:	4770      	bx	lr
