
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad8c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800b058  0800b058  0000c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0a0  0800b0a0  0000c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b0a8  0800b0a8  0000c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b0ac  0800b0ac  0000c0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800b0b0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003bc  24000014  0800b0c4  0000d014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003d0  0800b0c4  0000d3d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001da0d  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000320d  00000000  00000000  0002aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013f0  00000000  00000000  0002dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f8a  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f17  00000000  00000000  0002ffda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b28d  00000000  00000000  00063ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001522d3  00000000  00000000  0007f17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d1451  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005538  00000000  00000000  001d1494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001d69cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b040 	.word	0x0800b040

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800b040 	.word	0x0800b040

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZN7TMC2209C1Ev>:
// https://github.com/janelia-arduino/TMC2209
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "utils.h"

TMC2209::TMC2209() {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2203      	movs	r2, #3
 8000608:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
	cool_step_enabled_ = false;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
}
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b0e8      	sub	sp, #416	@ 0x1a0
 8000628:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 800062a:	f000 fc7b 	bl	8000f24 <_ZL10MPU_Configv>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800062e:	f000 ffc7 	bl	80015c0 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000632:	f000 f8ad 	bl	8000790 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000636:	f000 faf3 	bl	8000c20 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 800063a:	f000 fab9 	bl	8000bb0 <_ZL11MX_DMA_Initv>
	MX_UART8_Init();
 800063e:	f000 f9f7 	bl	8000a30 <_ZL13MX_UART8_Initv>
	MX_USART2_UART_Init();
 8000642:	f000 fa55 	bl	8000af0 <_ZL19MX_USART2_UART_Initv>
	MX_CRC_Init();
 8000646:	f000 f921 	bl	800088c <_ZL11MX_CRC_Initv>
	MX_TIM2_Init();
 800064a:	f000 f963 	bl	8000914 <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */
	/* Peripheral Configuration */
	TMC2209 tmcX;
 800064e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffd2 	bl	80005fc <_ZN7TMC2209C1Ev>
	tmcX.serial_address = huart2;
 8000658:	4a43      	ldr	r2, [pc, #268]	@ (8000768 <main+0x144>)
 800065a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800065e:	4611      	mov	r1, r2
 8000660:	2294      	movs	r2, #148	@ 0x94
 8000662:	4618      	mov	r0, r3
 8000664:	f00a fcde 	bl	800b024 <memcpy>
	tmcX.hardware_enable_port = X_EN_GPIO_Port;
 8000668:	4b40      	ldr	r3, [pc, #256]	@ (800076c <main+0x148>)
 800066a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
	tmcX.hardware_enable_pin = X_EN_Pin;
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	f8a7 316c 	strh.w	r3, [r7, #364]	@ 0x16c
	TMC2209 tmcZ;
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffbf 	bl	80005fc <_ZN7TMC2209C1Ev>
	tmcZ.serial_address = huart8;
 800067e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000682:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000686:	4a3a      	ldr	r2, [pc, #232]	@ (8000770 <main+0x14c>)
 8000688:	4618      	mov	r0, r3
 800068a:	4611      	mov	r1, r2
 800068c:	2394      	movs	r3, #148	@ 0x94
 800068e:	461a      	mov	r2, r3
 8000690:	f00a fcc8 	bl	800b024 <memcpy>
	tmcZ.hardware_enable_port = Z_EN_GPIO_Port;
 8000694:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000698:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800069c:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <main+0x150>)
 800069e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	tmcZ.hardware_enable_pin = Z_EN_Pin;
 80006a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80006aa:	2201      	movs	r2, #1
 80006ac:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	/* CLK Configuration */
	HAL_TIM_Base_Start_IT(&htim2);
 80006b0:	4831      	ldr	r0, [pc, #196]	@ (8000778 <main+0x154>)
 80006b2:	f007 f9b1 	bl	8007a18 <HAL_TIM_Base_Start_IT>

	/* GPIO Configuration */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	@ 0x40
 80006ba:	482c      	ldr	r0, [pc, #176]	@ (800076c <main+0x148>)
 80006bc:	f004 fba4 	bl	8004e08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 80006c0:	2200      	movs	r2, #0
 80006c2:	2101      	movs	r1, #1
 80006c4:	482b      	ldr	r0, [pc, #172]	@ (8000774 <main+0x150>)
 80006c6:	f004 fb9f 	bl	8004e08 <HAL_GPIO_WritePin>

	/* UART Configuration */
	HAL_HalfDuplex_EnableReceiver(&huart2);
 80006ca:	4827      	ldr	r0, [pc, #156]	@ (8000768 <main+0x144>)
 80006cc:	f008 ffb4 	bl	8009638 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 16);
 80006d0:	2210      	movs	r2, #16
 80006d2:	492a      	ldr	r1, [pc, #168]	@ (800077c <main+0x158>)
 80006d4:	4824      	ldr	r0, [pc, #144]	@ (8000768 <main+0x144>)
 80006d6:	f00a fbd7 	bl	800ae88 <HAL_UARTEx_ReceiveToIdle_DMA>

	//########################### Uart X (Uart2)
	uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
 80006da:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80006e2:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <main+0x15c>)
 80006e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
 80006ec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006f0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80006f4:	4a23      	ldr	r2, [pc, #140]	@ (8000784 <main+0x160>)
 80006f6:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 80006f8:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <main+0x164>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
			if (0 /*Move_To_Pos((uint16_t*)HomePos)*/)
				Error_Handler();
		}
		//*********************************************************************************************
		//TODO UART in seperate Datei
		write[7] = HAL_CRC_Calculate(&hcrc, (uint32_t*) write, sizeof(write) - 1);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2207      	movs	r2, #7
 8000706:	4619      	mov	r1, r3
 8000708:	4820      	ldr	r0, [pc, #128]	@ (800078c <main+0x168>)
 800070a:	f001 f9fb 	bl	8001b04 <HAL_CRC_Calculate>
 800070e:	4603      	mov	r3, r0
 8000710:	b2da      	uxtb	r2, r3
 8000712:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000716:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800071a:	71da      	strb	r2, [r3, #7]
		read[3] = HAL_CRC_Calculate(&hcrc, (uint32_t*) read, sizeof(read) - 1);
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2203      	movs	r2, #3
 8000720:	4619      	mov	r1, r3
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <main+0x168>)
 8000724:	f001 f9ee 	bl	8001b04 <HAL_CRC_Calculate>
 8000728:	4603      	mov	r3, r0
 800072a:	b2da      	uxtb	r2, r3
 800072c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000730:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000734:	70da      	strb	r2, [r3, #3]
		//*********************************************************************************************
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000736:	480c      	ldr	r0, [pc, #48]	@ (8000768 <main+0x144>)
 8000738:	f008 ff2a 	bl	8009590 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, write, sizeof(write));
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2208      	movs	r2, #8
 8000742:	4619      	mov	r1, r3
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <main+0x144>)
 8000746:	f008 fac1 	bl	8008ccc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000);
 800074a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074e:	f000 ffc9 	bl	80016e4 <HAL_Delay>
		HAL_UART_Transmit_DMA(&huart2, read, sizeof(read));
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2204      	movs	r2, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4803      	ldr	r0, [pc, #12]	@ (8000768 <main+0x144>)
 800075a:	f008 fab7 	bl	8008ccc <HAL_UART_Transmit_DMA>
		//HAL_HalfDuplex_EnableReceiver(&huart2);
		HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000762:	f000 ffbf 	bl	80016e4 <HAL_Delay>
		if (BatteryAlarm) {
 8000766:	e7c7      	b.n	80006f8 <main+0xd4>
 8000768:	24000134 	.word	0x24000134
 800076c:	58020c00 	.word	0x58020c00
 8000770:	240000a0 	.word	0x240000a0
 8000774:	58021000 	.word	0x58021000
 8000778:	24000054 	.word	0x24000054
 800077c:	240003a8 	.word	0x240003a8
 8000780:	0800b058 	.word	0x0800b058
 8000784:	8f020005 	.word	0x8f020005
 8000788:	240003b8 	.word	0x240003b8
 800078c:	24000030 	.word	0x24000030

08000790 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b09c      	sub	sp, #112	@ 0x70
 8000794:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079a:	224c      	movs	r2, #76	@ 0x4c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f00a fc14 	bl	800afcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2220      	movs	r2, #32
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00a fc0e 	bl	800afcc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f004 fb77 	bl	8004ea4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <_Z18SystemClock_Configv+0xf8>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <_Z18SystemClock_Configv+0xf8>)
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c4:	6193      	str	r3, [r2, #24]
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <_Z18SystemClock_Configv+0xf8>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80007d2:	bf00      	nop
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <_Z18SystemClock_Configv+0xf8>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f3      	bne.n	80007d4 <_Z18SystemClock_Configv+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80007f4:	2340      	movs	r3, #64	@ 0x40
 80007f6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 8000804:	2322      	movs	r3, #34	@ 0x22
 8000806:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800080c:	2303      	movs	r3, #3
 800080e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000814:	230c      	movs	r3, #12
 8000816:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000818:	2300      	movs	r3, #0
 800081a:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800081c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000820:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fb76 	bl	8004f18 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <_Z18SystemClock_Configv+0xb0>
		Error_Handler();
 800083c:	f000 fb9e 	bl	8000f7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000840:	233f      	movs	r3, #63	@ 0x3f
 8000842:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2303      	movs	r3, #3
 8000846:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800084c:	2308      	movs	r3, #8
 800084e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000850:	2340      	movs	r3, #64	@ 0x40
 8000852:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000854:	2340      	movs	r3, #64	@ 0x40
 8000856:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800085e:	2340      	movs	r3, #64	@ 0x40
 8000860:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2103      	movs	r1, #3
 8000866:	4618      	mov	r0, r3
 8000868:	f004 ff30 	bl	80056cc <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 800087c:	f000 fb7e 	bl	8000f7c <Error_Handler>
	}
}
 8000880:	bf00      	nop
 8000882:	3770      	adds	r7, #112	@ 0x70
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024800 	.word	0x58024800

0800088c <_ZL11MX_CRC_Initv>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <_ZL11MX_CRC_Initv+0x7c>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <_ZL11MX_CRC_Initv+0x7c>)
 800089a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <_ZL11MX_CRC_Initv+0x7c>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008b2:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <_ZL11MX_CRC_Initv+0x84>)
 80008b4:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008be:	2201      	movs	r2, #1
 80008c0:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 80008c2:	4b12      	ldr	r3, [pc, #72]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008d6:	2220      	movs	r2, #32
 80008d8:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80008e6:	4809      	ldr	r0, [pc, #36]	@ (800090c <_ZL11MX_CRC_Initv+0x80>)
 80008e8:	f001 f8a8 	bl	8001a3c <HAL_CRC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <_ZL11MX_CRC_Initv+0x74>
		Error_Handler();
 80008fc:	f000 fb3e 	bl	8000f7c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58024400 	.word	0x58024400
 800090c:	24000030 	.word	0x24000030
 8000910:	58024c00 	.word	0x58024c00

08000914 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	@ 0x38
 8000918:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800091a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000946:	4b39      	ldr	r3, [pc, #228]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 800094e:	4b37      	ldr	r3, [pc, #220]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000950:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000954:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 800095c:	4b33      	ldr	r3, [pc, #204]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 800095e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000962:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b30      	ldr	r3, [pc, #192]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000970:	482e      	ldr	r0, [pc, #184]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000972:	f006 fff9 	bl	8007968 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <_ZL12MX_TIM2_Initv+0x76>
		Error_Handler();
 8000986:	f000 faf9 	bl	8000f7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000990:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000994:	4619      	mov	r1, r3
 8000996:	4825      	ldr	r0, [pc, #148]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000998:	f007 fb40 	bl	800801c <HAL_TIM_ConfigClockSource>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	bf14      	ite	ne
 80009a2:	2301      	movne	r3, #1
 80009a4:	2300      	moveq	r3, #0
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <_ZL12MX_TIM2_Initv+0x9c>
		Error_Handler();
 80009ac:	f000 fae6 	bl	8000f7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009b0:	481e      	ldr	r0, [pc, #120]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 80009b2:	f007 f8b7 	bl	8007b24 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_ZL12MX_TIM2_Initv+0xb6>
		Error_Handler();
 80009c6:	f000 fad9 	bl	8000f7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 80009da:	f008 f865 	bl	8008aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_ZL12MX_TIM2_Initv+0xde>
		Error_Handler();
 80009ee:	f000 fac5 	bl	8000f7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	@ 0x60
 80009f4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 80009f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009fa:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <_ZL12MX_TIM2_Initv+0x118>)
 8000a0c:	f007 f9f2 	bl	8007df4 <HAL_TIM_PWM_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf14      	ite	ne
 8000a16:	2301      	movne	r3, #1
 8000a18:	2300      	moveq	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <_ZL12MX_TIM2_Initv+0x110>
		Error_Handler();
 8000a20:	f000 faac 	bl	8000f7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	@ 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	24000054 	.word	0x24000054

08000a30 <_ZL13MX_UART8_Initv>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a36:	4a2d      	ldr	r2, [pc, #180]	@ (8000aec <_ZL13MX_UART8_Initv+0xbc>)
 8000a38:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK) {
 8000a78:	481b      	ldr	r0, [pc, #108]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a7a:	f008 f8cf 	bl	8008c1c <HAL_HalfDuplex_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bf14      	ite	ne
 8000a84:	2301      	movne	r3, #1
 8000a86:	2300      	moveq	r3, #0
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <_ZL13MX_UART8_Initv+0x62>
		Error_Handler();
 8000a8e:	f000 fa75 	bl	8000f7c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4814      	ldr	r0, [pc, #80]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000a96:	f00a f97b 	bl	800ad90 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf14      	ite	ne
 8000aa0:	2301      	movne	r3, #1
 8000aa2:	2300      	moveq	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <_ZL13MX_UART8_Initv+0x7e>
		Error_Handler();
 8000aaa:	f000 fa67 	bl	8000f7c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000ab2:	f00a f9ab 	bl	800ae0c <HAL_UARTEx_SetRxFifoThreshold>
 8000ab6:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <_ZL13MX_UART8_Initv+0x9a>
		Error_Handler();
 8000ac6:	f000 fa59 	bl	8000f7c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 8000aca:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <_ZL13MX_UART8_Initv+0xb8>)
 8000acc:	f00a f927 	bl	800ad1e <HAL_UARTEx_DisableFifoMode>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <_ZL13MX_UART8_Initv+0xb4>
		Error_Handler();
 8000ae0:	f000 fa4c 	bl	8000f7c <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240000a0 	.word	0x240000a0
 8000aec:	40007c00 	.word	0x40007c00

08000af0 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000af6:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000af8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b21      	ldr	r3, [pc, #132]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8000b38:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b3a:	f008 f86f 	bl	8008c1c <HAL_HalfDuplex_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf14      	ite	ne
 8000b44:	2301      	movne	r3, #1
 8000b46:	2300      	moveq	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <_ZL19MX_USART2_UART_Initv+0x62>
		Error_Handler();
 8000b4e:	f000 fa15 	bl	8000f7c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000b52:	2100      	movs	r1, #0
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b56:	f00a f91b 	bl	800ad90 <HAL_UARTEx_SetTxFifoThreshold>
 8000b5a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf14      	ite	ne
 8000b60:	2301      	movne	r3, #1
 8000b62:	2300      	moveq	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <_ZL19MX_USART2_UART_Initv+0x7e>
		Error_Handler();
 8000b6a:	f000 fa07 	bl	8000f7c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b72:	f00a f94b 	bl	800ae0c <HAL_UARTEx_SetRxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf14      	ite	ne
 8000b7c:	2301      	movne	r3, #1
 8000b7e:	2300      	moveq	r3, #0
 8000b80:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <_ZL19MX_USART2_UART_Initv+0x9a>
		Error_Handler();
 8000b86:	f000 f9f9 	bl	8000f7c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000b8a:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b8c:	f00a f8c7 	bl	800ad1e <HAL_UARTEx_DisableFifoMode>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <_ZL19MX_USART2_UART_Initv+0xb4>
		Error_Handler();
 8000ba0:	f000 f9ec 	bl	8000f7c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000134 	.word	0x24000134
 8000bac:	40004400 	.word	0x40004400

08000bb0 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <_ZL11MX_DMA_Initv+0x6c>)
 8000bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bbc:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <_ZL11MX_DMA_Initv+0x6c>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <_ZL11MX_DMA_Initv+0x6c>)
 8000bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	200b      	movs	r0, #11
 8000bda:	f000 fe82 	bl	80018e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bde:	200b      	movs	r0, #11
 8000be0:	f000 fe99 	bl	8001916 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	200c      	movs	r0, #12
 8000bea:	f000 fe7a 	bl	80018e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bee:	200c      	movs	r0, #12
 8000bf0:	f000 fe91 	bl	8001916 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	200d      	movs	r0, #13
 8000bfa:	f000 fe72 	bl	80018e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bfe:	200d      	movs	r0, #13
 8000c00:	f000 fe89 	bl	8001916 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	200e      	movs	r0, #14
 8000c0a:	f000 fe6a 	bl	80018e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c0e:	200e      	movs	r0, #14
 8000c10:	f000 fe81 	bl	8001916 <HAL_NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400

08000c20 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4b52      	ldr	r3, [pc, #328]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3c:	4a50      	ldr	r2, [pc, #320]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c46:	4b4e      	ldr	r3, [pc, #312]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4b4a      	ldr	r3, [pc, #296]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5a:	4a49      	ldr	r2, [pc, #292]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c64:	4b46      	ldr	r3, [pc, #280]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b43      	ldr	r3, [pc, #268]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c78:	4a41      	ldr	r2, [pc, #260]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c82:	4b3f      	ldr	r3, [pc, #252]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b3b      	ldr	r3, [pc, #236]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c96:	4a3a      	ldr	r2, [pc, #232]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca0:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <_ZL12MX_GPIO_Initv+0x160>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin | Z_DIR_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210c      	movs	r1, #12
 8000cb2:	4834      	ldr	r0, [pc, #208]	@ (8000d84 <_ZL12MX_GPIO_Initv+0x164>)
 8000cb4:	f004 f8a8 	bl	8004e08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin | X_STEP_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2118      	movs	r1, #24
 8000cbc:	4832      	ldr	r0, [pc, #200]	@ (8000d88 <_ZL12MX_GPIO_Initv+0x168>)
 8000cbe:	f004 f8a3 	bl	8004e08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2140      	movs	r1, #64	@ 0x40
 8000cc6:	4830      	ldr	r0, [pc, #192]	@ (8000d88 <_ZL12MX_GPIO_Initv+0x168>)
 8000cc8:	f004 f89e 	bl	8004e08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2108      	movs	r1, #8
 8000cd0:	482e      	ldr	r0, [pc, #184]	@ (8000d8c <_ZL12MX_GPIO_Initv+0x16c>)
 8000cd2:	f004 f899 	bl	8004e08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2101      	movs	r1, #1
 8000cda:	482a      	ldr	r0, [pc, #168]	@ (8000d84 <_ZL12MX_GPIO_Initv+0x164>)
 8000cdc:	f004 f894 	bl	8004e08 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin | Z_DIR_Pin | Z_EN_Pin;
 8000ce0:	230d      	movs	r3, #13
 8000ce2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4823      	ldr	r0, [pc, #140]	@ (8000d84 <_ZL12MX_GPIO_Initv+0x164>)
 8000cf8:	f003 fede 	bl	8004ab8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8000cfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	481f      	ldr	r0, [pc, #124]	@ (8000d90 <_ZL12MX_GPIO_Initv+0x170>)
 8000d14:	f003 fed0 	bl	8004ab8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin | X_MIN_Pin;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4819      	ldr	r0, [pc, #100]	@ (8000d90 <_ZL12MX_GPIO_Initv+0x170>)
 8000d2c:	f003 fec4 	bl	8004ab8 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin | X_STEP_Pin | X_EN_Pin;
 8000d30:	2358      	movs	r3, #88	@ 0x58
 8000d32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4810      	ldr	r0, [pc, #64]	@ (8000d88 <_ZL12MX_GPIO_Initv+0x168>)
 8000d48:	f003 feb6 	bl	8004ab8 <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <_ZL12MX_GPIO_Initv+0x16c>)
 8000d64:	f003 fea8 	bl	8004ab8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2028      	movs	r0, #40	@ 0x28
 8000d6e:	f000 fdb8 	bl	80018e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d72:	2028      	movs	r0, #40	@ 0x28
 8000d74:	f000 fdcf 	bl	8001916 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58021000 	.word	0x58021000
 8000d88:	58020c00 	.word	0x58020c00
 8000d8c:	58020400 	.word	0x58020400
 8000d90:	58020800 	.word	0x58020800

08000d94 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO External Interrupt Callback Function
 * @param GPIO_Pin GPIO-Pin with active Interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000da4:	d102      	bne.n	8000dac <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
	}
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	240003b8 	.word	0x240003b8

08000dbc <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer External Interrupt Callback Function
 * @param htim Pointer to Timer with elapsed Timer Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dcc:	d150      	bne.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (PWMEnabledX) {
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	bf14      	ite	ne
 8000dd8:	2301      	movne	r3, #1
 8000dda:	2300      	moveq	r3, #0
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d046      	beq.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0xb4>
			PWMCounterX++;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000dee:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	bf2c      	ite	cs
 8000e00:	2301      	movcs	r3, #1
 8000e02:	2300      	movcc	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x5e>
				PWMCounterX = 0;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e18:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	429a      	cmp	r2, r3
 8000e28:	bf34      	ite	cc
 8000e2a:	2301      	movcc	r3, #1
 8000e2c:	2300      	movcs	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x84>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2110      	movs	r1, #16
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e3a:	f003 ffe5 	bl	8004e08 <HAL_GPIO_WritePin>
 8000e3e:	e004      	b.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2110      	movs	r1, #16
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e46:	f003 ffdf 	bl	8004e08 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b10      	ldr	r3, [pc, #64]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	bf2c      	ite	cs
 8000e56:	2301      	movcs	r3, #1
 8000e58:	2300      	movcc	r3, #0
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0xb4>
				PWMEnabledX = false;
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2110      	movs	r1, #16
 8000e6a:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e6c:	f003 ffcc 	bl	8004e08 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240003c8 	.word	0x240003c8
 8000e7c:	240003c0 	.word	0x240003c0
 8000e80:	24000000 	.word	0x24000000
 8000e84:	240003bc 	.word	0x240003bc
 8000e88:	24000002 	.word	0x24000002
 8000e8c:	58020c00 	.word	0x58020c00
 8000e90:	240003c4 	.word	0x240003c4

08000e94 <HAL_UART_TxCpltCallback>:
/**
 * @brief UART Transmitt Completed Callback Function
 * @param huart Pointer to UART with completed Transmitt
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_UART_TxCpltCallback+0x30>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d102      	bne.n	8000eac <HAL_UART_TxCpltCallback+0x18>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 8000ea6:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <HAL_UART_TxCpltCallback+0x34>)
 8000ea8:	f008 fbc6 	bl	8009638 <HAL_HalfDuplex_EnableReceiver>
	}
	if (huart->Instance == UART8) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_UART_TxCpltCallback+0x38>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d102      	bne.n	8000ebc <HAL_UART_TxCpltCallback+0x28>
		HAL_HalfDuplex_EnableReceiver(&huart8);
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <HAL_UART_TxCpltCallback+0x3c>)
 8000eb8:	f008 fbbe 	bl	8009638 <HAL_HalfDuplex_EnableReceiver>
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	24000134 	.word	0x24000134
 8000ecc:	40007c00 	.word	0x40007c00
 8000ed0:	240000a0 	.word	0x240000a0

08000ed4 <HAL_UARTEx_RxEventCallback>:
 * @brief UART Recive Completed Callback Function
 * @param huart Pointer to UART with recived data
 * @param Size Size of the recived data
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d104      	bne.n	8000ef4 <HAL_UARTEx_RxEventCallback+0x20>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 16);
 8000eea:	2210      	movs	r2, #16
 8000eec:	4909      	ldr	r1, [pc, #36]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0x40>)
 8000eee:	480a      	ldr	r0, [pc, #40]	@ (8000f18 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ef0:	f009 ffca 	bl	800ae88 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
	if (huart->Instance == UART8) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <HAL_UARTEx_RxEventCallback+0x48>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d104      	bne.n	8000f08 <HAL_UARTEx_RxEventCallback+0x34>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart8, rxDatagram, 16);
 8000efe:	2210      	movs	r2, #16
 8000f00:	4904      	ldr	r1, [pc, #16]	@ (8000f14 <HAL_UARTEx_RxEventCallback+0x40>)
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000f04:	f009 ffc0 	bl	800ae88 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40004400 	.word	0x40004400
 8000f14:	240003a8 	.word	0x240003a8
 8000f18:	24000134 	.word	0x24000134
 8000f1c:	40007c00 	.word	0x40007c00
 8000f20:	240000a0 	.word	0x240000a0

08000f24 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000f36:	f000 fd09 	bl	800194c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f46:	231f      	movs	r3, #31
 8000f48:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000f4a:	2387      	movs	r3, #135	@ 0x87
 8000f4c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f52:	2300      	movs	r3, #0
 8000f54:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f66:	463b      	mov	r3, r7
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fd27 	bl	80019bc <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f000 fd04 	bl	800197c <HAL_MPU_Enable>

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000f84:	2108      	movs	r1, #8
 8000f86:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <Error_Handler+0x1c>)
 8000f88:	f003 ff57 	bl	8004e3a <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	@ 0x64
 8000f8e:	f000 fba9 	bl	80016e4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000f92:	bf00      	nop
 8000f94:	e7f6      	b.n	8000f84 <Error_Handler+0x8>
 8000f96:	bf00      	nop
 8000f98:	58020400 	.word	0x58020400

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_MspInit+0x30>)
 8000fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <HAL_MspInit+0x30>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_MspInit+0x30>)
 8000fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <HAL_CRC_MspInit+0x3c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10e      	bne.n	8001000 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_CRC_MspInit+0x40>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <HAL_CRC_MspInit+0x40>)
 8000fea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <HAL_CRC_MspInit+0x40>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	58024c00 	.word	0x58024c00
 8001010:	58024400 	.word	0x58024400

08001014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001024:	d116      	bne.n	8001054 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_TIM_Base_MspInit+0x48>)
 8001028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <HAL_TIM_Base_MspInit+0x48>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_TIM_Base_MspInit+0x48>)
 8001038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	201c      	movs	r0, #28
 800104a:	f000 fc4a 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800104e:	201c      	movs	r0, #28
 8001050:	f000 fc61 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	58024400 	.word	0x58024400

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0ba      	sub	sp, #232	@ 0xe8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	22b8      	movs	r2, #184	@ 0xb8
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f009 ffa3 	bl	800afcc <memset>
  if(huart->Instance==UART8)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4ab0      	ldr	r2, [pc, #704]	@ (800134c <HAL_UART_MspInit+0x2ec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	f040 80aa 	bne.w	80011e6 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001092:	f04f 0202 	mov.w	r2, #2
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 fe9b 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80010b4:	f7ff ff62 	bl	8000f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80010b8:	4ba5      	ldr	r3, [pc, #660]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 80010ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010be:	4aa4      	ldr	r2, [pc, #656]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 80010ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a9c      	ldr	r2, [pc, #624]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 80010de:	f043 0310 	orr.w	r3, r3, #16
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b9a      	ldr	r3, [pc, #616]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800110c:	2308      	movs	r3, #8
 800110e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001116:	4619      	mov	r1, r3
 8001118:	488e      	ldr	r0, [pc, #568]	@ (8001354 <HAL_UART_MspInit+0x2f4>)
 800111a:	f003 fccd 	bl	8004ab8 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 800111e:	4b8e      	ldr	r3, [pc, #568]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001120:	4a8e      	ldr	r2, [pc, #568]	@ (800135c <HAL_UART_MspInit+0x2fc>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001124:	4b8c      	ldr	r3, [pc, #560]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001126:	2252      	movs	r2, #82	@ 0x52
 8001128:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	4b8b      	ldr	r3, [pc, #556]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 800112c:	2240      	movs	r2, #64	@ 0x40
 800112e:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b89      	ldr	r3, [pc, #548]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b88      	ldr	r3, [pc, #544]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113c:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113e:	4b86      	ldr	r3, [pc, #536]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001144:	4b84      	ldr	r3, [pc, #528]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 800114a:	4b83      	ldr	r3, [pc, #524]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001150:	4b81      	ldr	r3, [pc, #516]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001156:	4b80      	ldr	r3, [pc, #512]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 800115c:	487e      	ldr	r0, [pc, #504]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 800115e:	f000 fe73 	bl	8001e48 <HAL_DMA_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001168:	f7ff ff08 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a7a      	ldr	r2, [pc, #488]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001170:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001172:	4a79      	ldr	r2, [pc, #484]	@ (8001358 <HAL_UART_MspInit+0x2f8>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8001178:	4b79      	ldr	r3, [pc, #484]	@ (8001360 <HAL_UART_MspInit+0x300>)
 800117a:	4a7a      	ldr	r2, [pc, #488]	@ (8001364 <HAL_UART_MspInit+0x304>)
 800117c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800117e:	4b78      	ldr	r3, [pc, #480]	@ (8001360 <HAL_UART_MspInit+0x300>)
 8001180:	2251      	movs	r2, #81	@ 0x51
 8001182:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001184:	4b76      	ldr	r3, [pc, #472]	@ (8001360 <HAL_UART_MspInit+0x300>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118a:	4b75      	ldr	r3, [pc, #468]	@ (8001360 <HAL_UART_MspInit+0x300>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001190:	4b73      	ldr	r3, [pc, #460]	@ (8001360 <HAL_UART_MspInit+0x300>)
 8001192:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001196:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001198:	4b71      	ldr	r3, [pc, #452]	@ (8001360 <HAL_UART_MspInit+0x300>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119e:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80011a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80011b6:	486a      	ldr	r0, [pc, #424]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011b8:	f000 fe46 	bl	8001e48 <HAL_DMA_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80011c2:	f7ff fedb 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a65      	ldr	r2, [pc, #404]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011ce:	4a64      	ldr	r2, [pc, #400]	@ (8001360 <HAL_UART_MspInit+0x300>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2053      	movs	r0, #83	@ 0x53
 80011da:	f000 fb82 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80011de:	2053      	movs	r0, #83	@ 0x53
 80011e0:	f000 fb99 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011e4:	e0ae      	b.n	8001344 <HAL_UART_MspInit+0x2e4>
  else if(huart->Instance==USART2)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001368 <HAL_UART_MspInit+0x308>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f040 80a9 	bne.w	8001344 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011f2:	f04f 0202 	mov.w	r2, #2
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f004 fdeb 	bl	8005de4 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001214:	f7ff feb2 	bl	8000f7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001218:	4b4d      	ldr	r3, [pc, #308]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 800121a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800121e:	4a4c      	ldr	r2, [pc, #304]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 8001220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001224:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001228:	4b49      	ldr	r3, [pc, #292]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 800122a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	4a44      	ldr	r2, [pc, #272]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001246:	4b42      	ldr	r3, [pc, #264]	@ (8001350 <HAL_UART_MspInit+0x2f0>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8001254:	2320      	movs	r3, #32
 8001256:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126c:	2307      	movs	r3, #7
 800126e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001276:	4619      	mov	r1, r3
 8001278:	483c      	ldr	r0, [pc, #240]	@ (800136c <HAL_UART_MspInit+0x30c>)
 800127a:	f003 fc1d 	bl	8004ab8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 800127e:	4b3c      	ldr	r3, [pc, #240]	@ (8001370 <HAL_UART_MspInit+0x310>)
 8001280:	4a3c      	ldr	r2, [pc, #240]	@ (8001374 <HAL_UART_MspInit+0x314>)
 8001282:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <HAL_UART_MspInit+0x310>)
 8001286:	222c      	movs	r2, #44	@ 0x2c
 8001288:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128a:	4b39      	ldr	r3, [pc, #228]	@ (8001370 <HAL_UART_MspInit+0x310>)
 800128c:	2240      	movs	r2, #64	@ 0x40
 800128e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001290:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HAL_UART_MspInit+0x310>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <HAL_UART_MspInit+0x310>)
 8001298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129e:	4b34      	ldr	r3, [pc, #208]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012aa:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012bc:	482c      	ldr	r0, [pc, #176]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012be:	f000 fdc3 	bl	8001e48 <HAL_DMA_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80012c8:	f7ff fe58 	bl	8000f7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a28      	ldr	r2, [pc, #160]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012d0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80012d2:	4a27      	ldr	r2, [pc, #156]	@ (8001370 <HAL_UART_MspInit+0x310>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <HAL_UART_MspInit+0x318>)
 80012da:	4a28      	ldr	r2, [pc, #160]	@ (800137c <HAL_UART_MspInit+0x31c>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <HAL_UART_MspInit+0x318>)
 80012e0:	222b      	movs	r2, #43	@ 0x2b
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e4:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_UART_MspInit+0x318>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_UART_MspInit+0x318>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_UART_MspInit+0x318>)
 80012f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <HAL_UART_MspInit+0x318>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <HAL_UART_MspInit+0x318>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001304:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_UART_MspInit+0x318>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800130a:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_UART_MspInit+0x318>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_UART_MspInit+0x318>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001316:	4818      	ldr	r0, [pc, #96]	@ (8001378 <HAL_UART_MspInit+0x318>)
 8001318:	f000 fd96 	bl	8001e48 <HAL_DMA_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 8001322:	f7ff fe2b 	bl	8000f7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <HAL_UART_MspInit+0x318>)
 800132a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_UART_MspInit+0x318>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2026      	movs	r0, #38	@ 0x26
 800133a:	f000 fad2 	bl	80018e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800133e:	2026      	movs	r0, #38	@ 0x26
 8001340:	f000 fae9 	bl	8001916 <HAL_NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	37e8      	adds	r7, #232	@ 0xe8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40007c00 	.word	0x40007c00
 8001350:	58024400 	.word	0x58024400
 8001354:	58021000 	.word	0x58021000
 8001358:	240001c8 	.word	0x240001c8
 800135c:	40020040 	.word	0x40020040
 8001360:	24000240 	.word	0x24000240
 8001364:	40020058 	.word	0x40020058
 8001368:	40004400 	.word	0x40004400
 800136c:	58020c00 	.word	0x58020c00
 8001370:	240002b8 	.word	0x240002b8
 8001374:	40020010 	.word	0x40020010
 8001378:	24000330 	.word	0x24000330
 800137c:	40020028 	.word	0x40020028

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <NMI_Handler+0x4>

08001388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <MemManage_Handler+0x4>

08001398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f965 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Stream0_IRQHandler+0x10>)
 80013e6:	f002 f855 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	240002b8 	.word	0x240002b8

080013f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Stream1_IRQHandler+0x10>)
 80013fa:	f002 f84b 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24000330 	.word	0x24000330

08001408 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <DMA1_Stream2_IRQHandler+0x10>)
 800140e:	f002 f841 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240001c8 	.word	0x240001c8

0800141c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <DMA1_Stream3_IRQHandler+0x10>)
 8001422:	f002 f837 	bl	8003494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	24000240 	.word	0x24000240

08001430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <TIM2_IRQHandler+0x10>)
 8001436:	f006 fbd6 	bl	8007be6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	24000054 	.word	0x24000054

08001444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001448:	4802      	ldr	r0, [pc, #8]	@ (8001454 <USART2_IRQHandler+0x10>)
 800144a:	f007 fcbf 	bl	8008dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000134 	.word	0x24000134

08001458 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 800145c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001460:	f003 fd05 	bl	8004e6e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <UART8_IRQHandler+0x10>)
 800146e:	f007 fcad 	bl	8008dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	240000a0 	.word	0x240000a0

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <SystemInit+0xd0>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	4a31      	ldr	r2, [pc, #196]	@ (800154c <SystemInit+0xd0>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001490:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <SystemInit+0xd4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	2b06      	cmp	r3, #6
 800149a:	d807      	bhi.n	80014ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800149c:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <SystemInit+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 030f 	bic.w	r3, r3, #15
 80014a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001550 <SystemInit+0xd4>)
 80014a6:	f043 0307 	orr.w	r3, r3, #7
 80014aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014ac:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <SystemInit+0xd8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a28      	ldr	r2, [pc, #160]	@ (8001554 <SystemInit+0xd8>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <SystemInit+0xd8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014be:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <SystemInit+0xd8>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4924      	ldr	r1, [pc, #144]	@ (8001554 <SystemInit+0xd8>)
 80014c4:	4b24      	ldr	r3, [pc, #144]	@ (8001558 <SystemInit+0xdc>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <SystemInit+0xd4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <SystemInit+0xd4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 030f 	bic.w	r3, r3, #15
 80014de:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <SystemInit+0xd4>)
 80014e0:	f043 0307 	orr.w	r3, r3, #7
 80014e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <SystemInit+0xd8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <SystemInit+0xd8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <SystemInit+0xd8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <SystemInit+0xd8>)
 80014fa:	4a18      	ldr	r2, [pc, #96]	@ (800155c <SystemInit+0xe0>)
 80014fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <SystemInit+0xd8>)
 8001500:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <SystemInit+0xe4>)
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <SystemInit+0xd8>)
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <SystemInit+0xe8>)
 8001508:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <SystemInit+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <SystemInit+0xd8>)
 8001512:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <SystemInit+0xe8>)
 8001514:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <SystemInit+0xd8>)
 8001518:	2200      	movs	r2, #0
 800151a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <SystemInit+0xd8>)
 800151e:	4a11      	ldr	r2, [pc, #68]	@ (8001564 <SystemInit+0xe8>)
 8001520:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <SystemInit+0xd8>)
 8001524:	2200      	movs	r2, #0
 8001526:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <SystemInit+0xd8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <SystemInit+0xd8>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <SystemInit+0xd8>)
 8001536:	2200      	movs	r2, #0
 8001538:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <SystemInit+0xec>)
 800153c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001540:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	52002000 	.word	0x52002000
 8001554:	58024400 	.word	0x58024400
 8001558:	eaf6ed7f 	.word	0xeaf6ed7f
 800155c:	02020200 	.word	0x02020200
 8001560:	01ff0000 	.word	0x01ff0000
 8001564:	01010280 	.word	0x01010280
 8001568:	52004000 	.word	0x52004000

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001570:	f7ff ff84 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	@ (80015ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	@ (80015b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159a:	f009 fd1f 	bl	800afdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff f841 	bl	8000624 <main>
  bx  lr
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015ac:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80015b0:	0800b0b0 	.word	0x0800b0b0
  ldr r2, =_sbss
 80015b4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80015b8:	240003d0 	.word	0x240003d0

080015bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC3_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 f980 	bl	80018cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015cc:	f004 fa34 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_Init+0x68>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	4913      	ldr	r1, [pc, #76]	@ (800162c <HAL_Init+0x6c>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_Init+0x68>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <HAL_Init+0x6c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <HAL_Init+0x70>)
 8001602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001604:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <HAL_Init+0x74>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f814 	bl	8001638 <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e002      	b.n	8001620 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800161a:	f7ff fcbf 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400
 800162c:	0800b060 	.word	0x0800b060
 8001630:	24000008 	.word	0x24000008
 8001634:	24000004 	.word	0x24000004

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_InitTick+0x60>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e021      	b.n	8001690 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <HAL_InitTick+0x64>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f965 	bl	8001932 <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f92f 	bl	80018e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_InitTick+0x68>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000010 	.word	0x24000010
 800169c:	24000004 	.word	0x24000004
 80016a0:	2400000c 	.word	0x2400000c

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	24000010 	.word	0x24000010
 80016c8:	240003cc 	.word	0x240003cc

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	240003cc 	.word	0x240003cc

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000010 	.word	0x24000010

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <__NVIC_SetPriorityGrouping+0x40>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	4313      	orrs	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	@ (800176c <__NVIC_SetPriorityGrouping+0x40>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	05fa0000 	.word	0x05fa0000

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4907      	ldr	r1, [pc, #28]	@ (80017c8 <__NVIC_EnableIRQ+0x38>)
 80017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	@ (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	@ 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	@ 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001898:	d301      	bcc.n	800189e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189a:	2301      	movs	r3, #1
 800189c:	e00f      	b.n	80018be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <SysTick_Config+0x40>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a6:	210f      	movs	r1, #15
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f7ff ff8e 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <SysTick_Config+0x40>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b6:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <SysTick_Config+0x40>)
 80018b8:	2207      	movs	r2, #7
 80018ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	e000e010 	.word	0xe000e010

080018cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff29 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff40 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff33 	bl	8001790 <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa4 	bl	8001888 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001950:	f3bf 8f5f 	dmb	sy
}
 8001954:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_MPU_Disable+0x28>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_MPU_Disable+0x28>)
 800195c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001960:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001962:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_MPU_Disable+0x2c>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00
 8001978:	e000ed90 	.word	0xe000ed90

0800197c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001984:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <HAL_MPU_Enable+0x38>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_MPU_Enable+0x3c>)
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_MPU_Enable+0x3c>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001998:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800199a:	f3bf 8f4f 	dsb	sy
}
 800199e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a0:	f3bf 8f6f 	isb	sy
}
 80019a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed90 	.word	0xe000ed90
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	785a      	ldrb	r2, [r3, #1]
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_MPU_ConfigRegion+0x7c>)
 80019ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_MPU_ConfigRegion+0x7c>)
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_MPU_ConfigRegion+0x7c>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019d8:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <HAL_MPU_ConfigRegion+0x7c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
 80019e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7adb      	ldrb	r3, [r3, #11]
 80019ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7a9b      	ldrb	r3, [r3, #10]
 80019f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7b5b      	ldrb	r3, [r3, #13]
 80019fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7b9b      	ldrb	r3, [r3, #14]
 8001a02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7bdb      	ldrb	r3, [r3, #15]
 8001a0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7a5b      	ldrb	r3, [r3, #9]
 8001a12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7a1b      	ldrb	r3, [r3, #8]
 8001a1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a28:	6113      	str	r3, [r2, #16]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed90 	.word	0xe000ed90

08001a3c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e054      	b.n	8001af8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7f5b      	ldrb	r3, [r3, #29]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fab6 	bl	8000fd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	791b      	ldrb	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a22      	ldr	r2, [pc, #136]	@ (8001b00 <HAL_CRC_Init+0xc4>)
 8001a78:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0218 	bic.w	r2, r2, #24
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	e00c      	b.n	8001aa6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6899      	ldr	r1, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f948 	bl	8001d2c <HAL_CRCEx_Polynomial_Set>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e028      	b.n	8001af8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	795b      	ldrb	r3, [r3, #5]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	e004      	b.n	8001ac4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6912      	ldr	r2, [r2, #16]
 8001ac2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	04c11db7 	.word	0x04c11db7

08001b04 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2202      	movs	r2, #2
 8001b18:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d006      	beq.n	8001b40 <HAL_CRC_Calculate+0x3c>
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d829      	bhi.n	8001b8a <HAL_CRC_Calculate+0x86>
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d019      	beq.n	8001b6e <HAL_CRC_Calculate+0x6a>
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d01e      	beq.n	8001b7c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001b3e:	e024      	b.n	8001b8a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e00a      	b.n	8001b5c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d3f0      	bcc.n	8001b46 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	e00e      	b.n	8001b8c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f812 	bl	8001b9c <CRC_Handle_8>
 8001b78:	6138      	str	r0, [r7, #16]
      break;
 8001b7a:	e007      	b.n	8001b8c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f899 	bl	8001cb8 <CRC_Handle_16>
 8001b86:	6138      	str	r0, [r7, #16]
      break;
 8001b88:	e000      	b.n	8001b8c <HAL_CRC_Calculate+0x88>
      break;
 8001b8a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001b92:	693b      	ldr	r3, [r7, #16]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	e023      	b.n	8001bf6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	440b      	add	r3, r1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bc8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3302      	adds	r3, #2
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	440b      	add	r3, r1
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001bd8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	3303      	adds	r3, #3
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	440b      	add	r3, r1
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001bec:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3d6      	bcc.n	8001bae <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d04d      	beq.n	8001ca6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d116      	bne.n	8001c5c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	3301      	adds	r3, #1
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	440b      	add	r3, r1
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	8b7a      	ldrh	r2, [r7, #26]
 8001c5a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d11f      	bne.n	8001ca6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3301      	adds	r3, #1
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	440b      	add	r3, r1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	8b7a      	ldrh	r2, [r7, #26]
 8001c92:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3724      	adds	r7, #36	@ 0x24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e013      	b.n	8001cf2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	440b      	add	r3, r1
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3e6      	bcc.n	8001cca <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	4413      	add	r3, r2
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d3c:	231f      	movs	r3, #31
 8001d3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
 8001d4e:	e063      	b.n	8001e18 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d50:	bf00      	nop
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	613a      	str	r2, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_CRCEx_Polynomial_Set+0x44>
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	d846      	bhi.n	8001e04 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001d76:	a201      	add	r2, pc, #4	@ (adr r2, 8001d7c <HAL_CRCEx_Polynomial_Set+0x50>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e05 	.word	0x08001e05
 8001d84:	08001e05 	.word	0x08001e05
 8001d88:	08001e05 	.word	0x08001e05
 8001d8c:	08001e05 	.word	0x08001e05
 8001d90:	08001e05 	.word	0x08001e05
 8001d94:	08001e05 	.word	0x08001e05
 8001d98:	08001e05 	.word	0x08001e05
 8001d9c:	08001df9 	.word	0x08001df9
 8001da0:	08001e05 	.word	0x08001e05
 8001da4:	08001e05 	.word	0x08001e05
 8001da8:	08001e05 	.word	0x08001e05
 8001dac:	08001e05 	.word	0x08001e05
 8001db0:	08001e05 	.word	0x08001e05
 8001db4:	08001e05 	.word	0x08001e05
 8001db8:	08001e05 	.word	0x08001e05
 8001dbc:	08001ded 	.word	0x08001ded
 8001dc0:	08001e05 	.word	0x08001e05
 8001dc4:	08001e05 	.word	0x08001e05
 8001dc8:	08001e05 	.word	0x08001e05
 8001dcc:	08001e05 	.word	0x08001e05
 8001dd0:	08001e05 	.word	0x08001e05
 8001dd4:	08001e05 	.word	0x08001e05
 8001dd8:	08001e05 	.word	0x08001e05
 8001ddc:	08001de1 	.word	0x08001de1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d913      	bls.n	8001e0e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001dea:	e010      	b.n	8001e0e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	2b07      	cmp	r3, #7
 8001df0:	d90f      	bls.n	8001e12 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001df6:	e00c      	b.n	8001e12 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	d90b      	bls.n	8001e16 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001e02:	e008      	b.n	8001e16 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
        break;
 8001e08:	e006      	b.n	8001e18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001e0a:	bf00      	nop
 8001e0c:	e004      	b.n	8001e18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001e0e:	bf00      	nop
 8001e10:	e002      	b.n	8001e18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001e12:	bf00      	nop
 8001e14:	e000      	b.n	8001e18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001e16:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 0118 	bic.w	r1, r3, #24
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e50:	f7ff fc3c 	bl	80016cc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e312      	b.n	8002486 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a66      	ldr	r2, [pc, #408]	@ (8002000 <HAL_DMA_Init+0x1b8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d04a      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a65      	ldr	r2, [pc, #404]	@ (8002004 <HAL_DMA_Init+0x1bc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d045      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a63      	ldr	r2, [pc, #396]	@ (8002008 <HAL_DMA_Init+0x1c0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d040      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a62      	ldr	r2, [pc, #392]	@ (800200c <HAL_DMA_Init+0x1c4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d03b      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a60      	ldr	r2, [pc, #384]	@ (8002010 <HAL_DMA_Init+0x1c8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d036      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a5f      	ldr	r2, [pc, #380]	@ (8002014 <HAL_DMA_Init+0x1cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d031      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8002018 <HAL_DMA_Init+0x1d0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02c      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	@ (800201c <HAL_DMA_Init+0x1d4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d027      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a5a      	ldr	r2, [pc, #360]	@ (8002020 <HAL_DMA_Init+0x1d8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d022      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a59      	ldr	r2, [pc, #356]	@ (8002024 <HAL_DMA_Init+0x1dc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d01d      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a57      	ldr	r2, [pc, #348]	@ (8002028 <HAL_DMA_Init+0x1e0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d018      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a56      	ldr	r2, [pc, #344]	@ (800202c <HAL_DMA_Init+0x1e4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a54      	ldr	r2, [pc, #336]	@ (8002030 <HAL_DMA_Init+0x1e8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00e      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a53      	ldr	r2, [pc, #332]	@ (8002034 <HAL_DMA_Init+0x1ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a51      	ldr	r2, [pc, #324]	@ (8002038 <HAL_DMA_Init+0x1f0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d004      	beq.n	8001f00 <HAL_DMA_Init+0xb8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a50      	ldr	r2, [pc, #320]	@ (800203c <HAL_DMA_Init+0x1f4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_DMA_Init+0xbc>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_Init+0xbe>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 813c 	beq.w	8002184 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a37      	ldr	r2, [pc, #220]	@ (8002000 <HAL_DMA_Init+0x1b8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d04a      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a36      	ldr	r2, [pc, #216]	@ (8002004 <HAL_DMA_Init+0x1bc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d045      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a34      	ldr	r2, [pc, #208]	@ (8002008 <HAL_DMA_Init+0x1c0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d040      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a33      	ldr	r2, [pc, #204]	@ (800200c <HAL_DMA_Init+0x1c4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d03b      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a31      	ldr	r2, [pc, #196]	@ (8002010 <HAL_DMA_Init+0x1c8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d036      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a30      	ldr	r2, [pc, #192]	@ (8002014 <HAL_DMA_Init+0x1cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d031      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002018 <HAL_DMA_Init+0x1d0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d02c      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <HAL_DMA_Init+0x1d4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d027      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <HAL_DMA_Init+0x1d8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002024 <HAL_DMA_Init+0x1dc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d01d      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <HAL_DMA_Init+0x1e0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a27      	ldr	r2, [pc, #156]	@ (800202c <HAL_DMA_Init+0x1e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_DMA_Init+0x1e8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00e      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a24      	ldr	r2, [pc, #144]	@ (8002034 <HAL_DMA_Init+0x1ec>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_DMA_Init+0x1f0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_Init+0x174>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a21      	ldr	r2, [pc, #132]	@ (800203c <HAL_DMA_Init+0x1f4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <HAL_DMA_Init+0x186>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e007      	b.n	8001fde <HAL_DMA_Init+0x196>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fde:	e02f      	b.n	8002040 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe0:	f7ff fb74 	bl	80016cc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d928      	bls.n	8002040 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e242      	b.n	8002486 <HAL_DMA_Init+0x63e>
 8002000:	40020010 	.word	0x40020010
 8002004:	40020028 	.word	0x40020028
 8002008:	40020040 	.word	0x40020040
 800200c:	40020058 	.word	0x40020058
 8002010:	40020070 	.word	0x40020070
 8002014:	40020088 	.word	0x40020088
 8002018:	400200a0 	.word	0x400200a0
 800201c:	400200b8 	.word	0x400200b8
 8002020:	40020410 	.word	0x40020410
 8002024:	40020428 	.word	0x40020428
 8002028:	40020440 	.word	0x40020440
 800202c:	40020458 	.word	0x40020458
 8002030:	40020470 	.word	0x40020470
 8002034:	40020488 	.word	0x40020488
 8002038:	400204a0 	.word	0x400204a0
 800203c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1c8      	bne.n	8001fe0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4b83      	ldr	r3, [pc, #524]	@ (8002268 <HAL_DMA_Init+0x420>)
 800205a:	4013      	ands	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002066:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002072:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	2b04      	cmp	r3, #4
 8002092:	d107      	bne.n	80020a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	4313      	orrs	r3, r2
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b28      	cmp	r3, #40	@ 0x28
 80020aa:	d903      	bls.n	80020b4 <HAL_DMA_Init+0x26c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80020b2:	d91f      	bls.n	80020f4 <HAL_DMA_Init+0x2ac>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80020ba:	d903      	bls.n	80020c4 <HAL_DMA_Init+0x27c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b42      	cmp	r3, #66	@ 0x42
 80020c2:	d917      	bls.n	80020f4 <HAL_DMA_Init+0x2ac>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b46      	cmp	r3, #70	@ 0x46
 80020ca:	d903      	bls.n	80020d4 <HAL_DMA_Init+0x28c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b48      	cmp	r3, #72	@ 0x48
 80020d2:	d90f      	bls.n	80020f4 <HAL_DMA_Init+0x2ac>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b4e      	cmp	r3, #78	@ 0x4e
 80020da:	d903      	bls.n	80020e4 <HAL_DMA_Init+0x29c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b52      	cmp	r3, #82	@ 0x52
 80020e2:	d907      	bls.n	80020f4 <HAL_DMA_Init+0x2ac>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b73      	cmp	r3, #115	@ 0x73
 80020ea:	d905      	bls.n	80020f8 <HAL_DMA_Init+0x2b0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b77      	cmp	r3, #119	@ 0x77
 80020f2:	d801      	bhi.n	80020f8 <HAL_DMA_Init+0x2b0>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_DMA_Init+0x2b2>
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002104:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f023 0307 	bic.w	r3, r3, #7
 800211c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	2b04      	cmp	r3, #4
 800212e:	d117      	bne.n	8002160 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00e      	beq.n	8002160 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f002 fb2e 	bl	80047a4 <DMA_CheckFifoParam>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2240      	movs	r2, #64	@ 0x40
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e192      	b.n	8002486 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f002 fa69 	bl	8004640 <DMA_CalcBaseAndBitshift>
 800216e:	4603      	mov	r3, r0
 8002170:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	223f      	movs	r2, #63	@ 0x3f
 800217c:	409a      	lsls	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e0c8      	b.n	8002316 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a38      	ldr	r2, [pc, #224]	@ (800226c <HAL_DMA_Init+0x424>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a37      	ldr	r2, [pc, #220]	@ (8002270 <HAL_DMA_Init+0x428>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d01d      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a35      	ldr	r2, [pc, #212]	@ (8002274 <HAL_DMA_Init+0x42c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d018      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a34      	ldr	r2, [pc, #208]	@ (8002278 <HAL_DMA_Init+0x430>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a32      	ldr	r2, [pc, #200]	@ (800227c <HAL_DMA_Init+0x434>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a31      	ldr	r2, [pc, #196]	@ (8002280 <HAL_DMA_Init+0x438>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002284 <HAL_DMA_Init+0x43c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Init+0x38c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002288 <HAL_DMA_Init+0x440>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_DMA_Init+0x390>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_DMA_Init+0x392>
 80021d8:	2300      	movs	r3, #0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8092 	beq.w	8002304 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_DMA_Init+0x424>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d021      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a20      	ldr	r2, [pc, #128]	@ (8002270 <HAL_DMA_Init+0x428>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01c      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <HAL_DMA_Init+0x42c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d017      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1d      	ldr	r2, [pc, #116]	@ (8002278 <HAL_DMA_Init+0x430>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d012      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1b      	ldr	r2, [pc, #108]	@ (800227c <HAL_DMA_Init+0x434>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <HAL_DMA_Init+0x438>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d008      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_DMA_Init+0x43c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d003      	beq.n	800222e <HAL_DMA_Init+0x3e6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_DMA_Init+0x440>)
 800222c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_DMA_Init+0x444>)
 800224a:	4013      	ands	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d01c      	beq.n	8002290 <HAL_DMA_Init+0x448>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b80      	cmp	r3, #128	@ 0x80
 800225c:	d102      	bne.n	8002264 <HAL_DMA_Init+0x41c>
 800225e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002262:	e016      	b.n	8002292 <HAL_DMA_Init+0x44a>
 8002264:	2300      	movs	r3, #0
 8002266:	e014      	b.n	8002292 <HAL_DMA_Init+0x44a>
 8002268:	fe10803f 	.word	0xfe10803f
 800226c:	58025408 	.word	0x58025408
 8002270:	5802541c 	.word	0x5802541c
 8002274:	58025430 	.word	0x58025430
 8002278:	58025444 	.word	0x58025444
 800227c:	58025458 	.word	0x58025458
 8002280:	5802546c 	.word	0x5802546c
 8002284:	58025480 	.word	0x58025480
 8002288:	58025494 	.word	0x58025494
 800228c:	fffe000f 	.word	0xfffe000f
 8002290:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002298:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002490 <HAL_DMA_Init+0x648>)
 80022d8:	4413      	add	r3, r2
 80022da:	4a6e      	ldr	r2, [pc, #440]	@ (8002494 <HAL_DMA_Init+0x64c>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f002 f9a9 	bl	8004640 <DMA_CalcBaseAndBitshift>
 80022ee:	4603      	mov	r3, r0
 80022f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2201      	movs	r2, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e008      	b.n	8002316 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2203      	movs	r2, #3
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0b7      	b.n	8002486 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5f      	ldr	r2, [pc, #380]	@ (8002498 <HAL_DMA_Init+0x650>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d072      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a5d      	ldr	r2, [pc, #372]	@ (800249c <HAL_DMA_Init+0x654>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d06d      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5c      	ldr	r2, [pc, #368]	@ (80024a0 <HAL_DMA_Init+0x658>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d068      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5a      	ldr	r2, [pc, #360]	@ (80024a4 <HAL_DMA_Init+0x65c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d063      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a59      	ldr	r2, [pc, #356]	@ (80024a8 <HAL_DMA_Init+0x660>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d05e      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_DMA_Init+0x664>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d059      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a56      	ldr	r2, [pc, #344]	@ (80024b0 <HAL_DMA_Init+0x668>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d054      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a54      	ldr	r2, [pc, #336]	@ (80024b4 <HAL_DMA_Init+0x66c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d04f      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a53      	ldr	r2, [pc, #332]	@ (80024b8 <HAL_DMA_Init+0x670>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04a      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a51      	ldr	r2, [pc, #324]	@ (80024bc <HAL_DMA_Init+0x674>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d045      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a50      	ldr	r2, [pc, #320]	@ (80024c0 <HAL_DMA_Init+0x678>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d040      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a4e      	ldr	r2, [pc, #312]	@ (80024c4 <HAL_DMA_Init+0x67c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d03b      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a4d      	ldr	r2, [pc, #308]	@ (80024c8 <HAL_DMA_Init+0x680>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d036      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a4b      	ldr	r2, [pc, #300]	@ (80024cc <HAL_DMA_Init+0x684>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d031      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a4a      	ldr	r2, [pc, #296]	@ (80024d0 <HAL_DMA_Init+0x688>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02c      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a48      	ldr	r2, [pc, #288]	@ (80024d4 <HAL_DMA_Init+0x68c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d027      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a47      	ldr	r2, [pc, #284]	@ (80024d8 <HAL_DMA_Init+0x690>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a45      	ldr	r2, [pc, #276]	@ (80024dc <HAL_DMA_Init+0x694>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a44      	ldr	r2, [pc, #272]	@ (80024e0 <HAL_DMA_Init+0x698>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a42      	ldr	r2, [pc, #264]	@ (80024e4 <HAL_DMA_Init+0x69c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a41      	ldr	r2, [pc, #260]	@ (80024e8 <HAL_DMA_Init+0x6a0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3f      	ldr	r2, [pc, #252]	@ (80024ec <HAL_DMA_Init+0x6a4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a3e      	ldr	r2, [pc, #248]	@ (80024f0 <HAL_DMA_Init+0x6a8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_Init+0x5be>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3c      	ldr	r2, [pc, #240]	@ (80024f4 <HAL_DMA_Init+0x6ac>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_DMA_Init+0x5c2>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_DMA_Init+0x5c4>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d032      	beq.n	8002476 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f002 fa43 	bl	800489c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b80      	cmp	r3, #128	@ 0x80
 800241c:	d102      	bne.n	8002424 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002438:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_DMA_Init+0x61c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b08      	cmp	r3, #8
 8002448:	d80c      	bhi.n	8002464 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f002 fac0 	bl	80049d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e008      	b.n	8002476 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	a7fdabf8 	.word	0xa7fdabf8
 8002494:	cccccccd 	.word	0xcccccccd
 8002498:	40020010 	.word	0x40020010
 800249c:	40020028 	.word	0x40020028
 80024a0:	40020040 	.word	0x40020040
 80024a4:	40020058 	.word	0x40020058
 80024a8:	40020070 	.word	0x40020070
 80024ac:	40020088 	.word	0x40020088
 80024b0:	400200a0 	.word	0x400200a0
 80024b4:	400200b8 	.word	0x400200b8
 80024b8:	40020410 	.word	0x40020410
 80024bc:	40020428 	.word	0x40020428
 80024c0:	40020440 	.word	0x40020440
 80024c4:	40020458 	.word	0x40020458
 80024c8:	40020470 	.word	0x40020470
 80024cc:	40020488 	.word	0x40020488
 80024d0:	400204a0 	.word	0x400204a0
 80024d4:	400204b8 	.word	0x400204b8
 80024d8:	58025408 	.word	0x58025408
 80024dc:	5802541c 	.word	0x5802541c
 80024e0:	58025430 	.word	0x58025430
 80024e4:	58025444 	.word	0x58025444
 80024e8:	58025458 	.word	0x58025458
 80024ec:	5802546c 	.word	0x5802546c
 80024f0:	58025480 	.word	0x58025480
 80024f4:	58025494 	.word	0x58025494

080024f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e226      	b.n	8002962 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_DMA_Start_IT+0x2a>
 800251e:	2302      	movs	r3, #2
 8002520:	e21f      	b.n	8002962 <HAL_DMA_Start_IT+0x46a>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 820a 	bne.w	800294c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a68      	ldr	r2, [pc, #416]	@ (80026ec <HAL_DMA_Start_IT+0x1f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d04a      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a66      	ldr	r2, [pc, #408]	@ (80026f0 <HAL_DMA_Start_IT+0x1f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d045      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a65      	ldr	r2, [pc, #404]	@ (80026f4 <HAL_DMA_Start_IT+0x1fc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d040      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a63      	ldr	r2, [pc, #396]	@ (80026f8 <HAL_DMA_Start_IT+0x200>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d03b      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a62      	ldr	r2, [pc, #392]	@ (80026fc <HAL_DMA_Start_IT+0x204>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d036      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a60      	ldr	r2, [pc, #384]	@ (8002700 <HAL_DMA_Start_IT+0x208>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d031      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5f      	ldr	r2, [pc, #380]	@ (8002704 <HAL_DMA_Start_IT+0x20c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d02c      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5d      	ldr	r2, [pc, #372]	@ (8002708 <HAL_DMA_Start_IT+0x210>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d027      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5c      	ldr	r2, [pc, #368]	@ (800270c <HAL_DMA_Start_IT+0x214>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002710 <HAL_DMA_Start_IT+0x218>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01d      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a59      	ldr	r2, [pc, #356]	@ (8002714 <HAL_DMA_Start_IT+0x21c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d018      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a57      	ldr	r2, [pc, #348]	@ (8002718 <HAL_DMA_Start_IT+0x220>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a56      	ldr	r2, [pc, #344]	@ (800271c <HAL_DMA_Start_IT+0x224>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00e      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a54      	ldr	r2, [pc, #336]	@ (8002720 <HAL_DMA_Start_IT+0x228>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a53      	ldr	r2, [pc, #332]	@ (8002724 <HAL_DMA_Start_IT+0x22c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_Start_IT+0xee>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a51      	ldr	r2, [pc, #324]	@ (8002728 <HAL_DMA_Start_IT+0x230>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d108      	bne.n	80025f8 <HAL_DMA_Start_IT+0x100>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e007      	b.n	8002608 <HAL_DMA_Start_IT+0x110>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f001 fe6a 	bl	80042e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a34      	ldr	r2, [pc, #208]	@ (80026ec <HAL_DMA_Start_IT+0x1f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d04a      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a33      	ldr	r2, [pc, #204]	@ (80026f0 <HAL_DMA_Start_IT+0x1f8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d045      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a31      	ldr	r2, [pc, #196]	@ (80026f4 <HAL_DMA_Start_IT+0x1fc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d040      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a30      	ldr	r2, [pc, #192]	@ (80026f8 <HAL_DMA_Start_IT+0x200>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d03b      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2e      	ldr	r2, [pc, #184]	@ (80026fc <HAL_DMA_Start_IT+0x204>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d036      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2d      	ldr	r2, [pc, #180]	@ (8002700 <HAL_DMA_Start_IT+0x208>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d031      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2b      	ldr	r2, [pc, #172]	@ (8002704 <HAL_DMA_Start_IT+0x20c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d02c      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <HAL_DMA_Start_IT+0x210>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d027      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a28      	ldr	r2, [pc, #160]	@ (800270c <HAL_DMA_Start_IT+0x214>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d022      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a27      	ldr	r2, [pc, #156]	@ (8002710 <HAL_DMA_Start_IT+0x218>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d01d      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a25      	ldr	r2, [pc, #148]	@ (8002714 <HAL_DMA_Start_IT+0x21c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d018      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_DMA_Start_IT+0x220>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a22      	ldr	r2, [pc, #136]	@ (800271c <HAL_DMA_Start_IT+0x224>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00e      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a21      	ldr	r2, [pc, #132]	@ (8002720 <HAL_DMA_Start_IT+0x228>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002724 <HAL_DMA_Start_IT+0x22c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_DMA_Start_IT+0x1bc>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <HAL_DMA_Start_IT+0x230>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Start_IT+0x1c0>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_DMA_Start_IT+0x1c2>
 80026b8:	2300      	movs	r3, #0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d036      	beq.n	800272c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 021e 	bic.w	r2, r3, #30
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0216 	orr.w	r2, r2, #22
 80026d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d03e      	beq.n	8002758 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0208 	orr.w	r2, r2, #8
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e035      	b.n	8002758 <HAL_DMA_Start_IT+0x260>
 80026ec:	40020010 	.word	0x40020010
 80026f0:	40020028 	.word	0x40020028
 80026f4:	40020040 	.word	0x40020040
 80026f8:	40020058 	.word	0x40020058
 80026fc:	40020070 	.word	0x40020070
 8002700:	40020088 	.word	0x40020088
 8002704:	400200a0 	.word	0x400200a0
 8002708:	400200b8 	.word	0x400200b8
 800270c:	40020410 	.word	0x40020410
 8002710:	40020428 	.word	0x40020428
 8002714:	40020440 	.word	0x40020440
 8002718:	40020458 	.word	0x40020458
 800271c:	40020470 	.word	0x40020470
 8002720:	40020488 	.word	0x40020488
 8002724:	400204a0 	.word	0x400204a0
 8002728:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 020e 	bic.w	r2, r3, #14
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 020a 	orr.w	r2, r2, #10
 800273e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0204 	orr.w	r2, r2, #4
 8002756:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a83      	ldr	r2, [pc, #524]	@ (800296c <HAL_DMA_Start_IT+0x474>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d072      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a82      	ldr	r2, [pc, #520]	@ (8002970 <HAL_DMA_Start_IT+0x478>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d06d      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a80      	ldr	r2, [pc, #512]	@ (8002974 <HAL_DMA_Start_IT+0x47c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d068      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7f      	ldr	r2, [pc, #508]	@ (8002978 <HAL_DMA_Start_IT+0x480>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d063      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a7d      	ldr	r2, [pc, #500]	@ (800297c <HAL_DMA_Start_IT+0x484>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d05e      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7c      	ldr	r2, [pc, #496]	@ (8002980 <HAL_DMA_Start_IT+0x488>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d059      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a7a      	ldr	r2, [pc, #488]	@ (8002984 <HAL_DMA_Start_IT+0x48c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d054      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a79      	ldr	r2, [pc, #484]	@ (8002988 <HAL_DMA_Start_IT+0x490>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04f      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a77      	ldr	r2, [pc, #476]	@ (800298c <HAL_DMA_Start_IT+0x494>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04a      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a76      	ldr	r2, [pc, #472]	@ (8002990 <HAL_DMA_Start_IT+0x498>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a74      	ldr	r2, [pc, #464]	@ (8002994 <HAL_DMA_Start_IT+0x49c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a73      	ldr	r2, [pc, #460]	@ (8002998 <HAL_DMA_Start_IT+0x4a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03b      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a71      	ldr	r2, [pc, #452]	@ (800299c <HAL_DMA_Start_IT+0x4a4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d036      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a70      	ldr	r2, [pc, #448]	@ (80029a0 <HAL_DMA_Start_IT+0x4a8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d031      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6e      	ldr	r2, [pc, #440]	@ (80029a4 <HAL_DMA_Start_IT+0x4ac>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02c      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6d      	ldr	r2, [pc, #436]	@ (80029a8 <HAL_DMA_Start_IT+0x4b0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d027      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a6b      	ldr	r2, [pc, #428]	@ (80029ac <HAL_DMA_Start_IT+0x4b4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6a      	ldr	r2, [pc, #424]	@ (80029b0 <HAL_DMA_Start_IT+0x4b8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d01d      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a68      	ldr	r2, [pc, #416]	@ (80029b4 <HAL_DMA_Start_IT+0x4bc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a67      	ldr	r2, [pc, #412]	@ (80029b8 <HAL_DMA_Start_IT+0x4c0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a65      	ldr	r2, [pc, #404]	@ (80029bc <HAL_DMA_Start_IT+0x4c4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a64      	ldr	r2, [pc, #400]	@ (80029c0 <HAL_DMA_Start_IT+0x4c8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a62      	ldr	r2, [pc, #392]	@ (80029c4 <HAL_DMA_Start_IT+0x4cc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Start_IT+0x350>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a61      	ldr	r2, [pc, #388]	@ (80029c8 <HAL_DMA_Start_IT+0x4d0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d101      	bne.n	800284c <HAL_DMA_Start_IT+0x354>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_DMA_Start_IT+0x356>
 800284c:	2300      	movs	r3, #0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800286e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002886:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a37      	ldr	r2, [pc, #220]	@ (800296c <HAL_DMA_Start_IT+0x474>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04a      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a36      	ldr	r2, [pc, #216]	@ (8002970 <HAL_DMA_Start_IT+0x478>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d045      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a34      	ldr	r2, [pc, #208]	@ (8002974 <HAL_DMA_Start_IT+0x47c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a33      	ldr	r2, [pc, #204]	@ (8002978 <HAL_DMA_Start_IT+0x480>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	@ (800297c <HAL_DMA_Start_IT+0x484>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a30      	ldr	r2, [pc, #192]	@ (8002980 <HAL_DMA_Start_IT+0x488>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <HAL_DMA_Start_IT+0x48c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02c      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002988 <HAL_DMA_Start_IT+0x490>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d027      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <HAL_DMA_Start_IT+0x494>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_DMA_Start_IT+0x498>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01d      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_DMA_Start_IT+0x49c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <HAL_DMA_Start_IT+0x4a0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a25      	ldr	r2, [pc, #148]	@ (800299c <HAL_DMA_Start_IT+0x4a4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <HAL_DMA_Start_IT+0x4a8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <HAL_DMA_Start_IT+0x4ac>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Start_IT+0x430>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_DMA_Start_IT+0x4b0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <HAL_DMA_Start_IT+0x442>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e012      	b.n	8002960 <HAL_DMA_Start_IT+0x468>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e009      	b.n	8002960 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40020010 	.word	0x40020010
 8002970:	40020028 	.word	0x40020028
 8002974:	40020040 	.word	0x40020040
 8002978:	40020058 	.word	0x40020058
 800297c:	40020070 	.word	0x40020070
 8002980:	40020088 	.word	0x40020088
 8002984:	400200a0 	.word	0x400200a0
 8002988:	400200b8 	.word	0x400200b8
 800298c:	40020410 	.word	0x40020410
 8002990:	40020428 	.word	0x40020428
 8002994:	40020440 	.word	0x40020440
 8002998:	40020458 	.word	0x40020458
 800299c:	40020470 	.word	0x40020470
 80029a0:	40020488 	.word	0x40020488
 80029a4:	400204a0 	.word	0x400204a0
 80029a8:	400204b8 	.word	0x400204b8
 80029ac:	58025408 	.word	0x58025408
 80029b0:	5802541c 	.word	0x5802541c
 80029b4:	58025430 	.word	0x58025430
 80029b8:	58025444 	.word	0x58025444
 80029bc:	58025458 	.word	0x58025458
 80029c0:	5802546c 	.word	0x5802546c
 80029c4:	58025480 	.word	0x58025480
 80029c8:	58025494 	.word	0x58025494

080029cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7fe fe7a 	bl	80016cc <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e2dc      	b.n	8002f9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e2cd      	b.n	8002f9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a76      	ldr	r2, [pc, #472]	@ (8002be0 <HAL_DMA_Abort+0x214>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04a      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a74      	ldr	r2, [pc, #464]	@ (8002be4 <HAL_DMA_Abort+0x218>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d045      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a73      	ldr	r2, [pc, #460]	@ (8002be8 <HAL_DMA_Abort+0x21c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a71      	ldr	r2, [pc, #452]	@ (8002bec <HAL_DMA_Abort+0x220>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03b      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a70      	ldr	r2, [pc, #448]	@ (8002bf0 <HAL_DMA_Abort+0x224>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf4 <HAL_DMA_Abort+0x228>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf8 <HAL_DMA_Abort+0x22c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02c      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bfc <HAL_DMA_Abort+0x230>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6a      	ldr	r2, [pc, #424]	@ (8002c00 <HAL_DMA_Abort+0x234>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <HAL_DMA_Abort+0x238>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a67      	ldr	r2, [pc, #412]	@ (8002c08 <HAL_DMA_Abort+0x23c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <HAL_DMA_Abort+0x240>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a64      	ldr	r2, [pc, #400]	@ (8002c10 <HAL_DMA_Abort+0x244>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <HAL_DMA_Abort+0x248>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a61      	ldr	r2, [pc, #388]	@ (8002c18 <HAL_DMA_Abort+0x24c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMA_Abort+0xd6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <HAL_DMA_Abort+0x250>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMA_Abort+0xda>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_DMA_Abort+0xdc>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 021e 	bic.w	r2, r2, #30
 8002aba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e00a      	b.n	8002aea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 020e 	bic.w	r2, r2, #14
 8002ae2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3c      	ldr	r2, [pc, #240]	@ (8002be0 <HAL_DMA_Abort+0x214>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d072      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3a      	ldr	r2, [pc, #232]	@ (8002be4 <HAL_DMA_Abort+0x218>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d06d      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a39      	ldr	r2, [pc, #228]	@ (8002be8 <HAL_DMA_Abort+0x21c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d068      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a37      	ldr	r2, [pc, #220]	@ (8002bec <HAL_DMA_Abort+0x220>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d063      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a36      	ldr	r2, [pc, #216]	@ (8002bf0 <HAL_DMA_Abort+0x224>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d05e      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a34      	ldr	r2, [pc, #208]	@ (8002bf4 <HAL_DMA_Abort+0x228>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d059      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a33      	ldr	r2, [pc, #204]	@ (8002bf8 <HAL_DMA_Abort+0x22c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d054      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a31      	ldr	r2, [pc, #196]	@ (8002bfc <HAL_DMA_Abort+0x230>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d04f      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a30      	ldr	r2, [pc, #192]	@ (8002c00 <HAL_DMA_Abort+0x234>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a2e      	ldr	r2, [pc, #184]	@ (8002c04 <HAL_DMA_Abort+0x238>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a2d      	ldr	r2, [pc, #180]	@ (8002c08 <HAL_DMA_Abort+0x23c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c0c <HAL_DMA_Abort+0x240>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2a      	ldr	r2, [pc, #168]	@ (8002c10 <HAL_DMA_Abort+0x244>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a28      	ldr	r2, [pc, #160]	@ (8002c14 <HAL_DMA_Abort+0x248>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a27      	ldr	r2, [pc, #156]	@ (8002c18 <HAL_DMA_Abort+0x24c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a25      	ldr	r2, [pc, #148]	@ (8002c1c <HAL_DMA_Abort+0x250>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a24      	ldr	r2, [pc, #144]	@ (8002c20 <HAL_DMA_Abort+0x254>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <HAL_DMA_Abort+0x258>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	@ (8002c28 <HAL_DMA_Abort+0x25c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1f      	ldr	r2, [pc, #124]	@ (8002c2c <HAL_DMA_Abort+0x260>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c30 <HAL_DMA_Abort+0x264>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <HAL_DMA_Abort+0x268>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <HAL_DMA_Abort+0x26c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_Abort+0x20e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <HAL_DMA_Abort+0x270>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d132      	bne.n	8002c40 <HAL_DMA_Abort+0x274>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e031      	b.n	8002c42 <HAL_DMA_Abort+0x276>
 8002bde:	bf00      	nop
 8002be0:	40020010 	.word	0x40020010
 8002be4:	40020028 	.word	0x40020028
 8002be8:	40020040 	.word	0x40020040
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	40020070 	.word	0x40020070
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	400200a0 	.word	0x400200a0
 8002bfc:	400200b8 	.word	0x400200b8
 8002c00:	40020410 	.word	0x40020410
 8002c04:	40020428 	.word	0x40020428
 8002c08:	40020440 	.word	0x40020440
 8002c0c:	40020458 	.word	0x40020458
 8002c10:	40020470 	.word	0x40020470
 8002c14:	40020488 	.word	0x40020488
 8002c18:	400204a0 	.word	0x400204a0
 8002c1c:	400204b8 	.word	0x400204b8
 8002c20:	58025408 	.word	0x58025408
 8002c24:	5802541c 	.word	0x5802541c
 8002c28:	58025430 	.word	0x58025430
 8002c2c:	58025444 	.word	0x58025444
 8002c30:	58025458 	.word	0x58025458
 8002c34:	5802546c 	.word	0x5802546c
 8002c38:	58025480 	.word	0x58025480
 8002c3c:	58025494 	.word	0x58025494
 8002c40:	2300      	movs	r3, #0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8002e10 <HAL_DMA_Abort+0x444>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6b      	ldr	r2, [pc, #428]	@ (8002e14 <HAL_DMA_Abort+0x448>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8002e18 <HAL_DMA_Abort+0x44c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a68      	ldr	r2, [pc, #416]	@ (8002e1c <HAL_DMA_Abort+0x450>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a67      	ldr	r2, [pc, #412]	@ (8002e20 <HAL_DMA_Abort+0x454>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a65      	ldr	r2, [pc, #404]	@ (8002e24 <HAL_DMA_Abort+0x458>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a64      	ldr	r2, [pc, #400]	@ (8002e28 <HAL_DMA_Abort+0x45c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a62      	ldr	r2, [pc, #392]	@ (8002e2c <HAL_DMA_Abort+0x460>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a61      	ldr	r2, [pc, #388]	@ (8002e30 <HAL_DMA_Abort+0x464>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5f      	ldr	r2, [pc, #380]	@ (8002e34 <HAL_DMA_Abort+0x468>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002e38 <HAL_DMA_Abort+0x46c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002e3c <HAL_DMA_Abort+0x470>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e40 <HAL_DMA_Abort+0x474>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a59      	ldr	r2, [pc, #356]	@ (8002e44 <HAL_DMA_Abort+0x478>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a58      	ldr	r2, [pc, #352]	@ (8002e48 <HAL_DMA_Abort+0x47c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Abort+0x32a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a56      	ldr	r2, [pc, #344]	@ (8002e4c <HAL_DMA_Abort+0x480>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <HAL_DMA_Abort+0x33c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e007      	b.n	8002d18 <HAL_DMA_Abort+0x34c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d18:	e013      	b.n	8002d42 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d1a:	f7fe fcd7 	bl	80016cc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d90c      	bls.n	8002d42 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e12d      	b.n	8002f9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e5      	bne.n	8002d1a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2f      	ldr	r2, [pc, #188]	@ (8002e10 <HAL_DMA_Abort+0x444>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d04a      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e14 <HAL_DMA_Abort+0x448>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d045      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2c      	ldr	r2, [pc, #176]	@ (8002e18 <HAL_DMA_Abort+0x44c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d040      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2a      	ldr	r2, [pc, #168]	@ (8002e1c <HAL_DMA_Abort+0x450>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d03b      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a29      	ldr	r2, [pc, #164]	@ (8002e20 <HAL_DMA_Abort+0x454>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d036      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a27      	ldr	r2, [pc, #156]	@ (8002e24 <HAL_DMA_Abort+0x458>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d031      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a26      	ldr	r2, [pc, #152]	@ (8002e28 <HAL_DMA_Abort+0x45c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d02c      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a24      	ldr	r2, [pc, #144]	@ (8002e2c <HAL_DMA_Abort+0x460>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d027      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <HAL_DMA_Abort+0x464>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a21      	ldr	r2, [pc, #132]	@ (8002e34 <HAL_DMA_Abort+0x468>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01d      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a20      	ldr	r2, [pc, #128]	@ (8002e38 <HAL_DMA_Abort+0x46c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e3c <HAL_DMA_Abort+0x470>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	@ (8002e40 <HAL_DMA_Abort+0x474>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <HAL_DMA_Abort+0x478>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1a      	ldr	r2, [pc, #104]	@ (8002e48 <HAL_DMA_Abort+0x47c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_DMA_Abort+0x422>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <HAL_DMA_Abort+0x480>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Abort+0x426>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_DMA_Abort+0x428>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02b      	beq.n	8002e50 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	223f      	movs	r2, #63	@ 0x3f
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	e02a      	b.n	8002e66 <HAL_DMA_Abort+0x49a>
 8002e10:	40020010 	.word	0x40020010
 8002e14:	40020028 	.word	0x40020028
 8002e18:	40020040 	.word	0x40020040
 8002e1c:	40020058 	.word	0x40020058
 8002e20:	40020070 	.word	0x40020070
 8002e24:	40020088 	.word	0x40020088
 8002e28:	400200a0 	.word	0x400200a0
 8002e2c:	400200b8 	.word	0x400200b8
 8002e30:	40020410 	.word	0x40020410
 8002e34:	40020428 	.word	0x40020428
 8002e38:	40020440 	.word	0x40020440
 8002e3c:	40020458 	.word	0x40020458
 8002e40:	40020470 	.word	0x40020470
 8002e44:	40020488 	.word	0x40020488
 8002e48:	400204a0 	.word	0x400204a0
 8002e4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2201      	movs	r2, #1
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa8 <HAL_DMA_Abort+0x5dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d072      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a4d      	ldr	r2, [pc, #308]	@ (8002fac <HAL_DMA_Abort+0x5e0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d06d      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb0 <HAL_DMA_Abort+0x5e4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d068      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb4 <HAL_DMA_Abort+0x5e8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d063      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a49      	ldr	r2, [pc, #292]	@ (8002fb8 <HAL_DMA_Abort+0x5ec>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d05e      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a47      	ldr	r2, [pc, #284]	@ (8002fbc <HAL_DMA_Abort+0x5f0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d059      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a46      	ldr	r2, [pc, #280]	@ (8002fc0 <HAL_DMA_Abort+0x5f4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d054      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a44      	ldr	r2, [pc, #272]	@ (8002fc4 <HAL_DMA_Abort+0x5f8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d04f      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a43      	ldr	r2, [pc, #268]	@ (8002fc8 <HAL_DMA_Abort+0x5fc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d04a      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a41      	ldr	r2, [pc, #260]	@ (8002fcc <HAL_DMA_Abort+0x600>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d045      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a40      	ldr	r2, [pc, #256]	@ (8002fd0 <HAL_DMA_Abort+0x604>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d040      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8002fd4 <HAL_DMA_Abort+0x608>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03b      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8002fd8 <HAL_DMA_Abort+0x60c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d036      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3b      	ldr	r2, [pc, #236]	@ (8002fdc <HAL_DMA_Abort+0x610>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d031      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe0 <HAL_DMA_Abort+0x614>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d02c      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a38      	ldr	r2, [pc, #224]	@ (8002fe4 <HAL_DMA_Abort+0x618>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d027      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a37      	ldr	r2, [pc, #220]	@ (8002fe8 <HAL_DMA_Abort+0x61c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d022      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	@ (8002fec <HAL_DMA_Abort+0x620>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <HAL_DMA_Abort+0x624>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d018      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a32      	ldr	r2, [pc, #200]	@ (8002ff4 <HAL_DMA_Abort+0x628>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a31      	ldr	r2, [pc, #196]	@ (8002ff8 <HAL_DMA_Abort+0x62c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00e      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <HAL_DMA_Abort+0x630>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2e      	ldr	r2, [pc, #184]	@ (8003000 <HAL_DMA_Abort+0x634>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d004      	beq.n	8002f56 <HAL_DMA_Abort+0x58a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	@ (8003004 <HAL_DMA_Abort+0x638>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_DMA_Abort+0x58e>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_DMA_Abort+0x590>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40020010 	.word	0x40020010
 8002fac:	40020028 	.word	0x40020028
 8002fb0:	40020040 	.word	0x40020040
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	40020070 	.word	0x40020070
 8002fbc:	40020088 	.word	0x40020088
 8002fc0:	400200a0 	.word	0x400200a0
 8002fc4:	400200b8 	.word	0x400200b8
 8002fc8:	40020410 	.word	0x40020410
 8002fcc:	40020428 	.word	0x40020428
 8002fd0:	40020440 	.word	0x40020440
 8002fd4:	40020458 	.word	0x40020458
 8002fd8:	40020470 	.word	0x40020470
 8002fdc:	40020488 	.word	0x40020488
 8002fe0:	400204a0 	.word	0x400204a0
 8002fe4:	400204b8 	.word	0x400204b8
 8002fe8:	58025408 	.word	0x58025408
 8002fec:	5802541c 	.word	0x5802541c
 8002ff0:	58025430 	.word	0x58025430
 8002ff4:	58025444 	.word	0x58025444
 8002ff8:	58025458 	.word	0x58025458
 8002ffc:	5802546c 	.word	0x5802546c
 8003000:	58025480 	.word	0x58025480
 8003004:	58025494 	.word	0x58025494

08003008 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e237      	b.n	800348a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d004      	beq.n	8003030 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2280      	movs	r2, #128	@ 0x80
 800302a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e22c      	b.n	800348a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5c      	ldr	r2, [pc, #368]	@ (80031a8 <HAL_DMA_Abort_IT+0x1a0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04a      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5b      	ldr	r2, [pc, #364]	@ (80031ac <HAL_DMA_Abort_IT+0x1a4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d045      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a59      	ldr	r2, [pc, #356]	@ (80031b0 <HAL_DMA_Abort_IT+0x1a8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d040      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a58      	ldr	r2, [pc, #352]	@ (80031b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d03b      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a56      	ldr	r2, [pc, #344]	@ (80031b8 <HAL_DMA_Abort_IT+0x1b0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d036      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a55      	ldr	r2, [pc, #340]	@ (80031bc <HAL_DMA_Abort_IT+0x1b4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d031      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a53      	ldr	r2, [pc, #332]	@ (80031c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d02c      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a52      	ldr	r2, [pc, #328]	@ (80031c4 <HAL_DMA_Abort_IT+0x1bc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d027      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a50      	ldr	r2, [pc, #320]	@ (80031c8 <HAL_DMA_Abort_IT+0x1c0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d022      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4f      	ldr	r2, [pc, #316]	@ (80031cc <HAL_DMA_Abort_IT+0x1c4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d01d      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a4d      	ldr	r2, [pc, #308]	@ (80031d0 <HAL_DMA_Abort_IT+0x1c8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d018      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4c      	ldr	r2, [pc, #304]	@ (80031d4 <HAL_DMA_Abort_IT+0x1cc>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a4a      	ldr	r2, [pc, #296]	@ (80031d8 <HAL_DMA_Abort_IT+0x1d0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00e      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a49      	ldr	r2, [pc, #292]	@ (80031dc <HAL_DMA_Abort_IT+0x1d4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a47      	ldr	r2, [pc, #284]	@ (80031e0 <HAL_DMA_Abort_IT+0x1d8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d004      	beq.n	80030d0 <HAL_DMA_Abort_IT+0xc8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a46      	ldr	r2, [pc, #280]	@ (80031e4 <HAL_DMA_Abort_IT+0x1dc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Abort_IT+0xcc>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_Abort_IT+0xce>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8086 	beq.w	80031e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a2f      	ldr	r2, [pc, #188]	@ (80031a8 <HAL_DMA_Abort_IT+0x1a0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04a      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2e      	ldr	r2, [pc, #184]	@ (80031ac <HAL_DMA_Abort_IT+0x1a4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d045      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	@ (80031b0 <HAL_DMA_Abort_IT+0x1a8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d040      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <HAL_DMA_Abort_IT+0x1ac>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d03b      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a29      	ldr	r2, [pc, #164]	@ (80031b8 <HAL_DMA_Abort_IT+0x1b0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d036      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a28      	ldr	r2, [pc, #160]	@ (80031bc <HAL_DMA_Abort_IT+0x1b4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d031      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HAL_DMA_Abort_IT+0x1b8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02c      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a25      	ldr	r2, [pc, #148]	@ (80031c4 <HAL_DMA_Abort_IT+0x1bc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d027      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <HAL_DMA_Abort_IT+0x1c0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a22      	ldr	r2, [pc, #136]	@ (80031cc <HAL_DMA_Abort_IT+0x1c4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d01d      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a20      	ldr	r2, [pc, #128]	@ (80031d0 <HAL_DMA_Abort_IT+0x1c8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1f      	ldr	r2, [pc, #124]	@ (80031d4 <HAL_DMA_Abort_IT+0x1cc>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_DMA_Abort_IT+0x1d0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <HAL_DMA_Abort_IT+0x1d4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1a      	ldr	r2, [pc, #104]	@ (80031e0 <HAL_DMA_Abort_IT+0x1d8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Abort_IT+0x17c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_DMA_Abort_IT+0x1dc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <HAL_DMA_Abort_IT+0x18e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e178      	b.n	8003488 <HAL_DMA_Abort_IT+0x480>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e16f      	b.n	8003488 <HAL_DMA_Abort_IT+0x480>
 80031a8:	40020010 	.word	0x40020010
 80031ac:	40020028 	.word	0x40020028
 80031b0:	40020040 	.word	0x40020040
 80031b4:	40020058 	.word	0x40020058
 80031b8:	40020070 	.word	0x40020070
 80031bc:	40020088 	.word	0x40020088
 80031c0:	400200a0 	.word	0x400200a0
 80031c4:	400200b8 	.word	0x400200b8
 80031c8:	40020410 	.word	0x40020410
 80031cc:	40020428 	.word	0x40020428
 80031d0:	40020440 	.word	0x40020440
 80031d4:	40020458 	.word	0x40020458
 80031d8:	40020470 	.word	0x40020470
 80031dc:	40020488 	.word	0x40020488
 80031e0:	400204a0 	.word	0x400204a0
 80031e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 020e 	bic.w	r2, r2, #14
 80031f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6c      	ldr	r2, [pc, #432]	@ (80033b0 <HAL_DMA_Abort_IT+0x3a8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04a      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a6b      	ldr	r2, [pc, #428]	@ (80033b4 <HAL_DMA_Abort_IT+0x3ac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d045      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a69      	ldr	r2, [pc, #420]	@ (80033b8 <HAL_DMA_Abort_IT+0x3b0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d040      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a68      	ldr	r2, [pc, #416]	@ (80033bc <HAL_DMA_Abort_IT+0x3b4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d03b      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a66      	ldr	r2, [pc, #408]	@ (80033c0 <HAL_DMA_Abort_IT+0x3b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d036      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a65      	ldr	r2, [pc, #404]	@ (80033c4 <HAL_DMA_Abort_IT+0x3bc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d031      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a63      	ldr	r2, [pc, #396]	@ (80033c8 <HAL_DMA_Abort_IT+0x3c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02c      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a62      	ldr	r2, [pc, #392]	@ (80033cc <HAL_DMA_Abort_IT+0x3c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d027      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a60      	ldr	r2, [pc, #384]	@ (80033d0 <HAL_DMA_Abort_IT+0x3c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5f      	ldr	r2, [pc, #380]	@ (80033d4 <HAL_DMA_Abort_IT+0x3cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01d      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5d      	ldr	r2, [pc, #372]	@ (80033d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5c      	ldr	r2, [pc, #368]	@ (80033dc <HAL_DMA_Abort_IT+0x3d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5a      	ldr	r2, [pc, #360]	@ (80033e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a59      	ldr	r2, [pc, #356]	@ (80033e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a57      	ldr	r2, [pc, #348]	@ (80033e8 <HAL_DMA_Abort_IT+0x3e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_DMA_Abort_IT+0x290>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a56      	ldr	r2, [pc, #344]	@ (80033ec <HAL_DMA_Abort_IT+0x3e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <HAL_DMA_Abort_IT+0x2a2>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e007      	b.n	80032ba <HAL_DMA_Abort_IT+0x2b2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a3c      	ldr	r2, [pc, #240]	@ (80033b0 <HAL_DMA_Abort_IT+0x3a8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d072      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3a      	ldr	r2, [pc, #232]	@ (80033b4 <HAL_DMA_Abort_IT+0x3ac>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d06d      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a39      	ldr	r2, [pc, #228]	@ (80033b8 <HAL_DMA_Abort_IT+0x3b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d068      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a37      	ldr	r2, [pc, #220]	@ (80033bc <HAL_DMA_Abort_IT+0x3b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d063      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a36      	ldr	r2, [pc, #216]	@ (80033c0 <HAL_DMA_Abort_IT+0x3b8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d05e      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a34      	ldr	r2, [pc, #208]	@ (80033c4 <HAL_DMA_Abort_IT+0x3bc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d059      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a33      	ldr	r2, [pc, #204]	@ (80033c8 <HAL_DMA_Abort_IT+0x3c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d054      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a31      	ldr	r2, [pc, #196]	@ (80033cc <HAL_DMA_Abort_IT+0x3c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04f      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a30      	ldr	r2, [pc, #192]	@ (80033d0 <HAL_DMA_Abort_IT+0x3c8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d04a      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a2e      	ldr	r2, [pc, #184]	@ (80033d4 <HAL_DMA_Abort_IT+0x3cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d045      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2d      	ldr	r2, [pc, #180]	@ (80033d8 <HAL_DMA_Abort_IT+0x3d0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d040      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2b      	ldr	r2, [pc, #172]	@ (80033dc <HAL_DMA_Abort_IT+0x3d4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d03b      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2a      	ldr	r2, [pc, #168]	@ (80033e0 <HAL_DMA_Abort_IT+0x3d8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d036      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a28      	ldr	r2, [pc, #160]	@ (80033e4 <HAL_DMA_Abort_IT+0x3dc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d031      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a27      	ldr	r2, [pc, #156]	@ (80033e8 <HAL_DMA_Abort_IT+0x3e0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d02c      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <HAL_DMA_Abort_IT+0x3e4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d027      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a24      	ldr	r2, [pc, #144]	@ (80033f0 <HAL_DMA_Abort_IT+0x3e8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d022      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a22      	ldr	r2, [pc, #136]	@ (80033f4 <HAL_DMA_Abort_IT+0x3ec>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a21      	ldr	r2, [pc, #132]	@ (80033f8 <HAL_DMA_Abort_IT+0x3f0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d018      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1f      	ldr	r2, [pc, #124]	@ (80033fc <HAL_DMA_Abort_IT+0x3f4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1e      	ldr	r2, [pc, #120]	@ (8003400 <HAL_DMA_Abort_IT+0x3f8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00e      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_DMA_Abort_IT+0x3fc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1b      	ldr	r2, [pc, #108]	@ (8003408 <HAL_DMA_Abort_IT+0x400>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <HAL_DMA_Abort_IT+0x3a2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a19      	ldr	r2, [pc, #100]	@ (800340c <HAL_DMA_Abort_IT+0x404>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d132      	bne.n	8003410 <HAL_DMA_Abort_IT+0x408>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e031      	b.n	8003412 <HAL_DMA_Abort_IT+0x40a>
 80033ae:	bf00      	nop
 80033b0:	40020010 	.word	0x40020010
 80033b4:	40020028 	.word	0x40020028
 80033b8:	40020040 	.word	0x40020040
 80033bc:	40020058 	.word	0x40020058
 80033c0:	40020070 	.word	0x40020070
 80033c4:	40020088 	.word	0x40020088
 80033c8:	400200a0 	.word	0x400200a0
 80033cc:	400200b8 	.word	0x400200b8
 80033d0:	40020410 	.word	0x40020410
 80033d4:	40020428 	.word	0x40020428
 80033d8:	40020440 	.word	0x40020440
 80033dc:	40020458 	.word	0x40020458
 80033e0:	40020470 	.word	0x40020470
 80033e4:	40020488 	.word	0x40020488
 80033e8:	400204a0 	.word	0x400204a0
 80033ec:	400204b8 	.word	0x400204b8
 80033f0:	58025408 	.word	0x58025408
 80033f4:	5802541c 	.word	0x5802541c
 80033f8:	58025430 	.word	0x58025430
 80033fc:	58025444 	.word	0x58025444
 8003400:	58025458 	.word	0x58025458
 8003404:	5802546c 	.word	0x5802546c
 8003408:	58025480 	.word	0x58025480
 800340c:	58025494 	.word	0x58025494
 8003410:	2300      	movs	r3, #0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d028      	beq.n	8003468 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003424:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003444:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800345c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003466:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	@ 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034a0:	4b67      	ldr	r3, [pc, #412]	@ (8003640 <HAL_DMA_IRQHandler+0x1ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a67      	ldr	r2, [pc, #412]	@ (8003644 <HAL_DMA_IRQHandler+0x1b0>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0a9b      	lsrs	r3, r3, #10
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003648 <HAL_DMA_IRQHandler+0x1b4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d04a      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5d      	ldr	r2, [pc, #372]	@ (800364c <HAL_DMA_IRQHandler+0x1b8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d045      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5c      	ldr	r2, [pc, #368]	@ (8003650 <HAL_DMA_IRQHandler+0x1bc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d040      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a5a      	ldr	r2, [pc, #360]	@ (8003654 <HAL_DMA_IRQHandler+0x1c0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d03b      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a59      	ldr	r2, [pc, #356]	@ (8003658 <HAL_DMA_IRQHandler+0x1c4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d036      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a57      	ldr	r2, [pc, #348]	@ (800365c <HAL_DMA_IRQHandler+0x1c8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a56      	ldr	r2, [pc, #344]	@ (8003660 <HAL_DMA_IRQHandler+0x1cc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d02c      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a54      	ldr	r2, [pc, #336]	@ (8003664 <HAL_DMA_IRQHandler+0x1d0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d027      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a53      	ldr	r2, [pc, #332]	@ (8003668 <HAL_DMA_IRQHandler+0x1d4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d022      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a51      	ldr	r2, [pc, #324]	@ (800366c <HAL_DMA_IRQHandler+0x1d8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a50      	ldr	r2, [pc, #320]	@ (8003670 <HAL_DMA_IRQHandler+0x1dc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d018      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4e      	ldr	r2, [pc, #312]	@ (8003674 <HAL_DMA_IRQHandler+0x1e0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4d      	ldr	r2, [pc, #308]	@ (8003678 <HAL_DMA_IRQHandler+0x1e4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4b      	ldr	r2, [pc, #300]	@ (800367c <HAL_DMA_IRQHandler+0x1e8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4a      	ldr	r2, [pc, #296]	@ (8003680 <HAL_DMA_IRQHandler+0x1ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_DMA_IRQHandler+0xd2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a48      	ldr	r2, [pc, #288]	@ (8003684 <HAL_DMA_IRQHandler+0x1f0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_DMA_IRQHandler+0xd6>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_DMA_IRQHandler+0xd8>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 842b 	beq.w	8003dc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2208      	movs	r2, #8
 800357c:	409a      	lsls	r2, r3
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80a2 	beq.w	80036cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <HAL_DMA_IRQHandler+0x1b4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d04a      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2d      	ldr	r2, [pc, #180]	@ (800364c <HAL_DMA_IRQHandler+0x1b8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d045      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_DMA_IRQHandler+0x1bc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d040      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <HAL_DMA_IRQHandler+0x1c0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d03b      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_DMA_IRQHandler+0x1c4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d036      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a27      	ldr	r2, [pc, #156]	@ (800365c <HAL_DMA_IRQHandler+0x1c8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d031      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <HAL_DMA_IRQHandler+0x1cc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02c      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a24      	ldr	r2, [pc, #144]	@ (8003664 <HAL_DMA_IRQHandler+0x1d0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d027      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <HAL_DMA_IRQHandler+0x1d4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d022      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	@ (800366c <HAL_DMA_IRQHandler+0x1d8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d01d      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003670 <HAL_DMA_IRQHandler+0x1dc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d018      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_DMA_IRQHandler+0x1e0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <HAL_DMA_IRQHandler+0x1e4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <HAL_DMA_IRQHandler+0x1e8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_DMA_IRQHandler+0x1ec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_DMA_IRQHandler+0x194>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <HAL_DMA_IRQHandler+0x1f0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d12f      	bne.n	8003688 <HAL_DMA_IRQHandler+0x1f4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e02e      	b.n	800369c <HAL_DMA_IRQHandler+0x208>
 800363e:	bf00      	nop
 8003640:	24000004 	.word	0x24000004
 8003644:	1b4e81b5 	.word	0x1b4e81b5
 8003648:	40020010 	.word	0x40020010
 800364c:	40020028 	.word	0x40020028
 8003650:	40020040 	.word	0x40020040
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8
 8003668:	40020410 	.word	0x40020410
 800366c:	40020428 	.word	0x40020428
 8003670:	40020440 	.word	0x40020440
 8003674:	40020458 	.word	0x40020458
 8003678:	40020470 	.word	0x40020470
 800367c:	40020488 	.word	0x40020488
 8003680:	400204a0 	.word	0x400204a0
 8003684:	400204b8 	.word	0x400204b8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf14      	ite	ne
 8003696:	2301      	movne	r3, #1
 8003698:	2300      	moveq	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	2208      	movs	r2, #8
 80036ba:	409a      	lsls	r2, r3
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06e      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a69      	ldr	r2, [pc, #420]	@ (800388c <HAL_DMA_IRQHandler+0x3f8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d04a      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a67      	ldr	r2, [pc, #412]	@ (8003890 <HAL_DMA_IRQHandler+0x3fc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d045      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a66      	ldr	r2, [pc, #408]	@ (8003894 <HAL_DMA_IRQHandler+0x400>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a64      	ldr	r2, [pc, #400]	@ (8003898 <HAL_DMA_IRQHandler+0x404>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d03b      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a63      	ldr	r2, [pc, #396]	@ (800389c <HAL_DMA_IRQHandler+0x408>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d036      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a61      	ldr	r2, [pc, #388]	@ (80038a0 <HAL_DMA_IRQHandler+0x40c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d031      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a60      	ldr	r2, [pc, #384]	@ (80038a4 <HAL_DMA_IRQHandler+0x410>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d02c      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a5e      	ldr	r2, [pc, #376]	@ (80038a8 <HAL_DMA_IRQHandler+0x414>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d027      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5d      	ldr	r2, [pc, #372]	@ (80038ac <HAL_DMA_IRQHandler+0x418>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5b      	ldr	r2, [pc, #364]	@ (80038b0 <HAL_DMA_IRQHandler+0x41c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5a      	ldr	r2, [pc, #360]	@ (80038b4 <HAL_DMA_IRQHandler+0x420>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a58      	ldr	r2, [pc, #352]	@ (80038b8 <HAL_DMA_IRQHandler+0x424>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a57      	ldr	r2, [pc, #348]	@ (80038bc <HAL_DMA_IRQHandler+0x428>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a55      	ldr	r2, [pc, #340]	@ (80038c0 <HAL_DMA_IRQHandler+0x42c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a54      	ldr	r2, [pc, #336]	@ (80038c4 <HAL_DMA_IRQHandler+0x430>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_IRQHandler+0x2ee>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a52      	ldr	r2, [pc, #328]	@ (80038c8 <HAL_DMA_IRQHandler+0x434>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10a      	bne.n	8003798 <HAL_DMA_IRQHandler+0x304>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e003      	b.n	80037a0 <HAL_DMA_IRQHandler+0x30c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00d      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	f043 0202 	orr.w	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2204      	movs	r2, #4
 80037ca:	409a      	lsls	r2, r3
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 808f 	beq.w	80038f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2c      	ldr	r2, [pc, #176]	@ (800388c <HAL_DMA_IRQHandler+0x3f8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d04a      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003890 <HAL_DMA_IRQHandler+0x3fc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d045      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a29      	ldr	r2, [pc, #164]	@ (8003894 <HAL_DMA_IRQHandler+0x400>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d040      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a27      	ldr	r2, [pc, #156]	@ (8003898 <HAL_DMA_IRQHandler+0x404>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d03b      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a26      	ldr	r2, [pc, #152]	@ (800389c <HAL_DMA_IRQHandler+0x408>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d036      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a24      	ldr	r2, [pc, #144]	@ (80038a0 <HAL_DMA_IRQHandler+0x40c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a23      	ldr	r2, [pc, #140]	@ (80038a4 <HAL_DMA_IRQHandler+0x410>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d02c      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a21      	ldr	r2, [pc, #132]	@ (80038a8 <HAL_DMA_IRQHandler+0x414>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d027      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a20      	ldr	r2, [pc, #128]	@ (80038ac <HAL_DMA_IRQHandler+0x418>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1e      	ldr	r2, [pc, #120]	@ (80038b0 <HAL_DMA_IRQHandler+0x41c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	@ (80038b4 <HAL_DMA_IRQHandler+0x420>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <HAL_DMA_IRQHandler+0x424>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1a      	ldr	r2, [pc, #104]	@ (80038bc <HAL_DMA_IRQHandler+0x428>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	@ (80038c0 <HAL_DMA_IRQHandler+0x42c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <HAL_DMA_IRQHandler+0x430>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_DMA_IRQHandler+0x3e2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a15      	ldr	r2, [pc, #84]	@ (80038c8 <HAL_DMA_IRQHandler+0x434>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d12a      	bne.n	80038cc <HAL_DMA_IRQHandler+0x438>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e023      	b.n	80038d4 <HAL_DMA_IRQHandler+0x440>
 800388c:	40020010 	.word	0x40020010
 8003890:	40020028 	.word	0x40020028
 8003894:	40020040 	.word	0x40020040
 8003898:	40020058 	.word	0x40020058
 800389c:	40020070 	.word	0x40020070
 80038a0:	40020088 	.word	0x40020088
 80038a4:	400200a0 	.word	0x400200a0
 80038a8:	400200b8 	.word	0x400200b8
 80038ac:	40020410 	.word	0x40020410
 80038b0:	40020428 	.word	0x40020428
 80038b4:	40020440 	.word	0x40020440
 80038b8:	40020458 	.word	0x40020458
 80038bc:	40020470 	.word	0x40020470
 80038c0:	40020488 	.word	0x40020488
 80038c4:	400204a0 	.word	0x400204a0
 80038c8:	400204b8 	.word	0x400204b8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2204      	movs	r2, #4
 80038e2:	409a      	lsls	r2, r3
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ec:	f043 0204 	orr.w	r2, r3, #4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2210      	movs	r2, #16
 80038fe:	409a      	lsls	r2, r3
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a6 	beq.w	8003a56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a85      	ldr	r2, [pc, #532]	@ (8003b24 <HAL_DMA_IRQHandler+0x690>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d04a      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a83      	ldr	r2, [pc, #524]	@ (8003b28 <HAL_DMA_IRQHandler+0x694>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d045      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a82      	ldr	r2, [pc, #520]	@ (8003b2c <HAL_DMA_IRQHandler+0x698>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d040      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a80      	ldr	r2, [pc, #512]	@ (8003b30 <HAL_DMA_IRQHandler+0x69c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d03b      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7f      	ldr	r2, [pc, #508]	@ (8003b34 <HAL_DMA_IRQHandler+0x6a0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d036      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7d      	ldr	r2, [pc, #500]	@ (8003b38 <HAL_DMA_IRQHandler+0x6a4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d031      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b3c <HAL_DMA_IRQHandler+0x6a8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d02c      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a7a      	ldr	r2, [pc, #488]	@ (8003b40 <HAL_DMA_IRQHandler+0x6ac>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d027      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a79      	ldr	r2, [pc, #484]	@ (8003b44 <HAL_DMA_IRQHandler+0x6b0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d022      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a77      	ldr	r2, [pc, #476]	@ (8003b48 <HAL_DMA_IRQHandler+0x6b4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01d      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a76      	ldr	r2, [pc, #472]	@ (8003b4c <HAL_DMA_IRQHandler+0x6b8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d018      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a74      	ldr	r2, [pc, #464]	@ (8003b50 <HAL_DMA_IRQHandler+0x6bc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a73      	ldr	r2, [pc, #460]	@ (8003b54 <HAL_DMA_IRQHandler+0x6c0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00e      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a71      	ldr	r2, [pc, #452]	@ (8003b58 <HAL_DMA_IRQHandler+0x6c4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d009      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a70      	ldr	r2, [pc, #448]	@ (8003b5c <HAL_DMA_IRQHandler+0x6c8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_DMA_IRQHandler+0x516>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b60 <HAL_DMA_IRQHandler+0x6cc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10a      	bne.n	80039c0 <HAL_DMA_IRQHandler+0x52c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf14      	ite	ne
 80039b8:	2301      	movne	r3, #1
 80039ba:	2300      	moveq	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e009      	b.n	80039d4 <HAL_DMA_IRQHandler+0x540>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d03e      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2210      	movs	r2, #16
 80039e2:	409a      	lsls	r2, r3
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d108      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d024      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e01f      	b.n	8003a56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01b      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
 8003a26:	e016      	b.n	8003a56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d107      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0208 	bic.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2220      	movs	r2, #32
 8003a60:	409a      	lsls	r2, r3
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8110 	beq.w	8003c8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2c      	ldr	r2, [pc, #176]	@ (8003b24 <HAL_DMA_IRQHandler+0x690>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d04a      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_DMA_IRQHandler+0x694>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d045      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a29      	ldr	r2, [pc, #164]	@ (8003b2c <HAL_DMA_IRQHandler+0x698>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d040      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a28      	ldr	r2, [pc, #160]	@ (8003b30 <HAL_DMA_IRQHandler+0x69c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d03b      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a26      	ldr	r2, [pc, #152]	@ (8003b34 <HAL_DMA_IRQHandler+0x6a0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d036      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a25      	ldr	r2, [pc, #148]	@ (8003b38 <HAL_DMA_IRQHandler+0x6a4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d031      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a23      	ldr	r2, [pc, #140]	@ (8003b3c <HAL_DMA_IRQHandler+0x6a8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02c      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a22      	ldr	r2, [pc, #136]	@ (8003b40 <HAL_DMA_IRQHandler+0x6ac>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d027      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	@ (8003b44 <HAL_DMA_IRQHandler+0x6b0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d022      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_DMA_IRQHandler+0x6b4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d01d      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <HAL_DMA_IRQHandler+0x6b8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d018      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_DMA_IRQHandler+0x6bc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b54 <HAL_DMA_IRQHandler+0x6c0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <HAL_DMA_IRQHandler+0x6c4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <HAL_DMA_IRQHandler+0x6c8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x678>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a16      	ldr	r2, [pc, #88]	@ (8003b60 <HAL_DMA_IRQHandler+0x6cc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d12b      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x6d0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e02a      	b.n	8003b78 <HAL_DMA_IRQHandler+0x6e4>
 8003b22:	bf00      	nop
 8003b24:	40020010 	.word	0x40020010
 8003b28:	40020028 	.word	0x40020028
 8003b2c:	40020040 	.word	0x40020040
 8003b30:	40020058 	.word	0x40020058
 8003b34:	40020070 	.word	0x40020070
 8003b38:	40020088 	.word	0x40020088
 8003b3c:	400200a0 	.word	0x400200a0
 8003b40:	400200b8 	.word	0x400200b8
 8003b44:	40020410 	.word	0x40020410
 8003b48:	40020428 	.word	0x40020428
 8003b4c:	40020440 	.word	0x40020440
 8003b50:	40020458 	.word	0x40020458
 8003b54:	40020470 	.word	0x40020470
 8003b58:	40020488 	.word	0x40020488
 8003b5c:	400204a0 	.word	0x400204a0
 8003b60:	400204b8 	.word	0x400204b8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8087 	beq.w	8003c8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2220      	movs	r2, #32
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d139      	bne.n	8003c0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0216 	bic.w	r2, r2, #22
 8003ba8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_DMA_IRQHandler+0x736>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0208 	bic.w	r2, r2, #8
 8003bd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	223f      	movs	r2, #63	@ 0x3f
 8003be4:	409a      	lsls	r2, r3
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 834a 	beq.w	8004298 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
          }
          return;
 8003c0c:	e344      	b.n	8004298 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d108      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d02c      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e027      	b.n	8003c8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d023      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
 8003c4c:	e01e      	b.n	8003c8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10f      	bne.n	8003c7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0210 	bic.w	r2, r2, #16
 8003c6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8306 	beq.w	80042a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8088 	beq.w	8003db4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8003e9c <HAL_DMA_IRQHandler+0xa08>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04a      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a79      	ldr	r2, [pc, #484]	@ (8003ea0 <HAL_DMA_IRQHandler+0xa0c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d045      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a77      	ldr	r2, [pc, #476]	@ (8003ea4 <HAL_DMA_IRQHandler+0xa10>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d040      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a76      	ldr	r2, [pc, #472]	@ (8003ea8 <HAL_DMA_IRQHandler+0xa14>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d03b      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a74      	ldr	r2, [pc, #464]	@ (8003eac <HAL_DMA_IRQHandler+0xa18>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d036      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a73      	ldr	r2, [pc, #460]	@ (8003eb0 <HAL_DMA_IRQHandler+0xa1c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d031      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a71      	ldr	r2, [pc, #452]	@ (8003eb4 <HAL_DMA_IRQHandler+0xa20>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d02c      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a70      	ldr	r2, [pc, #448]	@ (8003eb8 <HAL_DMA_IRQHandler+0xa24>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d027      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	@ (8003ebc <HAL_DMA_IRQHandler+0xa28>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d022      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ec0 <HAL_DMA_IRQHandler+0xa2c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d01d      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6b      	ldr	r2, [pc, #428]	@ (8003ec4 <HAL_DMA_IRQHandler+0xa30>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec8 <HAL_DMA_IRQHandler+0xa34>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a68      	ldr	r2, [pc, #416]	@ (8003ecc <HAL_DMA_IRQHandler+0xa38>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a67      	ldr	r2, [pc, #412]	@ (8003ed0 <HAL_DMA_IRQHandler+0xa3c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a65      	ldr	r2, [pc, #404]	@ (8003ed4 <HAL_DMA_IRQHandler+0xa40>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x8b8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a64      	ldr	r2, [pc, #400]	@ (8003ed8 <HAL_DMA_IRQHandler+0xa44>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x8ca>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e007      	b.n	8003d6e <HAL_DMA_IRQHandler+0x8da>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d307      	bcc.n	8003d8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f2      	bne.n	8003d6e <HAL_DMA_IRQHandler+0x8da>
 8003d88:	e000      	b.n	8003d8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003da2:	e003      	b.n	8003dac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8272 	beq.w	80042a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
 8003dc6:	e26c      	b.n	80042a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a43      	ldr	r2, [pc, #268]	@ (8003edc <HAL_DMA_IRQHandler+0xa48>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d022      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a42      	ldr	r2, [pc, #264]	@ (8003ee0 <HAL_DMA_IRQHandler+0xa4c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d01d      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a40      	ldr	r2, [pc, #256]	@ (8003ee4 <HAL_DMA_IRQHandler+0xa50>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d018      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee8 <HAL_DMA_IRQHandler+0xa54>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3d      	ldr	r2, [pc, #244]	@ (8003eec <HAL_DMA_IRQHandler+0xa58>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8003ef0 <HAL_DMA_IRQHandler+0xa5c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d009      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a3a      	ldr	r2, [pc, #232]	@ (8003ef4 <HAL_DMA_IRQHandler+0xa60>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x984>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a39      	ldr	r2, [pc, #228]	@ (8003ef8 <HAL_DMA_IRQHandler+0xa64>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d101      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x988>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_DMA_IRQHandler+0x98a>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 823f 	beq.w	80042a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e30:	f003 031f 	and.w	r3, r3, #31
 8003e34:	2204      	movs	r2, #4
 8003e36:	409a      	lsls	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80cd 	beq.w	8003fdc <HAL_DMA_IRQHandler+0xb48>
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80c7 	beq.w	8003fdc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2204      	movs	r2, #4
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d049      	beq.n	8003efc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8210 	beq.w	800429c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e84:	e20a      	b.n	800429c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8206 	beq.w	800429c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e98:	e200      	b.n	800429c <HAL_DMA_IRQHandler+0xe08>
 8003e9a:	bf00      	nop
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
 8003edc:	58025408 	.word	0x58025408
 8003ee0:	5802541c 	.word	0x5802541c
 8003ee4:	58025430 	.word	0x58025430
 8003ee8:	58025444 	.word	0x58025444
 8003eec:	58025458 	.word	0x58025458
 8003ef0:	5802546c 	.word	0x5802546c
 8003ef4:	58025480 	.word	0x58025480
 8003ef8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d160      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7f      	ldr	r2, [pc, #508]	@ (8004108 <HAL_DMA_IRQHandler+0xc74>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d04a      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a7d      	ldr	r2, [pc, #500]	@ (800410c <HAL_DMA_IRQHandler+0xc78>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d045      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a7c      	ldr	r2, [pc, #496]	@ (8004110 <HAL_DMA_IRQHandler+0xc7c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d040      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a7a      	ldr	r2, [pc, #488]	@ (8004114 <HAL_DMA_IRQHandler+0xc80>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d03b      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a79      	ldr	r2, [pc, #484]	@ (8004118 <HAL_DMA_IRQHandler+0xc84>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d036      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a77      	ldr	r2, [pc, #476]	@ (800411c <HAL_DMA_IRQHandler+0xc88>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d031      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a76      	ldr	r2, [pc, #472]	@ (8004120 <HAL_DMA_IRQHandler+0xc8c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d02c      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a74      	ldr	r2, [pc, #464]	@ (8004124 <HAL_DMA_IRQHandler+0xc90>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d027      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a73      	ldr	r2, [pc, #460]	@ (8004128 <HAL_DMA_IRQHandler+0xc94>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a71      	ldr	r2, [pc, #452]	@ (800412c <HAL_DMA_IRQHandler+0xc98>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01d      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a70      	ldr	r2, [pc, #448]	@ (8004130 <HAL_DMA_IRQHandler+0xc9c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d018      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6e      	ldr	r2, [pc, #440]	@ (8004134 <HAL_DMA_IRQHandler+0xca0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a6d      	ldr	r2, [pc, #436]	@ (8004138 <HAL_DMA_IRQHandler+0xca4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a6b      	ldr	r2, [pc, #428]	@ (800413c <HAL_DMA_IRQHandler+0xca8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a6a      	ldr	r2, [pc, #424]	@ (8004140 <HAL_DMA_IRQHandler+0xcac>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0xb12>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a68      	ldr	r2, [pc, #416]	@ (8004144 <HAL_DMA_IRQHandler+0xcb0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d108      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0xb24>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0208 	bic.w	r2, r2, #8
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e007      	b.n	8003fc8 <HAL_DMA_IRQHandler+0xb34>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8165 	beq.w	800429c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fda:	e15f      	b.n	800429c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80c5 	beq.w	800417c <HAL_DMA_IRQHandler+0xce8>
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80bf 	beq.w	800417c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2202      	movs	r2, #2
 8004008:	409a      	lsls	r2, r3
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d018      	beq.n	800404a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 813a 	beq.w	80042a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004034:	e134      	b.n	80042a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8130 	beq.w	80042a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004048:	e12a      	b.n	80042a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	f040 8089 	bne.w	8004168 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2b      	ldr	r2, [pc, #172]	@ (8004108 <HAL_DMA_IRQHandler+0xc74>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d04a      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a29      	ldr	r2, [pc, #164]	@ (800410c <HAL_DMA_IRQHandler+0xc78>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d045      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a28      	ldr	r2, [pc, #160]	@ (8004110 <HAL_DMA_IRQHandler+0xc7c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d040      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <HAL_DMA_IRQHandler+0xc80>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d03b      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a25      	ldr	r2, [pc, #148]	@ (8004118 <HAL_DMA_IRQHandler+0xc84>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d036      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a23      	ldr	r2, [pc, #140]	@ (800411c <HAL_DMA_IRQHandler+0xc88>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d031      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <HAL_DMA_IRQHandler+0xc8c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d02c      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a20      	ldr	r2, [pc, #128]	@ (8004124 <HAL_DMA_IRQHandler+0xc90>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d027      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004128 <HAL_DMA_IRQHandler+0xc94>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <HAL_DMA_IRQHandler+0xc98>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01d      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1c      	ldr	r2, [pc, #112]	@ (8004130 <HAL_DMA_IRQHandler+0xc9c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <HAL_DMA_IRQHandler+0xca0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a19      	ldr	r2, [pc, #100]	@ (8004138 <HAL_DMA_IRQHandler+0xca4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a17      	ldr	r2, [pc, #92]	@ (800413c <HAL_DMA_IRQHandler+0xca8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <HAL_DMA_IRQHandler+0xcac>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_DMA_IRQHandler+0xc62>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a14      	ldr	r2, [pc, #80]	@ (8004144 <HAL_DMA_IRQHandler+0xcb0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d128      	bne.n	8004148 <HAL_DMA_IRQHandler+0xcb4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0214 	bic.w	r2, r2, #20
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e027      	b.n	8004158 <HAL_DMA_IRQHandler+0xcc4>
 8004108:	40020010 	.word	0x40020010
 800410c:	40020028 	.word	0x40020028
 8004110:	40020040 	.word	0x40020040
 8004114:	40020058 	.word	0x40020058
 8004118:	40020070 	.word	0x40020070
 800411c:	40020088 	.word	0x40020088
 8004120:	400200a0 	.word	0x400200a0
 8004124:	400200b8 	.word	0x400200b8
 8004128:	40020410 	.word	0x40020410
 800412c:	40020428 	.word	0x40020428
 8004130:	40020440 	.word	0x40020440
 8004134:	40020458 	.word	0x40020458
 8004138:	40020470 	.word	0x40020470
 800413c:	40020488 	.word	0x40020488
 8004140:	400204a0 	.word	0x400204a0
 8004144:	400204b8 	.word	0x400204b8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 020a 	bic.w	r2, r2, #10
 8004156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8097 	beq.w	80042a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800417a:	e091      	b.n	80042a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2208      	movs	r2, #8
 8004186:	409a      	lsls	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8088 	beq.w	80042a2 <HAL_DMA_IRQHandler+0xe0e>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8082 	beq.w	80042a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a41      	ldr	r2, [pc, #260]	@ (80042a8 <HAL_DMA_IRQHandler+0xe14>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d04a      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3f      	ldr	r2, [pc, #252]	@ (80042ac <HAL_DMA_IRQHandler+0xe18>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d045      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3e      	ldr	r2, [pc, #248]	@ (80042b0 <HAL_DMA_IRQHandler+0xe1c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d040      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3c      	ldr	r2, [pc, #240]	@ (80042b4 <HAL_DMA_IRQHandler+0xe20>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d03b      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3b      	ldr	r2, [pc, #236]	@ (80042b8 <HAL_DMA_IRQHandler+0xe24>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d036      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a39      	ldr	r2, [pc, #228]	@ (80042bc <HAL_DMA_IRQHandler+0xe28>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d031      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <HAL_DMA_IRQHandler+0xe2c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d02c      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a36      	ldr	r2, [pc, #216]	@ (80042c4 <HAL_DMA_IRQHandler+0xe30>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d027      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a35      	ldr	r2, [pc, #212]	@ (80042c8 <HAL_DMA_IRQHandler+0xe34>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a33      	ldr	r2, [pc, #204]	@ (80042cc <HAL_DMA_IRQHandler+0xe38>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a32      	ldr	r2, [pc, #200]	@ (80042d0 <HAL_DMA_IRQHandler+0xe3c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d018      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a30      	ldr	r2, [pc, #192]	@ (80042d4 <HAL_DMA_IRQHandler+0xe40>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2f      	ldr	r2, [pc, #188]	@ (80042d8 <HAL_DMA_IRQHandler+0xe44>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <HAL_DMA_IRQHandler+0xe48>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2c      	ldr	r2, [pc, #176]	@ (80042e0 <HAL_DMA_IRQHandler+0xe4c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_DMA_IRQHandler+0xdaa>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <HAL_DMA_IRQHandler+0xe50>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <HAL_DMA_IRQHandler+0xdbc>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 021c 	bic.w	r2, r2, #28
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e007      	b.n	8004260 <HAL_DMA_IRQHandler+0xdcc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 020e 	bic.w	r2, r2, #14
 800425e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e004      	b.n	80042a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042a2:	3728      	adds	r7, #40	@ 0x28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40020010 	.word	0x40020010
 80042ac:	40020028 	.word	0x40020028
 80042b0:	40020040 	.word	0x40020040
 80042b4:	40020058 	.word	0x40020058
 80042b8:	40020070 	.word	0x40020070
 80042bc:	40020088 	.word	0x40020088
 80042c0:	400200a0 	.word	0x400200a0
 80042c4:	400200b8 	.word	0x400200b8
 80042c8:	40020410 	.word	0x40020410
 80042cc:	40020428 	.word	0x40020428
 80042d0:	40020440 	.word	0x40020440
 80042d4:	40020458 	.word	0x40020458
 80042d8:	40020470 	.word	0x40020470
 80042dc:	40020488 	.word	0x40020488
 80042e0:	400204a0 	.word	0x400204a0
 80042e4:	400204b8 	.word	0x400204b8

080042e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7f      	ldr	r2, [pc, #508]	@ (8004504 <DMA_SetConfig+0x21c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d072      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a7d      	ldr	r2, [pc, #500]	@ (8004508 <DMA_SetConfig+0x220>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d06d      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a7c      	ldr	r2, [pc, #496]	@ (800450c <DMA_SetConfig+0x224>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d068      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a7a      	ldr	r2, [pc, #488]	@ (8004510 <DMA_SetConfig+0x228>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d063      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a79      	ldr	r2, [pc, #484]	@ (8004514 <DMA_SetConfig+0x22c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d05e      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a77      	ldr	r2, [pc, #476]	@ (8004518 <DMA_SetConfig+0x230>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d059      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a76      	ldr	r2, [pc, #472]	@ (800451c <DMA_SetConfig+0x234>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d054      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a74      	ldr	r2, [pc, #464]	@ (8004520 <DMA_SetConfig+0x238>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d04f      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a73      	ldr	r2, [pc, #460]	@ (8004524 <DMA_SetConfig+0x23c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d04a      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a71      	ldr	r2, [pc, #452]	@ (8004528 <DMA_SetConfig+0x240>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d045      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a70      	ldr	r2, [pc, #448]	@ (800452c <DMA_SetConfig+0x244>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d040      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6e      	ldr	r2, [pc, #440]	@ (8004530 <DMA_SetConfig+0x248>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d03b      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6d      	ldr	r2, [pc, #436]	@ (8004534 <DMA_SetConfig+0x24c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d036      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a6b      	ldr	r2, [pc, #428]	@ (8004538 <DMA_SetConfig+0x250>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d031      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6a      	ldr	r2, [pc, #424]	@ (800453c <DMA_SetConfig+0x254>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d02c      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a68      	ldr	r2, [pc, #416]	@ (8004540 <DMA_SetConfig+0x258>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d027      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a67      	ldr	r2, [pc, #412]	@ (8004544 <DMA_SetConfig+0x25c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a65      	ldr	r2, [pc, #404]	@ (8004548 <DMA_SetConfig+0x260>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01d      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a64      	ldr	r2, [pc, #400]	@ (800454c <DMA_SetConfig+0x264>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d018      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a62      	ldr	r2, [pc, #392]	@ (8004550 <DMA_SetConfig+0x268>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a61      	ldr	r2, [pc, #388]	@ (8004554 <DMA_SetConfig+0x26c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004558 <DMA_SetConfig+0x270>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a5e      	ldr	r2, [pc, #376]	@ (800455c <DMA_SetConfig+0x274>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <DMA_SetConfig+0x10a>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5c      	ldr	r2, [pc, #368]	@ (8004560 <DMA_SetConfig+0x278>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <DMA_SetConfig+0x10e>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <DMA_SetConfig+0x110>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004404:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004416:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a39      	ldr	r2, [pc, #228]	@ (8004504 <DMA_SetConfig+0x21c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d04a      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a38      	ldr	r2, [pc, #224]	@ (8004508 <DMA_SetConfig+0x220>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d045      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a36      	ldr	r2, [pc, #216]	@ (800450c <DMA_SetConfig+0x224>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d040      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a35      	ldr	r2, [pc, #212]	@ (8004510 <DMA_SetConfig+0x228>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d03b      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a33      	ldr	r2, [pc, #204]	@ (8004514 <DMA_SetConfig+0x22c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d036      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a32      	ldr	r2, [pc, #200]	@ (8004518 <DMA_SetConfig+0x230>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d031      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a30      	ldr	r2, [pc, #192]	@ (800451c <DMA_SetConfig+0x234>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02c      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2f      	ldr	r2, [pc, #188]	@ (8004520 <DMA_SetConfig+0x238>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d027      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2d      	ldr	r2, [pc, #180]	@ (8004524 <DMA_SetConfig+0x23c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2c      	ldr	r2, [pc, #176]	@ (8004528 <DMA_SetConfig+0x240>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d01d      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2a      	ldr	r2, [pc, #168]	@ (800452c <DMA_SetConfig+0x244>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a29      	ldr	r2, [pc, #164]	@ (8004530 <DMA_SetConfig+0x248>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a27      	ldr	r2, [pc, #156]	@ (8004534 <DMA_SetConfig+0x24c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a26      	ldr	r2, [pc, #152]	@ (8004538 <DMA_SetConfig+0x250>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a24      	ldr	r2, [pc, #144]	@ (800453c <DMA_SetConfig+0x254>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <DMA_SetConfig+0x1d0>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a23      	ldr	r2, [pc, #140]	@ (8004540 <DMA_SetConfig+0x258>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <DMA_SetConfig+0x1d4>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <DMA_SetConfig+0x1d6>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d059      	beq.n	8004576 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	223f      	movs	r2, #63	@ 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d138      	bne.n	8004564 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004502:	e086      	b.n	8004612 <DMA_SetConfig+0x32a>
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8
 8004544:	58025408 	.word	0x58025408
 8004548:	5802541c 	.word	0x5802541c
 800454c:	58025430 	.word	0x58025430
 8004550:	58025444 	.word	0x58025444
 8004554:	58025458 	.word	0x58025458
 8004558:	5802546c 	.word	0x5802546c
 800455c:	58025480 	.word	0x58025480
 8004560:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
}
 8004574:	e04d      	b.n	8004612 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a29      	ldr	r2, [pc, #164]	@ (8004620 <DMA_SetConfig+0x338>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d022      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a27      	ldr	r2, [pc, #156]	@ (8004624 <DMA_SetConfig+0x33c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01d      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <DMA_SetConfig+0x340>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d018      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a24      	ldr	r2, [pc, #144]	@ (800462c <DMA_SetConfig+0x344>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a23      	ldr	r2, [pc, #140]	@ (8004630 <DMA_SetConfig+0x348>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a21      	ldr	r2, [pc, #132]	@ (8004634 <DMA_SetConfig+0x34c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d009      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a20      	ldr	r2, [pc, #128]	@ (8004638 <DMA_SetConfig+0x350>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <DMA_SetConfig+0x2de>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1e      	ldr	r2, [pc, #120]	@ (800463c <DMA_SetConfig+0x354>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d101      	bne.n	80045ca <DMA_SetConfig+0x2e2>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <DMA_SetConfig+0x2e4>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2201      	movs	r2, #1
 80045da:	409a      	lsls	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	d108      	bne.n	8004602 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	e007      	b.n	8004612 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	58025408 	.word	0x58025408
 8004624:	5802541c 	.word	0x5802541c
 8004628:	58025430 	.word	0x58025430
 800462c:	58025444 	.word	0x58025444
 8004630:	58025458 	.word	0x58025458
 8004634:	5802546c 	.word	0x5802546c
 8004638:	58025480 	.word	0x58025480
 800463c:	58025494 	.word	0x58025494

08004640 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a42      	ldr	r2, [pc, #264]	@ (8004758 <DMA_CalcBaseAndBitshift+0x118>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d04a      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a41      	ldr	r2, [pc, #260]	@ (800475c <DMA_CalcBaseAndBitshift+0x11c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d045      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a3f      	ldr	r2, [pc, #252]	@ (8004760 <DMA_CalcBaseAndBitshift+0x120>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d040      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a3e      	ldr	r2, [pc, #248]	@ (8004764 <DMA_CalcBaseAndBitshift+0x124>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d03b      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a3c      	ldr	r2, [pc, #240]	@ (8004768 <DMA_CalcBaseAndBitshift+0x128>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d036      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a3b      	ldr	r2, [pc, #236]	@ (800476c <DMA_CalcBaseAndBitshift+0x12c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d031      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a39      	ldr	r2, [pc, #228]	@ (8004770 <DMA_CalcBaseAndBitshift+0x130>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d02c      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a38      	ldr	r2, [pc, #224]	@ (8004774 <DMA_CalcBaseAndBitshift+0x134>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d027      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a36      	ldr	r2, [pc, #216]	@ (8004778 <DMA_CalcBaseAndBitshift+0x138>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d022      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a35      	ldr	r2, [pc, #212]	@ (800477c <DMA_CalcBaseAndBitshift+0x13c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d01d      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a33      	ldr	r2, [pc, #204]	@ (8004780 <DMA_CalcBaseAndBitshift+0x140>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a32      	ldr	r2, [pc, #200]	@ (8004784 <DMA_CalcBaseAndBitshift+0x144>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a30      	ldr	r2, [pc, #192]	@ (8004788 <DMA_CalcBaseAndBitshift+0x148>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <DMA_CalcBaseAndBitshift+0x14c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004790 <DMA_CalcBaseAndBitshift+0x150>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <DMA_CalcBaseAndBitshift+0xa8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004794 <DMA_CalcBaseAndBitshift+0x154>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <DMA_CalcBaseAndBitshift+0xac>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <DMA_CalcBaseAndBitshift+0xae>
 80046ec:	2300      	movs	r3, #0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d024      	beq.n	800473c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3b10      	subs	r3, #16
 80046fa:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <DMA_CalcBaseAndBitshift+0x158>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	4a24      	ldr	r2, [pc, #144]	@ (800479c <DMA_CalcBaseAndBitshift+0x15c>)
 800470c:	5cd3      	ldrb	r3, [r2, r3]
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d908      	bls.n	800472c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b1f      	ldr	r3, [pc, #124]	@ (80047a0 <DMA_CalcBaseAndBitshift+0x160>)
 8004722:	4013      	ands	r3, r2
 8004724:	1d1a      	adds	r2, r3, #4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	659a      	str	r2, [r3, #88]	@ 0x58
 800472a:	e00d      	b.n	8004748 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <DMA_CalcBaseAndBitshift+0x160>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6593      	str	r3, [r2, #88]	@ 0x58
 800473a:	e005      	b.n	8004748 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40020010 	.word	0x40020010
 800475c:	40020028 	.word	0x40020028
 8004760:	40020040 	.word	0x40020040
 8004764:	40020058 	.word	0x40020058
 8004768:	40020070 	.word	0x40020070
 800476c:	40020088 	.word	0x40020088
 8004770:	400200a0 	.word	0x400200a0
 8004774:	400200b8 	.word	0x400200b8
 8004778:	40020410 	.word	0x40020410
 800477c:	40020428 	.word	0x40020428
 8004780:	40020440 	.word	0x40020440
 8004784:	40020458 	.word	0x40020458
 8004788:	40020470 	.word	0x40020470
 800478c:	40020488 	.word	0x40020488
 8004790:	400204a0 	.word	0x400204a0
 8004794:	400204b8 	.word	0x400204b8
 8004798:	aaaaaaab 	.word	0xaaaaaaab
 800479c:	0800b070 	.word	0x0800b070
 80047a0:	fffffc00 	.word	0xfffffc00

080047a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d120      	bne.n	80047fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d858      	bhi.n	8004872 <DMA_CheckFifoParam+0xce>
 80047c0:	a201      	add	r2, pc, #4	@ (adr r2, 80047c8 <DMA_CheckFifoParam+0x24>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047eb 	.word	0x080047eb
 80047d0:	080047d9 	.word	0x080047d9
 80047d4:	08004873 	.word	0x08004873
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d048      	beq.n	8004876 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047e8:	e045      	b.n	8004876 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047f2:	d142      	bne.n	800487a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047f8:	e03f      	b.n	800487a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004802:	d123      	bne.n	800484c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	2b03      	cmp	r3, #3
 800480a:	d838      	bhi.n	800487e <DMA_CheckFifoParam+0xda>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <DMA_CheckFifoParam+0x70>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004825 	.word	0x08004825
 8004818:	0800482b 	.word	0x0800482b
 800481c:	08004825 	.word	0x08004825
 8004820:	0800483d 	.word	0x0800483d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
        break;
 8004828:	e030      	b.n	800488c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d025      	beq.n	8004882 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800483a:	e022      	b.n	8004882 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004844:	d11f      	bne.n	8004886 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800484a:	e01c      	b.n	8004886 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	2b02      	cmp	r3, #2
 8004852:	d902      	bls.n	800485a <DMA_CheckFifoParam+0xb6>
 8004854:	2b03      	cmp	r3, #3
 8004856:	d003      	beq.n	8004860 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004858:	e018      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
        break;
 800485e:	e015      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
    break;
 8004870:	e00b      	b.n	800488a <DMA_CheckFifoParam+0xe6>
        break;
 8004872:	bf00      	nop
 8004874:	e00a      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        break;
 8004876:	bf00      	nop
 8004878:	e008      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        break;
 800487a:	bf00      	nop
 800487c:	e006      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        break;
 800487e:	bf00      	nop
 8004880:	e004      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        break;
 8004882:	bf00      	nop
 8004884:	e002      	b.n	800488c <DMA_CheckFifoParam+0xe8>
        break;
 8004886:	bf00      	nop
 8004888:	e000      	b.n	800488c <DMA_CheckFifoParam+0xe8>
    break;
 800488a:	bf00      	nop
    }
  }

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop

0800489c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a38      	ldr	r2, [pc, #224]	@ (8004990 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a36      	ldr	r2, [pc, #216]	@ (8004994 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a35      	ldr	r2, [pc, #212]	@ (8004998 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a33      	ldr	r2, [pc, #204]	@ (800499c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a32      	ldr	r2, [pc, #200]	@ (80049a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a30      	ldr	r2, [pc, #192]	@ (80049a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2f      	ldr	r2, [pc, #188]	@ (80049a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2d      	ldr	r2, [pc, #180]	@ (80049ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d101      	bne.n	80048fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01a      	beq.n	800493a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3b08      	subs	r3, #8
 800490c:	4a28      	ldr	r2, [pc, #160]	@ (80049b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4b26      	ldr	r3, [pc, #152]	@ (80049b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a24      	ldr	r2, [pc, #144]	@ (80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004928:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	2201      	movs	r2, #1
 8004932:	409a      	lsls	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004938:	e024      	b.n	8004984 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	3b10      	subs	r3, #16
 8004942:	4a1e      	ldr	r2, [pc, #120]	@ (80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d806      	bhi.n	8004962 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d902      	bls.n	8004962 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3308      	adds	r3, #8
 8004960:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4b18      	ldr	r3, [pc, #96]	@ (80049c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004974:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494
 80049b0:	cccccccd 	.word	0xcccccccd
 80049b4:	16009600 	.word	0x16009600
 80049b8:	58025880 	.word	0x58025880
 80049bc:	aaaaaaab 	.word	0xaaaaaaab
 80049c0:	400204b8 	.word	0x400204b8
 80049c4:	4002040f 	.word	0x4002040f
 80049c8:	10008200 	.word	0x10008200
 80049cc:	40020880 	.word	0x40020880

080049d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d04a      	beq.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d847      	bhi.n	8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d022      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d01d      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a21      	ldr	r2, [pc, #132]	@ (8004a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00e      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d009      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a15      	ldr	r2, [pc, #84]	@ (8004aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a58:	671a      	str	r2, [r3, #112]	@ 0x70
 8004a5a:	e009      	b.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a11      	ldr	r2, [pc, #68]	@ (8004ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004a6e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	2201      	movs	r2, #1
 8004a76:	409a      	lsls	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	58025408 	.word	0x58025408
 8004a8c:	5802541c 	.word	0x5802541c
 8004a90:	58025430 	.word	0x58025430
 8004a94:	58025444 	.word	0x58025444
 8004a98:	58025458 	.word	0x58025458
 8004a9c:	5802546c 	.word	0x5802546c
 8004aa0:	58025480 	.word	0x58025480
 8004aa4:	58025494 	.word	0x58025494
 8004aa8:	1600963f 	.word	0x1600963f
 8004aac:	58025940 	.word	0x58025940
 8004ab0:	1000823f 	.word	0x1000823f
 8004ab4:	40020940 	.word	0x40020940

08004ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	@ 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ac6:	4b86      	ldr	r3, [pc, #536]	@ (8004ce0 <HAL_GPIO_Init+0x228>)
 8004ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004aca:	e18c      	b.n	8004de6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 817e 	beq.w	8004de0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d005      	beq.n	8004afc <HAL_GPIO_Init+0x44>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d130      	bne.n	8004b5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	2203      	movs	r2, #3
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b32:	2201      	movs	r2, #1
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 0201 	and.w	r2, r3, #1
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d017      	beq.n	8004b9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	2203      	movs	r2, #3
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d123      	bne.n	8004bee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	08da      	lsrs	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3208      	adds	r2, #8
 8004bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	08da      	lsrs	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3208      	adds	r2, #8
 8004be8:	69b9      	ldr	r1, [r7, #24]
 8004bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0203 	and.w	r2, r3, #3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80d8 	beq.w	8004de0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce4 <HAL_GPIO_Init+0x22c>)
 8004c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c36:	4a2b      	ldr	r2, [pc, #172]	@ (8004ce4 <HAL_GPIO_Init+0x22c>)
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004c40:	4b28      	ldr	r3, [pc, #160]	@ (8004ce4 <HAL_GPIO_Init+0x22c>)
 8004c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ce8 <HAL_GPIO_Init+0x230>)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	089b      	lsrs	r3, r3, #2
 8004c54:	3302      	adds	r3, #2
 8004c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	220f      	movs	r2, #15
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a1d      	ldr	r2, [pc, #116]	@ (8004cec <HAL_GPIO_Init+0x234>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04a      	beq.n	8004d10 <HAL_GPIO_Init+0x258>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf0 <HAL_GPIO_Init+0x238>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d02b      	beq.n	8004cda <HAL_GPIO_Init+0x222>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a1b      	ldr	r2, [pc, #108]	@ (8004cf4 <HAL_GPIO_Init+0x23c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d025      	beq.n	8004cd6 <HAL_GPIO_Init+0x21e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf8 <HAL_GPIO_Init+0x240>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01f      	beq.n	8004cd2 <HAL_GPIO_Init+0x21a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a19      	ldr	r2, [pc, #100]	@ (8004cfc <HAL_GPIO_Init+0x244>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d019      	beq.n	8004cce <HAL_GPIO_Init+0x216>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a18      	ldr	r2, [pc, #96]	@ (8004d00 <HAL_GPIO_Init+0x248>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_GPIO_Init+0x212>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a17      	ldr	r2, [pc, #92]	@ (8004d04 <HAL_GPIO_Init+0x24c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00d      	beq.n	8004cc6 <HAL_GPIO_Init+0x20e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a16      	ldr	r2, [pc, #88]	@ (8004d08 <HAL_GPIO_Init+0x250>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <HAL_GPIO_Init+0x20a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a15      	ldr	r2, [pc, #84]	@ (8004d0c <HAL_GPIO_Init+0x254>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d101      	bne.n	8004cbe <HAL_GPIO_Init+0x206>
 8004cba:	2309      	movs	r3, #9
 8004cbc:	e029      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	e027      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cc2:	2307      	movs	r3, #7
 8004cc4:	e025      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cc6:	2306      	movs	r3, #6
 8004cc8:	e023      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cca:	2305      	movs	r3, #5
 8004ccc:	e021      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	e01f      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e01d      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e01b      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e019      	b.n	8004d12 <HAL_GPIO_Init+0x25a>
 8004cde:	bf00      	nop
 8004ce0:	58000080 	.word	0x58000080
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	58000400 	.word	0x58000400
 8004cec:	58020000 	.word	0x58020000
 8004cf0:	58020400 	.word	0x58020400
 8004cf4:	58020800 	.word	0x58020800
 8004cf8:	58020c00 	.word	0x58020c00
 8004cfc:	58021000 	.word	0x58021000
 8004d00:	58021400 	.word	0x58021400
 8004d04:	58021800 	.word	0x58021800
 8004d08:	58021c00 	.word	0x58021c00
 8004d0c:	58022400 	.word	0x58022400
 8004d10:	2300      	movs	r3, #0
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	f002 0203 	and.w	r2, r2, #3
 8004d18:	0092      	lsls	r2, r2, #2
 8004d1a:	4093      	lsls	r3, r2
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d22:	4938      	ldr	r1, [pc, #224]	@ (8004e04 <HAL_GPIO_Init+0x34c>)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	3302      	adds	r3, #2
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	3301      	adds	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f ae6b 	bne.w	8004acc <HAL_GPIO_Init+0x14>
  }
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	3724      	adds	r7, #36	@ 0x24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	58000400 	.word	0x58000400

08004e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
 8004e14:	4613      	mov	r3, r2
 8004e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e18:	787b      	ldrb	r3, [r7, #1]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e24:	e003      	b.n	8004e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e26:	887b      	ldrh	r3, [r7, #2]
 8004e28:	041a      	lsls	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	619a      	str	r2, [r3, #24]
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4013      	ands	r3, r2
 8004e52:	041a      	lsls	r2, r3, #16
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	43d9      	mvns	r1, r3
 8004e58:	887b      	ldrh	r3, [r7, #2]
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	619a      	str	r2, [r3, #24]
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4603      	mov	r3, r0
 8004e76:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fb ff7d 	bl	8000d94 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004eac:	4b19      	ldr	r3, [pc, #100]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d00a      	beq.n	8004ece <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004eb8:	4b16      	ldr	r3, [pc, #88]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d001      	beq.n	8004eca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e01f      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e01d      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f023 0207 	bic.w	r2, r3, #7
 8004ed6:	490f      	ldr	r1, [pc, #60]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ede:	f7fc fbf5 	bl	80016cc <HAL_GetTick>
 8004ee2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ee4:	e009      	b.n	8004efa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ee6:	f7fc fbf1 	bl	80016cc <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ef4:	d901      	bls.n	8004efa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e007      	b.n	8004f0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004efa:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <HAL_PWREx_ConfigSupply+0x70>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f06:	d1ee      	bne.n	8004ee6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	58024800 	.word	0x58024800

08004f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	@ 0x30
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e3c8      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8087 	beq.w	8005046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f38:	4b88      	ldr	r3, [pc, #544]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f42:	4b86      	ldr	r3, [pc, #536]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d007      	beq.n	8004f5e <HAL_RCC_OscConfig+0x46>
 8004f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f50:	2b18      	cmp	r3, #24
 8004f52:	d110      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5e>
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d10b      	bne.n	8004f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d06c      	beq.n	8005044 <HAL_RCC_OscConfig+0x12c>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d168      	bne.n	8005044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e3a2      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_OscConfig+0x76>
 8004f80:	4b76      	ldr	r3, [pc, #472]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a75      	ldr	r2, [pc, #468]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e02e      	b.n	8004fec <HAL_RCC_OscConfig+0xd4>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x98>
 8004f96:	4b71      	ldr	r3, [pc, #452]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a70      	ldr	r2, [pc, #448]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a6d      	ldr	r2, [pc, #436]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xd4>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xbc>
 8004fba:	4b68      	ldr	r3, [pc, #416]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a67      	ldr	r2, [pc, #412]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b65      	ldr	r3, [pc, #404]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a64      	ldr	r2, [pc, #400]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xd4>
 8004fd4:	4b61      	ldr	r3, [pc, #388]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a60      	ldr	r2, [pc, #384]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fb6a 	bl	80016cc <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fc fb66 	bl	80016cc <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	@ 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e356      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800500e:	4b53      	ldr	r3, [pc, #332]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xe4>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fc fb56 	bl	80016cc <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fc fb52 	bl	80016cc <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	@ 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e342      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005036:	4b49      	ldr	r3, [pc, #292]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x10c>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 808c 	beq.w	800516c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005054:	4b41      	ldr	r3, [pc, #260]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800505e:	4b3f      	ldr	r3, [pc, #252]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_RCC_OscConfig+0x162>
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2b18      	cmp	r3, #24
 800506e:	d137      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1c8>
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d132      	bne.n	80050e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507a:	4b38      	ldr	r3, [pc, #224]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x17a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e314      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005092:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 0219 	bic.w	r2, r3, #25
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	492f      	ldr	r1, [pc, #188]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fc fb12 	bl	80016cc <HAL_GetTick>
 80050a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ac:	f7fc fb0e 	bl	80016cc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e2fe      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050be:	4b27      	ldr	r3, [pc, #156]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	4920      	ldr	r1, [pc, #128]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050de:	e045      	b.n	800516c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d026      	beq.n	8005136 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050e8:	4b1c      	ldr	r3, [pc, #112]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f023 0219 	bic.w	r2, r3, #25
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4919      	ldr	r1, [pc, #100]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fc fae7 	bl	80016cc <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005102:	f7fc fae3 	bl	80016cc <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e2d3      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005114:	4b11      	ldr	r3, [pc, #68]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005120:	4b0e      	ldr	r3, [pc, #56]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	490b      	ldr	r1, [pc, #44]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	e01a      	b.n	800516c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005136:	4b09      	ldr	r3, [pc, #36]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <HAL_RCC_OscConfig+0x244>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fc fac3 	bl	80016cc <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514a:	f7fc fabf 	bl	80016cc <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d903      	bls.n	8005160 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e2af      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
 800515c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005160:	4b96      	ldr	r3, [pc, #600]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d06a      	beq.n	800524e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005178:	4b90      	ldr	r3, [pc, #576]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005180:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005182:	4b8e      	ldr	r3, [pc, #568]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d007      	beq.n	800519e <HAL_RCC_OscConfig+0x286>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b18      	cmp	r3, #24
 8005192:	d11b      	bne.n	80051cc <HAL_RCC_OscConfig+0x2b4>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b01      	cmp	r3, #1
 800519c:	d116      	bne.n	80051cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800519e:	4b87      	ldr	r3, [pc, #540]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <HAL_RCC_OscConfig+0x29e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b80      	cmp	r3, #128	@ 0x80
 80051b0:	d001      	beq.n	80051b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e282      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051b6:	4b81      	ldr	r3, [pc, #516]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	061b      	lsls	r3, r3, #24
 80051c4:	497d      	ldr	r1, [pc, #500]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051ca:	e040      	b.n	800524e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d023      	beq.n	800521c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051d4:	4b79      	ldr	r3, [pc, #484]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a78      	ldr	r2, [pc, #480]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fc fa74 	bl	80016cc <HAL_GetTick>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80051e8:	f7fc fa70 	bl	80016cc <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e260      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051fa:	4b70      	ldr	r3, [pc, #448]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005206:	4b6d      	ldr	r3, [pc, #436]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	4969      	ldr	r1, [pc, #420]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	60cb      	str	r3, [r1, #12]
 800521a:	e018      	b.n	800524e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800521c:	4b67      	ldr	r3, [pc, #412]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a66      	ldr	r2, [pc, #408]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fa50 	bl	80016cc <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005230:	f7fc fa4c 	bl	80016cc <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e23c      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005242:	4b5e      	ldr	r3, [pc, #376]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d036      	beq.n	80052c8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d019      	beq.n	8005296 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005262:	4b56      	ldr	r3, [pc, #344]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005266:	4a55      	ldr	r2, [pc, #340]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fc fa2d 	bl	80016cc <HAL_GetTick>
 8005272:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005276:	f7fc fa29 	bl	80016cc <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e219      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005288:	4b4c      	ldr	r3, [pc, #304]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800528a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x35e>
 8005294:	e018      	b.n	80052c8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005296:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800529a:	4a48      	ldr	r2, [pc, #288]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a2:	f7fc fa13 	bl	80016cc <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052aa:	f7fc fa0f 	bl	80016cc <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e1ff      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052bc:	4b3f      	ldr	r3, [pc, #252]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80052be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d036      	beq.n	8005342 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052dc:	4b37      	ldr	r3, [pc, #220]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a36      	ldr	r2, [pc, #216]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80052e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052e8:	f7fc f9f0 	bl	80016cc <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f0:	f7fc f9ec 	bl	80016cc <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1dc      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005302:	4b2e      	ldr	r3, [pc, #184]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x3d8>
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005310:	4b2a      	ldr	r3, [pc, #168]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a29      	ldr	r2, [pc, #164]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005316:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800531a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800531c:	f7fc f9d6 	bl	80016cc <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005324:	f7fc f9d2 	bl	80016cc <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e1c2      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005336:	4b21      	ldr	r3, [pc, #132]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8086 	beq.w	800545c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005350:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <HAL_RCC_OscConfig+0x4a8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1a      	ldr	r2, [pc, #104]	@ (80053c0 <HAL_RCC_OscConfig+0x4a8>)
 8005356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800535a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800535c:	f7fc f9b6 	bl	80016cc <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fc f9b2 	bl	80016cc <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	@ 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1a2      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <HAL_RCC_OscConfig+0x4a8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d106      	bne.n	8005398 <HAL_RCC_OscConfig+0x480>
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538e:	4a0b      	ldr	r2, [pc, #44]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	@ 0x70
 8005396:	e032      	b.n	80053fe <HAL_RCC_OscConfig+0x4e6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d111      	bne.n	80053c4 <HAL_RCC_OscConfig+0x4ac>
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a4:	4a05      	ldr	r2, [pc, #20]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ac:	4b03      	ldr	r3, [pc, #12]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b0:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <HAL_RCC_OscConfig+0x4a4>)
 80053b2:	f023 0304 	bic.w	r3, r3, #4
 80053b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053b8:	e021      	b.n	80053fe <HAL_RCC_OscConfig+0x4e6>
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400
 80053c0:	58024800 	.word	0x58024800
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d10c      	bne.n	80053e6 <HAL_RCC_OscConfig+0x4ce>
 80053cc:	4b83      	ldr	r3, [pc, #524]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d0:	4a82      	ldr	r2, [pc, #520]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053d8:	4b80      	ldr	r3, [pc, #512]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053dc:	4a7f      	ldr	r2, [pc, #508]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e4:	e00b      	b.n	80053fe <HAL_RCC_OscConfig+0x4e6>
 80053e6:	4b7d      	ldr	r3, [pc, #500]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ea:	4a7c      	ldr	r2, [pc, #496]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f2:	4b7a      	ldr	r3, [pc, #488]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f6:	4a79      	ldr	r2, [pc, #484]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d015      	beq.n	8005432 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fc f961 	bl	80016cc <HAL_GetTick>
 800540a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fc f95d 	bl	80016cc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e14b      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005424:	4b6d      	ldr	r3, [pc, #436]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ee      	beq.n	800540e <HAL_RCC_OscConfig+0x4f6>
 8005430:	e014      	b.n	800545c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005432:	f7fc f94b 	bl	80016cc <HAL_GetTick>
 8005436:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005438:	e00a      	b.n	8005450 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543a:	f7fc f947 	bl	80016cc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005448:	4293      	cmp	r3, r2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e135      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005450:	4b62      	ldr	r3, [pc, #392]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ee      	bne.n	800543a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 812a 	beq.w	80056ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005466:	4b5d      	ldr	r3, [pc, #372]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800546e:	2b18      	cmp	r3, #24
 8005470:	f000 80ba 	beq.w	80055e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	2b02      	cmp	r3, #2
 800547a:	f040 8095 	bne.w	80055a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800547e:	4b57      	ldr	r3, [pc, #348]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a56      	ldr	r2, [pc, #344]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fc f91f 	bl	80016cc <HAL_GetTick>
 800548e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005492:	f7fc f91b 	bl	80016cc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e10b      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054a4:	4b4d      	ldr	r3, [pc, #308]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054b0:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054b4:	4b4a      	ldr	r3, [pc, #296]	@ (80055e0 <HAL_RCC_OscConfig+0x6c8>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054c0:	0112      	lsls	r2, r2, #4
 80054c2:	430a      	orrs	r2, r1
 80054c4:	4945      	ldr	r1, [pc, #276]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d8:	3b01      	subs	r3, #1
 80054da:	025b      	lsls	r3, r3, #9
 80054dc:	b29b      	uxth	r3, r3
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	3b01      	subs	r3, #1
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f2:	3b01      	subs	r3, #1
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80054fa:	4938      	ldr	r1, [pc, #224]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005500:	4b36      	ldr	r3, [pc, #216]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	4a35      	ldr	r2, [pc, #212]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800550c:	4b33      	ldr	r3, [pc, #204]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800550e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005510:	4b34      	ldr	r3, [pc, #208]	@ (80055e4 <HAL_RCC_OscConfig+0x6cc>)
 8005512:	4013      	ands	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005518:	00d2      	lsls	r2, r2, #3
 800551a:	4930      	ldr	r1, [pc, #192]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005520:	4b2e      	ldr	r3, [pc, #184]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	f023 020c 	bic.w	r2, r3, #12
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	492b      	ldr	r1, [pc, #172]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800552e:	4313      	orrs	r3, r2
 8005530:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	f023 0202 	bic.w	r2, r3, #2
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553e:	4927      	ldr	r1, [pc, #156]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005540:	4313      	orrs	r3, r2
 8005542:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005548:	4a24      	ldr	r2, [pc, #144]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800554a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4a21      	ldr	r2, [pc, #132]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800555c:	4b1f      	ldr	r3, [pc, #124]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a1e      	ldr	r2, [pc, #120]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005568:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a1b      	ldr	r2, [pc, #108]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005574:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800557a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800557e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fc f8a4 	bl	80016cc <HAL_GetTick>
 8005584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005588:	f7fc f8a0 	bl	80016cc <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e090      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x670>
 80055a6:	e088      	b.n	80056ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a8:	4b0c      	ldr	r3, [pc, #48]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a0b      	ldr	r2, [pc, #44]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80055ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fc f88a 	bl	80016cc <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fc f886 	bl	80016cc <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e076      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ce:	4b03      	ldr	r3, [pc, #12]	@ (80055dc <HAL_RCC_OscConfig+0x6c4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x6a4>
 80055da:	e06e      	b.n	80056ba <HAL_RCC_OscConfig+0x7a2>
 80055dc:	58024400 	.word	0x58024400
 80055e0:	fffffc0c 	.word	0xfffffc0c
 80055e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055e8:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80055ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055ee:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d031      	beq.n	8005660 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d12a      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d122      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d11a      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	0a5b      	lsrs	r3, r3, #9
 800562e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005638:	429a      	cmp	r2, r3
 800563a:	d111      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d108      	bne.n	8005660 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	0e1b      	lsrs	r3, r3, #24
 8005652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e02b      	b.n	80056bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005664:	4b17      	ldr	r3, [pc, #92]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 8005666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005668:	08db      	lsrs	r3, r3, #3
 800566a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800566e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	d01f      	beq.n	80056ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800567a:	4b12      	ldr	r3, [pc, #72]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	4a11      	ldr	r2, [pc, #68]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005686:	f7fc f821 	bl	80016cc <HAL_GetTick>
 800568a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800568c:	bf00      	nop
 800568e:	f7fc f81d 	bl	80016cc <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	4293      	cmp	r3, r2
 8005698:	d0f9      	beq.n	800568e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 800569c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800569e:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <HAL_RCC_OscConfig+0x7b0>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80056a6:	00d2      	lsls	r2, r2, #3
 80056a8:	4906      	ldr	r1, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80056ae:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80056b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b2:	4a04      	ldr	r2, [pc, #16]	@ (80056c4 <HAL_RCC_OscConfig+0x7ac>)
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3730      	adds	r7, #48	@ 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	58024400 	.word	0x58024400
 80056c8:	ffff0007 	.word	0xffff0007

080056cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e19c      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4b8a      	ldr	r3, [pc, #552]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d910      	bls.n	8005710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b87      	ldr	r3, [pc, #540]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	4985      	ldr	r1, [pc, #532]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b83      	ldr	r3, [pc, #524]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e184      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	4b7b      	ldr	r3, [pc, #492]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005728:	429a      	cmp	r2, r3
 800572a:	d908      	bls.n	800573e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800572c:	4b78      	ldr	r3, [pc, #480]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	4975      	ldr	r1, [pc, #468]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800573a:	4313      	orrs	r3, r2
 800573c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	4b70      	ldr	r3, [pc, #448]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005756:	429a      	cmp	r2, r3
 8005758:	d908      	bls.n	800576c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800575a:	4b6d      	ldr	r3, [pc, #436]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	496a      	ldr	r1, [pc, #424]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005768:	4313      	orrs	r3, r2
 800576a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	d010      	beq.n	800579a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	4b64      	ldr	r3, [pc, #400]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005784:	429a      	cmp	r2, r3
 8005786:	d908      	bls.n	800579a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005788:	4b61      	ldr	r3, [pc, #388]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	495e      	ldr	r1, [pc, #376]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005796:	4313      	orrs	r3, r2
 8005798:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69da      	ldr	r2, [r3, #28]
 80057aa:	4b59      	ldr	r3, [pc, #356]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d908      	bls.n	80057c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057b6:	4b56      	ldr	r3, [pc, #344]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	4953      	ldr	r1, [pc, #332]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d908      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e4:	4b4a      	ldr	r3, [pc, #296]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f023 020f 	bic.w	r2, r3, #15
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4947      	ldr	r1, [pc, #284]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d055      	beq.n	80058ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005802:	4b43      	ldr	r3, [pc, #268]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4940      	ldr	r1, [pc, #256]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005810:	4313      	orrs	r3, r2
 8005812:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d107      	bne.n	800582c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581c:	4b3c      	ldr	r3, [pc, #240]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d121      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0f6      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d107      	bne.n	8005844 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005834:	4b36      	ldr	r3, [pc, #216]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d115      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0ea      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800584c:	4b30      	ldr	r3, [pc, #192]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0de      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800585c:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0d6      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800586c:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f023 0207 	bic.w	r2, r3, #7
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4925      	ldr	r1, [pc, #148]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587e:	f7fb ff25 	bl	80016cc <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005884:	e00a      	b.n	800589c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005886:	f7fb ff21 	bl	80016cc <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005894:	4293      	cmp	r3, r2
 8005896:	d901      	bls.n	800589c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e0be      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800589c:	4b1c      	ldr	r3, [pc, #112]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d1eb      	bne.n	8005886 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d010      	beq.n	80058dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	4b14      	ldr	r3, [pc, #80]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d208      	bcs.n	80058dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058ca:	4b11      	ldr	r3, [pc, #68]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f023 020f 	bic.w	r2, r3, #15
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	490e      	ldr	r1, [pc, #56]	@ (8005910 <HAL_RCC_ClockConfig+0x244>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058dc:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d214      	bcs.n	8005914 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ea:	4b08      	ldr	r3, [pc, #32]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f023 020f 	bic.w	r2, r3, #15
 80058f2:	4906      	ldr	r1, [pc, #24]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fa:	4b04      	ldr	r3, [pc, #16]	@ (800590c <HAL_RCC_ClockConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d005      	beq.n	8005914 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e086      	b.n	8005a1a <HAL_RCC_ClockConfig+0x34e>
 800590c:	52002000 	.word	0x52002000
 8005910:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	4b3f      	ldr	r3, [pc, #252]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800592c:	429a      	cmp	r2, r3
 800592e:	d208      	bcs.n	8005942 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005930:	4b3c      	ldr	r3, [pc, #240]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	4939      	ldr	r1, [pc, #228]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800593e:	4313      	orrs	r3, r2
 8005940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d010      	beq.n	8005970 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800595a:	429a      	cmp	r2, r3
 800595c:	d208      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800595e:	4b31      	ldr	r3, [pc, #196]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	492e      	ldr	r1, [pc, #184]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800596c:	4313      	orrs	r3, r2
 800596e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	4b28      	ldr	r3, [pc, #160]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005988:	429a      	cmp	r2, r3
 800598a:	d208      	bcs.n	800599e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800598c:	4b25      	ldr	r3, [pc, #148]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	4922      	ldr	r1, [pc, #136]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 800599a:	4313      	orrs	r3, r2
 800599c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d010      	beq.n	80059cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69da      	ldr	r2, [r3, #28]
 80059ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d208      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4917      	ldr	r1, [pc, #92]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059cc:	f000 f834 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b14      	ldr	r3, [pc, #80]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	4912      	ldr	r1, [pc, #72]	@ (8005a28 <HAL_RCC_ClockConfig+0x35c>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <HAL_RCC_ClockConfig+0x358>)
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005a28 <HAL_RCC_ClockConfig+0x35c>)
 80059f4:	5cd3      	ldrb	r3, [r2, r3]
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005a00:	4a0a      	ldr	r2, [pc, #40]	@ (8005a2c <HAL_RCC_ClockConfig+0x360>)
 8005a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a04:	4a0a      	ldr	r2, [pc, #40]	@ (8005a30 <HAL_RCC_ClockConfig+0x364>)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <HAL_RCC_ClockConfig+0x368>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fb fe12 	bl	8001638 <HAL_InitTick>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400
 8005a28:	0800b060 	.word	0x0800b060
 8005a2c:	24000008 	.word	0x24000008
 8005a30:	24000004 	.word	0x24000004
 8005a34:	2400000c 	.word	0x2400000c

08005a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	@ 0x24
 8005a3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a3e:	4bb3      	ldr	r3, [pc, #716]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a46:	2b18      	cmp	r3, #24
 8005a48:	f200 8155 	bhi.w	8005cf6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005cf7 	.word	0x08005cf7
 8005a5c:	08005cf7 	.word	0x08005cf7
 8005a60:	08005cf7 	.word	0x08005cf7
 8005a64:	08005cf7 	.word	0x08005cf7
 8005a68:	08005cf7 	.word	0x08005cf7
 8005a6c:	08005cf7 	.word	0x08005cf7
 8005a70:	08005cf7 	.word	0x08005cf7
 8005a74:	08005adf 	.word	0x08005adf
 8005a78:	08005cf7 	.word	0x08005cf7
 8005a7c:	08005cf7 	.word	0x08005cf7
 8005a80:	08005cf7 	.word	0x08005cf7
 8005a84:	08005cf7 	.word	0x08005cf7
 8005a88:	08005cf7 	.word	0x08005cf7
 8005a8c:	08005cf7 	.word	0x08005cf7
 8005a90:	08005cf7 	.word	0x08005cf7
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005cf7 	.word	0x08005cf7
 8005a9c:	08005cf7 	.word	0x08005cf7
 8005aa0:	08005cf7 	.word	0x08005cf7
 8005aa4:	08005cf7 	.word	0x08005cf7
 8005aa8:	08005cf7 	.word	0x08005cf7
 8005aac:	08005cf7 	.word	0x08005cf7
 8005ab0:	08005cf7 	.word	0x08005cf7
 8005ab4:	08005aeb 	.word	0x08005aeb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab8:	4b94      	ldr	r3, [pc, #592]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ac4:	4b91      	ldr	r3, [pc, #580]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	08db      	lsrs	r3, r3, #3
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	4a90      	ldr	r2, [pc, #576]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ad6:	e111      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ad8:	4b8d      	ldr	r3, [pc, #564]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ada:	61bb      	str	r3, [r7, #24]
      break;
 8005adc:	e10e      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005ade:	4b8d      	ldr	r3, [pc, #564]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ae0:	61bb      	str	r3, [r7, #24]
      break;
 8005ae2:	e10b      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ae6:	61bb      	str	r3, [r7, #24]
      break;
 8005ae8:	e108      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005aea:	4b88      	ldr	r3, [pc, #544]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005af4:	4b85      	ldr	r3, [pc, #532]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005afe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b00:	4b82      	ldr	r3, [pc, #520]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b0a:	4b80      	ldr	r3, [pc, #512]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80e1 	beq.w	8005cf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	f000 8083 	beq.w	8005c3c <HAL_RCC_GetSysClockFreq+0x204>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	f200 80a1 	bhi.w	8005c80 <HAL_RCC_GetSysClockFreq+0x248>
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCC_GetSysClockFreq+0x114>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d056      	beq.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005b4a:	e099      	b.n	8005c80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02d      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b58:	4b6c      	ldr	r3, [pc, #432]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	4a6b      	ldr	r2, [pc, #428]	@ (8005d10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	ee07 3a90 	vmov	s15, r3
 8005b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b82:	4b62      	ldr	r3, [pc, #392]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b96:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005bb2:	e087      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	ee07 3a90 	vmov	s15, r3
 8005bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bbe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005d20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc6:	4b51      	ldr	r3, [pc, #324]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bda:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bf6:	e065      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	ee07 3a90 	vmov	s15, r3
 8005bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	4b40      	ldr	r3, [pc, #256]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c3a:	e043      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005d28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c7e:	e021      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005d24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b1e      	ldr	r3, [pc, #120]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ca6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005d1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005cc4:	4b11      	ldr	r3, [pc, #68]	@ (8005d0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc8:	0a5b      	lsrs	r3, r3, #9
 8005cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cce:	3301      	adds	r3, #1
 8005cd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	ee07 3a90 	vmov	s15, r3
 8005cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce8:	ee17 3a90 	vmov	r3, s15
 8005cec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005cee:	e005      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
      break;
 8005cf4:	e002      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cf8:	61bb      	str	r3, [r7, #24]
      break;
 8005cfa:	bf00      	nop
  }

  return sysclockfreq;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3724      	adds	r7, #36	@ 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	03d09000 	.word	0x03d09000
 8005d14:	003d0900 	.word	0x003d0900
 8005d18:	017d7840 	.word	0x017d7840
 8005d1c:	46000000 	.word	0x46000000
 8005d20:	4c742400 	.word	0x4c742400
 8005d24:	4a742400 	.word	0x4a742400
 8005d28:	4bbebc20 	.word	0x4bbebc20

08005d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d32:	f7ff fe81 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 8005d36:	4602      	mov	r2, r0
 8005d38:	4b10      	ldr	r3, [pc, #64]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	490f      	ldr	r1, [pc, #60]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d44:	5ccb      	ldrb	r3, [r1, r3]
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d50:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <HAL_RCC_GetHCLKFreq+0x50>)
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	4a09      	ldr	r2, [pc, #36]	@ (8005d80 <HAL_RCC_GetHCLKFreq+0x54>)
 8005d5a:	5cd3      	ldrb	r3, [r2, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	4a07      	ldr	r2, [pc, #28]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d6a:	4a07      	ldr	r2, [pc, #28]	@ (8005d88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d70:	4b04      	ldr	r3, [pc, #16]	@ (8005d84 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	0800b060 	.word	0x0800b060
 8005d84:	24000008 	.word	0x24000008
 8005d88:	24000004 	.word	0x24000004

08005d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d90:	f7ff ffcc 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d94:	4602      	mov	r2, r0
 8005d96:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	4904      	ldr	r1, [pc, #16]	@ (8005db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005da2:	5ccb      	ldrb	r3, [r1, r3]
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	58024400 	.word	0x58024400
 8005db4:	0800b060 	.word	0x0800b060

08005db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005dbc:	f7ff ffb6 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	4b06      	ldr	r3, [pc, #24]	@ (8005ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	4904      	ldr	r1, [pc, #16]	@ (8005de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dce:	5ccb      	ldrb	r3, [r1, r3]
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	58024400 	.word	0x58024400
 8005de0:	0800b060 	.word	0x0800b060

08005de4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b0c6      	sub	sp, #280	@ 0x118
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005df6:	2300      	movs	r3, #0
 8005df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005e08:	2500      	movs	r5, #0
 8005e0a:	ea54 0305 	orrs.w	r3, r4, r5
 8005e0e:	d049      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e1a:	d02f      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005e1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005e20:	d828      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e26:	d01a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005e28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e2c:	d822      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e36:	d007      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e38:	e01c      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3a:	4bab      	ldr	r3, [pc, #684]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	4aaa      	ldr	r2, [pc, #680]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e46:	e01a      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fc25 	bl	80076a0 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fccc 	bl	8007804 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e86:	4b98      	ldr	r3, [pc, #608]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e94:	4a94      	ldr	r2, [pc, #592]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e9a:	e003      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	ea58 0309 	orrs.w	r3, r8, r9
 8005eb8:	d047      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d82a      	bhi.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005ee1 	.word	0x08005ee1
 8005ed0:	08005eef 	.word	0x08005eef
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f23 	.word	0x08005f23
 8005edc:	08005f23 	.word	0x08005f23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee0:	4b81      	ldr	r3, [pc, #516]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee4:	4a80      	ldr	r2, [pc, #512]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eec:	e01a      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 fbd2 	bl	80076a0 <RCCEx_PLL2_Config>
 8005efc:	4603      	mov	r3, r0
 8005efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f02:	e00f      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f08:	3328      	adds	r3, #40	@ 0x28
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 fc79 	bl	8007804 <RCCEx_PLL3_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f18:	e004      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f20:	e000      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f2c:	4b6e      	ldr	r3, [pc, #440]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f30:	f023 0107 	bic.w	r1, r3, #7
 8005f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f40:	e003      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005f56:	f04f 0b00 	mov.w	fp, #0
 8005f5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f5e:	d05b      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f68:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f6c:	d03b      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005f6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005f72:	d834      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f78:	d037      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f7e:	d82e      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f84:	d033      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f8a:	d828      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f90:	d01a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005f92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f96:	d822      	bhi.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fa0:	d007      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005fa2:	e01c      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fa4:	4b50      	ldr	r3, [pc, #320]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa8:	4a4f      	ldr	r2, [pc, #316]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fb0:	e01e      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fb70 	bl	80076a0 <RCCEx_PLL2_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005fc6:	e013      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fcc:	3328      	adds	r3, #40	@ 0x28
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fc17 	bl	8007804 <RCCEx_PLL3_Config>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fe4:	e004      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005fee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006008:	4a37      	ldr	r2, [pc, #220]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6593      	str	r3, [r2, #88]	@ 0x58
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006024:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800602e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d05d      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006040:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006044:	d03b      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006046:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800604a:	d834      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800604c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006050:	d037      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006056:	d82e      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006058:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800605c:	d033      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800605e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006062:	d828      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006068:	d01a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800606a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606e:	d822      	bhi.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006074:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006078:	d007      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800607a:	e01c      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607c:	4b1a      	ldr	r3, [pc, #104]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800607e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006088:	e01e      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800608a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608e:	3308      	adds	r3, #8
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fb04 	bl	80076a0 <RCCEx_PLL2_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800609e:	e013      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a4:	3328      	adds	r3, #40	@ 0x28
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fbab 	bl	8007804 <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80060b4:	e008      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060d0:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80060e0:	4a01      	ldr	r2, [pc, #4]	@ (80060e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060e2:	430b      	orrs	r3, r1
 80060e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e6:	e005      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80060e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006100:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800610a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800610e:	460b      	mov	r3, r1
 8006110:	4313      	orrs	r3, r2
 8006112:	d03a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	2b30      	cmp	r3, #48	@ 0x30
 800611c:	d01f      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800611e:	2b30      	cmp	r3, #48	@ 0x30
 8006120:	d819      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006122:	2b20      	cmp	r3, #32
 8006124:	d00c      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d815      	bhi.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d019      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800612e:	2b10      	cmp	r3, #16
 8006130:	d111      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006132:	4baa      	ldr	r3, [pc, #680]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006136:	4aa9      	ldr	r2, [pc, #676]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800613c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800613e:	e011      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006144:	3308      	adds	r3, #8
 8006146:	2102      	movs	r1, #2
 8006148:	4618      	mov	r0, r3
 800614a:	f001 faa9 	bl	80076a0 <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800615c:	e002      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800616c:	4b9b      	ldr	r3, [pc, #620]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800616e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006170:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800617a:	4a98      	ldr	r2, [pc, #608]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800617c:	430b      	orrs	r3, r1
 800617e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006186:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800618a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d051      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061b4:	d035      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80061b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ba:	d82e      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80061bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c0:	d031      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80061c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061c6:	d828      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80061c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061cc:	d01a      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80061ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061d2:	d822      	bhi.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061dc:	d007      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80061de:	e01c      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e0:	4b7e      	ldr	r3, [pc, #504]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	4a7d      	ldr	r2, [pc, #500]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ec:	e01c      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	3308      	adds	r3, #8
 80061f4:	2100      	movs	r1, #0
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 fa52 	bl	80076a0 <RCCEx_PLL2_Config>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006202:	e011      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	3328      	adds	r3, #40	@ 0x28
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f001 faf9 	bl	8007804 <RCCEx_PLL3_Config>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006218:	e006      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006220:	e002      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006230:	4b6a      	ldr	r3, [pc, #424]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006234:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800623c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800623e:	4a67      	ldr	r2, [pc, #412]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006240:	430b      	orrs	r3, r1
 8006242:	6513      	str	r3, [r2, #80]	@ 0x50
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800625a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006264:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d053      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800627a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800627e:	d82c      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006284:	d02f      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800628a:	d826      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800628c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006290:	d02b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006296:	d820      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800629c:	d012      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800629e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062a2:	d81a      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80062a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ac:	d115      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b2:	3308      	adds	r3, #8
 80062b4:	2101      	movs	r1, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f9f2 	bl	80076a0 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062c2:	e015      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	3328      	adds	r3, #40	@ 0x28
 80062ca:	2101      	movs	r1, #1
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fa99 	bl	8007804 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80062d8:	e00a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062e2:	bf00      	nop
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062f8:	4b38      	ldr	r3, [pc, #224]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006306:	4a35      	ldr	r2, [pc, #212]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006308:	430b      	orrs	r3, r1
 800630a:	6513      	str	r3, [r2, #80]	@ 0x50
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006322:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006326:	2300      	movs	r3, #0
 8006328:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800632c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d058      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800633e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006342:	d033      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006348:	d82c      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634e:	d02f      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006354:	d826      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006356:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800635a:	d02b      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800635c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006360:	d820      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006366:	d012      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800636c:	d81a      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d022      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006376:	d115      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637c:	3308      	adds	r3, #8
 800637e:	2101      	movs	r1, #1
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f98d 	bl	80076a0 <RCCEx_PLL2_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800638c:	e015      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	3328      	adds	r3, #40	@ 0x28
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f001 fa34 	bl	8007804 <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80063a2:	e00a      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063aa:	e006      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063ac:	bf00      	nop
 80063ae:	e004      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10e      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063c2:	4b06      	ldr	r3, [pc, #24]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063d2:	4a02      	ldr	r2, [pc, #8]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80063da:	bf00      	nop
 80063dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063f8:	2300      	movs	r3, #0
 80063fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006402:	460b      	mov	r3, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	d037      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800640e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006412:	d00e      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006418:	d816      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800641e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006422:	d111      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006424:	4bc4      	ldr	r3, [pc, #784]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006428:	4ac3      	ldr	r2, [pc, #780]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006430:	e00f      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006436:	3308      	adds	r3, #8
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f930 	bl	80076a0 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006446:	e004      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800644e:	e000      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800645a:	4bb7      	ldr	r3, [pc, #732]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800645c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006468:	4ab3      	ldr	r2, [pc, #716]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800646a:	430b      	orrs	r3, r1
 800646c:	6513      	str	r3, [r2, #80]	@ 0x50
 800646e:	e003      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006484:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800648e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d039      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d81c      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064e5 	.word	0x080064e5
 80064ac:	080064b9 	.word	0x080064b9
 80064b0:	080064c7 	.word	0x080064c7
 80064b4:	080064e5 	.word	0x080064e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064b8:	4b9f      	ldr	r3, [pc, #636]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a9e      	ldr	r2, [pc, #632]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064c4:	e00f      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ca:	3308      	adds	r3, #8
 80064cc:	2102      	movs	r1, #2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 f8e6 	bl	80076a0 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80064da:	e004      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064e2:	e000      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80064e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064ee:	4b92      	ldr	r3, [pc, #584]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f2:	f023 0103 	bic.w	r1, r3, #3
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064fe:	430b      	orrs	r3, r1
 8006500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006502:	e003      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800651c:	2300      	movs	r3, #0
 800651e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006522:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006526:	460b      	mov	r3, r1
 8006528:	4313      	orrs	r3, r2
 800652a:	f000 8099 	beq.w	8006660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800652e:	4b83      	ldr	r3, [pc, #524]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a82      	ldr	r2, [pc, #520]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800653a:	f7fb f8c7 	bl	80016cc <HAL_GetTick>
 800653e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006542:	e00b      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006544:	f7fb f8c2 	bl	80016cc <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b64      	cmp	r3, #100	@ 0x64
 8006552:	d903      	bls.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800655a:	e005      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800655c:	4b77      	ldr	r3, [pc, #476]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0ed      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800656c:	2b00      	cmp	r3, #0
 800656e:	d173      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006570:	4b71      	ldr	r3, [pc, #452]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006572:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800657c:	4053      	eors	r3, r2
 800657e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006582:	2b00      	cmp	r3, #0
 8006584:	d015      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006586:	4b6c      	ldr	r3, [pc, #432]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006592:	4b69      	ldr	r3, [pc, #420]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	4a68      	ldr	r2, [pc, #416]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800659e:	4b66      	ldr	r3, [pc, #408]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a2:	4a65      	ldr	r2, [pc, #404]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065aa:	4a63      	ldr	r2, [pc, #396]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80065b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065be:	d118      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fb f884 	bl	80016cc <HAL_GetTick>
 80065c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065c8:	e00d      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ca:	f7fb f87f 	bl	80016cc <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065da:	429a      	cmp	r2, r3
 80065dc:	d903      	bls.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80065e4:	e005      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065e6:	4b54      	ldr	r3, [pc, #336]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0eb      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80065f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d129      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800660a:	d10e      	bne.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800660c:	4b4a      	ldr	r3, [pc, #296]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006618:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800661c:	091a      	lsrs	r2, r3, #4
 800661e:	4b48      	ldr	r3, [pc, #288]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006620:	4013      	ands	r3, r2
 8006622:	4a45      	ldr	r2, [pc, #276]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006624:	430b      	orrs	r3, r1
 8006626:	6113      	str	r3, [r2, #16]
 8006628:	e005      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800662a:	4b43      	ldr	r3, [pc, #268]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	4a42      	ldr	r2, [pc, #264]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006630:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006634:	6113      	str	r3, [r2, #16]
 8006636:	4b40      	ldr	r3, [pc, #256]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006638:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800663a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006646:	4a3c      	ldr	r2, [pc, #240]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6713      	str	r3, [r2, #112]	@ 0x70
 800664c:	e008      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800664e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006652:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800665c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f002 0301 	and.w	r3, r2, #1
 800666c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006670:	2300      	movs	r3, #0
 8006672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006676:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800667a:	460b      	mov	r3, r1
 800667c:	4313      	orrs	r3, r2
 800667e:	f000 808f 	beq.w	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006688:	2b28      	cmp	r3, #40	@ 0x28
 800668a:	d871      	bhi.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800668c:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	08006779 	.word	0x08006779
 8006698:	08006771 	.word	0x08006771
 800669c:	08006771 	.word	0x08006771
 80066a0:	08006771 	.word	0x08006771
 80066a4:	08006771 	.word	0x08006771
 80066a8:	08006771 	.word	0x08006771
 80066ac:	08006771 	.word	0x08006771
 80066b0:	08006771 	.word	0x08006771
 80066b4:	08006745 	.word	0x08006745
 80066b8:	08006771 	.word	0x08006771
 80066bc:	08006771 	.word	0x08006771
 80066c0:	08006771 	.word	0x08006771
 80066c4:	08006771 	.word	0x08006771
 80066c8:	08006771 	.word	0x08006771
 80066cc:	08006771 	.word	0x08006771
 80066d0:	08006771 	.word	0x08006771
 80066d4:	0800675b 	.word	0x0800675b
 80066d8:	08006771 	.word	0x08006771
 80066dc:	08006771 	.word	0x08006771
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006771 	.word	0x08006771
 80066e8:	08006771 	.word	0x08006771
 80066ec:	08006771 	.word	0x08006771
 80066f0:	08006771 	.word	0x08006771
 80066f4:	08006779 	.word	0x08006779
 80066f8:	08006771 	.word	0x08006771
 80066fc:	08006771 	.word	0x08006771
 8006700:	08006771 	.word	0x08006771
 8006704:	08006771 	.word	0x08006771
 8006708:	08006771 	.word	0x08006771
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	08006779 	.word	0x08006779
 8006718:	08006771 	.word	0x08006771
 800671c:	08006771 	.word	0x08006771
 8006720:	08006771 	.word	0x08006771
 8006724:	08006771 	.word	0x08006771
 8006728:	08006771 	.word	0x08006771
 800672c:	08006771 	.word	0x08006771
 8006730:	08006771 	.word	0x08006771
 8006734:	08006779 	.word	0x08006779
 8006738:	58024400 	.word	0x58024400
 800673c:	58024800 	.word	0x58024800
 8006740:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006748:	3308      	adds	r3, #8
 800674a:	2101      	movs	r1, #1
 800674c:	4618      	mov	r0, r3
 800674e:	f000 ffa7 	bl	80076a0 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006758:	e00f      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	3328      	adds	r3, #40	@ 0x28
 8006760:	2101      	movs	r1, #1
 8006762:	4618      	mov	r0, r3
 8006764:	f001 f84e 	bl	8007804 <RCCEx_PLL3_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006782:	4bbf      	ldr	r3, [pc, #764]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006786:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006790:	4abb      	ldr	r2, [pc, #748]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006792:	430b      	orrs	r3, r1
 8006794:	6553      	str	r3, [r2, #84]	@ 0x54
 8006796:	e003      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800679c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f002 0302 	and.w	r3, r2, #2
 80067ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b0:	2300      	movs	r3, #0
 80067b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d041      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c6:	2b05      	cmp	r3, #5
 80067c8:	d824      	bhi.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80067ca:	a201      	add	r2, pc, #4	@ (adr r2, 80067d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	0800681d 	.word	0x0800681d
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067ff 	.word	0x080067ff
 80067dc:	0800681d 	.word	0x0800681d
 80067e0:	0800681d 	.word	0x0800681d
 80067e4:	0800681d 	.word	0x0800681d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ec:	3308      	adds	r3, #8
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ff55 	bl	80076a0 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00f      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006802:	3328      	adds	r3, #40	@ 0x28
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fffc 	bl	8007804 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006812:	e004      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800681a:	e000      	b.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800681c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006826:	4b96      	ldr	r3, [pc, #600]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	f023 0107 	bic.w	r1, r3, #7
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006834:	4a92      	ldr	r2, [pc, #584]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006836:	430b      	orrs	r3, r1
 8006838:	6553      	str	r3, [r2, #84]	@ 0x54
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f002 0304 	and.w	r3, r2, #4
 8006850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800685a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d044      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800686c:	2b05      	cmp	r3, #5
 800686e:	d825      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006870:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068c5 	.word	0x080068c5
 800687c:	08006891 	.word	0x08006891
 8006880:	080068a7 	.word	0x080068a7
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068c5 	.word	0x080068c5
 800688c:	080068c5 	.word	0x080068c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006894:	3308      	adds	r3, #8
 8006896:	2101      	movs	r1, #1
 8006898:	4618      	mov	r0, r3
 800689a:	f000 ff01 	bl	80076a0 <RCCEx_PLL2_Config>
 800689e:	4603      	mov	r3, r0
 80068a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068a4:	e00f      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068aa:	3328      	adds	r3, #40	@ 0x28
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 ffa8 	bl	8007804 <RCCEx_PLL3_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80068ba:	e004      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068c2:	e000      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80068c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068ce:	4b6c      	ldr	r3, [pc, #432]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d2:	f023 0107 	bic.w	r1, r3, #7
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068de:	4a68      	ldr	r2, [pc, #416]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068e4:	e003      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f002 0320 	and.w	r3, r2, #32
 80068fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006904:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d055      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800691a:	d033      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800691c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006920:	d82c      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006926:	d02f      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692c:	d826      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800692e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006932:	d02b      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006938:	d820      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800693a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693e:	d012      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006944:	d81a      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d022      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800694a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800694e:	d115      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	3308      	adds	r3, #8
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fea1 	bl	80076a0 <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006964:	e015      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696a:	3328      	adds	r3, #40	@ 0x28
 800696c:	2102      	movs	r1, #2
 800696e:	4618      	mov	r0, r3
 8006970:	f000 ff48 	bl	8007804 <RCCEx_PLL3_Config>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800697a:	e00a      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006982:	e006      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006984:	bf00      	nop
 8006986:	e004      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006988:	bf00      	nop
 800698a:	e002      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800698c:	bf00      	nop
 800698e:	e000      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006992:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800699a:	4b39      	ldr	r3, [pc, #228]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069aa:	4a35      	ldr	r2, [pc, #212]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80069b0:	e003      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80069c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069ca:	2300      	movs	r3, #0
 80069cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80069d4:	460b      	mov	r3, r1
 80069d6:	4313      	orrs	r3, r2
 80069d8:	d058      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069e6:	d033      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80069e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80069ec:	d82c      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f2:	d02f      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069f8:	d826      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80069fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069fe:	d02b      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a04:	d820      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0a:	d012      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a10:	d81a      	bhi.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d022      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1a:	d115      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a20:	3308      	adds	r3, #8
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fe3b 	bl	80076a0 <RCCEx_PLL2_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a30:	e015      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	3328      	adds	r3, #40	@ 0x28
 8006a38:	2102      	movs	r1, #2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fee2 	bl	8007804 <RCCEx_PLL3_Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006a46:	e00a      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a4e:	e006      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a50:	bf00      	nop
 8006a52:	e004      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a54:	bf00      	nop
 8006a56:	e002      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a58:	bf00      	nop
 8006a5a:	e000      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10e      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a76:	4a02      	ldr	r2, [pc, #8]	@ (8006a80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a7c:	e006      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006a7e:	bf00      	nop
 8006a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aa2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	d055      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ab4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ab8:	d033      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006aba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006abe:	d82c      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ac4:	d02f      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aca:	d826      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006acc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ad0:	d02b      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006ad2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ad6:	d820      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006adc:	d012      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ae2:	d81a      	bhi.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d022      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aec:	d115      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af2:	3308      	adds	r3, #8
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fdd2 	bl	80076a0 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b02:	e015      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	3328      	adds	r3, #40	@ 0x28
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fe79 	bl	8007804 <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006b18:	e00a      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b20:	e006      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b22:	bf00      	nop
 8006b24:	e004      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b26:	bf00      	nop
 8006b28:	e002      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b38:	4ba0      	ldr	r3, [pc, #640]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b48:	4a9c      	ldr	r2, [pc, #624]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b4e:	e003      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f002 0308 	and.w	r3, r2, #8
 8006b64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d01e      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8a:	3328      	adds	r3, #40	@ 0x28
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fe38 	bl	8007804 <RCCEx_PLL3_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006ba0:	4b86      	ldr	r3, [pc, #536]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bb0:	4a82      	ldr	r2, [pc, #520]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f002 0310 	and.w	r3, r2, #16
 8006bc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bcc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d01e      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be2:	d10c      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be8:	3328      	adds	r3, #40	@ 0x28
 8006bea:	2102      	movs	r1, #2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fe09 	bl	8007804 <RCCEx_PLL3_Config>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bfe:	4b6f      	ldr	r3, [pc, #444]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006c20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c22:	2300      	movs	r3, #0
 8006c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	d03e      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c3c:	d022      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006c3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c42:	d81b      	bhi.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c4c:	d00b      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006c4e:	e015      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	3308      	adds	r3, #8
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fd21 	bl	80076a0 <RCCEx_PLL2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c64:	e00f      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	3328      	adds	r3, #40	@ 0x28
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fdc8 	bl	8007804 <RCCEx_PLL3_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006c84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10b      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c9e:	4a47      	ldr	r2, [pc, #284]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ca4:	e003      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006caa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006cba:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d03b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cdc:	d818      	bhi.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ce2:	d003      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006cea:	e011      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cec:	4b33      	ldr	r3, [pc, #204]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	4a32      	ldr	r2, [pc, #200]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cf8:	e00f      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	3328      	adds	r3, #40	@ 0x28
 8006d00:	2101      	movs	r1, #1
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fd7e 	bl	8007804 <RCCEx_PLL3_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d22:	4b26      	ldr	r3, [pc, #152]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d32:	4a22      	ldr	r2, [pc, #136]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d38:	e003      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d50:	2300      	movs	r3, #0
 8006d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	d034      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6c:	d007      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006d6e:	e011      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4b12      	ldr	r3, [pc, #72]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	4a11      	ldr	r2, [pc, #68]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00e      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	3308      	adds	r3, #8
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fc8a 	bl	80076a0 <RCCEx_PLL2_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006db2:	4a02      	ldr	r2, [pc, #8]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006db4:	430b      	orrs	r3, r1
 8006db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006db8:	e006      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006dba:	bf00      	nop
 8006dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006dd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2102      	movs	r1, #2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fd09 	bl	8007804 <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006e0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e14:	460b      	mov	r3, r1
 8006e16:	4313      	orrs	r3, r2
 8006e18:	d036      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e24:	d018      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e2a:	d811      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e30:	d014      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e36:	d80b      	bhi.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d011      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e40:	d106      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e42:	4bb7      	ldr	r3, [pc, #732]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	4ab6      	ldr	r2, [pc, #728]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e4e:	e008      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e56:	e004      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e58:	bf00      	nop
 8006e5a:	e002      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10a      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e6a:	4bad      	ldr	r3, [pc, #692]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e78:	4aa9      	ldr	r2, [pc, #676]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e7e:	e003      	b.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e96:	2300      	movs	r3, #0
 8006e98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb2:	4a9b      	ldr	r2, [pc, #620]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ed4:	4b92      	ldr	r3, [pc, #584]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ee2:	4a8f      	ldr	r2, [pc, #572]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006efa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f04:	4b86      	ldr	r3, [pc, #536]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	4a85      	ldr	r2, [pc, #532]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f0e:	6113      	str	r3, [r2, #16]
 8006f10:	4b83      	ldr	r3, [pc, #524]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f12:	6919      	ldr	r1, [r3, #16]
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f1c:	4a80      	ldr	r2, [pc, #512]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f3e:	4b78      	ldr	r3, [pc, #480]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4c:	4a74      	ldr	r2, [pc, #464]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f60:	2300      	movs	r3, #0
 8006f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	d00a      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f72:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7e:	4a68      	ldr	r2, [pc, #416]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006f80:	430b      	orrs	r3, r1
 8006f82:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d011      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fb79 	bl	80076a0 <RCCEx_PLL2_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	6239      	str	r1, [r7, #32]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d011      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb59 	bl	80076a0 <RCCEx_PLL2_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	2100      	movs	r1, #0
 800700e:	61b9      	str	r1, [r7, #24]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800701a:	460b      	mov	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	d011      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007024:	3308      	adds	r3, #8
 8007026:	2102      	movs	r1, #2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb39 	bl	80076a0 <RCCEx_PLL2_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	2100      	movs	r1, #0
 800704e:	6139      	str	r1, [r7, #16]
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d011      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007064:	3328      	adds	r3, #40	@ 0x28
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fbcb 	bl	8007804 <RCCEx_PLL3_Config>
 800706e:	4603      	mov	r3, r0
 8007070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	2100      	movs	r1, #0
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d011      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	3328      	adds	r3, #40	@ 0x28
 80070a6:	2101      	movs	r1, #1
 80070a8:	4618      	mov	r0, r3
 80070aa:	f000 fbab 	bl	8007804 <RCCEx_PLL3_Config>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	2100      	movs	r1, #0
 80070ce:	6039      	str	r1, [r7, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	607b      	str	r3, [r7, #4]
 80070d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070da:	460b      	mov	r3, r1
 80070dc:	4313      	orrs	r3, r2
 80070de:	d011      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e4:	3328      	adds	r3, #40	@ 0x28
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fb8b 	bl	8007804 <RCCEx_PLL3_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80070f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007104:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
}
 8007112:	4618      	mov	r0, r3
 8007114:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007118:	46bd      	mov	sp, r7
 800711a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400

08007124 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007128:	f7fe fe00 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 800712c:	4602      	mov	r2, r0
 800712e:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	4904      	ldr	r1, [pc, #16]	@ (800714c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800713a:	5ccb      	ldrb	r3, [r1, r3]
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007144:	4618      	mov	r0, r3
 8007146:	bd80      	pop	{r7, pc}
 8007148:	58024400 	.word	0x58024400
 800714c:	0800b060 	.word	0x0800b060

08007150 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007150:	b480      	push	{r7}
 8007152:	b089      	sub	sp, #36	@ 0x24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007158:	4ba1      	ldr	r3, [pc, #644]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007162:	4b9f      	ldr	r3, [pc, #636]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007166:	0b1b      	lsrs	r3, r3, #12
 8007168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800716c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800716e:	4b9c      	ldr	r3, [pc, #624]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	091b      	lsrs	r3, r3, #4
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800717a:	4b99      	ldr	r3, [pc, #612]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800717e:	08db      	lsrs	r3, r3, #3
 8007180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8111 	beq.w	80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	f000 8083 	beq.w	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	f200 80a1 	bhi.w	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d056      	beq.n	8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ba:	e099      	b.n	80072f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071bc:	4b88      	ldr	r3, [pc, #544]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02d      	beq.n	8007224 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071c8:	4b85      	ldr	r3, [pc, #532]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	08db      	lsrs	r3, r3, #3
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	4a84      	ldr	r2, [pc, #528]	@ (80073e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
 80071d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	4b7b      	ldr	r3, [pc, #492]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007202:	ed97 6a03 	vldr	s12, [r7, #12]
 8007206:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800720a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800721a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007222:	e087      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007236:	4b6a      	ldr	r3, [pc, #424]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007246:	ed97 6a03 	vldr	s12, [r7, #12]
 800724a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800724e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800725a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800725e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007266:	e065      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007272:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727a:	4b59      	ldr	r3, [pc, #356]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728a:	ed97 6a03 	vldr	s12, [r7, #12]
 800728e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800729e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072aa:	e043      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072be:	4b48      	ldr	r3, [pc, #288]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ee:	e021      	b.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b37      	ldr	r3, [pc, #220]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007332:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007334:	4b2a      	ldr	r3, [pc, #168]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	0a5b      	lsrs	r3, r3, #9
 800733a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800734a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735a:	ee17 2a90 	vmov	r2, s15
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007362:	4b1f      	ldr	r3, [pc, #124]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007374:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007388:	ee17 2a90 	vmov	r2, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007390:	4b13      	ldr	r3, [pc, #76]	@ (80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007394:	0e1b      	lsrs	r3, r3, #24
 8007396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80073ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b6:	ee17 2a90 	vmov	r2, s15
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073be:	e008      	b.n	80073d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
}
 80073d2:	bf00      	nop
 80073d4:	3724      	adds	r7, #36	@ 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	58024400 	.word	0x58024400
 80073e4:	03d09000 	.word	0x03d09000
 80073e8:	46000000 	.word	0x46000000
 80073ec:	4c742400 	.word	0x4c742400
 80073f0:	4a742400 	.word	0x4a742400
 80073f4:	4bbebc20 	.word	0x4bbebc20

080073f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b089      	sub	sp, #36	@ 0x24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007400:	4ba1      	ldr	r3, [pc, #644]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800740a:	4b9f      	ldr	r3, [pc, #636]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	0d1b      	lsrs	r3, r3, #20
 8007410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007414:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007416:	4b9c      	ldr	r3, [pc, #624]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007422:	4b99      	ldr	r3, [pc, #612]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007426:	08db      	lsrs	r3, r3, #3
 8007428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	fb02 f303 	mul.w	r3, r2, r3
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8111 	beq.w	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	2b02      	cmp	r3, #2
 800744a:	f000 8083 	beq.w	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b02      	cmp	r3, #2
 8007452:	f200 80a1 	bhi.w	8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d056      	beq.n	8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007462:	e099      	b.n	8007598 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007464:	4b88      	ldr	r3, [pc, #544]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02d      	beq.n	80074cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007470:	4b85      	ldr	r3, [pc, #532]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a84      	ldr	r2, [pc, #528]	@ (800768c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749a:	4b7b      	ldr	r3, [pc, #492]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074ca:	e087      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007694 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074de:	4b6a      	ldr	r3, [pc, #424]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800750e:	e065      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800751e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007522:	4b59      	ldr	r3, [pc, #356]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007532:	ed97 6a03 	vldr	s12, [r7, #12]
 8007536:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800753a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007552:	e043      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800769c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007566:	4b48      	ldr	r3, [pc, #288]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007576:	ed97 6a03 	vldr	s12, [r7, #12]
 800757a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800757e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800758a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007596:	e021      	b.n	80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075aa:	4b37      	ldr	r3, [pc, #220]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80075be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	0a5b      	lsrs	r3, r3, #9
 80075e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007602:	ee17 2a90 	vmov	r2, s15
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800760a:	4b1f      	ldr	r3, [pc, #124]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007620:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007624:	edd7 6a07 	vldr	s13, [r7, #28]
 8007628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007630:	ee17 2a90 	vmov	r2, s15
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007638:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763c:	0e1b      	lsrs	r3, r3, #24
 800763e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800764e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007652:	edd7 6a07 	vldr	s13, [r7, #28]
 8007656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800765e:	ee17 2a90 	vmov	r2, s15
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007666:	e008      	b.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
}
 800767a:	bf00      	nop
 800767c:	3724      	adds	r7, #36	@ 0x24
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
 800768c:	03d09000 	.word	0x03d09000
 8007690:	46000000 	.word	0x46000000
 8007694:	4c742400 	.word	0x4c742400
 8007698:	4a742400 	.word	0x4a742400
 800769c:	4bbebc20 	.word	0x4bbebc20

080076a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ae:	4b53      	ldr	r3, [pc, #332]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b03      	cmp	r3, #3
 80076b8:	d101      	bne.n	80076be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e099      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076be:	4b4f      	ldr	r3, [pc, #316]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a4e      	ldr	r2, [pc, #312]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ca:	f7f9 ffff 	bl	80016cc <HAL_GetTick>
 80076ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076d0:	e008      	b.n	80076e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076d2:	f7f9 fffb 	bl	80016cc <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d901      	bls.n	80076e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e086      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076e4:	4b45      	ldr	r3, [pc, #276]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076f0:	4b42      	ldr	r3, [pc, #264]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80076f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	031b      	lsls	r3, r3, #12
 80076fe:	493f      	ldr	r1, [pc, #252]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007700:	4313      	orrs	r3, r2
 8007702:	628b      	str	r3, [r1, #40]	@ 0x28
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	3b01      	subs	r3, #1
 800770a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	3b01      	subs	r3, #1
 8007714:	025b      	lsls	r3, r3, #9
 8007716:	b29b      	uxth	r3, r3
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	3b01      	subs	r3, #1
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	3b01      	subs	r3, #1
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007734:	4931      	ldr	r1, [pc, #196]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800773a:	4b30      	ldr	r3, [pc, #192]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	492d      	ldr	r1, [pc, #180]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007748:	4313      	orrs	r3, r2
 800774a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800774c:	4b2b      	ldr	r3, [pc, #172]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800774e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007750:	f023 0220 	bic.w	r2, r3, #32
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	4928      	ldr	r1, [pc, #160]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800775a:	4313      	orrs	r3, r2
 800775c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800775e:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007762:	4a26      	ldr	r2, [pc, #152]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007764:	f023 0310 	bic.w	r3, r3, #16
 8007768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800776a:	4b24      	ldr	r3, [pc, #144]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800776c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800776e:	4b24      	ldr	r3, [pc, #144]	@ (8007800 <RCCEx_PLL2_Config+0x160>)
 8007770:	4013      	ands	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	69d2      	ldr	r2, [r2, #28]
 8007776:	00d2      	lsls	r2, r2, #3
 8007778:	4920      	ldr	r1, [pc, #128]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800777e:	4b1f      	ldr	r3, [pc, #124]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	4a1e      	ldr	r2, [pc, #120]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007784:	f043 0310 	orr.w	r3, r3, #16
 8007788:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007790:	4b1a      	ldr	r3, [pc, #104]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	4a19      	ldr	r2, [pc, #100]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 8007796:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800779a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800779c:	e00f      	b.n	80077be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d106      	bne.n	80077b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077a4:	4b15      	ldr	r3, [pc, #84]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	4a14      	ldr	r2, [pc, #80]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077b0:	e005      	b.n	80077be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077b2:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a11      	ldr	r2, [pc, #68]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077be:	4b0f      	ldr	r3, [pc, #60]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a0e      	ldr	r2, [pc, #56]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ca:	f7f9 ff7f 	bl	80016cc <HAL_GetTick>
 80077ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077d0:	e008      	b.n	80077e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077d2:	f7f9 ff7b 	bl	80016cc <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d901      	bls.n	80077e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e006      	b.n	80077f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077e4:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <RCCEx_PLL2_Config+0x15c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	ffff0007 	.word	0xffff0007

08007804 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007812:	4b53      	ldr	r3, [pc, #332]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d101      	bne.n	8007822 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e099      	b.n	8007956 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007822:	4b4f      	ldr	r3, [pc, #316]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a4e      	ldr	r2, [pc, #312]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800782c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782e:	f7f9 ff4d 	bl	80016cc <HAL_GetTick>
 8007832:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007834:	e008      	b.n	8007848 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007836:	f7f9 ff49 	bl	80016cc <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e086      	b.n	8007956 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007848:	4b45      	ldr	r3, [pc, #276]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007854:	4b42      	ldr	r3, [pc, #264]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	051b      	lsls	r3, r3, #20
 8007862:	493f      	ldr	r1, [pc, #252]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	628b      	str	r3, [r1, #40]	@ 0x28
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	3b01      	subs	r3, #1
 8007878:	025b      	lsls	r3, r3, #9
 800787a:	b29b      	uxth	r3, r3
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	3b01      	subs	r3, #1
 8007884:	041b      	lsls	r3, r3, #16
 8007886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	3b01      	subs	r3, #1
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007898:	4931      	ldr	r1, [pc, #196]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800789e:	4b30      	ldr	r3, [pc, #192]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	492d      	ldr	r1, [pc, #180]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	4928      	ldr	r1, [pc, #160]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078c2:	4b27      	ldr	r3, [pc, #156]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	4a26      	ldr	r2, [pc, #152]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078ce:	4b24      	ldr	r3, [pc, #144]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d2:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <RCCEx_PLL3_Config+0x160>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	69d2      	ldr	r2, [r2, #28]
 80078da:	00d2      	lsls	r2, r2, #3
 80078dc:	4920      	ldr	r1, [pc, #128]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	4a19      	ldr	r2, [pc, #100]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007900:	e00f      	b.n	8007922 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007908:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	4a14      	ldr	r2, [pc, #80]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800790e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007914:	e005      	b.n	8007922 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007916:	4b12      	ldr	r3, [pc, #72]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	4a11      	ldr	r2, [pc, #68]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800791c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007920:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007922:	4b0f      	ldr	r3, [pc, #60]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a0e      	ldr	r2, [pc, #56]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 8007928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800792c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792e:	f7f9 fecd 	bl	80016cc <HAL_GetTick>
 8007932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007934:	e008      	b.n	8007948 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007936:	f7f9 fec9 	bl	80016cc <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <RCCEx_PLL3_Config+0x15c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	58024400 	.word	0x58024400
 8007964:	ffff0007 	.word	0xffff0007

08007968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e049      	b.n	8007a0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7f9 fb40 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f000 fc58 	bl	800825c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d001      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e05e      	b.n	8007aee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0201 	orr.w	r2, r2, #1
 8007a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8007afc <HAL_TIM_Base_Start_IT+0xe4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d02c      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5a:	d027      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a27      	ldr	r2, [pc, #156]	@ (8007b00 <HAL_TIM_Base_Start_IT+0xe8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d022      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a26      	ldr	r2, [pc, #152]	@ (8007b04 <HAL_TIM_Base_Start_IT+0xec>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01d      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a24      	ldr	r2, [pc, #144]	@ (8007b08 <HAL_TIM_Base_Start_IT+0xf0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d018      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a23      	ldr	r2, [pc, #140]	@ (8007b0c <HAL_TIM_Base_Start_IT+0xf4>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a21      	ldr	r2, [pc, #132]	@ (8007b10 <HAL_TIM_Base_Start_IT+0xf8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00e      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a20      	ldr	r2, [pc, #128]	@ (8007b14 <HAL_TIM_Base_Start_IT+0xfc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b18 <HAL_TIM_Base_Start_IT+0x100>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0x94>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b1c <HAL_TIM_Base_Start_IT+0x104>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d115      	bne.n	8007ad8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b20 <HAL_TIM_Base_Start_IT+0x108>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d015      	beq.n	8007aea <HAL_TIM_Base_Start_IT+0xd2>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ac4:	d011      	beq.n	8007aea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f042 0201 	orr.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad6:	e008      	b.n	8007aea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	e000      	b.n	8007aec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40010000 	.word	0x40010000
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40010400 	.word	0x40010400
 8007b10:	40001800 	.word	0x40001800
 8007b14:	40014000 	.word	0x40014000
 8007b18:	4000e000 	.word	0x4000e000
 8007b1c:	4000e400 	.word	0x4000e400
 8007b20:	00010007 	.word	0x00010007

08007b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e049      	b.n	8007bca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f841 	bl	8007bd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f000 fb7a 	bl	800825c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d020      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01b      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f06f 0202 	mvn.w	r2, #2
 8007c1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 faf5 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007c36:	e005      	b.n	8007c44 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fae7 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 faf8 	bl	8008234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d020      	beq.n	8007c96 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01b      	beq.n	8007c96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f06f 0204 	mvn.w	r2, #4
 8007c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 facf 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007c82:	e005      	b.n	8007c90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fac1 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fad2 	bl	8008234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f003 0308 	and.w	r3, r3, #8
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d020      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01b      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0208 	mvn.w	r2, #8
 8007cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2204      	movs	r2, #4
 8007cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 faa9 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007cce:	e005      	b.n	8007cdc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa9b 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 faac 	bl	8008234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d020      	beq.n	8007d2e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01b      	beq.n	8007d2e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f06f 0210 	mvn.w	r2, #16
 8007cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2208      	movs	r2, #8
 8007d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fa83 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007d1a:	e005      	b.n	8007d28 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa75 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa86 	bl	8008234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00c      	beq.n	8007d52 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f06f 0201 	mvn.w	r2, #1
 8007d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7f9 f835 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00c      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 ff3a 	bl	8008bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00c      	beq.n	8007da4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 ff32 	bl	8008c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa40 	bl	8008248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00c      	beq.n	8007dec <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d007      	beq.n	8007dec <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f06f 0220 	mvn.w	r2, #32
 8007de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fefa 	bl	8008be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e0ff      	b.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b14      	cmp	r3, #20
 8007e1e:	f200 80f0 	bhi.w	8008002 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08008003 	.word	0x08008003
 8007e30:	08008003 	.word	0x08008003
 8007e34:	08008003 	.word	0x08008003
 8007e38:	08007ebd 	.word	0x08007ebd
 8007e3c:	08008003 	.word	0x08008003
 8007e40:	08008003 	.word	0x08008003
 8007e44:	08008003 	.word	0x08008003
 8007e48:	08007eff 	.word	0x08007eff
 8007e4c:	08008003 	.word	0x08008003
 8007e50:	08008003 	.word	0x08008003
 8007e54:	08008003 	.word	0x08008003
 8007e58:	08007f3f 	.word	0x08007f3f
 8007e5c:	08008003 	.word	0x08008003
 8007e60:	08008003 	.word	0x08008003
 8007e64:	08008003 	.word	0x08008003
 8007e68:	08007f81 	.word	0x08007f81
 8007e6c:	08008003 	.word	0x08008003
 8007e70:	08008003 	.word	0x08008003
 8007e74:	08008003 	.word	0x08008003
 8007e78:	08007fc1 	.word	0x08007fc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fa9c 	bl	80083c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0208 	orr.w	r2, r2, #8
 8007e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0204 	bic.w	r2, r2, #4
 8007ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6999      	ldr	r1, [r3, #24]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	619a      	str	r2, [r3, #24]
      break;
 8007eba:	e0a5      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fb0c 	bl	80084e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	699a      	ldr	r2, [r3, #24]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6999      	ldr	r1, [r3, #24]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	021a      	lsls	r2, r3, #8
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	619a      	str	r2, [r3, #24]
      break;
 8007efc:	e084      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fb75 	bl	80085f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0208 	orr.w	r2, r2, #8
 8007f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 0204 	bic.w	r2, r2, #4
 8007f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69d9      	ldr	r1, [r3, #28]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	61da      	str	r2, [r3, #28]
      break;
 8007f3c:	e064      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fbdd 	bl	8008704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69d9      	ldr	r1, [r3, #28]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	021a      	lsls	r2, r3, #8
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	61da      	str	r2, [r3, #28]
      break;
 8007f7e:	e043      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fc26 	bl	80087d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0208 	orr.w	r2, r2, #8
 8007f9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0204 	bic.w	r2, r2, #4
 8007faa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007fbe:	e023      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fc6a 	bl	80088a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	021a      	lsls	r2, r3, #8
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008000:	e002      	b.n	8008008 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]
      break;
 8008006:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop

0800801c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIM_ConfigClockSource+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e0dc      	b.n	80081f2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	4b6a      	ldr	r3, [pc, #424]	@ (80081fc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008054:	4013      	ands	r3, r2
 8008056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800805e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a64      	ldr	r2, [pc, #400]	@ (8008200 <HAL_TIM_ConfigClockSource+0x1e4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	f000 80a9 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008074:	4a62      	ldr	r2, [pc, #392]	@ (8008200 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	f200 80ae 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800807c:	4a61      	ldr	r2, [pc, #388]	@ (8008204 <HAL_TIM_ConfigClockSource+0x1e8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	f000 80a1 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008084:	4a5f      	ldr	r2, [pc, #380]	@ (8008204 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f200 80a6 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800808c:	4a5e      	ldr	r2, [pc, #376]	@ (8008208 <HAL_TIM_ConfigClockSource+0x1ec>)
 800808e:	4293      	cmp	r3, r2
 8008090:	f000 8099 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008094:	4a5c      	ldr	r2, [pc, #368]	@ (8008208 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008096:	4293      	cmp	r3, r2
 8008098:	f200 809e 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 800809c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080a0:	f000 8091 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80080a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80080a8:	f200 8096 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b0:	f000 8089 	beq.w	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80080b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b8:	f200 808e 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c0:	d03e      	beq.n	8008140 <HAL_TIM_ConfigClockSource+0x124>
 80080c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080c6:	f200 8087 	bhi.w	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ce:	f000 8086 	beq.w	80081de <HAL_TIM_ConfigClockSource+0x1c2>
 80080d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080d6:	d87f      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080d8:	2b70      	cmp	r3, #112	@ 0x70
 80080da:	d01a      	beq.n	8008112 <HAL_TIM_ConfigClockSource+0xf6>
 80080dc:	2b70      	cmp	r3, #112	@ 0x70
 80080de:	d87b      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e0:	2b60      	cmp	r3, #96	@ 0x60
 80080e2:	d050      	beq.n	8008186 <HAL_TIM_ConfigClockSource+0x16a>
 80080e4:	2b60      	cmp	r3, #96	@ 0x60
 80080e6:	d877      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080e8:	2b50      	cmp	r3, #80	@ 0x50
 80080ea:	d03c      	beq.n	8008166 <HAL_TIM_ConfigClockSource+0x14a>
 80080ec:	2b50      	cmp	r3, #80	@ 0x50
 80080ee:	d873      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f0:	2b40      	cmp	r3, #64	@ 0x40
 80080f2:	d058      	beq.n	80081a6 <HAL_TIM_ConfigClockSource+0x18a>
 80080f4:	2b40      	cmp	r3, #64	@ 0x40
 80080f6:	d86f      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 80080f8:	2b30      	cmp	r3, #48	@ 0x30
 80080fa:	d064      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 80080fc:	2b30      	cmp	r3, #48	@ 0x30
 80080fe:	d86b      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008100:	2b20      	cmp	r3, #32
 8008102:	d060      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d867      	bhi.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d05c      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800810c:	2b10      	cmp	r3, #16
 800810e:	d05a      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008110:	e062      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008122:	f000 fca1 	bl	8008a68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	609a      	str	r2, [r3, #8]
      break;
 800813e:	e04f      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008150:	f000 fc8a 	bl	8008a68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008162:	609a      	str	r2, [r3, #8]
      break;
 8008164:	e03c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	461a      	mov	r2, r3
 8008174:	f000 fbfa 	bl	800896c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2150      	movs	r1, #80	@ 0x50
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fc54 	bl	8008a2c <TIM_ITRx_SetConfig>
      break;
 8008184:	e02c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008192:	461a      	mov	r2, r3
 8008194:	f000 fc19 	bl	80089ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2160      	movs	r1, #96	@ 0x60
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fc44 	bl	8008a2c <TIM_ITRx_SetConfig>
      break;
 80081a4:	e01c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b2:	461a      	mov	r2, r3
 80081b4:	f000 fbda 	bl	800896c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2140      	movs	r1, #64	@ 0x40
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fc34 	bl	8008a2c <TIM_ITRx_SetConfig>
      break;
 80081c4:	e00c      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f000 fc2b 	bl	8008a2c <TIM_ITRx_SetConfig>
      break;
 80081d6:	e003      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e000      	b.n	80081e0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80081de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	ffceff88 	.word	0xffceff88
 8008200:	00100040 	.word	0x00100040
 8008204:	00100030 	.word	0x00100030
 8008208:	00100020 	.word	0x00100020

0800820c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a4a      	ldr	r2, [pc, #296]	@ (8008398 <TIM_Base_SetConfig+0x13c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <TIM_Base_SetConfig+0x40>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800827a:	d00f      	beq.n	800829c <TIM_Base_SetConfig+0x40>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a47      	ldr	r2, [pc, #284]	@ (800839c <TIM_Base_SetConfig+0x140>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d00b      	beq.n	800829c <TIM_Base_SetConfig+0x40>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a46      	ldr	r2, [pc, #280]	@ (80083a0 <TIM_Base_SetConfig+0x144>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d007      	beq.n	800829c <TIM_Base_SetConfig+0x40>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a45      	ldr	r2, [pc, #276]	@ (80083a4 <TIM_Base_SetConfig+0x148>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d003      	beq.n	800829c <TIM_Base_SetConfig+0x40>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a44      	ldr	r2, [pc, #272]	@ (80083a8 <TIM_Base_SetConfig+0x14c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d108      	bne.n	80082ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a39      	ldr	r2, [pc, #228]	@ (8008398 <TIM_Base_SetConfig+0x13c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d027      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082bc:	d023      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a36      	ldr	r2, [pc, #216]	@ (800839c <TIM_Base_SetConfig+0x140>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01f      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a35      	ldr	r2, [pc, #212]	@ (80083a0 <TIM_Base_SetConfig+0x144>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01b      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a34      	ldr	r2, [pc, #208]	@ (80083a4 <TIM_Base_SetConfig+0x148>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d017      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a33      	ldr	r2, [pc, #204]	@ (80083a8 <TIM_Base_SetConfig+0x14c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a32      	ldr	r2, [pc, #200]	@ (80083ac <TIM_Base_SetConfig+0x150>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00f      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a31      	ldr	r2, [pc, #196]	@ (80083b0 <TIM_Base_SetConfig+0x154>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00b      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a30      	ldr	r2, [pc, #192]	@ (80083b4 <TIM_Base_SetConfig+0x158>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d007      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a2f      	ldr	r2, [pc, #188]	@ (80083b8 <TIM_Base_SetConfig+0x15c>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d003      	beq.n	8008306 <TIM_Base_SetConfig+0xaa>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a2e      	ldr	r2, [pc, #184]	@ (80083bc <TIM_Base_SetConfig+0x160>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d108      	bne.n	8008318 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800830c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a16      	ldr	r2, [pc, #88]	@ (8008398 <TIM_Base_SetConfig+0x13c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00f      	beq.n	8008364 <TIM_Base_SetConfig+0x108>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a18      	ldr	r2, [pc, #96]	@ (80083a8 <TIM_Base_SetConfig+0x14c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00b      	beq.n	8008364 <TIM_Base_SetConfig+0x108>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a17      	ldr	r2, [pc, #92]	@ (80083ac <TIM_Base_SetConfig+0x150>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d007      	beq.n	8008364 <TIM_Base_SetConfig+0x108>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a16      	ldr	r2, [pc, #88]	@ (80083b0 <TIM_Base_SetConfig+0x154>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <TIM_Base_SetConfig+0x108>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a15      	ldr	r2, [pc, #84]	@ (80083b4 <TIM_Base_SetConfig+0x158>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d103      	bne.n	800836c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	d105      	bne.n	800838a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f023 0201 	bic.w	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	611a      	str	r2, [r3, #16]
  }
}
 800838a:	bf00      	nop
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40010000 	.word	0x40010000
 800839c:	40000400 	.word	0x40000400
 80083a0:	40000800 	.word	0x40000800
 80083a4:	40000c00 	.word	0x40000c00
 80083a8:	40010400 	.word	0x40010400
 80083ac:	40014000 	.word	0x40014000
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800
 80083b8:	4000e000 	.word	0x4000e000
 80083bc:	4000e400 	.word	0x4000e400

080083c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	f023 0201 	bic.w	r2, r3, #1
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4b37      	ldr	r3, [pc, #220]	@ (80084c8 <TIM_OC1_SetConfig+0x108>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f023 0302 	bic.w	r3, r3, #2
 8008408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a2d      	ldr	r2, [pc, #180]	@ (80084cc <TIM_OC1_SetConfig+0x10c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00f      	beq.n	800843c <TIM_OC1_SetConfig+0x7c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a2c      	ldr	r2, [pc, #176]	@ (80084d0 <TIM_OC1_SetConfig+0x110>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d00b      	beq.n	800843c <TIM_OC1_SetConfig+0x7c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a2b      	ldr	r2, [pc, #172]	@ (80084d4 <TIM_OC1_SetConfig+0x114>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d007      	beq.n	800843c <TIM_OC1_SetConfig+0x7c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a2a      	ldr	r2, [pc, #168]	@ (80084d8 <TIM_OC1_SetConfig+0x118>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d003      	beq.n	800843c <TIM_OC1_SetConfig+0x7c>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a29      	ldr	r2, [pc, #164]	@ (80084dc <TIM_OC1_SetConfig+0x11c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d10c      	bne.n	8008456 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f023 0308 	bic.w	r3, r3, #8
 8008442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	4313      	orrs	r3, r2
 800844c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f023 0304 	bic.w	r3, r3, #4
 8008454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1c      	ldr	r2, [pc, #112]	@ (80084cc <TIM_OC1_SetConfig+0x10c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00f      	beq.n	800847e <TIM_OC1_SetConfig+0xbe>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1b      	ldr	r2, [pc, #108]	@ (80084d0 <TIM_OC1_SetConfig+0x110>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00b      	beq.n	800847e <TIM_OC1_SetConfig+0xbe>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a1a      	ldr	r2, [pc, #104]	@ (80084d4 <TIM_OC1_SetConfig+0x114>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d007      	beq.n	800847e <TIM_OC1_SetConfig+0xbe>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a19      	ldr	r2, [pc, #100]	@ (80084d8 <TIM_OC1_SetConfig+0x118>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d003      	beq.n	800847e <TIM_OC1_SetConfig+0xbe>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a18      	ldr	r2, [pc, #96]	@ (80084dc <TIM_OC1_SetConfig+0x11c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d111      	bne.n	80084a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800848c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	621a      	str	r2, [r3, #32]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	fffeff8f 	.word	0xfffeff8f
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40010400 	.word	0x40010400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	f023 0210 	bic.w	r2, r3, #16
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4b34      	ldr	r3, [pc, #208]	@ (80085dc <TIM_OC2_SetConfig+0xfc>)
 800850c:	4013      	ands	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f023 0320 	bic.w	r3, r3, #32
 800852a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a29      	ldr	r2, [pc, #164]	@ (80085e0 <TIM_OC2_SetConfig+0x100>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d003      	beq.n	8008548 <TIM_OC2_SetConfig+0x68>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a28      	ldr	r2, [pc, #160]	@ (80085e4 <TIM_OC2_SetConfig+0x104>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10d      	bne.n	8008564 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008562:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a1e      	ldr	r2, [pc, #120]	@ (80085e0 <TIM_OC2_SetConfig+0x100>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00f      	beq.n	800858c <TIM_OC2_SetConfig+0xac>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a1d      	ldr	r2, [pc, #116]	@ (80085e4 <TIM_OC2_SetConfig+0x104>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00b      	beq.n	800858c <TIM_OC2_SetConfig+0xac>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <TIM_OC2_SetConfig+0x108>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d007      	beq.n	800858c <TIM_OC2_SetConfig+0xac>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a1b      	ldr	r2, [pc, #108]	@ (80085ec <TIM_OC2_SetConfig+0x10c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC2_SetConfig+0xac>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a1a      	ldr	r2, [pc, #104]	@ (80085f0 <TIM_OC2_SetConfig+0x110>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d113      	bne.n	80085b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	feff8fff 	.word	0xfeff8fff
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4b33      	ldr	r3, [pc, #204]	@ (80086ec <TIM_OC3_SetConfig+0xf8>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0303 	bic.w	r3, r3, #3
 800862a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	4313      	orrs	r3, r2
 8008634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800863c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a28      	ldr	r2, [pc, #160]	@ (80086f0 <TIM_OC3_SetConfig+0xfc>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d003      	beq.n	800865a <TIM_OC3_SetConfig+0x66>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a27      	ldr	r2, [pc, #156]	@ (80086f4 <TIM_OC3_SetConfig+0x100>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d10d      	bne.n	8008676 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	021b      	lsls	r3, r3, #8
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a1d      	ldr	r2, [pc, #116]	@ (80086f0 <TIM_OC3_SetConfig+0xfc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00f      	beq.n	800869e <TIM_OC3_SetConfig+0xaa>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a1c      	ldr	r2, [pc, #112]	@ (80086f4 <TIM_OC3_SetConfig+0x100>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00b      	beq.n	800869e <TIM_OC3_SetConfig+0xaa>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a1b      	ldr	r2, [pc, #108]	@ (80086f8 <TIM_OC3_SetConfig+0x104>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d007      	beq.n	800869e <TIM_OC3_SetConfig+0xaa>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a1a      	ldr	r2, [pc, #104]	@ (80086fc <TIM_OC3_SetConfig+0x108>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d003      	beq.n	800869e <TIM_OC3_SetConfig+0xaa>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a19      	ldr	r2, [pc, #100]	@ (8008700 <TIM_OC3_SetConfig+0x10c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d113      	bne.n	80086c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	011b      	lsls	r3, r3, #4
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	621a      	str	r2, [r3, #32]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	fffeff8f 	.word	0xfffeff8f
 80086f0:	40010000 	.word	0x40010000
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40014400 	.word	0x40014400
 8008700:	40014800 	.word	0x40014800

08008704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4b24      	ldr	r3, [pc, #144]	@ (80087c0 <TIM_OC4_SetConfig+0xbc>)
 8008730:	4013      	ands	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800873a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800874e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	031b      	lsls	r3, r3, #12
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a19      	ldr	r2, [pc, #100]	@ (80087c4 <TIM_OC4_SetConfig+0xc0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d00f      	beq.n	8008784 <TIM_OC4_SetConfig+0x80>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a18      	ldr	r2, [pc, #96]	@ (80087c8 <TIM_OC4_SetConfig+0xc4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_OC4_SetConfig+0x80>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <TIM_OC4_SetConfig+0xc8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d007      	beq.n	8008784 <TIM_OC4_SetConfig+0x80>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	@ (80087d0 <TIM_OC4_SetConfig+0xcc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_OC4_SetConfig+0x80>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_OC4_SetConfig+0xd0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d109      	bne.n	8008798 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800878a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	019b      	lsls	r3, r3, #6
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	4313      	orrs	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	621a      	str	r2, [r3, #32]
}
 80087b2:	bf00      	nop
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	feff8fff 	.word	0xfeff8fff
 80087c4:	40010000 	.word	0x40010000
 80087c8:	40010400 	.word	0x40010400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40014400 	.word	0x40014400
 80087d4:	40014800 	.word	0x40014800

080087d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4b21      	ldr	r3, [pc, #132]	@ (8008888 <TIM_OC5_SetConfig+0xb0>)
 8008804:	4013      	ands	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	041b      	lsls	r3, r3, #16
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a18      	ldr	r2, [pc, #96]	@ (800888c <TIM_OC5_SetConfig+0xb4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00f      	beq.n	800884e <TIM_OC5_SetConfig+0x76>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a17      	ldr	r2, [pc, #92]	@ (8008890 <TIM_OC5_SetConfig+0xb8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00b      	beq.n	800884e <TIM_OC5_SetConfig+0x76>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a16      	ldr	r2, [pc, #88]	@ (8008894 <TIM_OC5_SetConfig+0xbc>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d007      	beq.n	800884e <TIM_OC5_SetConfig+0x76>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <TIM_OC5_SetConfig+0xc0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_OC5_SetConfig+0x76>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a14      	ldr	r2, [pc, #80]	@ (800889c <TIM_OC5_SetConfig+0xc4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d109      	bne.n	8008862 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	621a      	str	r2, [r3, #32]
}
 800887c:	bf00      	nop
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	fffeff8f 	.word	0xfffeff8f
 800888c:	40010000 	.word	0x40010000
 8008890:	40010400 	.word	0x40010400
 8008894:	40014000 	.word	0x40014000
 8008898:	40014400 	.word	0x40014400
 800889c:	40014800 	.word	0x40014800

080088a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4b22      	ldr	r3, [pc, #136]	@ (8008954 <TIM_OC6_SetConfig+0xb4>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80088e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	051b      	lsls	r3, r3, #20
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a19      	ldr	r2, [pc, #100]	@ (8008958 <TIM_OC6_SetConfig+0xb8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d00f      	beq.n	8008918 <TIM_OC6_SetConfig+0x78>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a18      	ldr	r2, [pc, #96]	@ (800895c <TIM_OC6_SetConfig+0xbc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d00b      	beq.n	8008918 <TIM_OC6_SetConfig+0x78>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a17      	ldr	r2, [pc, #92]	@ (8008960 <TIM_OC6_SetConfig+0xc0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d007      	beq.n	8008918 <TIM_OC6_SetConfig+0x78>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a16      	ldr	r2, [pc, #88]	@ (8008964 <TIM_OC6_SetConfig+0xc4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC6_SetConfig+0x78>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a15      	ldr	r2, [pc, #84]	@ (8008968 <TIM_OC6_SetConfig+0xc8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d109      	bne.n	800892c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800891e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	029b      	lsls	r3, r3, #10
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	621a      	str	r2, [r3, #32]
}
 8008946:	bf00      	nop
 8008948:	371c      	adds	r7, #28
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	feff8fff 	.word	0xfeff8fff
 8008958:	40010000 	.word	0x40010000
 800895c:	40010400 	.word	0x40010400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800

0800896c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f023 0201 	bic.w	r2, r3, #1
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f023 030a 	bic.w	r3, r3, #10
 80089a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	621a      	str	r2, [r3, #32]
}
 80089be:	bf00      	nop
 80089c0:	371c      	adds	r7, #28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b087      	sub	sp, #28
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f023 0210 	bic.w	r2, r3, #16
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	031b      	lsls	r3, r3, #12
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	bf00      	nop
 8008a20:	371c      	adds	r7, #28
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
	...

08008a2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	4b09      	ldr	r3, [pc, #36]	@ (8008a64 <TIM_ITRx_SetConfig+0x38>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	f043 0307 	orr.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	609a      	str	r2, [r3, #8]
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	ffcfff8f 	.word	0xffcfff8f

08008a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	021a      	lsls	r2, r3, #8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	609a      	str	r2, [r3, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e077      	b.n	8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a35      	ldr	r2, [pc, #212]	@ (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a34      	ldr	r2, [pc, #208]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d108      	bne.n	8008b06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008afa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a25      	ldr	r2, [pc, #148]	@ (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d02c      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b32:	d027      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a22      	ldr	r2, [pc, #136]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d022      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a21      	ldr	r2, [pc, #132]	@ (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d01d      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d018      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d013      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00e      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a18      	ldr	r2, [pc, #96]	@ (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a17      	ldr	r2, [pc, #92]	@ (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d10c      	bne.n	8008b9e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40000400 	.word	0x40000400
 8008bc8:	40000800 	.word	0x40000800
 8008bcc:	40000c00 	.word	0x40000c00
 8008bd0:	40001800 	.word	0x40001800
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	4000e000 	.word	0x4000e000
 8008bdc:	4000e400 	.word	0x4000e400

08008be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e04a      	b.n	8008cc4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7f8 fa0d 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2224      	movs	r2, #36	@ 0x24
 8008c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0201 	bic.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fba6 	bl	800a3b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fd37 	bl	80096e0 <UART_SetConfig>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e023      	b.n	8008cc4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008c9a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 0208 	orr.w	r2, r2, #8
 8008caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f042 0201 	orr.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fc1d 	bl	800a4fc <UART_CheckIdleState>
 8008cc2:	4603      	mov	r3, r0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	@ 0x28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d167      	bne.n	8008db4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <HAL_UART_Transmit_DMA+0x24>
 8008cea:	88fb      	ldrh	r3, [r7, #6]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e060      	b.n	8008db6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	88fa      	ldrh	r2, [r7, #6]
 8008d06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2221      	movs	r2, #33	@ 0x21
 8008d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d028      	beq.n	8008d74 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d26:	4a26      	ldr	r2, [pc, #152]	@ (8008dc0 <HAL_UART_Transmit_DMA+0xf4>)
 8008d28:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d2e:	4a25      	ldr	r2, [pc, #148]	@ (8008dc4 <HAL_UART_Transmit_DMA+0xf8>)
 8008d30:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d36:	4a24      	ldr	r2, [pc, #144]	@ (8008dc8 <HAL_UART_Transmit_DMA+0xfc>)
 8008d38:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d3e:	2200      	movs	r2, #0
 8008d40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3328      	adds	r3, #40	@ 0x28
 8008d52:	461a      	mov	r2, r3
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	f7f9 fbcf 	bl	80024f8 <HAL_DMA_Start_IT>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2210      	movs	r2, #16
 8008d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e020      	b.n	8008db6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2240      	movs	r2, #64	@ 0x40
 8008d7a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3308      	adds	r3, #8
 8008d82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3308      	adds	r3, #8
 8008d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d9c:	623a      	str	r2, [r7, #32]
 8008d9e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	69f9      	ldr	r1, [r7, #28]
 8008da2:	6a3a      	ldr	r2, [r7, #32]
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e5      	bne.n	8008d7c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e000      	b.n	8008db6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008db4:	2302      	movs	r3, #2
  }
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3728      	adds	r7, #40	@ 0x28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0800a9c9 	.word	0x0800a9c9
 8008dc4:	0800aa5f 	.word	0x0800aa5f
 8008dc8:	0800abe1 	.word	0x0800abe1

08008dcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b0ba      	sub	sp, #232	@ 0xe8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008df2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008df6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11b      	bne.n	8008e40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e0c:	f003 0320 	and.w	r3, r3, #32
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d015      	beq.n	8008e40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d009      	beq.n	8008e40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8377 	beq.w	8009524 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
      }
      return;
 8008e3e:	e371      	b.n	8009524 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8123 	beq.w	8009090 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e4e:	4b8d      	ldr	r3, [pc, #564]	@ (8009084 <HAL_UART_IRQHandler+0x2b8>)
 8008e50:	4013      	ands	r3, r2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8009088 <HAL_UART_IRQHandler+0x2bc>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 8116 	beq.w	8009090 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d011      	beq.n	8008e94 <HAL_UART_IRQHandler+0xc8>
 8008e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2201      	movs	r2, #1
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d011      	beq.n	8008ec4 <HAL_UART_IRQHandler+0xf8>
 8008ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eba:	f043 0204 	orr.w	r2, r3, #4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d011      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x128>
 8008ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2204      	movs	r2, #4
 8008ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eea:	f043 0202 	orr.w	r2, r3, #2
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef8:	f003 0308 	and.w	r3, r3, #8
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d017      	beq.n	8008f30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f10:	4b5c      	ldr	r3, [pc, #368]	@ (8009084 <HAL_UART_IRQHandler+0x2b8>)
 8008f12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00b      	beq.n	8008f30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f26:	f043 0208 	orr.w	r2, r3, #8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d012      	beq.n	8008f62 <HAL_UART_IRQHandler+0x196>
 8008f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00c      	beq.n	8008f62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f58:	f043 0220 	orr.w	r2, r3, #32
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 82dd 	beq.w	8009528 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d013      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f7e:	f003 0320 	and.w	r3, r3, #32
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d105      	bne.n	8008f92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb6:	2b40      	cmp	r3, #64	@ 0x40
 8008fb8:	d005      	beq.n	8008fc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008fbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d054      	beq.n	8009070 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f001 fc98 	bl	800a8fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd6:	2b40      	cmp	r3, #64	@ 0x40
 8008fd8:	d146      	bne.n	8009068 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3308      	adds	r3, #8
 8009002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009006:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800900a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800901e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1d9      	bne.n	8008fda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902c:	2b00      	cmp	r3, #0
 800902e:	d017      	beq.n	8009060 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009036:	4a15      	ldr	r2, [pc, #84]	@ (800908c <HAL_UART_IRQHandler+0x2c0>)
 8009038:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009040:	4618      	mov	r0, r3
 8009042:	f7f9 ffe1 	bl	8003008 <HAL_DMA_Abort_IT>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d019      	beq.n	8009080 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800905a:	4610      	mov	r0, r2
 800905c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800905e:	e00f      	b.n	8009080 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fa8b 	bl	800957c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009066:	e00b      	b.n	8009080 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa87 	bl	800957c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906e:	e007      	b.n	8009080 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa83 	bl	800957c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800907e:	e253      	b.n	8009528 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	bf00      	nop
    return;
 8009082:	e251      	b.n	8009528 <HAL_UART_IRQHandler+0x75c>
 8009084:	10000001 	.word	0x10000001
 8009088:	04000120 	.word	0x04000120
 800908c:	0800ac61 	.word	0x0800ac61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009094:	2b01      	cmp	r3, #1
 8009096:	f040 81e7 	bne.w	8009468 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 81e0 	beq.w	8009468 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 81d9 	beq.w	8009468 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2210      	movs	r2, #16
 80090bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c8:	2b40      	cmp	r3, #64	@ 0x40
 80090ca:	f040 8151 	bne.w	8009370 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a96      	ldr	r2, [pc, #600]	@ (8009330 <HAL_UART_IRQHandler+0x564>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d068      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a93      	ldr	r2, [pc, #588]	@ (8009334 <HAL_UART_IRQHandler+0x568>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d061      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a91      	ldr	r2, [pc, #580]	@ (8009338 <HAL_UART_IRQHandler+0x56c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d05a      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a8e      	ldr	r2, [pc, #568]	@ (800933c <HAL_UART_IRQHandler+0x570>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d053      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a8c      	ldr	r2, [pc, #560]	@ (8009340 <HAL_UART_IRQHandler+0x574>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d04c      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a89      	ldr	r2, [pc, #548]	@ (8009344 <HAL_UART_IRQHandler+0x578>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d045      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a87      	ldr	r2, [pc, #540]	@ (8009348 <HAL_UART_IRQHandler+0x57c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d03e      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a84      	ldr	r2, [pc, #528]	@ (800934c <HAL_UART_IRQHandler+0x580>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d037      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a82      	ldr	r2, [pc, #520]	@ (8009350 <HAL_UART_IRQHandler+0x584>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d030      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a7f      	ldr	r2, [pc, #508]	@ (8009354 <HAL_UART_IRQHandler+0x588>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d029      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a7d      	ldr	r2, [pc, #500]	@ (8009358 <HAL_UART_IRQHandler+0x58c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d022      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a7a      	ldr	r2, [pc, #488]	@ (800935c <HAL_UART_IRQHandler+0x590>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d01b      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a78      	ldr	r2, [pc, #480]	@ (8009360 <HAL_UART_IRQHandler+0x594>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d014      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a75      	ldr	r2, [pc, #468]	@ (8009364 <HAL_UART_IRQHandler+0x598>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00d      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a73      	ldr	r2, [pc, #460]	@ (8009368 <HAL_UART_IRQHandler+0x59c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d006      	beq.n	80091ae <HAL_UART_IRQHandler+0x3e2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a70      	ldr	r2, [pc, #448]	@ (800936c <HAL_UART_IRQHandler+0x5a0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d106      	bne.n	80091bc <HAL_UART_IRQHandler+0x3f0>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	e005      	b.n	80091c8 <HAL_UART_IRQHandler+0x3fc>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 81ab 	beq.w	800952c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091e0:	429a      	cmp	r2, r3
 80091e2:	f080 81a3 	bcs.w	800952c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091fc:	f000 8087 	beq.w	800930e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009214:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800921c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	461a      	mov	r2, r3
 8009226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800922a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800922e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009236:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1da      	bne.n	8009200 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3308      	adds	r3, #8
 8009250:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800925a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800925c:	f023 0301 	bic.w	r3, r3, #1
 8009260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800926e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009272:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009276:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009280:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e1      	bne.n	800924a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3308      	adds	r3, #8
 800928c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009298:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800929c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e3      	bne.n	8009286 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2220      	movs	r2, #32
 80092c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092dc:	f023 0310 	bic.w	r3, r3, #16
 80092e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e4      	bne.n	80092cc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009308:	4618      	mov	r0, r3
 800930a:	f7f9 fb5f 	bl	80029cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2202      	movs	r2, #2
 8009312:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009320:	b29b      	uxth	r3, r3
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	b29b      	uxth	r3, r3
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7f7 fdd3 	bl	8000ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800932e:	e0fd      	b.n	800952c <HAL_UART_IRQHandler+0x760>
 8009330:	40020010 	.word	0x40020010
 8009334:	40020028 	.word	0x40020028
 8009338:	40020040 	.word	0x40020040
 800933c:	40020058 	.word	0x40020058
 8009340:	40020070 	.word	0x40020070
 8009344:	40020088 	.word	0x40020088
 8009348:	400200a0 	.word	0x400200a0
 800934c:	400200b8 	.word	0x400200b8
 8009350:	40020410 	.word	0x40020410
 8009354:	40020428 	.word	0x40020428
 8009358:	40020440 	.word	0x40020440
 800935c:	40020458 	.word	0x40020458
 8009360:	40020470 	.word	0x40020470
 8009364:	40020488 	.word	0x40020488
 8009368:	400204a0 	.word	0x400204a0
 800936c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800937c:	b29b      	uxth	r3, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 80cf 	beq.w	8009530 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 80ca 	beq.w	8009530 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80093be:	647b      	str	r3, [r7, #68]	@ 0x44
 80093c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e4      	bne.n	800939c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	623b      	str	r3, [r7, #32]
   return(result);
 80093e2:	6a3a      	ldr	r2, [r7, #32]
 80093e4:	4b55      	ldr	r3, [pc, #340]	@ (800953c <HAL_UART_IRQHandler+0x770>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e3      	bne.n	80093d2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	60fb      	str	r3, [r7, #12]
   return(result);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 0310 	bic.w	r3, r3, #16
 8009432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009440:	61fb      	str	r3, [r7, #28]
 8009442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009444:	69b9      	ldr	r1, [r7, #24]
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	e841 2300 	strex	r3, r2, [r1]
 800944c:	617b      	str	r3, [r7, #20]
   return(result);
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e4      	bne.n	800941e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800945a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7f7 fd37 	bl	8000ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009466:	e063      	b.n	8009530 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00e      	beq.n	8009492 <HAL_UART_IRQHandler+0x6c6>
 8009474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 fc29 	bl	800ace2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009490:	e051      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d014      	beq.n	80094c8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800949e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d105      	bne.n	80094b6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80094aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d008      	beq.n	80094c8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d03a      	beq.n	8009534 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
    }
    return;
 80094c6:	e035      	b.n	8009534 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <HAL_UART_IRQHandler+0x71c>
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f001 fbd3 	bl	800ac8c <UART_EndTransmit_IT>
    return;
 80094e6:	e026      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d009      	beq.n	8009508 <HAL_UART_IRQHandler+0x73c>
 80094f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fc02 	bl	800ad0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009506:	e016      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800950c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d010      	beq.n	8009536 <HAL_UART_IRQHandler+0x76a>
 8009514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009518:	2b00      	cmp	r3, #0
 800951a:	da0c      	bge.n	8009536 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fbea 	bl	800acf6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009522:	e008      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
      return;
 8009524:	bf00      	nop
 8009526:	e006      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
    return;
 8009528:	bf00      	nop
 800952a:	e004      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
      return;
 800952c:	bf00      	nop
 800952e:	e002      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
      return;
 8009530:	bf00      	nop
 8009532:	e000      	b.n	8009536 <HAL_UART_IRQHandler+0x76a>
    return;
 8009534:	bf00      	nop
  }
}
 8009536:	37e8      	adds	r7, #232	@ 0xe8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	effffffe 	.word	0xeffffffe

08009540 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b08f      	sub	sp, #60	@ 0x3c
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e042      	b.n	800962c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2224      	movs	r2, #36	@ 0x24
 80095b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f023 030c 	bic.w	r3, r3, #12
 80095ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095d6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e6      	bne.n	80095b6 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f043 0308 	orr.w	r3, r3, #8
 80095fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	61bb      	str	r3, [r7, #24]
 8009608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6979      	ldr	r1, [r7, #20]
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	613b      	str	r3, [r7, #16]
   return(result);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e6      	bne.n	80095e8 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	373c      	adds	r7, #60	@ 0x3c
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8009638:	b480      	push	{r7}
 800963a:	b08f      	sub	sp, #60	@ 0x3c
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009646:	2b01      	cmp	r3, #1
 8009648:	d101      	bne.n	800964e <HAL_HalfDuplex_EnableReceiver+0x16>
 800964a:	2302      	movs	r3, #2
 800964c:	e042      	b.n	80096d4 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2224      	movs	r2, #36	@ 0x24
 800965a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	61fb      	str	r3, [r7, #28]
   return(result);
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	f023 030c 	bic.w	r3, r3, #12
 8009672:	637b      	str	r3, [r7, #52]	@ 0x34
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800967e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e6      	bne.n	800965e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	60bb      	str	r3, [r7, #8]
   return(result);
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f043 0304 	orr.w	r3, r3, #4
 80096a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	61bb      	str	r3, [r7, #24]
 80096b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b2:	6979      	ldr	r1, [r7, #20]
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	613b      	str	r3, [r7, #16]
   return(result);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1e6      	bne.n	8009690 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	373c      	adds	r7, #60	@ 0x3c
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096e4:	b092      	sub	sp, #72	@ 0x48
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	431a      	orrs	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	69db      	ldr	r3, [r3, #28]
 8009704:	4313      	orrs	r3, r2
 8009706:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4bbe      	ldr	r3, [pc, #760]	@ (8009a08 <UART_SetConfig+0x328>)
 8009710:	4013      	ands	r3, r2
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	6812      	ldr	r2, [r2, #0]
 8009716:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009718:	430b      	orrs	r3, r1
 800971a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4ab3      	ldr	r2, [pc, #716]	@ (8009a0c <UART_SetConfig+0x32c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d004      	beq.n	800974c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009748:	4313      	orrs	r3, r2
 800974a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	4baf      	ldr	r3, [pc, #700]	@ (8009a10 <UART_SetConfig+0x330>)
 8009754:	4013      	ands	r3, r2
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	6812      	ldr	r2, [r2, #0]
 800975a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800975c:	430b      	orrs	r3, r1
 800975e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009766:	f023 010f 	bic.w	r1, r3, #15
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4aa6      	ldr	r2, [pc, #664]	@ (8009a14 <UART_SetConfig+0x334>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d177      	bne.n	8009870 <UART_SetConfig+0x190>
 8009780:	4ba5      	ldr	r3, [pc, #660]	@ (8009a18 <UART_SetConfig+0x338>)
 8009782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009788:	2b28      	cmp	r3, #40	@ 0x28
 800978a:	d86d      	bhi.n	8009868 <UART_SetConfig+0x188>
 800978c:	a201      	add	r2, pc, #4	@ (adr r2, 8009794 <UART_SetConfig+0xb4>)
 800978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009792:	bf00      	nop
 8009794:	08009839 	.word	0x08009839
 8009798:	08009869 	.word	0x08009869
 800979c:	08009869 	.word	0x08009869
 80097a0:	08009869 	.word	0x08009869
 80097a4:	08009869 	.word	0x08009869
 80097a8:	08009869 	.word	0x08009869
 80097ac:	08009869 	.word	0x08009869
 80097b0:	08009869 	.word	0x08009869
 80097b4:	08009841 	.word	0x08009841
 80097b8:	08009869 	.word	0x08009869
 80097bc:	08009869 	.word	0x08009869
 80097c0:	08009869 	.word	0x08009869
 80097c4:	08009869 	.word	0x08009869
 80097c8:	08009869 	.word	0x08009869
 80097cc:	08009869 	.word	0x08009869
 80097d0:	08009869 	.word	0x08009869
 80097d4:	08009849 	.word	0x08009849
 80097d8:	08009869 	.word	0x08009869
 80097dc:	08009869 	.word	0x08009869
 80097e0:	08009869 	.word	0x08009869
 80097e4:	08009869 	.word	0x08009869
 80097e8:	08009869 	.word	0x08009869
 80097ec:	08009869 	.word	0x08009869
 80097f0:	08009869 	.word	0x08009869
 80097f4:	08009851 	.word	0x08009851
 80097f8:	08009869 	.word	0x08009869
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009869 	.word	0x08009869
 8009804:	08009869 	.word	0x08009869
 8009808:	08009869 	.word	0x08009869
 800980c:	08009869 	.word	0x08009869
 8009810:	08009869 	.word	0x08009869
 8009814:	08009859 	.word	0x08009859
 8009818:	08009869 	.word	0x08009869
 800981c:	08009869 	.word	0x08009869
 8009820:	08009869 	.word	0x08009869
 8009824:	08009869 	.word	0x08009869
 8009828:	08009869 	.word	0x08009869
 800982c:	08009869 	.word	0x08009869
 8009830:	08009869 	.word	0x08009869
 8009834:	08009861 	.word	0x08009861
 8009838:	2301      	movs	r3, #1
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e326      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e322      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e31e      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e31a      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800985e:	e316      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009860:	2340      	movs	r3, #64	@ 0x40
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e312      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009868:	2380      	movs	r3, #128	@ 0x80
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e30e      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a69      	ldr	r2, [pc, #420]	@ (8009a1c <UART_SetConfig+0x33c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d130      	bne.n	80098dc <UART_SetConfig+0x1fc>
 800987a:	4b67      	ldr	r3, [pc, #412]	@ (8009a18 <UART_SetConfig+0x338>)
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b05      	cmp	r3, #5
 8009884:	d826      	bhi.n	80098d4 <UART_SetConfig+0x1f4>
 8009886:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <UART_SetConfig+0x1ac>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098a5 	.word	0x080098a5
 8009890:	080098ad 	.word	0x080098ad
 8009894:	080098b5 	.word	0x080098b5
 8009898:	080098bd 	.word	0x080098bd
 800989c:	080098c5 	.word	0x080098c5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e2f0      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b2:	e2ec      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ba:	e2e8      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c2:	e2e4      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ca:	e2e0      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098cc:	2340      	movs	r3, #64	@ 0x40
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e2dc      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098d4:	2380      	movs	r3, #128	@ 0x80
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e2d8      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a4f      	ldr	r2, [pc, #316]	@ (8009a20 <UART_SetConfig+0x340>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d130      	bne.n	8009948 <UART_SetConfig+0x268>
 80098e6:	4b4c      	ldr	r3, [pc, #304]	@ (8009a18 <UART_SetConfig+0x338>)
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d826      	bhi.n	8009940 <UART_SetConfig+0x260>
 80098f2:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <UART_SetConfig+0x218>)
 80098f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f8:	08009911 	.word	0x08009911
 80098fc:	08009919 	.word	0x08009919
 8009900:	08009921 	.word	0x08009921
 8009904:	08009929 	.word	0x08009929
 8009908:	08009931 	.word	0x08009931
 800990c:	08009939 	.word	0x08009939
 8009910:	2300      	movs	r3, #0
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e2ba      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800991e:	e2b6      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009926:	e2b2      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800992e:	e2ae      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009930:	2320      	movs	r3, #32
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009936:	e2aa      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009938:	2340      	movs	r3, #64	@ 0x40
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800993e:	e2a6      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009946:	e2a2      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a35      	ldr	r2, [pc, #212]	@ (8009a24 <UART_SetConfig+0x344>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d130      	bne.n	80099b4 <UART_SetConfig+0x2d4>
 8009952:	4b31      	ldr	r3, [pc, #196]	@ (8009a18 <UART_SetConfig+0x338>)
 8009954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b05      	cmp	r3, #5
 800995c:	d826      	bhi.n	80099ac <UART_SetConfig+0x2cc>
 800995e:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <UART_SetConfig+0x284>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	0800997d 	.word	0x0800997d
 8009968:	08009985 	.word	0x08009985
 800996c:	0800998d 	.word	0x0800998d
 8009970:	08009995 	.word	0x08009995
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099a5 	.word	0x080099a5
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009982:	e284      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009984:	2304      	movs	r3, #4
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800998a:	e280      	b.n	8009e8e <UART_SetConfig+0x7ae>
 800998c:	2308      	movs	r3, #8
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009992:	e27c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009994:	2310      	movs	r3, #16
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999a:	e278      	b.n	8009e8e <UART_SetConfig+0x7ae>
 800999c:	2320      	movs	r3, #32
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a2:	e274      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80099a4:	2340      	movs	r3, #64	@ 0x40
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e270      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80099ac:	2380      	movs	r3, #128	@ 0x80
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b2:	e26c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a28 <UART_SetConfig+0x348>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d142      	bne.n	8009a44 <UART_SetConfig+0x364>
 80099be:	4b16      	ldr	r3, [pc, #88]	@ (8009a18 <UART_SetConfig+0x338>)
 80099c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	2b05      	cmp	r3, #5
 80099c8:	d838      	bhi.n	8009a3c <UART_SetConfig+0x35c>
 80099ca:	a201      	add	r2, pc, #4	@ (adr r2, 80099d0 <UART_SetConfig+0x2f0>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	080099e9 	.word	0x080099e9
 80099d4:	080099f1 	.word	0x080099f1
 80099d8:	080099f9 	.word	0x080099f9
 80099dc:	08009a01 	.word	0x08009a01
 80099e0:	08009a2d 	.word	0x08009a2d
 80099e4:	08009a35 	.word	0x08009a35
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ee:	e24e      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80099f0:	2304      	movs	r3, #4
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099f6:	e24a      	b.n	8009e8e <UART_SetConfig+0x7ae>
 80099f8:	2308      	movs	r3, #8
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099fe:	e246      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009a00:	2310      	movs	r3, #16
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a06:	e242      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009a08:	cfff69f3 	.word	0xcfff69f3
 8009a0c:	58000c00 	.word	0x58000c00
 8009a10:	11fff4ff 	.word	0x11fff4ff
 8009a14:	40011000 	.word	0x40011000
 8009a18:	58024400 	.word	0x58024400
 8009a1c:	40004400 	.word	0x40004400
 8009a20:	40004800 	.word	0x40004800
 8009a24:	40004c00 	.word	0x40004c00
 8009a28:	40005000 	.word	0x40005000
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a32:	e22c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009a34:	2340      	movs	r3, #64	@ 0x40
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e228      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009a3c:	2380      	movs	r3, #128	@ 0x80
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e224      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4ab1      	ldr	r2, [pc, #708]	@ (8009d10 <UART_SetConfig+0x630>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d176      	bne.n	8009b3c <UART_SetConfig+0x45c>
 8009a4e:	4bb1      	ldr	r3, [pc, #708]	@ (8009d14 <UART_SetConfig+0x634>)
 8009a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a56:	2b28      	cmp	r3, #40	@ 0x28
 8009a58:	d86c      	bhi.n	8009b34 <UART_SetConfig+0x454>
 8009a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <UART_SetConfig+0x380>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009b05 	.word	0x08009b05
 8009a64:	08009b35 	.word	0x08009b35
 8009a68:	08009b35 	.word	0x08009b35
 8009a6c:	08009b35 	.word	0x08009b35
 8009a70:	08009b35 	.word	0x08009b35
 8009a74:	08009b35 	.word	0x08009b35
 8009a78:	08009b35 	.word	0x08009b35
 8009a7c:	08009b35 	.word	0x08009b35
 8009a80:	08009b0d 	.word	0x08009b0d
 8009a84:	08009b35 	.word	0x08009b35
 8009a88:	08009b35 	.word	0x08009b35
 8009a8c:	08009b35 	.word	0x08009b35
 8009a90:	08009b35 	.word	0x08009b35
 8009a94:	08009b35 	.word	0x08009b35
 8009a98:	08009b35 	.word	0x08009b35
 8009a9c:	08009b35 	.word	0x08009b35
 8009aa0:	08009b15 	.word	0x08009b15
 8009aa4:	08009b35 	.word	0x08009b35
 8009aa8:	08009b35 	.word	0x08009b35
 8009aac:	08009b35 	.word	0x08009b35
 8009ab0:	08009b35 	.word	0x08009b35
 8009ab4:	08009b35 	.word	0x08009b35
 8009ab8:	08009b35 	.word	0x08009b35
 8009abc:	08009b35 	.word	0x08009b35
 8009ac0:	08009b1d 	.word	0x08009b1d
 8009ac4:	08009b35 	.word	0x08009b35
 8009ac8:	08009b35 	.word	0x08009b35
 8009acc:	08009b35 	.word	0x08009b35
 8009ad0:	08009b35 	.word	0x08009b35
 8009ad4:	08009b35 	.word	0x08009b35
 8009ad8:	08009b35 	.word	0x08009b35
 8009adc:	08009b35 	.word	0x08009b35
 8009ae0:	08009b25 	.word	0x08009b25
 8009ae4:	08009b35 	.word	0x08009b35
 8009ae8:	08009b35 	.word	0x08009b35
 8009aec:	08009b35 	.word	0x08009b35
 8009af0:	08009b35 	.word	0x08009b35
 8009af4:	08009b35 	.word	0x08009b35
 8009af8:	08009b35 	.word	0x08009b35
 8009afc:	08009b35 	.word	0x08009b35
 8009b00:	08009b2d 	.word	0x08009b2d
 8009b04:	2301      	movs	r3, #1
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e1c0      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b12:	e1bc      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b14:	2308      	movs	r3, #8
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b1a:	e1b8      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b22:	e1b4      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b24:	2320      	movs	r3, #32
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b2a:	e1b0      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b2c:	2340      	movs	r3, #64	@ 0x40
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b32:	e1ac      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b34:	2380      	movs	r3, #128	@ 0x80
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b3a:	e1a8      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a75      	ldr	r2, [pc, #468]	@ (8009d18 <UART_SetConfig+0x638>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d130      	bne.n	8009ba8 <UART_SetConfig+0x4c8>
 8009b46:	4b73      	ldr	r3, [pc, #460]	@ (8009d14 <UART_SetConfig+0x634>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d826      	bhi.n	8009ba0 <UART_SetConfig+0x4c0>
 8009b52:	a201      	add	r2, pc, #4	@ (adr r2, 8009b58 <UART_SetConfig+0x478>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	08009b81 	.word	0x08009b81
 8009b64:	08009b89 	.word	0x08009b89
 8009b68:	08009b91 	.word	0x08009b91
 8009b6c:	08009b99 	.word	0x08009b99
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e18a      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b7e:	e186      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b80:	2308      	movs	r3, #8
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b86:	e182      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8e:	e17e      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b90:	2320      	movs	r3, #32
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b96:	e17a      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009b98:	2340      	movs	r3, #64	@ 0x40
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9e:	e176      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009ba0:	2380      	movs	r3, #128	@ 0x80
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba6:	e172      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a5b      	ldr	r2, [pc, #364]	@ (8009d1c <UART_SetConfig+0x63c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d130      	bne.n	8009c14 <UART_SetConfig+0x534>
 8009bb2:	4b58      	ldr	r3, [pc, #352]	@ (8009d14 <UART_SetConfig+0x634>)
 8009bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d826      	bhi.n	8009c0c <UART_SetConfig+0x52c>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <UART_SetConfig+0x4e4>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009be5 	.word	0x08009be5
 8009bcc:	08009bed 	.word	0x08009bed
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009bfd 	.word	0x08009bfd
 8009bd8:	08009c05 	.word	0x08009c05
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009be2:	e154      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bea:	e150      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009bec:	2308      	movs	r3, #8
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bf2:	e14c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bfa:	e148      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c02:	e144      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009c04:	2340      	movs	r3, #64	@ 0x40
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c0a:	e140      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009c0c:	2380      	movs	r3, #128	@ 0x80
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c12:	e13c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a41      	ldr	r2, [pc, #260]	@ (8009d20 <UART_SetConfig+0x640>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	f040 8082 	bne.w	8009d24 <UART_SetConfig+0x644>
 8009c20:	4b3c      	ldr	r3, [pc, #240]	@ (8009d14 <UART_SetConfig+0x634>)
 8009c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c28:	2b28      	cmp	r3, #40	@ 0x28
 8009c2a:	d86d      	bhi.n	8009d08 <UART_SetConfig+0x628>
 8009c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <UART_SetConfig+0x554>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009cd9 	.word	0x08009cd9
 8009c38:	08009d09 	.word	0x08009d09
 8009c3c:	08009d09 	.word	0x08009d09
 8009c40:	08009d09 	.word	0x08009d09
 8009c44:	08009d09 	.word	0x08009d09
 8009c48:	08009d09 	.word	0x08009d09
 8009c4c:	08009d09 	.word	0x08009d09
 8009c50:	08009d09 	.word	0x08009d09
 8009c54:	08009ce1 	.word	0x08009ce1
 8009c58:	08009d09 	.word	0x08009d09
 8009c5c:	08009d09 	.word	0x08009d09
 8009c60:	08009d09 	.word	0x08009d09
 8009c64:	08009d09 	.word	0x08009d09
 8009c68:	08009d09 	.word	0x08009d09
 8009c6c:	08009d09 	.word	0x08009d09
 8009c70:	08009d09 	.word	0x08009d09
 8009c74:	08009ce9 	.word	0x08009ce9
 8009c78:	08009d09 	.word	0x08009d09
 8009c7c:	08009d09 	.word	0x08009d09
 8009c80:	08009d09 	.word	0x08009d09
 8009c84:	08009d09 	.word	0x08009d09
 8009c88:	08009d09 	.word	0x08009d09
 8009c8c:	08009d09 	.word	0x08009d09
 8009c90:	08009d09 	.word	0x08009d09
 8009c94:	08009cf1 	.word	0x08009cf1
 8009c98:	08009d09 	.word	0x08009d09
 8009c9c:	08009d09 	.word	0x08009d09
 8009ca0:	08009d09 	.word	0x08009d09
 8009ca4:	08009d09 	.word	0x08009d09
 8009ca8:	08009d09 	.word	0x08009d09
 8009cac:	08009d09 	.word	0x08009d09
 8009cb0:	08009d09 	.word	0x08009d09
 8009cb4:	08009cf9 	.word	0x08009cf9
 8009cb8:	08009d09 	.word	0x08009d09
 8009cbc:	08009d09 	.word	0x08009d09
 8009cc0:	08009d09 	.word	0x08009d09
 8009cc4:	08009d09 	.word	0x08009d09
 8009cc8:	08009d09 	.word	0x08009d09
 8009ccc:	08009d09 	.word	0x08009d09
 8009cd0:	08009d09 	.word	0x08009d09
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e0d6      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e0d2      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009ce8:	2308      	movs	r3, #8
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e0ce      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009cf0:	2310      	movs	r3, #16
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e0ca      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009cf8:	2320      	movs	r3, #32
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfe:	e0c6      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009d00:	2340      	movs	r3, #64	@ 0x40
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d06:	e0c2      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009d08:	2380      	movs	r3, #128	@ 0x80
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0e:	e0be      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009d10:	40011400 	.word	0x40011400
 8009d14:	58024400 	.word	0x58024400
 8009d18:	40007800 	.word	0x40007800
 8009d1c:	40007c00 	.word	0x40007c00
 8009d20:	40011800 	.word	0x40011800
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4aad      	ldr	r2, [pc, #692]	@ (8009fe0 <UART_SetConfig+0x900>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d176      	bne.n	8009e1c <UART_SetConfig+0x73c>
 8009d2e:	4bad      	ldr	r3, [pc, #692]	@ (8009fe4 <UART_SetConfig+0x904>)
 8009d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d36:	2b28      	cmp	r3, #40	@ 0x28
 8009d38:	d86c      	bhi.n	8009e14 <UART_SetConfig+0x734>
 8009d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d40 <UART_SetConfig+0x660>)
 8009d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d40:	08009de5 	.word	0x08009de5
 8009d44:	08009e15 	.word	0x08009e15
 8009d48:	08009e15 	.word	0x08009e15
 8009d4c:	08009e15 	.word	0x08009e15
 8009d50:	08009e15 	.word	0x08009e15
 8009d54:	08009e15 	.word	0x08009e15
 8009d58:	08009e15 	.word	0x08009e15
 8009d5c:	08009e15 	.word	0x08009e15
 8009d60:	08009ded 	.word	0x08009ded
 8009d64:	08009e15 	.word	0x08009e15
 8009d68:	08009e15 	.word	0x08009e15
 8009d6c:	08009e15 	.word	0x08009e15
 8009d70:	08009e15 	.word	0x08009e15
 8009d74:	08009e15 	.word	0x08009e15
 8009d78:	08009e15 	.word	0x08009e15
 8009d7c:	08009e15 	.word	0x08009e15
 8009d80:	08009df5 	.word	0x08009df5
 8009d84:	08009e15 	.word	0x08009e15
 8009d88:	08009e15 	.word	0x08009e15
 8009d8c:	08009e15 	.word	0x08009e15
 8009d90:	08009e15 	.word	0x08009e15
 8009d94:	08009e15 	.word	0x08009e15
 8009d98:	08009e15 	.word	0x08009e15
 8009d9c:	08009e15 	.word	0x08009e15
 8009da0:	08009dfd 	.word	0x08009dfd
 8009da4:	08009e15 	.word	0x08009e15
 8009da8:	08009e15 	.word	0x08009e15
 8009dac:	08009e15 	.word	0x08009e15
 8009db0:	08009e15 	.word	0x08009e15
 8009db4:	08009e15 	.word	0x08009e15
 8009db8:	08009e15 	.word	0x08009e15
 8009dbc:	08009e15 	.word	0x08009e15
 8009dc0:	08009e05 	.word	0x08009e05
 8009dc4:	08009e15 	.word	0x08009e15
 8009dc8:	08009e15 	.word	0x08009e15
 8009dcc:	08009e15 	.word	0x08009e15
 8009dd0:	08009e15 	.word	0x08009e15
 8009dd4:	08009e15 	.word	0x08009e15
 8009dd8:	08009e15 	.word	0x08009e15
 8009ddc:	08009e15 	.word	0x08009e15
 8009de0:	08009e0d 	.word	0x08009e0d
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e050      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009dec:	2304      	movs	r3, #4
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e04c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009df4:	2308      	movs	r3, #8
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e048      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e044      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e04:	2320      	movs	r3, #32
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e040      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e0c:	2340      	movs	r3, #64	@ 0x40
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e03c      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e14:	2380      	movs	r3, #128	@ 0x80
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e038      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a71      	ldr	r2, [pc, #452]	@ (8009fe8 <UART_SetConfig+0x908>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d130      	bne.n	8009e88 <UART_SetConfig+0x7a8>
 8009e26:	4b6f      	ldr	r3, [pc, #444]	@ (8009fe4 <UART_SetConfig+0x904>)
 8009e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e2a:	f003 0307 	and.w	r3, r3, #7
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	d826      	bhi.n	8009e80 <UART_SetConfig+0x7a0>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <UART_SetConfig+0x758>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e51 	.word	0x08009e51
 8009e3c:	08009e59 	.word	0x08009e59
 8009e40:	08009e61 	.word	0x08009e61
 8009e44:	08009e69 	.word	0x08009e69
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	2302      	movs	r3, #2
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e01a      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e016      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e60:	2308      	movs	r3, #8
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e66:	e012      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e6e:	e00e      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e70:	2320      	movs	r3, #32
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e76:	e00a      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e78:	2340      	movs	r3, #64	@ 0x40
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e7e:	e006      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e80:	2380      	movs	r3, #128	@ 0x80
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e86:	e002      	b.n	8009e8e <UART_SetConfig+0x7ae>
 8009e88:	2380      	movs	r3, #128	@ 0x80
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a55      	ldr	r2, [pc, #340]	@ (8009fe8 <UART_SetConfig+0x908>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	f040 80f8 	bne.w	800a08a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	dc46      	bgt.n	8009f30 <UART_SetConfig+0x850>
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	db75      	blt.n	8009f92 <UART_SetConfig+0x8b2>
 8009ea6:	3b02      	subs	r3, #2
 8009ea8:	2b1e      	cmp	r3, #30
 8009eaa:	d872      	bhi.n	8009f92 <UART_SetConfig+0x8b2>
 8009eac:	a201      	add	r2, pc, #4	@ (adr r2, 8009eb4 <UART_SetConfig+0x7d4>)
 8009eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb2:	bf00      	nop
 8009eb4:	08009f37 	.word	0x08009f37
 8009eb8:	08009f93 	.word	0x08009f93
 8009ebc:	08009f3f 	.word	0x08009f3f
 8009ec0:	08009f93 	.word	0x08009f93
 8009ec4:	08009f93 	.word	0x08009f93
 8009ec8:	08009f93 	.word	0x08009f93
 8009ecc:	08009f4f 	.word	0x08009f4f
 8009ed0:	08009f93 	.word	0x08009f93
 8009ed4:	08009f93 	.word	0x08009f93
 8009ed8:	08009f93 	.word	0x08009f93
 8009edc:	08009f93 	.word	0x08009f93
 8009ee0:	08009f93 	.word	0x08009f93
 8009ee4:	08009f93 	.word	0x08009f93
 8009ee8:	08009f93 	.word	0x08009f93
 8009eec:	08009f5f 	.word	0x08009f5f
 8009ef0:	08009f93 	.word	0x08009f93
 8009ef4:	08009f93 	.word	0x08009f93
 8009ef8:	08009f93 	.word	0x08009f93
 8009efc:	08009f93 	.word	0x08009f93
 8009f00:	08009f93 	.word	0x08009f93
 8009f04:	08009f93 	.word	0x08009f93
 8009f08:	08009f93 	.word	0x08009f93
 8009f0c:	08009f93 	.word	0x08009f93
 8009f10:	08009f93 	.word	0x08009f93
 8009f14:	08009f93 	.word	0x08009f93
 8009f18:	08009f93 	.word	0x08009f93
 8009f1c:	08009f93 	.word	0x08009f93
 8009f20:	08009f93 	.word	0x08009f93
 8009f24:	08009f93 	.word	0x08009f93
 8009f28:	08009f93 	.word	0x08009f93
 8009f2c:	08009f85 	.word	0x08009f85
 8009f30:	2b40      	cmp	r3, #64	@ 0x40
 8009f32:	d02a      	beq.n	8009f8a <UART_SetConfig+0x8aa>
 8009f34:	e02d      	b.n	8009f92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009f36:	f7fd f8f5 	bl	8007124 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f3c:	e02f      	b.n	8009f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd f904 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e027      	b.n	8009f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4e:	f107 0318 	add.w	r3, r7, #24
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fd fa50 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f5c:	e01f      	b.n	8009f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f5e:	4b21      	ldr	r3, [pc, #132]	@ (8009fe4 <UART_SetConfig+0x904>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0320 	and.w	r3, r3, #32
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d009      	beq.n	8009f7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8009fe4 <UART_SetConfig+0x904>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	08db      	lsrs	r3, r3, #3
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	4a1d      	ldr	r2, [pc, #116]	@ (8009fec <UART_SetConfig+0x90c>)
 8009f76:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f7c:	e00f      	b.n	8009f9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fec <UART_SetConfig+0x90c>)
 8009f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f82:	e00c      	b.n	8009f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f84:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <UART_SetConfig+0x910>)
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f88:	e009      	b.n	8009f9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f90:	e005      	b.n	8009f9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 81ee 	beq.w	800a382 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	4a12      	ldr	r2, [pc, #72]	@ (8009ff4 <UART_SetConfig+0x914>)
 8009fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fb8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	005b      	lsls	r3, r3, #1
 8009fc2:	4413      	add	r3, r2
 8009fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d305      	bcc.n	8009fd6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d910      	bls.n	8009ff8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fdc:	e1d1      	b.n	800a382 <UART_SetConfig+0xca2>
 8009fde:	bf00      	nop
 8009fe0:	40011c00 	.word	0x40011c00
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	58000c00 	.word	0x58000c00
 8009fec:	03d09000 	.word	0x03d09000
 8009ff0:	003d0900 	.word	0x003d0900
 8009ff4:	0800b078 	.word	0x0800b078
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	60bb      	str	r3, [r7, #8]
 8009ffe:	60fa      	str	r2, [r7, #12]
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a004:	4ac0      	ldr	r2, [pc, #768]	@ (800a308 <UART_SetConfig+0xc28>)
 800a006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	2200      	movs	r2, #0
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	607a      	str	r2, [r7, #4]
 800a012:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a01a:	f7f6 f977 	bl	800030c <__aeabi_uldivmod>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	4610      	mov	r0, r2
 800a024:	4619      	mov	r1, r3
 800a026:	f04f 0200 	mov.w	r2, #0
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	020b      	lsls	r3, r1, #8
 800a030:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a034:	0202      	lsls	r2, r0, #8
 800a036:	6979      	ldr	r1, [r7, #20]
 800a038:	6849      	ldr	r1, [r1, #4]
 800a03a:	0849      	lsrs	r1, r1, #1
 800a03c:	2000      	movs	r0, #0
 800a03e:	460c      	mov	r4, r1
 800a040:	4605      	mov	r5, r0
 800a042:	eb12 0804 	adds.w	r8, r2, r4
 800a046:	eb43 0905 	adc.w	r9, r3, r5
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	469a      	mov	sl, r3
 800a052:	4693      	mov	fp, r2
 800a054:	4652      	mov	r2, sl
 800a056:	465b      	mov	r3, fp
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 f956 	bl	800030c <__aeabi_uldivmod>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4613      	mov	r3, r2
 800a066:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a06e:	d308      	bcc.n	800a082 <UART_SetConfig+0x9a2>
 800a070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a076:	d204      	bcs.n	800a082 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a07e:	60da      	str	r2, [r3, #12]
 800a080:	e17f      	b.n	800a382 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a088:	e17b      	b.n	800a382 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a092:	f040 80bd 	bne.w	800a210 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a096:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	dc48      	bgt.n	800a130 <UART_SetConfig+0xa50>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	db7b      	blt.n	800a19a <UART_SetConfig+0xaba>
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d879      	bhi.n	800a19a <UART_SetConfig+0xaba>
 800a0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a0ac <UART_SetConfig+0x9cc>)
 800a0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ac:	0800a137 	.word	0x0800a137
 800a0b0:	0800a13f 	.word	0x0800a13f
 800a0b4:	0800a19b 	.word	0x0800a19b
 800a0b8:	0800a19b 	.word	0x0800a19b
 800a0bc:	0800a147 	.word	0x0800a147
 800a0c0:	0800a19b 	.word	0x0800a19b
 800a0c4:	0800a19b 	.word	0x0800a19b
 800a0c8:	0800a19b 	.word	0x0800a19b
 800a0cc:	0800a157 	.word	0x0800a157
 800a0d0:	0800a19b 	.word	0x0800a19b
 800a0d4:	0800a19b 	.word	0x0800a19b
 800a0d8:	0800a19b 	.word	0x0800a19b
 800a0dc:	0800a19b 	.word	0x0800a19b
 800a0e0:	0800a19b 	.word	0x0800a19b
 800a0e4:	0800a19b 	.word	0x0800a19b
 800a0e8:	0800a19b 	.word	0x0800a19b
 800a0ec:	0800a167 	.word	0x0800a167
 800a0f0:	0800a19b 	.word	0x0800a19b
 800a0f4:	0800a19b 	.word	0x0800a19b
 800a0f8:	0800a19b 	.word	0x0800a19b
 800a0fc:	0800a19b 	.word	0x0800a19b
 800a100:	0800a19b 	.word	0x0800a19b
 800a104:	0800a19b 	.word	0x0800a19b
 800a108:	0800a19b 	.word	0x0800a19b
 800a10c:	0800a19b 	.word	0x0800a19b
 800a110:	0800a19b 	.word	0x0800a19b
 800a114:	0800a19b 	.word	0x0800a19b
 800a118:	0800a19b 	.word	0x0800a19b
 800a11c:	0800a19b 	.word	0x0800a19b
 800a120:	0800a19b 	.word	0x0800a19b
 800a124:	0800a19b 	.word	0x0800a19b
 800a128:	0800a19b 	.word	0x0800a19b
 800a12c:	0800a18d 	.word	0x0800a18d
 800a130:	2b40      	cmp	r3, #64	@ 0x40
 800a132:	d02e      	beq.n	800a192 <UART_SetConfig+0xab2>
 800a134:	e031      	b.n	800a19a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a136:	f7fb fe29 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 800a13a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a13c:	e033      	b.n	800a1a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a13e:	f7fb fe3b 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 800a142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a144:	e02f      	b.n	800a1a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd f800 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a154:	e027      	b.n	800a1a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a156:	f107 0318 	add.w	r3, r7, #24
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fd f94c 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a164:	e01f      	b.n	800a1a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a166:	4b69      	ldr	r3, [pc, #420]	@ (800a30c <UART_SetConfig+0xc2c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d009      	beq.n	800a186 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a172:	4b66      	ldr	r3, [pc, #408]	@ (800a30c <UART_SetConfig+0xc2c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	08db      	lsrs	r3, r3, #3
 800a178:	f003 0303 	and.w	r3, r3, #3
 800a17c:	4a64      	ldr	r2, [pc, #400]	@ (800a310 <UART_SetConfig+0xc30>)
 800a17e:	fa22 f303 	lsr.w	r3, r2, r3
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a184:	e00f      	b.n	800a1a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a186:	4b62      	ldr	r3, [pc, #392]	@ (800a310 <UART_SetConfig+0xc30>)
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18a:	e00c      	b.n	800a1a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a18c:	4b61      	ldr	r3, [pc, #388]	@ (800a314 <UART_SetConfig+0xc34>)
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a190:	e009      	b.n	800a1a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a198:	e005      	b.n	800a1a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 80ea 	beq.w	800a382 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b2:	4a55      	ldr	r2, [pc, #340]	@ (800a308 <UART_SetConfig+0xc28>)
 800a1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c0:	005a      	lsls	r2, r3, #1
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	441a      	add	r2, r3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d6:	2b0f      	cmp	r3, #15
 800a1d8:	d916      	bls.n	800a208 <UART_SetConfig+0xb28>
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1e0:	d212      	bcs.n	800a208 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	f023 030f 	bic.w	r3, r3, #15
 800a1ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	e0bc      	b.n	800a382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a20e:	e0b8      	b.n	800a382 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a210:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a214:	2b20      	cmp	r3, #32
 800a216:	dc4b      	bgt.n	800a2b0 <UART_SetConfig+0xbd0>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f2c0 8087 	blt.w	800a32c <UART_SetConfig+0xc4c>
 800a21e:	2b20      	cmp	r3, #32
 800a220:	f200 8084 	bhi.w	800a32c <UART_SetConfig+0xc4c>
 800a224:	a201      	add	r2, pc, #4	@ (adr r2, 800a22c <UART_SetConfig+0xb4c>)
 800a226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22a:	bf00      	nop
 800a22c:	0800a2b7 	.word	0x0800a2b7
 800a230:	0800a2bf 	.word	0x0800a2bf
 800a234:	0800a32d 	.word	0x0800a32d
 800a238:	0800a32d 	.word	0x0800a32d
 800a23c:	0800a2c7 	.word	0x0800a2c7
 800a240:	0800a32d 	.word	0x0800a32d
 800a244:	0800a32d 	.word	0x0800a32d
 800a248:	0800a32d 	.word	0x0800a32d
 800a24c:	0800a2d7 	.word	0x0800a2d7
 800a250:	0800a32d 	.word	0x0800a32d
 800a254:	0800a32d 	.word	0x0800a32d
 800a258:	0800a32d 	.word	0x0800a32d
 800a25c:	0800a32d 	.word	0x0800a32d
 800a260:	0800a32d 	.word	0x0800a32d
 800a264:	0800a32d 	.word	0x0800a32d
 800a268:	0800a32d 	.word	0x0800a32d
 800a26c:	0800a2e7 	.word	0x0800a2e7
 800a270:	0800a32d 	.word	0x0800a32d
 800a274:	0800a32d 	.word	0x0800a32d
 800a278:	0800a32d 	.word	0x0800a32d
 800a27c:	0800a32d 	.word	0x0800a32d
 800a280:	0800a32d 	.word	0x0800a32d
 800a284:	0800a32d 	.word	0x0800a32d
 800a288:	0800a32d 	.word	0x0800a32d
 800a28c:	0800a32d 	.word	0x0800a32d
 800a290:	0800a32d 	.word	0x0800a32d
 800a294:	0800a32d 	.word	0x0800a32d
 800a298:	0800a32d 	.word	0x0800a32d
 800a29c:	0800a32d 	.word	0x0800a32d
 800a2a0:	0800a32d 	.word	0x0800a32d
 800a2a4:	0800a32d 	.word	0x0800a32d
 800a2a8:	0800a32d 	.word	0x0800a32d
 800a2ac:	0800a31f 	.word	0x0800a31f
 800a2b0:	2b40      	cmp	r3, #64	@ 0x40
 800a2b2:	d037      	beq.n	800a324 <UART_SetConfig+0xc44>
 800a2b4:	e03a      	b.n	800a32c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b6:	f7fb fd69 	bl	8005d8c <HAL_RCC_GetPCLK1Freq>
 800a2ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2bc:	e03c      	b.n	800a338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2be:	f7fb fd7b 	bl	8005db8 <HAL_RCC_GetPCLK2Freq>
 800a2c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2c4:	e038      	b.n	800a338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fc ff40 	bl	8007150 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d4:	e030      	b.n	800a338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d6:	f107 0318 	add.w	r3, r7, #24
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fd f88c 	bl	80073f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e4:	e028      	b.n	800a338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2e6:	4b09      	ldr	r3, [pc, #36]	@ (800a30c <UART_SetConfig+0xc2c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0320 	and.w	r3, r3, #32
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d012      	beq.n	800a318 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2f2:	4b06      	ldr	r3, [pc, #24]	@ (800a30c <UART_SetConfig+0xc2c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	08db      	lsrs	r3, r3, #3
 800a2f8:	f003 0303 	and.w	r3, r3, #3
 800a2fc:	4a04      	ldr	r2, [pc, #16]	@ (800a310 <UART_SetConfig+0xc30>)
 800a2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a304:	e018      	b.n	800a338 <UART_SetConfig+0xc58>
 800a306:	bf00      	nop
 800a308:	0800b078 	.word	0x0800b078
 800a30c:	58024400 	.word	0x58024400
 800a310:	03d09000 	.word	0x03d09000
 800a314:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a318:	4b24      	ldr	r3, [pc, #144]	@ (800a3ac <UART_SetConfig+0xccc>)
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	e00c      	b.n	800a338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a31e:	4b24      	ldr	r3, [pc, #144]	@ (800a3b0 <UART_SetConfig+0xcd0>)
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a322:	e009      	b.n	800a338 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a32a:	e005      	b.n	800a338 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a32c:	2300      	movs	r3, #0
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a336:	bf00      	nop
    }

    if (pclk != 0U)
 800a338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d021      	beq.n	800a382 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a342:	4a1c      	ldr	r2, [pc, #112]	@ (800a3b4 <UART_SetConfig+0xcd4>)
 800a344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a348:	461a      	mov	r2, r3
 800a34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	085b      	lsrs	r3, r3, #1
 800a356:	441a      	add	r2, r3
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a360:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a364:	2b0f      	cmp	r3, #15
 800a366:	d909      	bls.n	800a37c <UART_SetConfig+0xc9c>
 800a368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36e:	d205      	bcs.n	800a37c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a372:	b29a      	uxth	r2, r3
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60da      	str	r2, [r3, #12]
 800a37a:	e002      	b.n	800a382 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2201      	movs	r2, #1
 800a386:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2200      	movs	r2, #0
 800a396:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2200      	movs	r2, #0
 800a39c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a39e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3748      	adds	r7, #72	@ 0x48
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ac:	03d09000 	.word	0x03d09000
 800a3b0:	003d0900 	.word	0x003d0900
 800a3b4:	0800b078 	.word	0x0800b078

0800a3b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c4:	f003 0308 	and.w	r3, r3, #8
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00a      	beq.n	800a3e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00a      	beq.n	800a426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	430a      	orrs	r2, r1
 800a424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00a      	beq.n	800a448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44c:	f003 0310 	and.w	r3, r3, #16
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	d01a      	beq.n	800a4ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4b6:	d10a      	bne.n	800a4ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	605a      	str	r2, [r3, #4]
  }
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b098      	sub	sp, #96	@ 0x60
 800a500:	af02      	add	r7, sp, #8
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a50c:	f7f7 f8de 	bl	80016cc <HAL_GetTick>
 800a510:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d12f      	bne.n	800a580 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a520:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a528:	2200      	movs	r2, #0
 800a52a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f88e 	bl	800a650 <UART_WaitOnFlagUntilTimeout>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d022      	beq.n	800a580 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a54e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a558:	647b      	str	r3, [r7, #68]	@ 0x44
 800a55a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a55e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e6      	bne.n	800a53a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e063      	b.n	800a648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d149      	bne.n	800a622 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a58e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a596:	2200      	movs	r2, #0
 800a598:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f857 	bl	800a650 <UART_WaitOnFlagUntilTimeout>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d03c      	beq.n	800a622 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	623b      	str	r3, [r7, #32]
   return(result);
 800a5b6:	6a3b      	ldr	r3, [r7, #32]
 800a5b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e6      	bne.n	800a5a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5fa:	61fa      	str	r2, [r7, #28]
 800a5fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	69b9      	ldr	r1, [r7, #24]
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	617b      	str	r3, [r7, #20]
   return(result);
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e5      	bne.n	800a5da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2220      	movs	r2, #32
 800a612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e012      	b.n	800a648 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2220      	movs	r2, #32
 800a626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2220      	movs	r2, #32
 800a62e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3758      	adds	r7, #88	@ 0x58
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	603b      	str	r3, [r7, #0]
 800a65c:	4613      	mov	r3, r2
 800a65e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a660:	e04f      	b.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a668:	d04b      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a66a:	f7f7 f82f 	bl	80016cc <HAL_GetTick>
 800a66e:	4602      	mov	r2, r0
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <UART_WaitOnFlagUntilTimeout+0x30>
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a680:	2303      	movs	r3, #3
 800a682:	e04e      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0304 	and.w	r3, r3, #4
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d037      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	2b80      	cmp	r3, #128	@ 0x80
 800a696:	d034      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b40      	cmp	r3, #64	@ 0x40
 800a69c:	d031      	beq.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69db      	ldr	r3, [r3, #28]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d110      	bne.n	800a6ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2208      	movs	r2, #8
 800a6b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f921 	bl	800a8fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e029      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6dc:	d111      	bne.n	800a702 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f907 	bl	800a8fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e00f      	b.n	800a722 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69da      	ldr	r2, [r3, #28]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4013      	ands	r3, r2
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	429a      	cmp	r2, r3
 800a710:	bf0c      	ite	eq
 800a712:	2301      	moveq	r3, #1
 800a714:	2300      	movne	r3, #0
 800a716:	b2db      	uxtb	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d0a0      	beq.n	800a662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b096      	sub	sp, #88	@ 0x58
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	88fa      	ldrh	r2, [r7, #6]
 800a744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2222      	movs	r2, #34	@ 0x22
 800a754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d02d      	beq.n	800a7be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a768:	4a40      	ldr	r2, [pc, #256]	@ (800a86c <UART_Start_Receive_DMA+0x140>)
 800a76a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a772:	4a3f      	ldr	r2, [pc, #252]	@ (800a870 <UART_Start_Receive_DMA+0x144>)
 800a774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a77c:	4a3d      	ldr	r2, [pc, #244]	@ (800a874 <UART_Start_Receive_DMA+0x148>)
 800a77e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a786:	2200      	movs	r2, #0
 800a788:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3324      	adds	r3, #36	@ 0x24
 800a796:	4619      	mov	r1, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79c:	461a      	mov	r2, r3
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	f7f7 feaa 	bl	80024f8 <HAL_DMA_Start_IT>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d009      	beq.n	800a7be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2210      	movs	r2, #16
 800a7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e051      	b.n	800a862 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d018      	beq.n	800a7f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ce:	e853 3f00 	ldrex	r3, [r3]
 800a7d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7da:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7ec:	e841 2300 	strex	r3, r2, [r1]
 800a7f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1e6      	bne.n	800a7c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a802:	e853 3f00 	ldrex	r3, [r3]
 800a806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3308      	adds	r3, #8
 800a816:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a818:	637a      	str	r2, [r7, #52]	@ 0x34
 800a81a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a81e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a820:	e841 2300 	strex	r3, r2, [r1]
 800a824:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e5      	bne.n	800a7f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3308      	adds	r3, #8
 800a832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	613b      	str	r3, [r7, #16]
   return(result);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3308      	adds	r3, #8
 800a84a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a84c:	623a      	str	r2, [r7, #32]
 800a84e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	69f9      	ldr	r1, [r7, #28]
 800a852:	6a3a      	ldr	r2, [r7, #32]
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	61bb      	str	r3, [r7, #24]
   return(result);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e5      	bne.n	800a82c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3758      	adds	r7, #88	@ 0x58
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	0800aa7b 	.word	0x0800aa7b
 800a870:	0800aba3 	.word	0x0800aba3
 800a874:	0800abe1 	.word	0x0800abe1

0800a878 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a878:	b480      	push	{r7}
 800a87a:	b08f      	sub	sp, #60	@ 0x3c
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8a0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e6      	bne.n	800a880 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8d2:	61ba      	str	r2, [r7, #24]
 800a8d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d6:	6979      	ldr	r1, [r7, #20]
 800a8d8:	69ba      	ldr	r2, [r7, #24]
 800a8da:	e841 2300 	strex	r3, r2, [r1]
 800a8de:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1e5      	bne.n	800a8b2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8ee:	bf00      	nop
 800a8f0:	373c      	adds	r7, #60	@ 0x3c
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
	...

0800a8fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b095      	sub	sp, #84	@ 0x54
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a922:	643b      	str	r3, [r7, #64]	@ 0x40
 800a924:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a926:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a928:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a92a:	e841 2300 	strex	r3, r2, [r1]
 800a92e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1e6      	bne.n	800a904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3308      	adds	r3, #8
 800a93c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	61fb      	str	r3, [r7, #28]
   return(result);
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	4b1e      	ldr	r3, [pc, #120]	@ (800a9c4 <UART_EndRxTransfer+0xc8>)
 800a94a:	4013      	ands	r3, r2
 800a94c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3308      	adds	r3, #8
 800a954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a958:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a95c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e5      	bne.n	800a936 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d118      	bne.n	800a9a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f023 0310 	bic.w	r3, r3, #16
 800a986:	647b      	str	r3, [r7, #68]	@ 0x44
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a990:	61bb      	str	r3, [r7, #24]
 800a992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6979      	ldr	r1, [r7, #20]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	613b      	str	r3, [r7, #16]
   return(result);
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e6      	bne.n	800a972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9b8:	bf00      	nop
 800a9ba:	3754      	adds	r7, #84	@ 0x54
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr
 800a9c4:	effffffe 	.word	0xeffffffe

0800a9c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b090      	sub	sp, #64	@ 0x40
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	69db      	ldr	r3, [r3, #28]
 800a9da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9de:	d037      	beq.n	800aa50 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	623b      	str	r3, [r7, #32]
   return(result);
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3308      	adds	r3, #8
 800aa06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa08:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e5      	bne.n	800a9e8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	69b9      	ldr	r1, [r7, #24]
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	617b      	str	r3, [r7, #20]
   return(result);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e6      	bne.n	800aa1c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa4e:	e002      	b.n	800aa56 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800aa50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa52:	f7f6 fa1f 	bl	8000e94 <HAL_UART_TxCpltCallback>
}
 800aa56:	bf00      	nop
 800aa58:	3740      	adds	r7, #64	@ 0x40
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f7fe fd67 	bl	8009540 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa72:	bf00      	nop
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b09c      	sub	sp, #112	@ 0x70
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa90:	d071      	beq.n	800ab76 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aa92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaa2:	e853 3f00 	ldrex	r3, [r3]
 800aaa6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aaa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aabe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aac0:	e841 2300 	strex	r3, r2, [r1]
 800aac4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1e6      	bne.n	800aa9a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aacc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3308      	adds	r3, #8
 800aad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad6:	e853 3f00 	ldrex	r3, [r3]
 800aada:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aade:	f023 0301 	bic.w	r3, r3, #1
 800aae2:	667b      	str	r3, [r7, #100]	@ 0x64
 800aae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3308      	adds	r3, #8
 800aaea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aaec:	647a      	str	r2, [r7, #68]	@ 0x44
 800aaee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aaf4:	e841 2300 	strex	r3, r2, [r1]
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e5      	bne.n	800aacc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3308      	adds	r3, #8
 800ab06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	623b      	str	r3, [r7, #32]
   return(result);
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab16:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab20:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e5      	bne.n	800ab00 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab36:	2220      	movs	r2, #32
 800ab38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d118      	bne.n	800ab76 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f023 0310 	bic.w	r3, r3, #16
 800ab58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab62:	61fb      	str	r3, [r7, #28]
 800ab64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	69b9      	ldr	r1, [r7, #24]
 800ab68:	69fa      	ldr	r2, [r7, #28]
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e6      	bne.n	800ab44 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab78:	2200      	movs	r2, #0
 800ab7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d107      	bne.n	800ab94 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab8e:	f7f6 f9a1 	bl	8000ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab92:	e002      	b.n	800ab9a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ab94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab96:	f7fe fcdd 	bl	8009554 <HAL_UART_RxCpltCallback>
}
 800ab9a:	bf00      	nop
 800ab9c:	3770      	adds	r7, #112	@ 0x70
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2201      	movs	r2, #1
 800abb4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d109      	bne.n	800abd2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800abc4:	085b      	lsrs	r3, r3, #1
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	4619      	mov	r1, r3
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7f6 f982 	bl	8000ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abd0:	e002      	b.n	800abd8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7fe fcc8 	bl	8009568 <HAL_UART_RxHalfCpltCallback>
}
 800abd8:	bf00      	nop
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800abfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac08:	2b80      	cmp	r3, #128	@ 0x80
 800ac0a:	d109      	bne.n	800ac20 <UART_DMAError+0x40>
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b21      	cmp	r3, #33	@ 0x21
 800ac10:	d106      	bne.n	800ac20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f7ff fe2c 	bl	800a878 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac2a:	2b40      	cmp	r3, #64	@ 0x40
 800ac2c:	d109      	bne.n	800ac42 <UART_DMAError+0x62>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b22      	cmp	r3, #34	@ 0x22
 800ac32:	d106      	bne.n	800ac42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac3c:	6978      	ldr	r0, [r7, #20]
 800ac3e:	f7ff fe5d 	bl	800a8fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac48:	f043 0210 	orr.w	r2, r3, #16
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac52:	6978      	ldr	r0, [r7, #20]
 800ac54:	f7fe fc92 	bl	800957c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac58:	bf00      	nop
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7fe fc7c 	bl	800957c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b088      	sub	sp, #32
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca8:	61fb      	str	r3, [r7, #28]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	61bb      	str	r3, [r7, #24]
 800acb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	6979      	ldr	r1, [r7, #20]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	613b      	str	r3, [r7, #16]
   return(result);
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e6      	bne.n	800ac94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7f6 f8dd 	bl	8000e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acda:	bf00      	nop
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b083      	sub	sp, #12
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad12:	bf00      	nop
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b085      	sub	sp, #20
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e027      	b.n	800ad84 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2224      	movs	r2, #36	@ 0x24
 800ad40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f022 0201 	bic.w	r2, r2, #1
 800ad5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d101      	bne.n	800ada8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e02d      	b.n	800ae04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2224      	movs	r2, #36	@ 0x24
 800adb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f022 0201 	bic.w	r2, r2, #1
 800adce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	430a      	orrs	r2, r1
 800ade2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f8a3 	bl	800af30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2220      	movs	r2, #32
 800adf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d101      	bne.n	800ae24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e02d      	b.n	800ae80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2224      	movs	r2, #36	@ 0x24
 800ae30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 0201 	bic.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	683a      	ldr	r2, [r7, #0]
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f865 	bl	800af30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2220      	movs	r2, #32
 800ae72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08c      	sub	sp, #48	@ 0x30
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	4613      	mov	r3, r2
 800ae94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae9c:	2b20      	cmp	r3, #32
 800ae9e:	d142      	bne.n	800af26 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d002      	beq.n	800aeac <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800aea6:	88fb      	ldrh	r3, [r7, #6]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e03b      	b.n	800af28 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800aebc:	88fb      	ldrh	r3, [r7, #6]
 800aebe:	461a      	mov	r2, r3
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7ff fc32 	bl	800a72c <UART_Start_Receive_DMA>
 800aec8:	4603      	mov	r3, r0
 800aeca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aece:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d124      	bne.n	800af20 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d11d      	bne.n	800af1a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2210      	movs	r2, #16
 800aee4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	617b      	str	r3, [r7, #20]
   return(result);
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f043 0310 	orr.w	r3, r3, #16
 800aefa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af04:	627b      	str	r3, [r7, #36]	@ 0x24
 800af06:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af08:	6a39      	ldr	r1, [r7, #32]
 800af0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af0c:	e841 2300 	strex	r3, r2, [r1]
 800af10:	61fb      	str	r3, [r7, #28]
   return(result);
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1e6      	bne.n	800aee6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800af18:	e002      	b.n	800af20 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800af20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af24:	e000      	b.n	800af28 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800af26:	2302      	movs	r3, #2
  }
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3730      	adds	r7, #48	@ 0x30
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d108      	bne.n	800af52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af50:	e031      	b.n	800afb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af52:	2310      	movs	r3, #16
 800af54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af56:	2310      	movs	r3, #16
 800af58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	0e5b      	lsrs	r3, r3, #25
 800af62:	b2db      	uxtb	r3, r3
 800af64:	f003 0307 	and.w	r3, r3, #7
 800af68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	0f5b      	lsrs	r3, r3, #29
 800af72:	b2db      	uxtb	r3, r3
 800af74:	f003 0307 	and.w	r3, r3, #7
 800af78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	7b3a      	ldrb	r2, [r7, #12]
 800af7e:	4911      	ldr	r1, [pc, #68]	@ (800afc4 <UARTEx_SetNbDataToProcess+0x94>)
 800af80:	5c8a      	ldrb	r2, [r1, r2]
 800af82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af86:	7b3a      	ldrb	r2, [r7, #12]
 800af88:	490f      	ldr	r1, [pc, #60]	@ (800afc8 <UARTEx_SetNbDataToProcess+0x98>)
 800af8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	7b7a      	ldrb	r2, [r7, #13]
 800af9c:	4909      	ldr	r1, [pc, #36]	@ (800afc4 <UARTEx_SetNbDataToProcess+0x94>)
 800af9e:	5c8a      	ldrb	r2, [r1, r2]
 800afa0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800afa4:	7b7a      	ldrb	r2, [r7, #13]
 800afa6:	4908      	ldr	r1, [pc, #32]	@ (800afc8 <UARTEx_SetNbDataToProcess+0x98>)
 800afa8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800afaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800afb6:	bf00      	nop
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	0800b090 	.word	0x0800b090
 800afc8:	0800b098 	.word	0x0800b098

0800afcc <memset>:
 800afcc:	4402      	add	r2, r0
 800afce:	4603      	mov	r3, r0
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d100      	bne.n	800afd6 <memset+0xa>
 800afd4:	4770      	bx	lr
 800afd6:	f803 1b01 	strb.w	r1, [r3], #1
 800afda:	e7f9      	b.n	800afd0 <memset+0x4>

0800afdc <__libc_init_array>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4d0d      	ldr	r5, [pc, #52]	@ (800b014 <__libc_init_array+0x38>)
 800afe0:	4c0d      	ldr	r4, [pc, #52]	@ (800b018 <__libc_init_array+0x3c>)
 800afe2:	1b64      	subs	r4, r4, r5
 800afe4:	10a4      	asrs	r4, r4, #2
 800afe6:	2600      	movs	r6, #0
 800afe8:	42a6      	cmp	r6, r4
 800afea:	d109      	bne.n	800b000 <__libc_init_array+0x24>
 800afec:	4d0b      	ldr	r5, [pc, #44]	@ (800b01c <__libc_init_array+0x40>)
 800afee:	4c0c      	ldr	r4, [pc, #48]	@ (800b020 <__libc_init_array+0x44>)
 800aff0:	f000 f826 	bl	800b040 <_init>
 800aff4:	1b64      	subs	r4, r4, r5
 800aff6:	10a4      	asrs	r4, r4, #2
 800aff8:	2600      	movs	r6, #0
 800affa:	42a6      	cmp	r6, r4
 800affc:	d105      	bne.n	800b00a <__libc_init_array+0x2e>
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	f855 3b04 	ldr.w	r3, [r5], #4
 800b004:	4798      	blx	r3
 800b006:	3601      	adds	r6, #1
 800b008:	e7ee      	b.n	800afe8 <__libc_init_array+0xc>
 800b00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00e:	4798      	blx	r3
 800b010:	3601      	adds	r6, #1
 800b012:	e7f2      	b.n	800affa <__libc_init_array+0x1e>
 800b014:	0800b0a8 	.word	0x0800b0a8
 800b018:	0800b0a8 	.word	0x0800b0a8
 800b01c:	0800b0a8 	.word	0x0800b0a8
 800b020:	0800b0ac 	.word	0x0800b0ac

0800b024 <memcpy>:
 800b024:	440a      	add	r2, r1
 800b026:	4291      	cmp	r1, r2
 800b028:	f100 33ff 	add.w	r3, r0, #4294967295
 800b02c:	d100      	bne.n	800b030 <memcpy+0xc>
 800b02e:	4770      	bx	lr
 800b030:	b510      	push	{r4, lr}
 800b032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b03a:	4291      	cmp	r1, r2
 800b03c:	d1f9      	bne.n	800b032 <memcpy+0xe>
 800b03e:	bd10      	pop	{r4, pc}

0800b040 <_init>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr

0800b04c <_fini>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr
