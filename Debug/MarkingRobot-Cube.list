
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acd4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800afa0  0800afa0  0000bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afe8  0800afe8  0000bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aff0  0800aff0  0000bff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aff4  0800aff4  0000bff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800aff8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  24000014  0800b00c  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240003e0  0800b00c  0000c3e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b3a3  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000300b  00000000  00000000  000273e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001240  00000000  00000000  0002a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e42  00000000  00000000  0002b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f17  00000000  00000000  0002c472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aa2c  00000000  00000000  00060389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150b11  00000000  00000000  0007adb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cb8c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d9c  00000000  00000000  001cb90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001d06a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800af88 	.word	0x0800af88

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800af88 	.word	0x0800af88

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZN7TMC2209C1Ev>:
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private user code ---------------------------------------------------------*/
TMC2209::TMC2209(){}
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2203      	movs	r2, #3
 8000608:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0e0      	sub	sp, #384	@ 0x180
 8000620:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000622:	f000 fc31 	bl	8000e88 <_ZL10MPU_Configv>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000626:	f000 ff7d 	bl	8001524 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800062a:	f000 f88d 	bl	8000748 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062e:	f000 fad3 	bl	8000bd8 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000632:	f000 fa99 	bl	8000b68 <_ZL11MX_DMA_Initv>
	MX_UART8_Init();
 8000636:	f000 f9d7 	bl	80009e8 <_ZL13MX_UART8_Initv>
	MX_USART2_UART_Init();
 800063a:	f000 fa35 	bl	8000aa8 <_ZL19MX_USART2_UART_Initv>
	MX_CRC_Init();
 800063e:	f000 f901 	bl	8000844 <_ZL11MX_CRC_Initv>
	MX_TIM2_Init();
 8000642:	f000 f943 	bl	80008cc <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */
	/* Peripheral Configuration */
	TMC2209 tmc2209X, tmc2209Z;
 8000646:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffd6 	bl	80005fc <_ZN7TMC2209C1Ev>
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffd1 	bl	80005fc <_ZN7TMC2209C1Ev>
	/* CLK Configuration */
	HAL_TIM_Base_Start_IT(&htim2);
 800065a:	4832      	ldr	r0, [pc, #200]	@ (8000724 <main+0x108>)
 800065c:	f007 f98e 	bl	800797c <HAL_TIM_Base_Start_IT>

	/* GPIO Configuration */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000660:	2200      	movs	r2, #0
 8000662:	2140      	movs	r1, #64	@ 0x40
 8000664:	4830      	ldr	r0, [pc, #192]	@ (8000728 <main+0x10c>)
 8000666:	f004 fb81 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 800066a:	2200      	movs	r2, #0
 800066c:	2101      	movs	r1, #1
 800066e:	482f      	ldr	r0, [pc, #188]	@ (800072c <main+0x110>)
 8000670:	f004 fb7c 	bl	8004d6c <HAL_GPIO_WritePin>

	/* UART Configuration */
	HAL_HalfDuplex_EnableReceiver(&huart2);
 8000674:	482e      	ldr	r0, [pc, #184]	@ (8000730 <main+0x114>)
 8000676:	f008 ff91 	bl	800959c <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 800067a:	2220      	movs	r2, #32
 800067c:	492d      	ldr	r1, [pc, #180]	@ (8000734 <main+0x118>)
 800067e:	482c      	ldr	r0, [pc, #176]	@ (8000730 <main+0x114>)
 8000680:	f00a fbb4 	bl	800adec <HAL_UARTEx_ReceiveToIdle_DMA>

	//########################### Uart X (Uart2)
	uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
 8000684:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000688:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800068c:	4a2a      	ldr	r2, [pc, #168]	@ (8000738 <main+0x11c>)
 800068e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000692:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
 8000696:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800069a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800069e:	4a27      	ldr	r2, [pc, #156]	@ (800073c <main+0x120>)
 80006a0:	601a      	str	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 80006a2:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <main+0x124>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
			if ( 0 /*Move_To_Pos((uint16_t*)HomePos)*/)
				Error_Handler();
		}
		//*********************************************************************************************
		//TODO UART in seperate Datei
		write[7] = HAL_CRC_Calculate(&hcrc, (uint32_t *)write, sizeof(write)-1);
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2207      	movs	r2, #7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4824      	ldr	r0, [pc, #144]	@ (8000744 <main+0x128>)
 80006b4:	f001 f9d8 	bl	8001a68 <HAL_CRC_Calculate>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006c0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80006c4:	71da      	strb	r2, [r3, #7]
		read[3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)read, sizeof(read)-1);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2203      	movs	r2, #3
 80006ca:	4619      	mov	r1, r3
 80006cc:	481d      	ldr	r0, [pc, #116]	@ (8000744 <main+0x128>)
 80006ce:	f001 f9cb 	bl	8001a68 <HAL_CRC_Calculate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006da:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80006de:	70da      	strb	r2, [r3, #3]
		//*********************************************************************************************
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 80006e0:	4813      	ldr	r0, [pc, #76]	@ (8000730 <main+0x114>)
 80006e2:	f008 ff07 	bl	80094f4 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, write, 8);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2208      	movs	r2, #8
 80006ec:	4619      	mov	r1, r3
 80006ee:	4810      	ldr	r0, [pc, #64]	@ (8000730 <main+0x114>)
 80006f0:	f008 fa9e 	bl	8008c30 <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 80006f4:	480e      	ldr	r0, [pc, #56]	@ (8000730 <main+0x114>)
 80006f6:	f008 ff51 	bl	800959c <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 80006fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fe:	f000 ffa3 	bl	8001648 <HAL_Delay>
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <main+0x114>)
 8000704:	f008 fef6 	bl	80094f4 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, read, 4);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2204      	movs	r2, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4808      	ldr	r0, [pc, #32]	@ (8000730 <main+0x114>)
 8000710:	f008 fa8e 	bl	8008c30 <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <main+0x114>)
 8000716:	f008 ff41 	bl	800959c <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 800071a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071e:	f000 ff93 	bl	8001648 <HAL_Delay>
		if (BatteryAlarm) {
 8000722:	e7be      	b.n	80006a2 <main+0x86>
 8000724:	24000054 	.word	0x24000054
 8000728:	58020c00 	.word	0x58020c00
 800072c:	58021000 	.word	0x58021000
 8000730:	24000134 	.word	0x24000134
 8000734:	240003a8 	.word	0x240003a8
 8000738:	0800afa0 	.word	0x0800afa0
 800073c:	8f020005 	.word	0x8f020005
 8000740:	240003c8 	.word	0x240003c8
 8000744:	24000030 	.word	0x24000030

08000748 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	@ 0x70
 800074c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	224c      	movs	r2, #76	@ 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00a fbea 	bl	800af30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00a fbe4 	bl	800af30 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000768:	2002      	movs	r0, #2
 800076a:	f004 fb4d 	bl	8004e08 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b33      	ldr	r3, [pc, #204]	@ (8000840 <_Z18SystemClock_Configv+0xf8>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a32      	ldr	r2, [pc, #200]	@ (8000840 <_Z18SystemClock_Configv+0xf8>)
 8000778:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b30      	ldr	r3, [pc, #192]	@ (8000840 <_Z18SystemClock_Configv+0xf8>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800078a:	bf00      	nop
 800078c:	4b2c      	ldr	r3, [pc, #176]	@ (8000840 <_Z18SystemClock_Configv+0xf8>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f3      	bne.n	800078c <_Z18SystemClock_Configv+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80007ac:	2340      	movs	r3, #64	@ 0x40
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 80007bc:	2322      	movs	r3, #34	@ 0x22
 80007be:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80007c4:	2303      	movs	r3, #3
 80007c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007cc:	230c      	movs	r3, #12
 80007ce:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80007d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fb4c 	bl	8004e7c <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <_Z18SystemClock_Configv+0xb0>
	{
		Error_Handler();
 80007f4:	f000 fb74 	bl	8000ee0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	233f      	movs	r3, #63	@ 0x3f
 80007fa:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2303      	movs	r3, #3
 80007fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000804:	2308      	movs	r3, #8
 8000806:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800080c:	2340      	movs	r3, #64	@ 0x40
 800080e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000814:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000816:	2340      	movs	r3, #64	@ 0x40
 8000818:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2103      	movs	r1, #3
 800081e:	4618      	mov	r0, r3
 8000820:	f004 ff06 	bl	8005630 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf14      	ite	ne
 800082a:	2301      	movne	r3, #1
 800082c:	2300      	moveq	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_Z18SystemClock_Configv+0xf0>
	{
		Error_Handler();
 8000834:	f000 fb54 	bl	8000ee0 <Error_Handler>
	}
}
 8000838:	bf00      	nop
 800083a:	3770      	adds	r7, #112	@ 0x70
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58024800 	.word	0x58024800

08000844 <_ZL11MX_CRC_Initv>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <_ZL11MX_CRC_Initv+0x7c>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	4a1b      	ldr	r2, [pc, #108]	@ (80008c0 <_ZL11MX_CRC_Initv+0x7c>)
 8000852:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <_ZL11MX_CRC_Initv+0x7c>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000860:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000868:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 800086a:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <_ZL11MX_CRC_Initv+0x84>)
 800086c:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 8000870:	2201      	movs	r2, #1
 8000872:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 8000876:	2201      	movs	r2, #1
 8000878:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 800087c:	2207      	movs	r2, #7
 800087e:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 8000882:	2210      	movs	r2, #16
 8000884:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 800088e:	2220      	movs	r2, #32
 8000890:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 800089a:	2201      	movs	r2, #1
 800089c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800089e:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <_ZL11MX_CRC_Initv+0x80>)
 80008a0:	f001 f87e 	bl	80019a0 <HAL_CRC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZL11MX_CRC_Initv+0x74>
	{
		Error_Handler();
 80008b4:	f000 fb14 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	58024400 	.word	0x58024400
 80008c4:	24000030 	.word	0x24000030
 80008c8:	58024c00 	.word	0x58024c00

080008cc <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	@ 0x38
 80008d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008fe:	4b39      	ldr	r3, [pc, #228]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000900:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000904:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 8000906:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000908:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800090c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000914:	4b33      	ldr	r3, [pc, #204]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000916:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800091a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000928:	482e      	ldr	r0, [pc, #184]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 800092a:	f006 ffcf 	bl	80078cc <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	bf14      	ite	ne
 8000934:	2301      	movne	r3, #1
 8000936:	2300      	moveq	r3, #0
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <_ZL12MX_TIM2_Initv+0x76>
	{
		Error_Handler();
 800093e:	f000 facf 	bl	8000ee0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000948:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094c:	4619      	mov	r1, r3
 800094e:	4825      	ldr	r0, [pc, #148]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000950:	f007 fb16 	bl	8007f80 <HAL_TIM_ConfigClockSource>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <_ZL12MX_TIM2_Initv+0x9c>
	{
		Error_Handler();
 8000964:	f000 fabc 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000968:	481e      	ldr	r0, [pc, #120]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 800096a:	f007 f88d 	bl	8007a88 <HAL_TIM_PWM_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_ZL12MX_TIM2_Initv+0xb6>
	{
		Error_Handler();
 800097e:	f000 faaf 	bl	8000ee0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4814      	ldr	r0, [pc, #80]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 8000992:	f008 f83b 	bl	8008a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <_ZL12MX_TIM2_Initv+0xde>
	{
		Error_Handler();
 80009a6:	f000 fa9b 	bl	8000ee0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009aa:	2360      	movs	r3, #96	@ 0x60
 80009ac:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 80009ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80009b2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <_ZL12MX_TIM2_Initv+0x118>)
 80009c4:	f007 f9c8 	bl	8007d58 <HAL_TIM_PWM_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bf14      	ite	ne
 80009ce:	2301      	movne	r3, #1
 80009d0:	2300      	moveq	r3, #0
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <_ZL12MX_TIM2_Initv+0x110>
	{
		Error_Handler();
 80009d8:	f000 fa82 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	24000054 	.word	0x24000054

080009e8 <_ZL13MX_UART8_Initv>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 80009ee:	4a2d      	ldr	r2, [pc, #180]	@ (8000aa4 <_ZL13MX_UART8_Initv+0xbc>)
 80009f0:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b29      	ldr	r3, [pc, #164]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 8000a30:	481b      	ldr	r0, [pc, #108]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a32:	f008 f8a5 	bl	8008b80 <HAL_HalfDuplex_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_ZL13MX_UART8_Initv+0x62>
	{
		Error_Handler();
 8000a46:	f000 fa4b 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4814      	ldr	r0, [pc, #80]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a4e:	f00a f951 	bl	800acf4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <_ZL13MX_UART8_Initv+0x7e>
	{
		Error_Handler();
 8000a62:	f000 fa3d 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a66:	2100      	movs	r1, #0
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a6a:	f00a f981 	bl	800ad70 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	bf14      	ite	ne
 8000a74:	2301      	movne	r3, #1
 8000a76:	2300      	moveq	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_ZL13MX_UART8_Initv+0x9a>
	{
		Error_Handler();
 8000a7e:	f000 fa2f 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <_ZL13MX_UART8_Initv+0xb8>)
 8000a84:	f00a f8fd 	bl	800ac82 <HAL_UARTEx_DisableFifoMode>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf14      	ite	ne
 8000a8e:	2301      	movne	r3, #1
 8000a90:	2300      	moveq	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <_ZL13MX_UART8_Initv+0xb4>
	{
		Error_Handler();
 8000a98:	f000 fa22 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	240000a0 	.word	0x240000a0
 8000aa4:	40007c00 	.word	0x40007c00

08000aa8 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aae:	4a2d      	ldr	r2, [pc, #180]	@ (8000b64 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000ab0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000af0:	481b      	ldr	r0, [pc, #108]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000af2:	f008 f845 	bl	8008b80 <HAL_HalfDuplex_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL19MX_USART2_UART_Initv+0x62>
	{
		Error_Handler();
 8000b06:	f000 f9eb 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4814      	ldr	r0, [pc, #80]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b0e:	f00a f8f1 	bl	800acf4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <_ZL19MX_USART2_UART_Initv+0x7e>
	{
		Error_Handler();
 8000b22:	f000 f9dd 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b2a:	f00a f921 	bl	800ad70 <HAL_UARTEx_SetRxFifoThreshold>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <_ZL19MX_USART2_UART_Initv+0x9a>
	{
		Error_Handler();
 8000b3e:	f000 f9cf 	bl	8000ee0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b44:	f00a f89d 	bl	800ac82 <HAL_UARTEx_DisableFifoMode>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <_ZL19MX_USART2_UART_Initv+0xb4>
	{
		Error_Handler();
 8000b58:	f000 f9c2 	bl	8000ee0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	24000134 	.word	0x24000134
 8000b64:	40004400 	.word	0x40004400

08000b68 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <_ZL11MX_DMA_Initv+0x6c>)
 8000b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b74:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <_ZL11MX_DMA_Initv+0x6c>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <_ZL11MX_DMA_Initv+0x6c>)
 8000b80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	200b      	movs	r0, #11
 8000b92:	f000 fe58 	bl	8001846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b96:	200b      	movs	r0, #11
 8000b98:	f000 fe6f 	bl	800187a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	200c      	movs	r0, #12
 8000ba2:	f000 fe50 	bl	8001846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ba6:	200c      	movs	r0, #12
 8000ba8:	f000 fe67 	bl	800187a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	200d      	movs	r0, #13
 8000bb2:	f000 fe48 	bl	8001846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bb6:	200d      	movs	r0, #13
 8000bb8:	f000 fe5f 	bl	800187a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200e      	movs	r0, #14
 8000bc2:	f000 fe40 	bl	8001846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bc6:	200e      	movs	r0, #14
 8000bc8:	f000 fe57 	bl	800187a <HAL_NVIC_EnableIRQ>

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400

08000bd8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	@ 0x28
 8000bdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bee:	4b52      	ldr	r3, [pc, #328]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	4a50      	ldr	r2, [pc, #320]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	4a49      	ldr	r2, [pc, #292]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1c:	4b46      	ldr	r3, [pc, #280]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b43      	ldr	r3, [pc, #268]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	4a41      	ldr	r2, [pc, #260]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	f003 0308 	and.w	r3, r3, #8
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b3b      	ldr	r3, [pc, #236]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c58:	4b37      	ldr	r3, [pc, #220]	@ (8000d38 <_ZL12MX_GPIO_Initv+0x160>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210c      	movs	r1, #12
 8000c6a:	4834      	ldr	r0, [pc, #208]	@ (8000d3c <_ZL12MX_GPIO_Initv+0x164>)
 8000c6c:	f004 f87e 	bl	8004d6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2118      	movs	r1, #24
 8000c74:	4832      	ldr	r0, [pc, #200]	@ (8000d40 <_ZL12MX_GPIO_Initv+0x168>)
 8000c76:	f004 f879 	bl	8004d6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	4830      	ldr	r0, [pc, #192]	@ (8000d40 <_ZL12MX_GPIO_Initv+0x168>)
 8000c80:	f004 f874 	bl	8004d6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2108      	movs	r1, #8
 8000c88:	482e      	ldr	r0, [pc, #184]	@ (8000d44 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c8a:	f004 f86f 	bl	8004d6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2101      	movs	r1, #1
 8000c92:	482a      	ldr	r0, [pc, #168]	@ (8000d3c <_ZL12MX_GPIO_Initv+0x164>)
 8000c94:	f004 f86a 	bl	8004d6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 8000c98:	230d      	movs	r3, #13
 8000c9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4823      	ldr	r0, [pc, #140]	@ (8000d3c <_ZL12MX_GPIO_Initv+0x164>)
 8000cb0:	f003 feb4 	bl	8004a1c <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8000cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cbe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481f      	ldr	r0, [pc, #124]	@ (8000d48 <_ZL12MX_GPIO_Initv+0x170>)
 8000ccc:	f003 fea6 	bl	8004a1c <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4819      	ldr	r0, [pc, #100]	@ (8000d48 <_ZL12MX_GPIO_Initv+0x170>)
 8000ce4:	f003 fe9a 	bl	8004a1c <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000ce8:	2358      	movs	r3, #88	@ 0x58
 8000cea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4810      	ldr	r0, [pc, #64]	@ (8000d40 <_ZL12MX_GPIO_Initv+0x168>)
 8000d00:	f003 fe8c 	bl	8004a1c <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000d04:	2308      	movs	r3, #8
 8000d06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <_ZL12MX_GPIO_Initv+0x16c>)
 8000d1c:	f003 fe7e 	bl	8004a1c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2028      	movs	r0, #40	@ 0x28
 8000d26:	f000 fd8e 	bl	8001846 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d2a:	2028      	movs	r0, #40	@ 0x28
 8000d2c:	f000 fda5 	bl	800187a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	@ 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58024400 	.word	0x58024400
 8000d3c:	58021000 	.word	0x58021000
 8000d40:	58020c00 	.word	0x58020c00
 8000d44:	58020400 	.word	0x58020400
 8000d48:	58020800 	.word	0x58020800

08000d4c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO External Interrupt Callback Function
 * @param GPIO_Pin GPIO-Pin with active Interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
	}
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	240003c8 	.word	0x240003c8

08000d74 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer External Interrupt Callback Function
 * @param htim Pointer to Timer with elapsed Timer Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d84:	d150      	bne.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (PWMEnabledX) {
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d046      	beq.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xb4>
			PWMCounterX++;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b23      	ldr	r3, [pc, #140]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000da6:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	429a      	cmp	r2, r3
 8000db6:	bf2c      	ite	cs
 8000db8:	2301      	movcs	r3, #1
 8000dba:	2300      	movcc	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <HAL_TIM_PeriodElapsedCallback+0x5e>
				PWMCounterX = 0;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000dd0:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	429a      	cmp	r2, r3
 8000de0:	bf34      	ite	cc
 8000de2:	2301      	movcc	r3, #1
 8000de4:	2300      	movcs	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x84>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000df2:	f003 ffbb 	bl	8004d6c <HAL_GPIO_WritePin>
 8000df6:	e004      	b.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000dfe:	f003 ffb5 	bl	8004d6c <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	bf2c      	ite	cs
 8000e0e:	2301      	movcs	r3, #1
 8000e10:	2300      	movcc	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d007      	beq.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xb4>
				PWMEnabledX = false;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2110      	movs	r1, #16
 8000e22:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000e24:	f003 ffa2 	bl	8004d6c <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240003d8 	.word	0x240003d8
 8000e34:	240003d0 	.word	0x240003d0
 8000e38:	24000000 	.word	0x24000000
 8000e3c:	240003cc 	.word	0x240003cc
 8000e40:	24000002 	.word	0x24000002
 8000e44:	58020c00 	.word	0x58020c00
 8000e48:	240003d4 	.word	0x240003d4

08000e4c <HAL_UART_TxCpltCallback>:
/**
 * @brief UART Transmitt Completed Callback Function
 * @param huart Pointer to UART with completed Transmitt
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {

	}
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_UARTEx_RxEventCallback>:
 * @brief UART Recive Completed Callback Function
 * @param huart Pointer to UART with recived data
 * @param Size Size of the recived data
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	4904      	ldr	r1, [pc, #16]	@ (8000e80 <HAL_UARTEx_RxEventCallback+0x20>)
 8000e70:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <HAL_UARTEx_RxEventCallback+0x24>)
 8000e72:	f009 ffbb 	bl	800adec <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	240003a8 	.word	0x240003a8
 8000e84:	24000134 	.word	0x24000134

08000e88 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000e9a:	f000 fd09 	bl	80018b0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eaa:	231f      	movs	r3, #31
 8000eac:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000eae:	2387      	movs	r3, #135	@ 0x87
 8000eb0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fd27 	bl	8001920 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f000 fd04 	bl	80018e0 <HAL_MPU_Enable>

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <Error_Handler+0x1c>)
 8000eec:	f003 ff57 	bl	8004d9e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000ef0:	2064      	movs	r0, #100	@ 0x64
 8000ef2:	f000 fba9 	bl	8001648 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000ef6:	bf00      	nop
 8000ef8:	e7f6      	b.n	8000ee8 <Error_Handler+0x8>
 8000efa:	bf00      	nop
 8000efc:	58020400 	.word	0x58020400

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_MspInit+0x30>)
 8000f08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f0c:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x30>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x30>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	58024400 	.word	0x58024400

08000f34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0b      	ldr	r2, [pc, #44]	@ (8000f70 <HAL_CRC_MspInit+0x3c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10e      	bne.n	8000f64 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a09      	ldr	r2, [pc, #36]	@ (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <HAL_CRC_MspInit+0x40>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	58024c00 	.word	0x58024c00
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f88:	d116      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x48>)
 8000f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x48>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 fc4a 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	f000 fc61 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024400 	.word	0x58024400

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	22b8      	movs	r2, #184	@ 0xb8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f009 ffa3 	bl	800af30 <memset>
  if(huart->Instance==UART8)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4ab0      	ldr	r2, [pc, #704]	@ (80012b0 <HAL_UART_MspInit+0x2ec>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	f040 80aa 	bne.w	800114a <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ff6:	f04f 0202 	mov.w	r2, #2
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f004 fe9b 	bl	8005d48 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001018:	f7ff ff62 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800101c:	4ba5      	ldr	r3, [pc, #660]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800101e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001022:	4aa4      	ldr	r2, [pc, #656]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001028:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800102c:	4ba1      	ldr	r3, [pc, #644]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800102e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001032:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800103a:	4b9e      	ldr	r3, [pc, #632]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	4a9c      	ldr	r2, [pc, #624]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104a:	4b9a      	ldr	r3, [pc, #616]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001070:	2308      	movs	r3, #8
 8001072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800107a:	4619      	mov	r1, r3
 800107c:	488e      	ldr	r0, [pc, #568]	@ (80012b8 <HAL_UART_MspInit+0x2f4>)
 800107e:	f003 fccd 	bl	8004a1c <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 8001082:	4b8e      	ldr	r3, [pc, #568]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 8001084:	4a8e      	ldr	r2, [pc, #568]	@ (80012c0 <HAL_UART_MspInit+0x2fc>)
 8001086:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001088:	4b8c      	ldr	r3, [pc, #560]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 800108a:	2252      	movs	r2, #82	@ 0x52
 800108c:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108e:	4b8b      	ldr	r3, [pc, #556]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 8001090:	2240      	movs	r2, #64	@ 0x40
 8001092:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b89      	ldr	r3, [pc, #548]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b88      	ldr	r3, [pc, #544]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 800109c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a2:	4b86      	ldr	r3, [pc, #536]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a8:	4b84      	ldr	r3, [pc, #528]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80010ae:	4b83      	ldr	r3, [pc, #524]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010b4:	4b81      	ldr	r3, [pc, #516]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ba:	4b80      	ldr	r3, [pc, #512]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80010c0:	487e      	ldr	r0, [pc, #504]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010c2:	f000 fe73 	bl	8001dac <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80010cc:	f7ff ff08 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a7a      	ldr	r2, [pc, #488]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010d4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80010d6:	4a79      	ldr	r2, [pc, #484]	@ (80012bc <HAL_UART_MspInit+0x2f8>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 80010dc:	4b79      	ldr	r3, [pc, #484]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010de:	4a7a      	ldr	r2, [pc, #488]	@ (80012c8 <HAL_UART_MspInit+0x304>)
 80010e0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80010e2:	4b78      	ldr	r3, [pc, #480]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010e4:	2251      	movs	r2, #81	@ 0x51
 80010e6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e8:	4b76      	ldr	r3, [pc, #472]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ee:	4b75      	ldr	r3, [pc, #468]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f4:	4b73      	ldr	r3, [pc, #460]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fa:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fc:	4b71      	ldr	r3, [pc, #452]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001102:	4b70      	ldr	r3, [pc, #448]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001108:	4b6e      	ldr	r3, [pc, #440]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110e:	4b6d      	ldr	r3, [pc, #436]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001114:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800111a:	486a      	ldr	r0, [pc, #424]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 800111c:	f000 fe46 	bl	8001dac <HAL_DMA_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001126:	f7ff fedb 	bl	8000ee0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 800112e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001132:	4a64      	ldr	r2, [pc, #400]	@ (80012c4 <HAL_UART_MspInit+0x300>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2053      	movs	r0, #83	@ 0x53
 800113e:	f000 fb82 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001142:	2053      	movs	r0, #83	@ 0x53
 8001144:	f000 fb99 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	e0ae      	b.n	80012a8 <HAL_UART_MspInit+0x2e4>
  else if(huart->Instance==USART2)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <HAL_UART_MspInit+0x308>)
 8001150:	4293      	cmp	r3, r2
 8001152:	f040 80a9 	bne.w	80012a8 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001156:	f04f 0202 	mov.w	r2, #2
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fdeb 	bl	8005d48 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001178:	f7ff feb2 	bl	8000ee0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800117e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001182:	4a4c      	ldr	r2, [pc, #304]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800118c:	4b49      	ldr	r3, [pc, #292]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800118e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b46      	ldr	r3, [pc, #280]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	4a44      	ldr	r2, [pc, #272]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011aa:	4b42      	ldr	r3, [pc, #264]	@ (80012b4 <HAL_UART_MspInit+0x2f0>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 80011b8:	2320      	movs	r3, #32
 80011ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d0:	2307      	movs	r3, #7
 80011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011da:	4619      	mov	r1, r3
 80011dc:	483c      	ldr	r0, [pc, #240]	@ (80012d0 <HAL_UART_MspInit+0x30c>)
 80011de:	f003 fc1d 	bl	8004a1c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 80011e2:	4b3c      	ldr	r3, [pc, #240]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 80011e4:	4a3c      	ldr	r2, [pc, #240]	@ (80012d8 <HAL_UART_MspInit+0x314>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 80011ea:	222c      	movs	r2, #44	@ 0x2c
 80011ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ee:	4b39      	ldr	r3, [pc, #228]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 80011f0:	2240      	movs	r2, #64	@ 0x40
 80011f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f4:	4b37      	ldr	r3, [pc, #220]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011fa:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 80011fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001200:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001202:	4b34      	ldr	r3, [pc, #208]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800120e:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001214:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121a:	4b2e      	ldr	r3, [pc, #184]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001220:	482c      	ldr	r0, [pc, #176]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001222:	f000 fdc3 	bl	8001dac <HAL_DMA_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800122c:	f7ff fe58 	bl	8000ee0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a28      	ldr	r2, [pc, #160]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001234:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001236:	4a27      	ldr	r2, [pc, #156]	@ (80012d4 <HAL_UART_MspInit+0x310>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <HAL_UART_MspInit+0x318>)
 800123e:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <HAL_UART_MspInit+0x31c>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001244:	222b      	movs	r2, #43	@ 0x2b
 8001246:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001248:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_UART_MspInit+0x318>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <HAL_UART_MspInit+0x318>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001268:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <HAL_UART_MspInit+0x318>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b1b      	ldr	r3, [pc, #108]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	@ (80012dc <HAL_UART_MspInit+0x318>)
 800127c:	f000 fd96 	bl	8001dac <HAL_DMA_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 8001286:	f7ff fe2b 	bl	8000ee0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <HAL_UART_MspInit+0x318>)
 800128e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <HAL_UART_MspInit+0x318>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2026      	movs	r0, #38	@ 0x26
 800129e:	f000 fad2 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012a2:	2026      	movs	r0, #38	@ 0x26
 80012a4:	f000 fae9 	bl	800187a <HAL_NVIC_EnableIRQ>
}
 80012a8:	bf00      	nop
 80012aa:	37e8      	adds	r7, #232	@ 0xe8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40007c00 	.word	0x40007c00
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58021000 	.word	0x58021000
 80012bc:	240001c8 	.word	0x240001c8
 80012c0:	40020040 	.word	0x40020040
 80012c4:	24000240 	.word	0x24000240
 80012c8:	40020058 	.word	0x40020058
 80012cc:	40004400 	.word	0x40004400
 80012d0:	58020c00 	.word	0x58020c00
 80012d4:	240002b8 	.word	0x240002b8
 80012d8:	40020010 	.word	0x40020010
 80012dc:	24000330 	.word	0x24000330
 80012e0:	40020028 	.word	0x40020028

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133a:	f000 f965 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA1_Stream0_IRQHandler+0x10>)
 800134a:	f002 f855 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	240002b8 	.word	0x240002b8

08001358 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA1_Stream1_IRQHandler+0x10>)
 800135e:	f002 f84b 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000330 	.word	0x24000330

0800136c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <DMA1_Stream2_IRQHandler+0x10>)
 8001372:	f002 f841 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	240001c8 	.word	0x240001c8

08001380 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <DMA1_Stream3_IRQHandler+0x10>)
 8001386:	f002 f837 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24000240 	.word	0x24000240

08001394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <TIM2_IRQHandler+0x10>)
 800139a:	f006 fbd6 	bl	8007b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000054 	.word	0x24000054

080013a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <USART2_IRQHandler+0x10>)
 80013ae:	f007 fcbf 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000134 	.word	0x24000134

080013bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 80013c0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80013c4:	f003 fd05 	bl	8004dd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <UART8_IRQHandler+0x10>)
 80013d2:	f007 fcad 	bl	8008d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	240000a0 	.word	0x240000a0

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e4:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <SystemInit+0xd0>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ea:	4a31      	ldr	r2, [pc, #196]	@ (80014b0 <SystemInit+0xd0>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f4:	4b2f      	ldr	r3, [pc, #188]	@ (80014b4 <SystemInit+0xd4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d807      	bhi.n	8001410 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001400:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <SystemInit+0xd4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 030f 	bic.w	r3, r3, #15
 8001408:	4a2a      	ldr	r2, [pc, #168]	@ (80014b4 <SystemInit+0xd4>)
 800140a:	f043 0307 	orr.w	r3, r3, #7
 800140e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <SystemInit+0xd8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <SystemInit+0xd8>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <SystemInit+0xd8>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <SystemInit+0xd8>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4924      	ldr	r1, [pc, #144]	@ (80014b8 <SystemInit+0xd8>)
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <SystemInit+0xdc>)
 800142a:	4013      	ands	r3, r2
 800142c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <SystemInit+0xd4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800143a:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <SystemInit+0xd4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 030f 	bic.w	r3, r3, #15
 8001442:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <SystemInit+0xd4>)
 8001444:	f043 0307 	orr.w	r3, r3, #7
 8001448:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <SystemInit+0xd8>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <SystemInit+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <SystemInit+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <SystemInit+0xd8>)
 800145e:	4a18      	ldr	r2, [pc, #96]	@ (80014c0 <SystemInit+0xe0>)
 8001460:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <SystemInit+0xd8>)
 8001464:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <SystemInit+0xe4>)
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <SystemInit+0xd8>)
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <SystemInit+0xe8>)
 800146c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <SystemInit+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <SystemInit+0xd8>)
 8001476:	4a14      	ldr	r2, [pc, #80]	@ (80014c8 <SystemInit+0xe8>)
 8001478:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <SystemInit+0xd8>)
 800147c:	2200      	movs	r2, #0
 800147e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <SystemInit+0xd8>)
 8001482:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <SystemInit+0xe8>)
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <SystemInit+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <SystemInit+0xd8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <SystemInit+0xd8>)
 8001492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <SystemInit+0xd8>)
 800149a:	2200      	movs	r2, #0
 800149c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <SystemInit+0xec>)
 80014a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	52002000 	.word	0x52002000
 80014b8:	58024400 	.word	0x58024400
 80014bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014c0:	02020200 	.word	0x02020200
 80014c4:	01ff0000 	.word	0x01ff0000
 80014c8:	01010280 	.word	0x01010280
 80014cc:	52004000 	.word	0x52004000

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d4:	f7ff ff84 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f009 fd1f 	bl	800af40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff f88b 	bl	800061c <main>
  bx  lr
 8001506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800150c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001510:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001514:	0800aff8 	.word	0x0800aff8
  ldr r2, =_sbss
 8001518:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800151c:	240003e0 	.word	0x240003e0

08001520 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC3_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152a:	2003      	movs	r0, #3
 800152c:	f000 f980 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001530:	f004 fa34 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_Init+0x68>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	4913      	ldr	r1, [pc, #76]	@ (8001590 <HAL_Init+0x6c>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_Init+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_Init+0x6c>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_Init+0x70>)
 8001566:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001568:	4a0b      	ldr	r2, [pc, #44]	@ (8001598 <HAL_Init+0x74>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f814 	bl	800159c <HAL_InitTick>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e002      	b.n	8001584 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157e:	f7ff fcbf 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	58024400 	.word	0x58024400
 8001590:	0800afa8 	.word	0x0800afa8
 8001594:	24000008 	.word	0x24000008
 8001598:	24000004 	.word	0x24000004

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_InitTick+0x60>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e021      	b.n	80015f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <HAL_InitTick+0x64>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_InitTick+0x60>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f965 	bl	8001896 <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 f92f 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <HAL_InitTick+0x68>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	24000010 	.word	0x24000010
 8001600:	24000004 	.word	0x24000004
 8001604:	2400000c 	.word	0x2400000c

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	24000010 	.word	0x24000010
 800162c:	240003dc 	.word	0x240003dc

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	240003dc 	.word	0x240003dc

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	24000010 	.word	0x24000010

08001690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x40>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016ac:	4013      	ands	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <__NVIC_SetPriorityGrouping+0x40>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00
 80016d4:	05fa0000 	.word	0x05fa0000

080016d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <__NVIC_GetPriorityGrouping+0x18>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	f003 0307 	and.w	r3, r3, #7
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db0b      	blt.n	800171e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	f003 021f 	and.w	r2, r3, #31
 800170c:	4907      	ldr	r1, [pc, #28]	@ (800172c <__NVIC_EnableIRQ+0x38>)
 800170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	2001      	movs	r0, #1
 8001716:	fa00 f202 	lsl.w	r2, r0, r2
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100

08001730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800173c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db0a      	blt.n	800175a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	b2da      	uxtb	r2, r3
 8001748:	490c      	ldr	r1, [pc, #48]	@ (800177c <__NVIC_SetPriority+0x4c>)
 800174a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	440b      	add	r3, r1
 8001754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001758:	e00a      	b.n	8001770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4908      	ldr	r1, [pc, #32]	@ (8001780 <__NVIC_SetPriority+0x50>)
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	3b04      	subs	r3, #4
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	440b      	add	r3, r1
 800176e:	761a      	strb	r2, [r3, #24]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000e100 	.word	0xe000e100
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f1c3 0307 	rsb	r3, r3, #7
 800179e:	2b04      	cmp	r3, #4
 80017a0:	bf28      	it	cs
 80017a2:	2304      	movcs	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3304      	adds	r3, #4
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d902      	bls.n	80017b4 <NVIC_EncodePriority+0x30>
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3b03      	subs	r3, #3
 80017b2:	e000      	b.n	80017b6 <NVIC_EncodePriority+0x32>
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	401a      	ands	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	4313      	orrs	r3, r2
         );
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3724      	adds	r7, #36	@ 0x24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff8e 	bl	8001730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	@ (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	@ (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff29 	bl	8001690 <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff40 	bl	80016d8 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff90 	bl	8001784 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5f 	bl	8001730 <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff33 	bl	80016f4 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa4 	bl	80017ec <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018b4:	f3bf 8f5f 	dmb	sy
}
 80018b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <HAL_MPU_Disable+0x28>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_MPU_Disable+0x28>)
 80018c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018c4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_MPU_Disable+0x2c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00
 80018dc:	e000ed90 	.word	0xe000ed90

080018e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_MPU_Enable+0x38>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_MPU_Enable+0x3c>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	4a09      	ldr	r2, [pc, #36]	@ (800191c <HAL_MPU_Enable+0x3c>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80018fe:	f3bf 8f4f 	dsb	sy
}
 8001902:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001904:	f3bf 8f6f 	isb	sy
}
 8001908:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed90 	.word	0xe000ed90
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	785a      	ldrb	r2, [r3, #1]
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <HAL_MPU_ConfigRegion+0x7c>)
 800192e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <HAL_MPU_ConfigRegion+0x7c>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a19      	ldr	r2, [pc, #100]	@ (800199c <HAL_MPU_ConfigRegion+0x7c>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800193c:	4a17      	ldr	r2, [pc, #92]	@ (800199c <HAL_MPU_ConfigRegion+0x7c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7b1b      	ldrb	r3, [r3, #12]
 8001948:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7adb      	ldrb	r3, [r3, #11]
 800194e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001950:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7a9b      	ldrb	r3, [r3, #10]
 8001956:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001958:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7b5b      	ldrb	r3, [r3, #13]
 800195e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001960:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7b9b      	ldrb	r3, [r3, #14]
 8001966:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001968:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7bdb      	ldrb	r3, [r3, #15]
 800196e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001970:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7a5b      	ldrb	r3, [r3, #9]
 8001976:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001978:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7a1b      	ldrb	r3, [r3, #8]
 800197e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001980:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001988:	4a04      	ldr	r2, [pc, #16]	@ (800199c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800198a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800198c:	6113      	str	r3, [r2, #16]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed90 	.word	0xe000ed90

080019a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e054      	b.n	8001a5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7f5b      	ldrb	r3, [r3, #29]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fab6 	bl	8000f34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	791b      	ldrb	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a22      	ldr	r2, [pc, #136]	@ (8001a64 <HAL_CRC_Init+0xc4>)
 80019dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0218 	bic.w	r2, r2, #24
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	e00c      	b.n	8001a0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6899      	ldr	r1, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f948 	bl	8001c90 <HAL_CRCEx_Polynomial_Set>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e028      	b.n	8001a5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	795b      	ldrb	r3, [r3, #5]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	e004      	b.n	8001a28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6912      	ldr	r2, [r2, #16]
 8001a26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	04c11db7 	.word	0x04c11db7

08001a68 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d006      	beq.n	8001aa4 <HAL_CRC_Calculate+0x3c>
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d829      	bhi.n	8001aee <HAL_CRC_Calculate+0x86>
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d019      	beq.n	8001ad2 <HAL_CRC_Calculate+0x6a>
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d01e      	beq.n	8001ae0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001aa2:	e024      	b.n	8001aee <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3f0      	bcc.n	8001aaa <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
      break;
 8001ad0:	e00e      	b.n	8001af0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f812 	bl	8001b00 <CRC_Handle_8>
 8001adc:	6138      	str	r0, [r7, #16]
      break;
 8001ade:	e007      	b.n	8001af0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f899 	bl	8001c1c <CRC_Handle_16>
 8001aea:	6138      	str	r0, [r7, #16]
      break;
 8001aec:	e000      	b.n	8001af0 <HAL_CRC_Calculate+0x88>
      break;
 8001aee:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001af6:	693b      	ldr	r3, [r7, #16]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e023      	b.n	8001b5a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	3301      	adds	r3, #1
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	440b      	add	r3, r1
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b2c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	440b      	add	r3, r1
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001b3c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	3303      	adds	r3, #3
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	440b      	add	r3, r1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001b50:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	3301      	adds	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d3d6      	bcc.n	8001b12 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d04d      	beq.n	8001c0a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	4413      	add	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d116      	bne.n	8001bc0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	440b      	add	r3, r1
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	8b7a      	ldrh	r2, [r7, #26]
 8001bbe:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	d11f      	bne.n	8001c0a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	3301      	adds	r3, #1
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	440b      	add	r3, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	8b7a      	ldrh	r2, [r7, #26]
 8001bf6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3724      	adds	r7, #36	@ 0x24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e013      	b.n	8001c56 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	440b      	add	r3, r1
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3e6      	bcc.n	8001c2e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d009      	beq.n	8001c7e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	4413      	add	r3, r2
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ca0:	231f      	movs	r3, #31
 8001ca2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
 8001cb2:	e063      	b.n	8001d7c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001cb4:	bf00      	nop
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	613a      	str	r2, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HAL_CRCEx_Polynomial_Set+0x44>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b18      	cmp	r3, #24
 8001cd8:	d846      	bhi.n	8001d68 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001d6f 	.word	0x08001d6f
 8001ce4:	08001d69 	.word	0x08001d69
 8001ce8:	08001d69 	.word	0x08001d69
 8001cec:	08001d69 	.word	0x08001d69
 8001cf0:	08001d69 	.word	0x08001d69
 8001cf4:	08001d69 	.word	0x08001d69
 8001cf8:	08001d69 	.word	0x08001d69
 8001cfc:	08001d69 	.word	0x08001d69
 8001d00:	08001d5d 	.word	0x08001d5d
 8001d04:	08001d69 	.word	0x08001d69
 8001d08:	08001d69 	.word	0x08001d69
 8001d0c:	08001d69 	.word	0x08001d69
 8001d10:	08001d69 	.word	0x08001d69
 8001d14:	08001d69 	.word	0x08001d69
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d69 	.word	0x08001d69
 8001d20:	08001d51 	.word	0x08001d51
 8001d24:	08001d69 	.word	0x08001d69
 8001d28:	08001d69 	.word	0x08001d69
 8001d2c:	08001d69 	.word	0x08001d69
 8001d30:	08001d69 	.word	0x08001d69
 8001d34:	08001d69 	.word	0x08001d69
 8001d38:	08001d69 	.word	0x08001d69
 8001d3c:	08001d69 	.word	0x08001d69
 8001d40:	08001d45 	.word	0x08001d45
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d913      	bls.n	8001d72 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d4e:	e010      	b.n	8001d72 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d90f      	bls.n	8001d76 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d5a:	e00c      	b.n	8001d76 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	d90b      	bls.n	8001d7a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001d66:	e008      	b.n	8001d7a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	75fb      	strb	r3, [r7, #23]
        break;
 8001d6c:	e006      	b.n	8001d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d6e:	bf00      	nop
 8001d70:	e004      	b.n	8001d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d72:	bf00      	nop
 8001d74:	e002      	b.n	8001d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d76:	bf00      	nop
 8001d78:	e000      	b.n	8001d7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001d7a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 0118 	bic.w	r1, r3, #24
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff fc3c 	bl	8001630 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e312      	b.n	80023ea <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a66      	ldr	r2, [pc, #408]	@ (8001f64 <HAL_DMA_Init+0x1b8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d04a      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a65      	ldr	r2, [pc, #404]	@ (8001f68 <HAL_DMA_Init+0x1bc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d045      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a63      	ldr	r2, [pc, #396]	@ (8001f6c <HAL_DMA_Init+0x1c0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d040      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a62      	ldr	r2, [pc, #392]	@ (8001f70 <HAL_DMA_Init+0x1c4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d03b      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a60      	ldr	r2, [pc, #384]	@ (8001f74 <HAL_DMA_Init+0x1c8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d036      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8001f78 <HAL_DMA_Init+0x1cc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d031      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a5d      	ldr	r2, [pc, #372]	@ (8001f7c <HAL_DMA_Init+0x1d0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d02c      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001f80 <HAL_DMA_Init+0x1d4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d027      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HAL_DMA_Init+0x1d8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d022      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a59      	ldr	r2, [pc, #356]	@ (8001f88 <HAL_DMA_Init+0x1dc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d01d      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a57      	ldr	r2, [pc, #348]	@ (8001f8c <HAL_DMA_Init+0x1e0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d018      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <HAL_DMA_Init+0x1e4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a54      	ldr	r2, [pc, #336]	@ (8001f94 <HAL_DMA_Init+0x1e8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00e      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a53      	ldr	r2, [pc, #332]	@ (8001f98 <HAL_DMA_Init+0x1ec>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d009      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a51      	ldr	r2, [pc, #324]	@ (8001f9c <HAL_DMA_Init+0x1f0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_DMA_Init+0xb8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a50      	ldr	r2, [pc, #320]	@ (8001fa0 <HAL_DMA_Init+0x1f4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_DMA_Init+0xbc>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_DMA_Init+0xbe>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 813c 	beq.w	80020e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <HAL_DMA_Init+0x1b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d04a      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a36      	ldr	r2, [pc, #216]	@ (8001f68 <HAL_DMA_Init+0x1bc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d045      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a34      	ldr	r2, [pc, #208]	@ (8001f6c <HAL_DMA_Init+0x1c0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d040      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a33      	ldr	r2, [pc, #204]	@ (8001f70 <HAL_DMA_Init+0x1c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d03b      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a31      	ldr	r2, [pc, #196]	@ (8001f74 <HAL_DMA_Init+0x1c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d036      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a30      	ldr	r2, [pc, #192]	@ (8001f78 <HAL_DMA_Init+0x1cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d031      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f7c <HAL_DMA_Init+0x1d0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02c      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2d      	ldr	r2, [pc, #180]	@ (8001f80 <HAL_DMA_Init+0x1d4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d027      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <HAL_DMA_Init+0x1d8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d022      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2a      	ldr	r2, [pc, #168]	@ (8001f88 <HAL_DMA_Init+0x1dc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d01d      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a28      	ldr	r2, [pc, #160]	@ (8001f8c <HAL_DMA_Init+0x1e0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d018      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a27      	ldr	r2, [pc, #156]	@ (8001f90 <HAL_DMA_Init+0x1e4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <HAL_DMA_Init+0x1e8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00e      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a24      	ldr	r2, [pc, #144]	@ (8001f98 <HAL_DMA_Init+0x1ec>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_DMA_Init+0x1f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d004      	beq.n	8001f20 <HAL_DMA_Init+0x174>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <HAL_DMA_Init+0x1f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d108      	bne.n	8001f32 <HAL_DMA_Init+0x186>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e007      	b.n	8001f42 <HAL_DMA_Init+0x196>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f42:	e02f      	b.n	8001fa4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f44:	f7ff fb74 	bl	8001630 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d928      	bls.n	8001fa4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e242      	b.n	80023ea <HAL_DMA_Init+0x63e>
 8001f64:	40020010 	.word	0x40020010
 8001f68:	40020028 	.word	0x40020028
 8001f6c:	40020040 	.word	0x40020040
 8001f70:	40020058 	.word	0x40020058
 8001f74:	40020070 	.word	0x40020070
 8001f78:	40020088 	.word	0x40020088
 8001f7c:	400200a0 	.word	0x400200a0
 8001f80:	400200b8 	.word	0x400200b8
 8001f84:	40020410 	.word	0x40020410
 8001f88:	40020428 	.word	0x40020428
 8001f8c:	40020440 	.word	0x40020440
 8001f90:	40020458 	.word	0x40020458
 8001f94:	40020470 	.word	0x40020470
 8001f98:	40020488 	.word	0x40020488
 8001f9c:	400204a0 	.word	0x400204a0
 8001fa0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1c8      	bne.n	8001f44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4b83      	ldr	r3, [pc, #524]	@ (80021cc <HAL_DMA_Init+0x420>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001fca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d107      	bne.n	8002008 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	4313      	orrs	r3, r2
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b28      	cmp	r3, #40	@ 0x28
 800200e:	d903      	bls.n	8002018 <HAL_DMA_Init+0x26c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b2e      	cmp	r3, #46	@ 0x2e
 8002016:	d91f      	bls.n	8002058 <HAL_DMA_Init+0x2ac>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b3e      	cmp	r3, #62	@ 0x3e
 800201e:	d903      	bls.n	8002028 <HAL_DMA_Init+0x27c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b42      	cmp	r3, #66	@ 0x42
 8002026:	d917      	bls.n	8002058 <HAL_DMA_Init+0x2ac>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b46      	cmp	r3, #70	@ 0x46
 800202e:	d903      	bls.n	8002038 <HAL_DMA_Init+0x28c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b48      	cmp	r3, #72	@ 0x48
 8002036:	d90f      	bls.n	8002058 <HAL_DMA_Init+0x2ac>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b4e      	cmp	r3, #78	@ 0x4e
 800203e:	d903      	bls.n	8002048 <HAL_DMA_Init+0x29c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b52      	cmp	r3, #82	@ 0x52
 8002046:	d907      	bls.n	8002058 <HAL_DMA_Init+0x2ac>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b73      	cmp	r3, #115	@ 0x73
 800204e:	d905      	bls.n	800205c <HAL_DMA_Init+0x2b0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b77      	cmp	r3, #119	@ 0x77
 8002056:	d801      	bhi.n	800205c <HAL_DMA_Init+0x2b0>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_DMA_Init+0x2b2>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002068:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f023 0307 	bic.w	r3, r3, #7
 8002080:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	2b04      	cmp	r3, #4
 8002092:	d117      	bne.n	80020c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00e      	beq.n	80020c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f002 fb2e 	bl	8004708 <DMA_CheckFifoParam>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2240      	movs	r2, #64	@ 0x40
 80020b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e192      	b.n	80023ea <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f002 fa69 	bl	80045a4 <DMA_CalcBaseAndBitshift>
 80020d2:	4603      	mov	r3, r0
 80020d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	223f      	movs	r2, #63	@ 0x3f
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	e0c8      	b.n	800227a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	@ (80021d0 <HAL_DMA_Init+0x424>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d022      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a37      	ldr	r2, [pc, #220]	@ (80021d4 <HAL_DMA_Init+0x428>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d01d      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a35      	ldr	r2, [pc, #212]	@ (80021d8 <HAL_DMA_Init+0x42c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d018      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a34      	ldr	r2, [pc, #208]	@ (80021dc <HAL_DMA_Init+0x430>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a32      	ldr	r2, [pc, #200]	@ (80021e0 <HAL_DMA_Init+0x434>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00e      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a31      	ldr	r2, [pc, #196]	@ (80021e4 <HAL_DMA_Init+0x438>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d009      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2f      	ldr	r2, [pc, #188]	@ (80021e8 <HAL_DMA_Init+0x43c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d004      	beq.n	8002138 <HAL_DMA_Init+0x38c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2e      	ldr	r2, [pc, #184]	@ (80021ec <HAL_DMA_Init+0x440>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_DMA_Init+0x390>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_DMA_Init+0x392>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8092 	beq.w	8002268 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <HAL_DMA_Init+0x424>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d021      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <HAL_DMA_Init+0x428>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d01c      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_DMA_Init+0x42c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d017      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_DMA_Init+0x430>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d012      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_DMA_Init+0x434>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1a      	ldr	r2, [pc, #104]	@ (80021e4 <HAL_DMA_Init+0x438>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d008      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a18      	ldr	r2, [pc, #96]	@ (80021e8 <HAL_DMA_Init+0x43c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <HAL_DMA_Init+0x3e6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_DMA_Init+0x440>)
 8002190:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <HAL_DMA_Init+0x444>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b40      	cmp	r3, #64	@ 0x40
 80021b8:	d01c      	beq.n	80021f4 <HAL_DMA_Init+0x448>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b80      	cmp	r3, #128	@ 0x80
 80021c0:	d102      	bne.n	80021c8 <HAL_DMA_Init+0x41c>
 80021c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021c6:	e016      	b.n	80021f6 <HAL_DMA_Init+0x44a>
 80021c8:	2300      	movs	r3, #0
 80021ca:	e014      	b.n	80021f6 <HAL_DMA_Init+0x44a>
 80021cc:	fe10803f 	.word	0xfe10803f
 80021d0:	58025408 	.word	0x58025408
 80021d4:	5802541c 	.word	0x5802541c
 80021d8:	58025430 	.word	0x58025430
 80021dc:	58025444 	.word	0x58025444
 80021e0:	58025458 	.word	0x58025458
 80021e4:	5802546c 	.word	0x5802546c
 80021e8:	58025480 	.word	0x58025480
 80021ec:	58025494 	.word	0x58025494
 80021f0:	fffe000f 	.word	0xfffe000f
 80021f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68d2      	ldr	r2, [r2, #12]
 80021fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800220c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002214:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800221c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002224:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b6e      	ldr	r3, [pc, #440]	@ (80023f4 <HAL_DMA_Init+0x648>)
 800223c:	4413      	add	r3, r2
 800223e:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_DMA_Init+0x64c>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	009a      	lsls	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f002 f9a9 	bl	80045a4 <DMA_CalcBaseAndBitshift>
 8002252:	4603      	mov	r3, r0
 8002254:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	2201      	movs	r2, #1
 8002260:	409a      	lsls	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	e008      	b.n	800227a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2240      	movs	r2, #64	@ 0x40
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0b7      	b.n	80023ea <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5f      	ldr	r2, [pc, #380]	@ (80023fc <HAL_DMA_Init+0x650>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d072      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5d      	ldr	r2, [pc, #372]	@ (8002400 <HAL_DMA_Init+0x654>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d06d      	beq.n	800236a <HAL_DMA_Init+0x5be>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5c      	ldr	r2, [pc, #368]	@ (8002404 <HAL_DMA_Init+0x658>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d068      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5a      	ldr	r2, [pc, #360]	@ (8002408 <HAL_DMA_Init+0x65c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d063      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a59      	ldr	r2, [pc, #356]	@ (800240c <HAL_DMA_Init+0x660>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d05e      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a57      	ldr	r2, [pc, #348]	@ (8002410 <HAL_DMA_Init+0x664>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d059      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_DMA_Init+0x668>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d054      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a54      	ldr	r2, [pc, #336]	@ (8002418 <HAL_DMA_Init+0x66c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d04f      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a53      	ldr	r2, [pc, #332]	@ (800241c <HAL_DMA_Init+0x670>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d04a      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a51      	ldr	r2, [pc, #324]	@ (8002420 <HAL_DMA_Init+0x674>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d045      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a50      	ldr	r2, [pc, #320]	@ (8002424 <HAL_DMA_Init+0x678>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d040      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002428 <HAL_DMA_Init+0x67c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d03b      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a4d      	ldr	r2, [pc, #308]	@ (800242c <HAL_DMA_Init+0x680>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d036      	beq.n	800236a <HAL_DMA_Init+0x5be>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a4b      	ldr	r2, [pc, #300]	@ (8002430 <HAL_DMA_Init+0x684>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d031      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4a      	ldr	r2, [pc, #296]	@ (8002434 <HAL_DMA_Init+0x688>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d02c      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a48      	ldr	r2, [pc, #288]	@ (8002438 <HAL_DMA_Init+0x68c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d027      	beq.n	800236a <HAL_DMA_Init+0x5be>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a47      	ldr	r2, [pc, #284]	@ (800243c <HAL_DMA_Init+0x690>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a45      	ldr	r2, [pc, #276]	@ (8002440 <HAL_DMA_Init+0x694>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01d      	beq.n	800236a <HAL_DMA_Init+0x5be>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a44      	ldr	r2, [pc, #272]	@ (8002444 <HAL_DMA_Init+0x698>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d018      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a42      	ldr	r2, [pc, #264]	@ (8002448 <HAL_DMA_Init+0x69c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a41      	ldr	r2, [pc, #260]	@ (800244c <HAL_DMA_Init+0x6a0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00e      	beq.n	800236a <HAL_DMA_Init+0x5be>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3f      	ldr	r2, [pc, #252]	@ (8002450 <HAL_DMA_Init+0x6a4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a3e      	ldr	r2, [pc, #248]	@ (8002454 <HAL_DMA_Init+0x6a8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_DMA_Init+0x5be>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3c      	ldr	r2, [pc, #240]	@ (8002458 <HAL_DMA_Init+0x6ac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_DMA_Init+0x5c2>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_DMA_Init+0x5c4>
 800236e:	2300      	movs	r3, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d032      	beq.n	80023da <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f002 fa43 	bl	8004800 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b80      	cmp	r3, #128	@ 0x80
 8002380:	d102      	bne.n	8002388 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800239c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_DMA_Init+0x61c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d80c      	bhi.n	80023c8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f002 fac0 	bl	8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	e008      	b.n	80023da <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	a7fdabf8 	.word	0xa7fdabf8
 80023f8:	cccccccd 	.word	0xcccccccd
 80023fc:	40020010 	.word	0x40020010
 8002400:	40020028 	.word	0x40020028
 8002404:	40020040 	.word	0x40020040
 8002408:	40020058 	.word	0x40020058
 800240c:	40020070 	.word	0x40020070
 8002410:	40020088 	.word	0x40020088
 8002414:	400200a0 	.word	0x400200a0
 8002418:	400200b8 	.word	0x400200b8
 800241c:	40020410 	.word	0x40020410
 8002420:	40020428 	.word	0x40020428
 8002424:	40020440 	.word	0x40020440
 8002428:	40020458 	.word	0x40020458
 800242c:	40020470 	.word	0x40020470
 8002430:	40020488 	.word	0x40020488
 8002434:	400204a0 	.word	0x400204a0
 8002438:	400204b8 	.word	0x400204b8
 800243c:	58025408 	.word	0x58025408
 8002440:	5802541c 	.word	0x5802541c
 8002444:	58025430 	.word	0x58025430
 8002448:	58025444 	.word	0x58025444
 800244c:	58025458 	.word	0x58025458
 8002450:	5802546c 	.word	0x5802546c
 8002454:	58025480 	.word	0x58025480
 8002458:	58025494 	.word	0x58025494

0800245c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e226      	b.n	80028c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Start_IT+0x2a>
 8002482:	2302      	movs	r3, #2
 8002484:	e21f      	b.n	80028c6 <HAL_DMA_Start_IT+0x46a>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	f040 820a 	bne.w	80028b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a68      	ldr	r2, [pc, #416]	@ (8002650 <HAL_DMA_Start_IT+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d04a      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a66      	ldr	r2, [pc, #408]	@ (8002654 <HAL_DMA_Start_IT+0x1f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d045      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a65      	ldr	r2, [pc, #404]	@ (8002658 <HAL_DMA_Start_IT+0x1fc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d040      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a63      	ldr	r2, [pc, #396]	@ (800265c <HAL_DMA_Start_IT+0x200>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d03b      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a62      	ldr	r2, [pc, #392]	@ (8002660 <HAL_DMA_Start_IT+0x204>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d036      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a60      	ldr	r2, [pc, #384]	@ (8002664 <HAL_DMA_Start_IT+0x208>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d031      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002668 <HAL_DMA_Start_IT+0x20c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d02c      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a5d      	ldr	r2, [pc, #372]	@ (800266c <HAL_DMA_Start_IT+0x210>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d027      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002670 <HAL_DMA_Start_IT+0x214>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5a      	ldr	r2, [pc, #360]	@ (8002674 <HAL_DMA_Start_IT+0x218>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01d      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a59      	ldr	r2, [pc, #356]	@ (8002678 <HAL_DMA_Start_IT+0x21c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d018      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a57      	ldr	r2, [pc, #348]	@ (800267c <HAL_DMA_Start_IT+0x220>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a56      	ldr	r2, [pc, #344]	@ (8002680 <HAL_DMA_Start_IT+0x224>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00e      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <HAL_DMA_Start_IT+0x228>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d009      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a53      	ldr	r2, [pc, #332]	@ (8002688 <HAL_DMA_Start_IT+0x22c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <HAL_DMA_Start_IT+0xee>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a51      	ldr	r2, [pc, #324]	@ (800268c <HAL_DMA_Start_IT+0x230>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <HAL_DMA_Start_IT+0x100>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e007      	b.n	800256c <HAL_DMA_Start_IT+0x110>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f001 fe6a 	bl	800424c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_DMA_Start_IT+0x1f4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04a      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_DMA_Start_IT+0x1f8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_DMA_Start_IT+0x1fc>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_DMA_Start_IT+0x200>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03b      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_DMA_Start_IT+0x204>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d036      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_DMA_Start_IT+0x208>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_DMA_Start_IT+0x20c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02c      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_DMA_Start_IT+0x210>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d027      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_DMA_Start_IT+0x214>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a27      	ldr	r2, [pc, #156]	@ (8002674 <HAL_DMA_Start_IT+0x218>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01d      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <HAL_DMA_Start_IT+0x21c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d018      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_DMA_Start_IT+0x220>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_DMA_Start_IT+0x224>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_DMA_Start_IT+0x228>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <HAL_DMA_Start_IT+0x22c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_Start_IT+0x1bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1e      	ldr	r2, [pc, #120]	@ (800268c <HAL_DMA_Start_IT+0x230>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d101      	bne.n	800261c <HAL_DMA_Start_IT+0x1c0>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_DMA_Start_IT+0x1c2>
 800261c:	2300      	movs	r3, #0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d036      	beq.n	8002690 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 021e 	bic.w	r2, r3, #30
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0216 	orr.w	r2, r2, #22
 8002634:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03e      	beq.n	80026bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0208 	orr.w	r2, r2, #8
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e035      	b.n	80026bc <HAL_DMA_Start_IT+0x260>
 8002650:	40020010 	.word	0x40020010
 8002654:	40020028 	.word	0x40020028
 8002658:	40020040 	.word	0x40020040
 800265c:	40020058 	.word	0x40020058
 8002660:	40020070 	.word	0x40020070
 8002664:	40020088 	.word	0x40020088
 8002668:	400200a0 	.word	0x400200a0
 800266c:	400200b8 	.word	0x400200b8
 8002670:	40020410 	.word	0x40020410
 8002674:	40020428 	.word	0x40020428
 8002678:	40020440 	.word	0x40020440
 800267c:	40020458 	.word	0x40020458
 8002680:	40020470 	.word	0x40020470
 8002684:	40020488 	.word	0x40020488
 8002688:	400204a0 	.word	0x400204a0
 800268c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020e 	bic.w	r2, r3, #14
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 020a 	orr.w	r2, r2, #10
 80026a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0204 	orr.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a83      	ldr	r2, [pc, #524]	@ (80028d0 <HAL_DMA_Start_IT+0x474>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d072      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a82      	ldr	r2, [pc, #520]	@ (80028d4 <HAL_DMA_Start_IT+0x478>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d06d      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a80      	ldr	r2, [pc, #512]	@ (80028d8 <HAL_DMA_Start_IT+0x47c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d068      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7f      	ldr	r2, [pc, #508]	@ (80028dc <HAL_DMA_Start_IT+0x480>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d063      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7d      	ldr	r2, [pc, #500]	@ (80028e0 <HAL_DMA_Start_IT+0x484>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d05e      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7c      	ldr	r2, [pc, #496]	@ (80028e4 <HAL_DMA_Start_IT+0x488>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d059      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	@ (80028e8 <HAL_DMA_Start_IT+0x48c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d054      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a79      	ldr	r2, [pc, #484]	@ (80028ec <HAL_DMA_Start_IT+0x490>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d04f      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a77      	ldr	r2, [pc, #476]	@ (80028f0 <HAL_DMA_Start_IT+0x494>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d04a      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a76      	ldr	r2, [pc, #472]	@ (80028f4 <HAL_DMA_Start_IT+0x498>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d045      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a74      	ldr	r2, [pc, #464]	@ (80028f8 <HAL_DMA_Start_IT+0x49c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d040      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a73      	ldr	r2, [pc, #460]	@ (80028fc <HAL_DMA_Start_IT+0x4a0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d03b      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a71      	ldr	r2, [pc, #452]	@ (8002900 <HAL_DMA_Start_IT+0x4a4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d036      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a70      	ldr	r2, [pc, #448]	@ (8002904 <HAL_DMA_Start_IT+0x4a8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d031      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6e      	ldr	r2, [pc, #440]	@ (8002908 <HAL_DMA_Start_IT+0x4ac>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02c      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6d      	ldr	r2, [pc, #436]	@ (800290c <HAL_DMA_Start_IT+0x4b0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d027      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6b      	ldr	r2, [pc, #428]	@ (8002910 <HAL_DMA_Start_IT+0x4b4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d022      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6a      	ldr	r2, [pc, #424]	@ (8002914 <HAL_DMA_Start_IT+0x4b8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d01d      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a68      	ldr	r2, [pc, #416]	@ (8002918 <HAL_DMA_Start_IT+0x4bc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d018      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a67      	ldr	r2, [pc, #412]	@ (800291c <HAL_DMA_Start_IT+0x4c0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a65      	ldr	r2, [pc, #404]	@ (8002920 <HAL_DMA_Start_IT+0x4c4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00e      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a64      	ldr	r2, [pc, #400]	@ (8002924 <HAL_DMA_Start_IT+0x4c8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a62      	ldr	r2, [pc, #392]	@ (8002928 <HAL_DMA_Start_IT+0x4cc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <HAL_DMA_Start_IT+0x350>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a61      	ldr	r2, [pc, #388]	@ (800292c <HAL_DMA_Start_IT+0x4d0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_DMA_Start_IT+0x354>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_DMA_Start_IT+0x356>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01a      	beq.n	80027ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a37      	ldr	r2, [pc, #220]	@ (80028d0 <HAL_DMA_Start_IT+0x474>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d04a      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a36      	ldr	r2, [pc, #216]	@ (80028d4 <HAL_DMA_Start_IT+0x478>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d045      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a34      	ldr	r2, [pc, #208]	@ (80028d8 <HAL_DMA_Start_IT+0x47c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d040      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a33      	ldr	r2, [pc, #204]	@ (80028dc <HAL_DMA_Start_IT+0x480>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d03b      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a31      	ldr	r2, [pc, #196]	@ (80028e0 <HAL_DMA_Start_IT+0x484>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d036      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a30      	ldr	r2, [pc, #192]	@ (80028e4 <HAL_DMA_Start_IT+0x488>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d031      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2e      	ldr	r2, [pc, #184]	@ (80028e8 <HAL_DMA_Start_IT+0x48c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02c      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	@ (80028ec <HAL_DMA_Start_IT+0x490>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d027      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2b      	ldr	r2, [pc, #172]	@ (80028f0 <HAL_DMA_Start_IT+0x494>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d022      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2a      	ldr	r2, [pc, #168]	@ (80028f4 <HAL_DMA_Start_IT+0x498>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d01d      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a28      	ldr	r2, [pc, #160]	@ (80028f8 <HAL_DMA_Start_IT+0x49c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d018      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a27      	ldr	r2, [pc, #156]	@ (80028fc <HAL_DMA_Start_IT+0x4a0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a25      	ldr	r2, [pc, #148]	@ (8002900 <HAL_DMA_Start_IT+0x4a4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00e      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a24      	ldr	r2, [pc, #144]	@ (8002904 <HAL_DMA_Start_IT+0x4a8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a22      	ldr	r2, [pc, #136]	@ (8002908 <HAL_DMA_Start_IT+0x4ac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_DMA_Start_IT+0x430>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	@ (800290c <HAL_DMA_Start_IT+0x4b0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d108      	bne.n	800289e <HAL_DMA_Start_IT+0x442>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e012      	b.n	80028c4 <HAL_DMA_Start_IT+0x468>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e009      	b.n	80028c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40020010 	.word	0x40020010
 80028d4:	40020028 	.word	0x40020028
 80028d8:	40020040 	.word	0x40020040
 80028dc:	40020058 	.word	0x40020058
 80028e0:	40020070 	.word	0x40020070
 80028e4:	40020088 	.word	0x40020088
 80028e8:	400200a0 	.word	0x400200a0
 80028ec:	400200b8 	.word	0x400200b8
 80028f0:	40020410 	.word	0x40020410
 80028f4:	40020428 	.word	0x40020428
 80028f8:	40020440 	.word	0x40020440
 80028fc:	40020458 	.word	0x40020458
 8002900:	40020470 	.word	0x40020470
 8002904:	40020488 	.word	0x40020488
 8002908:	400204a0 	.word	0x400204a0
 800290c:	400204b8 	.word	0x400204b8
 8002910:	58025408 	.word	0x58025408
 8002914:	5802541c 	.word	0x5802541c
 8002918:	58025430 	.word	0x58025430
 800291c:	58025444 	.word	0x58025444
 8002920:	58025458 	.word	0x58025458
 8002924:	5802546c 	.word	0x5802546c
 8002928:	58025480 	.word	0x58025480
 800292c:	58025494 	.word	0x58025494

08002930 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002938:	f7fe fe7a 	bl	8001630 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e2dc      	b.n	8002f02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d008      	beq.n	8002966 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2280      	movs	r2, #128	@ 0x80
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e2cd      	b.n	8002f02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a76      	ldr	r2, [pc, #472]	@ (8002b44 <HAL_DMA_Abort+0x214>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d04a      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a74      	ldr	r2, [pc, #464]	@ (8002b48 <HAL_DMA_Abort+0x218>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d045      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a73      	ldr	r2, [pc, #460]	@ (8002b4c <HAL_DMA_Abort+0x21c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d040      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a71      	ldr	r2, [pc, #452]	@ (8002b50 <HAL_DMA_Abort+0x220>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d03b      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a70      	ldr	r2, [pc, #448]	@ (8002b54 <HAL_DMA_Abort+0x224>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d036      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b58 <HAL_DMA_Abort+0x228>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d031      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6d      	ldr	r2, [pc, #436]	@ (8002b5c <HAL_DMA_Abort+0x22c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d02c      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002b60 <HAL_DMA_Abort+0x230>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d027      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002b64 <HAL_DMA_Abort+0x234>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d022      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a68      	ldr	r2, [pc, #416]	@ (8002b68 <HAL_DMA_Abort+0x238>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01d      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a67      	ldr	r2, [pc, #412]	@ (8002b6c <HAL_DMA_Abort+0x23c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d018      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_DMA_Abort+0x240>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a64      	ldr	r2, [pc, #400]	@ (8002b74 <HAL_DMA_Abort+0x244>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a62      	ldr	r2, [pc, #392]	@ (8002b78 <HAL_DMA_Abort+0x248>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a61      	ldr	r2, [pc, #388]	@ (8002b7c <HAL_DMA_Abort+0x24c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_DMA_Abort+0xd6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5f      	ldr	r2, [pc, #380]	@ (8002b80 <HAL_DMA_Abort+0x250>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Abort+0xda>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_DMA_Abort+0xdc>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 021e 	bic.w	r2, r2, #30
 8002a1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e00a      	b.n	8002a4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3c      	ldr	r2, [pc, #240]	@ (8002b44 <HAL_DMA_Abort+0x214>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d072      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b48 <HAL_DMA_Abort+0x218>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d06d      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a39      	ldr	r2, [pc, #228]	@ (8002b4c <HAL_DMA_Abort+0x21c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d068      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a37      	ldr	r2, [pc, #220]	@ (8002b50 <HAL_DMA_Abort+0x220>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d063      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a36      	ldr	r2, [pc, #216]	@ (8002b54 <HAL_DMA_Abort+0x224>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d05e      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a34      	ldr	r2, [pc, #208]	@ (8002b58 <HAL_DMA_Abort+0x228>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d059      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a33      	ldr	r2, [pc, #204]	@ (8002b5c <HAL_DMA_Abort+0x22c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d054      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a31      	ldr	r2, [pc, #196]	@ (8002b60 <HAL_DMA_Abort+0x230>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d04f      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a30      	ldr	r2, [pc, #192]	@ (8002b64 <HAL_DMA_Abort+0x234>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d04a      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <HAL_DMA_Abort+0x238>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d045      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b6c <HAL_DMA_Abort+0x23c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d040      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b70 <HAL_DMA_Abort+0x240>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d03b      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2a      	ldr	r2, [pc, #168]	@ (8002b74 <HAL_DMA_Abort+0x244>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d036      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	@ (8002b78 <HAL_DMA_Abort+0x248>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d031      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a27      	ldr	r2, [pc, #156]	@ (8002b7c <HAL_DMA_Abort+0x24c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d02c      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a25      	ldr	r2, [pc, #148]	@ (8002b80 <HAL_DMA_Abort+0x250>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d027      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a24      	ldr	r2, [pc, #144]	@ (8002b84 <HAL_DMA_Abort+0x254>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <HAL_DMA_Abort+0x258>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a21      	ldr	r2, [pc, #132]	@ (8002b8c <HAL_DMA_Abort+0x25c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <HAL_DMA_Abort+0x260>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b94 <HAL_DMA_Abort+0x264>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_DMA_Abort+0x268>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <HAL_DMA_Abort+0x26c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_DMA_Abort+0x20e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a19      	ldr	r2, [pc, #100]	@ (8002ba0 <HAL_DMA_Abort+0x270>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d132      	bne.n	8002ba4 <HAL_DMA_Abort+0x274>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e031      	b.n	8002ba6 <HAL_DMA_Abort+0x276>
 8002b42:	bf00      	nop
 8002b44:	40020010 	.word	0x40020010
 8002b48:	40020028 	.word	0x40020028
 8002b4c:	40020040 	.word	0x40020040
 8002b50:	40020058 	.word	0x40020058
 8002b54:	40020070 	.word	0x40020070
 8002b58:	40020088 	.word	0x40020088
 8002b5c:	400200a0 	.word	0x400200a0
 8002b60:	400200b8 	.word	0x400200b8
 8002b64:	40020410 	.word	0x40020410
 8002b68:	40020428 	.word	0x40020428
 8002b6c:	40020440 	.word	0x40020440
 8002b70:	40020458 	.word	0x40020458
 8002b74:	40020470 	.word	0x40020470
 8002b78:	40020488 	.word	0x40020488
 8002b7c:	400204a0 	.word	0x400204a0
 8002b80:	400204b8 	.word	0x400204b8
 8002b84:	58025408 	.word	0x58025408
 8002b88:	5802541c 	.word	0x5802541c
 8002b8c:	58025430 	.word	0x58025430
 8002b90:	58025444 	.word	0x58025444
 8002b94:	58025458 	.word	0x58025458
 8002b98:	5802546c 	.word	0x5802546c
 8002b9c:	58025480 	.word	0x58025480
 8002ba0:	58025494 	.word	0x58025494
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6d      	ldr	r2, [pc, #436]	@ (8002d74 <HAL_DMA_Abort+0x444>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6b      	ldr	r2, [pc, #428]	@ (8002d78 <HAL_DMA_Abort+0x448>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8002d7c <HAL_DMA_Abort+0x44c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	@ (8002d80 <HAL_DMA_Abort+0x450>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a67      	ldr	r2, [pc, #412]	@ (8002d84 <HAL_DMA_Abort+0x454>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a65      	ldr	r2, [pc, #404]	@ (8002d88 <HAL_DMA_Abort+0x458>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a64      	ldr	r2, [pc, #400]	@ (8002d8c <HAL_DMA_Abort+0x45c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a62      	ldr	r2, [pc, #392]	@ (8002d90 <HAL_DMA_Abort+0x460>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a61      	ldr	r2, [pc, #388]	@ (8002d94 <HAL_DMA_Abort+0x464>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a5f      	ldr	r2, [pc, #380]	@ (8002d98 <HAL_DMA_Abort+0x468>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5e      	ldr	r2, [pc, #376]	@ (8002d9c <HAL_DMA_Abort+0x46c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8002da0 <HAL_DMA_Abort+0x470>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5b      	ldr	r2, [pc, #364]	@ (8002da4 <HAL_DMA_Abort+0x474>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a59      	ldr	r2, [pc, #356]	@ (8002da8 <HAL_DMA_Abort+0x478>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a58      	ldr	r2, [pc, #352]	@ (8002dac <HAL_DMA_Abort+0x47c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_Abort+0x32a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a56      	ldr	r2, [pc, #344]	@ (8002db0 <HAL_DMA_Abort+0x480>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d108      	bne.n	8002c6c <HAL_DMA_Abort+0x33c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <HAL_DMA_Abort+0x34c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c7c:	e013      	b.n	8002ca6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7e:	f7fe fcd7 	bl	8001630 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d90c      	bls.n	8002ca6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2203      	movs	r2, #3
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e12d      	b.n	8002f02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e5      	bne.n	8002c7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002d74 <HAL_DMA_Abort+0x444>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d04a      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d78 <HAL_DMA_Abort+0x448>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d045      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <HAL_DMA_Abort+0x44c>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d040      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d80 <HAL_DMA_Abort+0x450>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d03b      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a29      	ldr	r2, [pc, #164]	@ (8002d84 <HAL_DMA_Abort+0x454>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d036      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a27      	ldr	r2, [pc, #156]	@ (8002d88 <HAL_DMA_Abort+0x458>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d031      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a26      	ldr	r2, [pc, #152]	@ (8002d8c <HAL_DMA_Abort+0x45c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d02c      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a24      	ldr	r2, [pc, #144]	@ (8002d90 <HAL_DMA_Abort+0x460>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d027      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a23      	ldr	r2, [pc, #140]	@ (8002d94 <HAL_DMA_Abort+0x464>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a21      	ldr	r2, [pc, #132]	@ (8002d98 <HAL_DMA_Abort+0x468>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d01d      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a20      	ldr	r2, [pc, #128]	@ (8002d9c <HAL_DMA_Abort+0x46c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1e      	ldr	r2, [pc, #120]	@ (8002da0 <HAL_DMA_Abort+0x470>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <HAL_DMA_Abort+0x474>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	@ (8002da8 <HAL_DMA_Abort+0x478>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1a      	ldr	r2, [pc, #104]	@ (8002dac <HAL_DMA_Abort+0x47c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_DMA_Abort+0x422>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	@ (8002db0 <HAL_DMA_Abort+0x480>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_Abort+0x426>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_DMA_Abort+0x428>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d02b      	beq.n	8002db4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	223f      	movs	r2, #63	@ 0x3f
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	e02a      	b.n	8002dca <HAL_DMA_Abort+0x49a>
 8002d74:	40020010 	.word	0x40020010
 8002d78:	40020028 	.word	0x40020028
 8002d7c:	40020040 	.word	0x40020040
 8002d80:	40020058 	.word	0x40020058
 8002d84:	40020070 	.word	0x40020070
 8002d88:	40020088 	.word	0x40020088
 8002d8c:	400200a0 	.word	0x400200a0
 8002d90:	400200b8 	.word	0x400200b8
 8002d94:	40020410 	.word	0x40020410
 8002d98:	40020428 	.word	0x40020428
 8002d9c:	40020440 	.word	0x40020440
 8002da0:	40020458 	.word	0x40020458
 8002da4:	40020470 	.word	0x40020470
 8002da8:	40020488 	.word	0x40020488
 8002dac:	400204a0 	.word	0x400204a0
 8002db0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4f      	ldr	r2, [pc, #316]	@ (8002f0c <HAL_DMA_Abort+0x5dc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d072      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f10 <HAL_DMA_Abort+0x5e0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d06d      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4c      	ldr	r2, [pc, #304]	@ (8002f14 <HAL_DMA_Abort+0x5e4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d068      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a4a      	ldr	r2, [pc, #296]	@ (8002f18 <HAL_DMA_Abort+0x5e8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d063      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a49      	ldr	r2, [pc, #292]	@ (8002f1c <HAL_DMA_Abort+0x5ec>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d05e      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a47      	ldr	r2, [pc, #284]	@ (8002f20 <HAL_DMA_Abort+0x5f0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d059      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a46      	ldr	r2, [pc, #280]	@ (8002f24 <HAL_DMA_Abort+0x5f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d054      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a44      	ldr	r2, [pc, #272]	@ (8002f28 <HAL_DMA_Abort+0x5f8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04f      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a43      	ldr	r2, [pc, #268]	@ (8002f2c <HAL_DMA_Abort+0x5fc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04a      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a41      	ldr	r2, [pc, #260]	@ (8002f30 <HAL_DMA_Abort+0x600>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d045      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a40      	ldr	r2, [pc, #256]	@ (8002f34 <HAL_DMA_Abort+0x604>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d040      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f38 <HAL_DMA_Abort+0x608>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d03b      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a3d      	ldr	r2, [pc, #244]	@ (8002f3c <HAL_DMA_Abort+0x60c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d036      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3b      	ldr	r2, [pc, #236]	@ (8002f40 <HAL_DMA_Abort+0x610>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3a      	ldr	r2, [pc, #232]	@ (8002f44 <HAL_DMA_Abort+0x614>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d02c      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a38      	ldr	r2, [pc, #224]	@ (8002f48 <HAL_DMA_Abort+0x618>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d027      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a37      	ldr	r2, [pc, #220]	@ (8002f4c <HAL_DMA_Abort+0x61c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a35      	ldr	r2, [pc, #212]	@ (8002f50 <HAL_DMA_Abort+0x620>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01d      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a34      	ldr	r2, [pc, #208]	@ (8002f54 <HAL_DMA_Abort+0x624>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d018      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a32      	ldr	r2, [pc, #200]	@ (8002f58 <HAL_DMA_Abort+0x628>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a31      	ldr	r2, [pc, #196]	@ (8002f5c <HAL_DMA_Abort+0x62c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8002f60 <HAL_DMA_Abort+0x630>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8002f64 <HAL_DMA_Abort+0x634>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_DMA_Abort+0x58a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f68 <HAL_DMA_Abort+0x638>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_DMA_Abort+0x58e>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_DMA_Abort+0x590>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d015      	beq.n	8002ef0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ecc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002eee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
 8002f4c:	58025408 	.word	0x58025408
 8002f50:	5802541c 	.word	0x5802541c
 8002f54:	58025430 	.word	0x58025430
 8002f58:	58025444 	.word	0x58025444
 8002f5c:	58025458 	.word	0x58025458
 8002f60:	5802546c 	.word	0x5802546c
 8002f64:	58025480 	.word	0x58025480
 8002f68:	58025494 	.word	0x58025494

08002f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e237      	b.n	80033ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2280      	movs	r2, #128	@ 0x80
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e22c      	b.n	80033ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5c      	ldr	r2, [pc, #368]	@ (800310c <HAL_DMA_Abort_IT+0x1a0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d04a      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8003110 <HAL_DMA_Abort_IT+0x1a4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d045      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a59      	ldr	r2, [pc, #356]	@ (8003114 <HAL_DMA_Abort_IT+0x1a8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d040      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_DMA_Abort_IT+0x1ac>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d03b      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a56      	ldr	r2, [pc, #344]	@ (800311c <HAL_DMA_Abort_IT+0x1b0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d036      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a55      	ldr	r2, [pc, #340]	@ (8003120 <HAL_DMA_Abort_IT+0x1b4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d031      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a53      	ldr	r2, [pc, #332]	@ (8003124 <HAL_DMA_Abort_IT+0x1b8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d02c      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_DMA_Abort_IT+0x1bc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d027      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a50      	ldr	r2, [pc, #320]	@ (800312c <HAL_DMA_Abort_IT+0x1c0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d022      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8003130 <HAL_DMA_Abort_IT+0x1c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d01d      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8003134 <HAL_DMA_Abort_IT+0x1c8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d018      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a4c      	ldr	r2, [pc, #304]	@ (8003138 <HAL_DMA_Abort_IT+0x1cc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d013      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4a      	ldr	r2, [pc, #296]	@ (800313c <HAL_DMA_Abort_IT+0x1d0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00e      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a49      	ldr	r2, [pc, #292]	@ (8003140 <HAL_DMA_Abort_IT+0x1d4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a47      	ldr	r2, [pc, #284]	@ (8003144 <HAL_DMA_Abort_IT+0x1d8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_DMA_Abort_IT+0xc8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a46      	ldr	r2, [pc, #280]	@ (8003148 <HAL_DMA_Abort_IT+0x1dc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_DMA_Abort_IT+0xcc>
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_DMA_Abort_IT+0xce>
 8003038:	2300      	movs	r3, #0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 8086 	beq.w	800314c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2204      	movs	r2, #4
 8003044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2f      	ldr	r2, [pc, #188]	@ (800310c <HAL_DMA_Abort_IT+0x1a0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d04a      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2e      	ldr	r2, [pc, #184]	@ (8003110 <HAL_DMA_Abort_IT+0x1a4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d045      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2c      	ldr	r2, [pc, #176]	@ (8003114 <HAL_DMA_Abort_IT+0x1a8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d040      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2b      	ldr	r2, [pc, #172]	@ (8003118 <HAL_DMA_Abort_IT+0x1ac>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d03b      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a29      	ldr	r2, [pc, #164]	@ (800311c <HAL_DMA_Abort_IT+0x1b0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d036      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a28      	ldr	r2, [pc, #160]	@ (8003120 <HAL_DMA_Abort_IT+0x1b4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d031      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a26      	ldr	r2, [pc, #152]	@ (8003124 <HAL_DMA_Abort_IT+0x1b8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02c      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a25      	ldr	r2, [pc, #148]	@ (8003128 <HAL_DMA_Abort_IT+0x1bc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d027      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a23      	ldr	r2, [pc, #140]	@ (800312c <HAL_DMA_Abort_IT+0x1c0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a22      	ldr	r2, [pc, #136]	@ (8003130 <HAL_DMA_Abort_IT+0x1c4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a20      	ldr	r2, [pc, #128]	@ (8003134 <HAL_DMA_Abort_IT+0x1c8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003138 <HAL_DMA_Abort_IT+0x1cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <HAL_DMA_Abort_IT+0x1d0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003140 <HAL_DMA_Abort_IT+0x1d4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003144 <HAL_DMA_Abort_IT+0x1d8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x17c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a19      	ldr	r2, [pc, #100]	@ (8003148 <HAL_DMA_Abort_IT+0x1dc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d108      	bne.n	80030fa <HAL_DMA_Abort_IT+0x18e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e178      	b.n	80033ec <HAL_DMA_Abort_IT+0x480>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e16f      	b.n	80033ec <HAL_DMA_Abort_IT+0x480>
 800310c:	40020010 	.word	0x40020010
 8003110:	40020028 	.word	0x40020028
 8003114:	40020040 	.word	0x40020040
 8003118:	40020058 	.word	0x40020058
 800311c:	40020070 	.word	0x40020070
 8003120:	40020088 	.word	0x40020088
 8003124:	400200a0 	.word	0x400200a0
 8003128:	400200b8 	.word	0x400200b8
 800312c:	40020410 	.word	0x40020410
 8003130:	40020428 	.word	0x40020428
 8003134:	40020440 	.word	0x40020440
 8003138:	40020458 	.word	0x40020458
 800313c:	40020470 	.word	0x40020470
 8003140:	40020488 	.word	0x40020488
 8003144:	400204a0 	.word	0x400204a0
 8003148:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 020e 	bic.w	r2, r2, #14
 800315a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6c      	ldr	r2, [pc, #432]	@ (8003314 <HAL_DMA_Abort_IT+0x3a8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d04a      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6b      	ldr	r2, [pc, #428]	@ (8003318 <HAL_DMA_Abort_IT+0x3ac>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d045      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a69      	ldr	r2, [pc, #420]	@ (800331c <HAL_DMA_Abort_IT+0x3b0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d040      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a68      	ldr	r2, [pc, #416]	@ (8003320 <HAL_DMA_Abort_IT+0x3b4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d03b      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a66      	ldr	r2, [pc, #408]	@ (8003324 <HAL_DMA_Abort_IT+0x3b8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d036      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a65      	ldr	r2, [pc, #404]	@ (8003328 <HAL_DMA_Abort_IT+0x3bc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d031      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a63      	ldr	r2, [pc, #396]	@ (800332c <HAL_DMA_Abort_IT+0x3c0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02c      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a62      	ldr	r2, [pc, #392]	@ (8003330 <HAL_DMA_Abort_IT+0x3c4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d027      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a60      	ldr	r2, [pc, #384]	@ (8003334 <HAL_DMA_Abort_IT+0x3c8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003338 <HAL_DMA_Abort_IT+0x3cc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	@ (800333c <HAL_DMA_Abort_IT+0x3d0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003340 <HAL_DMA_Abort_IT+0x3d4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_DMA_Abort_IT+0x3d8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a59      	ldr	r2, [pc, #356]	@ (8003348 <HAL_DMA_Abort_IT+0x3dc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a57      	ldr	r2, [pc, #348]	@ (800334c <HAL_DMA_Abort_IT+0x3e0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_Abort_IT+0x290>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a56      	ldr	r2, [pc, #344]	@ (8003350 <HAL_DMA_Abort_IT+0x3e4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d108      	bne.n	800320e <HAL_DMA_Abort_IT+0x2a2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e007      	b.n	800321e <HAL_DMA_Abort_IT+0x2b2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a3c      	ldr	r2, [pc, #240]	@ (8003314 <HAL_DMA_Abort_IT+0x3a8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d072      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a3a      	ldr	r2, [pc, #232]	@ (8003318 <HAL_DMA_Abort_IT+0x3ac>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d06d      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a39      	ldr	r2, [pc, #228]	@ (800331c <HAL_DMA_Abort_IT+0x3b0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d068      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a37      	ldr	r2, [pc, #220]	@ (8003320 <HAL_DMA_Abort_IT+0x3b4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d063      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a36      	ldr	r2, [pc, #216]	@ (8003324 <HAL_DMA_Abort_IT+0x3b8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d05e      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a34      	ldr	r2, [pc, #208]	@ (8003328 <HAL_DMA_Abort_IT+0x3bc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d059      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a33      	ldr	r2, [pc, #204]	@ (800332c <HAL_DMA_Abort_IT+0x3c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d054      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a31      	ldr	r2, [pc, #196]	@ (8003330 <HAL_DMA_Abort_IT+0x3c4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d04f      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a30      	ldr	r2, [pc, #192]	@ (8003334 <HAL_DMA_Abort_IT+0x3c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04a      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <HAL_DMA_Abort_IT+0x3cc>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d045      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2d      	ldr	r2, [pc, #180]	@ (800333c <HAL_DMA_Abort_IT+0x3d0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d040      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2b      	ldr	r2, [pc, #172]	@ (8003340 <HAL_DMA_Abort_IT+0x3d4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d03b      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2a      	ldr	r2, [pc, #168]	@ (8003344 <HAL_DMA_Abort_IT+0x3d8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d036      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a28      	ldr	r2, [pc, #160]	@ (8003348 <HAL_DMA_Abort_IT+0x3dc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d031      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a27      	ldr	r2, [pc, #156]	@ (800334c <HAL_DMA_Abort_IT+0x3e0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d02c      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a25      	ldr	r2, [pc, #148]	@ (8003350 <HAL_DMA_Abort_IT+0x3e4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d027      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <HAL_DMA_Abort_IT+0x3e8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d022      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a22      	ldr	r2, [pc, #136]	@ (8003358 <HAL_DMA_Abort_IT+0x3ec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01d      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a21      	ldr	r2, [pc, #132]	@ (800335c <HAL_DMA_Abort_IT+0x3f0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d018      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003360 <HAL_DMA_Abort_IT+0x3f4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003364 <HAL_DMA_Abort_IT+0x3f8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003368 <HAL_DMA_Abort_IT+0x3fc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d009      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1b      	ldr	r2, [pc, #108]	@ (800336c <HAL_DMA_Abort_IT+0x400>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x3a2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a19      	ldr	r2, [pc, #100]	@ (8003370 <HAL_DMA_Abort_IT+0x404>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d132      	bne.n	8003374 <HAL_DMA_Abort_IT+0x408>
 800330e:	2301      	movs	r3, #1
 8003310:	e031      	b.n	8003376 <HAL_DMA_Abort_IT+0x40a>
 8003312:	bf00      	nop
 8003314:	40020010 	.word	0x40020010
 8003318:	40020028 	.word	0x40020028
 800331c:	40020040 	.word	0x40020040
 8003320:	40020058 	.word	0x40020058
 8003324:	40020070 	.word	0x40020070
 8003328:	40020088 	.word	0x40020088
 800332c:	400200a0 	.word	0x400200a0
 8003330:	400200b8 	.word	0x400200b8
 8003334:	40020410 	.word	0x40020410
 8003338:	40020428 	.word	0x40020428
 800333c:	40020440 	.word	0x40020440
 8003340:	40020458 	.word	0x40020458
 8003344:	40020470 	.word	0x40020470
 8003348:	40020488 	.word	0x40020488
 800334c:	400204a0 	.word	0x400204a0
 8003350:	400204b8 	.word	0x400204b8
 8003354:	58025408 	.word	0x58025408
 8003358:	5802541c 	.word	0x5802541c
 800335c:	58025430 	.word	0x58025430
 8003360:	58025444 	.word	0x58025444
 8003364:	58025458 	.word	0x58025458
 8003368:	5802546c 	.word	0x5802546c
 800336c:	58025480 	.word	0x58025480
 8003370:	58025494 	.word	0x58025494
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d028      	beq.n	80033cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003388:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80033a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop

080033f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003404:	4b67      	ldr	r3, [pc, #412]	@ (80035a4 <HAL_DMA_IRQHandler+0x1ac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a67      	ldr	r2, [pc, #412]	@ (80035a8 <HAL_DMA_IRQHandler+0x1b0>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5f      	ldr	r2, [pc, #380]	@ (80035ac <HAL_DMA_IRQHandler+0x1b4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d04a      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a5d      	ldr	r2, [pc, #372]	@ (80035b0 <HAL_DMA_IRQHandler+0x1b8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d045      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5c      	ldr	r2, [pc, #368]	@ (80035b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d040      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5a      	ldr	r2, [pc, #360]	@ (80035b8 <HAL_DMA_IRQHandler+0x1c0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d03b      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a59      	ldr	r2, [pc, #356]	@ (80035bc <HAL_DMA_IRQHandler+0x1c4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d036      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a57      	ldr	r2, [pc, #348]	@ (80035c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d031      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a56      	ldr	r2, [pc, #344]	@ (80035c4 <HAL_DMA_IRQHandler+0x1cc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d02c      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a54      	ldr	r2, [pc, #336]	@ (80035c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d027      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a53      	ldr	r2, [pc, #332]	@ (80035cc <HAL_DMA_IRQHandler+0x1d4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a51      	ldr	r2, [pc, #324]	@ (80035d0 <HAL_DMA_IRQHandler+0x1d8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01d      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a50      	ldr	r2, [pc, #320]	@ (80035d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a4e      	ldr	r2, [pc, #312]	@ (80035d8 <HAL_DMA_IRQHandler+0x1e0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4d      	ldr	r2, [pc, #308]	@ (80035dc <HAL_DMA_IRQHandler+0x1e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a4b      	ldr	r2, [pc, #300]	@ (80035e0 <HAL_DMA_IRQHandler+0x1e8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a4a      	ldr	r2, [pc, #296]	@ (80035e4 <HAL_DMA_IRQHandler+0x1ec>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_DMA_IRQHandler+0xd2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a48      	ldr	r2, [pc, #288]	@ (80035e8 <HAL_DMA_IRQHandler+0x1f0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_DMA_IRQHandler+0xd6>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 842b 	beq.w	8003d2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	2208      	movs	r2, #8
 80034e0:	409a      	lsls	r2, r3
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80a2 	beq.w	8003630 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a2e      	ldr	r2, [pc, #184]	@ (80035ac <HAL_DMA_IRQHandler+0x1b4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d04a      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a2d      	ldr	r2, [pc, #180]	@ (80035b0 <HAL_DMA_IRQHandler+0x1b8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d045      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2b      	ldr	r2, [pc, #172]	@ (80035b4 <HAL_DMA_IRQHandler+0x1bc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d040      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2a      	ldr	r2, [pc, #168]	@ (80035b8 <HAL_DMA_IRQHandler+0x1c0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d03b      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a28      	ldr	r2, [pc, #160]	@ (80035bc <HAL_DMA_IRQHandler+0x1c4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d036      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a27      	ldr	r2, [pc, #156]	@ (80035c0 <HAL_DMA_IRQHandler+0x1c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d031      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a25      	ldr	r2, [pc, #148]	@ (80035c4 <HAL_DMA_IRQHandler+0x1cc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d02c      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a24      	ldr	r2, [pc, #144]	@ (80035c8 <HAL_DMA_IRQHandler+0x1d0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d027      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_DMA_IRQHandler+0x1d4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a21      	ldr	r2, [pc, #132]	@ (80035d0 <HAL_DMA_IRQHandler+0x1d8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d01d      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1f      	ldr	r2, [pc, #124]	@ (80035d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_DMA_IRQHandler+0x1e0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_DMA_IRQHandler+0x1e4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1b      	ldr	r2, [pc, #108]	@ (80035e0 <HAL_DMA_IRQHandler+0x1e8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_DMA_IRQHandler+0x1ec>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_DMA_IRQHandler+0x194>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d12f      	bne.n	80035ec <HAL_DMA_IRQHandler+0x1f4>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e02e      	b.n	8003600 <HAL_DMA_IRQHandler+0x208>
 80035a2:	bf00      	nop
 80035a4:	24000004 	.word	0x24000004
 80035a8:	1b4e81b5 	.word	0x1b4e81b5
 80035ac:	40020010 	.word	0x40020010
 80035b0:	40020028 	.word	0x40020028
 80035b4:	40020040 	.word	0x40020040
 80035b8:	40020058 	.word	0x40020058
 80035bc:	40020070 	.word	0x40020070
 80035c0:	40020088 	.word	0x40020088
 80035c4:	400200a0 	.word	0x400200a0
 80035c8:	400200b8 	.word	0x400200b8
 80035cc:	40020410 	.word	0x40020410
 80035d0:	40020428 	.word	0x40020428
 80035d4:	40020440 	.word	0x40020440
 80035d8:	40020458 	.word	0x40020458
 80035dc:	40020470 	.word	0x40020470
 80035e0:	40020488 	.word	0x40020488
 80035e4:	400204a0 	.word	0x400204a0
 80035e8:	400204b8 	.word	0x400204b8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0204 	bic.w	r2, r2, #4
 8003612:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	fa22 f303 	lsr.w	r3, r2, r3
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d06e      	beq.n	8003724 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a69      	ldr	r2, [pc, #420]	@ (80037f0 <HAL_DMA_IRQHandler+0x3f8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d04a      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a67      	ldr	r2, [pc, #412]	@ (80037f4 <HAL_DMA_IRQHandler+0x3fc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d045      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a66      	ldr	r2, [pc, #408]	@ (80037f8 <HAL_DMA_IRQHandler+0x400>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d040      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a64      	ldr	r2, [pc, #400]	@ (80037fc <HAL_DMA_IRQHandler+0x404>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d03b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a63      	ldr	r2, [pc, #396]	@ (8003800 <HAL_DMA_IRQHandler+0x408>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d036      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a61      	ldr	r2, [pc, #388]	@ (8003804 <HAL_DMA_IRQHandler+0x40c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d031      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a60      	ldr	r2, [pc, #384]	@ (8003808 <HAL_DMA_IRQHandler+0x410>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d02c      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5e      	ldr	r2, [pc, #376]	@ (800380c <HAL_DMA_IRQHandler+0x414>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d027      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5d      	ldr	r2, [pc, #372]	@ (8003810 <HAL_DMA_IRQHandler+0x418>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5b      	ldr	r2, [pc, #364]	@ (8003814 <HAL_DMA_IRQHandler+0x41c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003818 <HAL_DMA_IRQHandler+0x420>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a58      	ldr	r2, [pc, #352]	@ (800381c <HAL_DMA_IRQHandler+0x424>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a57      	ldr	r2, [pc, #348]	@ (8003820 <HAL_DMA_IRQHandler+0x428>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a55      	ldr	r2, [pc, #340]	@ (8003824 <HAL_DMA_IRQHandler+0x42c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a54      	ldr	r2, [pc, #336]	@ (8003828 <HAL_DMA_IRQHandler+0x430>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x2ee>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a52      	ldr	r2, [pc, #328]	@ (800382c <HAL_DMA_IRQHandler+0x434>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10a      	bne.n	80036fc <HAL_DMA_IRQHandler+0x304>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	e003      	b.n	8003704 <HAL_DMA_IRQHandler+0x30c>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2201      	movs	r2, #1
 8003712:	409a      	lsls	r2, r3
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371c:	f043 0202 	orr.w	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 808f 	beq.w	8003858 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2c      	ldr	r2, [pc, #176]	@ (80037f0 <HAL_DMA_IRQHandler+0x3f8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04a      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2a      	ldr	r2, [pc, #168]	@ (80037f4 <HAL_DMA_IRQHandler+0x3fc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d045      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a29      	ldr	r2, [pc, #164]	@ (80037f8 <HAL_DMA_IRQHandler+0x400>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d040      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a27      	ldr	r2, [pc, #156]	@ (80037fc <HAL_DMA_IRQHandler+0x404>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d03b      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a26      	ldr	r2, [pc, #152]	@ (8003800 <HAL_DMA_IRQHandler+0x408>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d036      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a24      	ldr	r2, [pc, #144]	@ (8003804 <HAL_DMA_IRQHandler+0x40c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d031      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_DMA_IRQHandler+0x410>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d02c      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a21      	ldr	r2, [pc, #132]	@ (800380c <HAL_DMA_IRQHandler+0x414>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d027      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a20      	ldr	r2, [pc, #128]	@ (8003810 <HAL_DMA_IRQHandler+0x418>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1e      	ldr	r2, [pc, #120]	@ (8003814 <HAL_DMA_IRQHandler+0x41c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <HAL_DMA_IRQHandler+0x420>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1b      	ldr	r2, [pc, #108]	@ (800381c <HAL_DMA_IRQHandler+0x424>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003820 <HAL_DMA_IRQHandler+0x428>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a18      	ldr	r2, [pc, #96]	@ (8003824 <HAL_DMA_IRQHandler+0x42c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a17      	ldr	r2, [pc, #92]	@ (8003828 <HAL_DMA_IRQHandler+0x430>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_DMA_IRQHandler+0x3e2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a15      	ldr	r2, [pc, #84]	@ (800382c <HAL_DMA_IRQHandler+0x434>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d12a      	bne.n	8003830 <HAL_DMA_IRQHandler+0x438>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e023      	b.n	8003838 <HAL_DMA_IRQHandler+0x440>
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2204      	movs	r2, #4
 8003846:	409a      	lsls	r2, r3
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003850:	f043 0204 	orr.w	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2210      	movs	r2, #16
 8003862:	409a      	lsls	r2, r3
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4013      	ands	r3, r2
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a6 	beq.w	80039ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a85      	ldr	r2, [pc, #532]	@ (8003a88 <HAL_DMA_IRQHandler+0x690>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a83      	ldr	r2, [pc, #524]	@ (8003a8c <HAL_DMA_IRQHandler+0x694>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a82      	ldr	r2, [pc, #520]	@ (8003a90 <HAL_DMA_IRQHandler+0x698>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a80      	ldr	r2, [pc, #512]	@ (8003a94 <HAL_DMA_IRQHandler+0x69c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a98 <HAL_DMA_IRQHandler+0x6a0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7d      	ldr	r2, [pc, #500]	@ (8003a9c <HAL_DMA_IRQHandler+0x6a4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7c      	ldr	r2, [pc, #496]	@ (8003aa0 <HAL_DMA_IRQHandler+0x6a8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a7a      	ldr	r2, [pc, #488]	@ (8003aa4 <HAL_DMA_IRQHandler+0x6ac>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a79      	ldr	r2, [pc, #484]	@ (8003aa8 <HAL_DMA_IRQHandler+0x6b0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a77      	ldr	r2, [pc, #476]	@ (8003aac <HAL_DMA_IRQHandler+0x6b4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a76      	ldr	r2, [pc, #472]	@ (8003ab0 <HAL_DMA_IRQHandler+0x6b8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a74      	ldr	r2, [pc, #464]	@ (8003ab4 <HAL_DMA_IRQHandler+0x6bc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a73      	ldr	r2, [pc, #460]	@ (8003ab8 <HAL_DMA_IRQHandler+0x6c0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a71      	ldr	r2, [pc, #452]	@ (8003abc <HAL_DMA_IRQHandler+0x6c4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a70      	ldr	r2, [pc, #448]	@ (8003ac0 <HAL_DMA_IRQHandler+0x6c8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_IRQHandler+0x516>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac4 <HAL_DMA_IRQHandler+0x6cc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10a      	bne.n	8003924 <HAL_DMA_IRQHandler+0x52c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e009      	b.n	8003938 <HAL_DMA_IRQHandler+0x540>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d03e      	beq.n	80039ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2210      	movs	r2, #16
 8003946:	409a      	lsls	r2, r3
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d108      	bne.n	800397a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d024      	beq.n	80039ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e01f      	b.n	80039ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397e:	2b00      	cmp	r3, #0
 8003980:	d01b      	beq.n	80039ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
 800398a:	e016      	b.n	80039ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0208 	bic.w	r2, r2, #8
 80039a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2220      	movs	r2, #32
 80039c4:	409a      	lsls	r2, r3
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8110 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a88 <HAL_DMA_IRQHandler+0x690>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04a      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2b      	ldr	r2, [pc, #172]	@ (8003a8c <HAL_DMA_IRQHandler+0x694>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d045      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a29      	ldr	r2, [pc, #164]	@ (8003a90 <HAL_DMA_IRQHandler+0x698>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d040      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a28      	ldr	r2, [pc, #160]	@ (8003a94 <HAL_DMA_IRQHandler+0x69c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03b      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a26      	ldr	r2, [pc, #152]	@ (8003a98 <HAL_DMA_IRQHandler+0x6a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a25      	ldr	r2, [pc, #148]	@ (8003a9c <HAL_DMA_IRQHandler+0x6a4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a23      	ldr	r2, [pc, #140]	@ (8003aa0 <HAL_DMA_IRQHandler+0x6a8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <HAL_DMA_IRQHandler+0x6ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d027      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a20      	ldr	r2, [pc, #128]	@ (8003aa8 <HAL_DMA_IRQHandler+0x6b0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <HAL_DMA_IRQHandler+0x6b4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab0 <HAL_DMA_IRQHandler+0x6b8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_DMA_IRQHandler+0x6bc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab8 <HAL_DMA_IRQHandler+0x6c0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_DMA_IRQHandler+0x6c4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a17      	ldr	r2, [pc, #92]	@ (8003ac0 <HAL_DMA_IRQHandler+0x6c8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x678>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	@ (8003ac4 <HAL_DMA_IRQHandler+0x6cc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d12b      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x6d0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf14      	ite	ne
 8003a7e:	2301      	movne	r3, #1
 8003a80:	2300      	moveq	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	e02a      	b.n	8003adc <HAL_DMA_IRQHandler+0x6e4>
 8003a86:	bf00      	nop
 8003a88:	40020010 	.word	0x40020010
 8003a8c:	40020028 	.word	0x40020028
 8003a90:	40020040 	.word	0x40020040
 8003a94:	40020058 	.word	0x40020058
 8003a98:	40020070 	.word	0x40020070
 8003a9c:	40020088 	.word	0x40020088
 8003aa0:	400200a0 	.word	0x400200a0
 8003aa4:	400200b8 	.word	0x400200b8
 8003aa8:	40020410 	.word	0x40020410
 8003aac:	40020428 	.word	0x40020428
 8003ab0:	40020440 	.word	0x40020440
 8003ab4:	40020458 	.word	0x40020458
 8003ab8:	40020470 	.word	0x40020470
 8003abc:	40020488 	.word	0x40020488
 8003ac0:	400204a0 	.word	0x400204a0
 8003ac4:	400204b8 	.word	0x400204b8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8087 	beq.w	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2220      	movs	r2, #32
 8003aec:	409a      	lsls	r2, r3
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d139      	bne.n	8003b72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0216 	bic.w	r2, r2, #22
 8003b0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x736>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0208 	bic.w	r2, r2, #8
 8003b3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	223f      	movs	r2, #63	@ 0x3f
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 834a 	beq.w	80041fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
          }
          return;
 8003b70:	e344      	b.n	80041fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
 8003b9e:	e027      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d023      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
 8003bb0:	e01e      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10f      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0210 	bic.w	r2, r2, #16
 8003bce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8306 	beq.w	8004206 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8088 	beq.w	8003d18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a7a      	ldr	r2, [pc, #488]	@ (8003e00 <HAL_DMA_IRQHandler+0xa08>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d04a      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a79      	ldr	r2, [pc, #484]	@ (8003e04 <HAL_DMA_IRQHandler+0xa0c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d045      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a77      	ldr	r2, [pc, #476]	@ (8003e08 <HAL_DMA_IRQHandler+0xa10>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d040      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a76      	ldr	r2, [pc, #472]	@ (8003e0c <HAL_DMA_IRQHandler+0xa14>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d03b      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a74      	ldr	r2, [pc, #464]	@ (8003e10 <HAL_DMA_IRQHandler+0xa18>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d036      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a73      	ldr	r2, [pc, #460]	@ (8003e14 <HAL_DMA_IRQHandler+0xa1c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d031      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a71      	ldr	r2, [pc, #452]	@ (8003e18 <HAL_DMA_IRQHandler+0xa20>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02c      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a70      	ldr	r2, [pc, #448]	@ (8003e1c <HAL_DMA_IRQHandler+0xa24>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d027      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6e      	ldr	r2, [pc, #440]	@ (8003e20 <HAL_DMA_IRQHandler+0xa28>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d022      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e24 <HAL_DMA_IRQHandler+0xa2c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d01d      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a6b      	ldr	r2, [pc, #428]	@ (8003e28 <HAL_DMA_IRQHandler+0xa30>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6a      	ldr	r2, [pc, #424]	@ (8003e2c <HAL_DMA_IRQHandler+0xa34>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a68      	ldr	r2, [pc, #416]	@ (8003e30 <HAL_DMA_IRQHandler+0xa38>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a67      	ldr	r2, [pc, #412]	@ (8003e34 <HAL_DMA_IRQHandler+0xa3c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a65      	ldr	r2, [pc, #404]	@ (8003e38 <HAL_DMA_IRQHandler+0xa40>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x8b8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a64      	ldr	r2, [pc, #400]	@ (8003e3c <HAL_DMA_IRQHandler+0xa44>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <HAL_DMA_IRQHandler+0x8ca>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e007      	b.n	8003cd2 <HAL_DMA_IRQHandler+0x8da>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d307      	bcc.n	8003cee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f2      	bne.n	8003cd2 <HAL_DMA_IRQHandler+0x8da>
 8003cec:	e000      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003cee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d004      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003d06:	e003      	b.n	8003d10 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8272 	beq.w	8004206 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	4798      	blx	r3
 8003d2a:	e26c      	b.n	8004206 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a43      	ldr	r2, [pc, #268]	@ (8003e40 <HAL_DMA_IRQHandler+0xa48>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a42      	ldr	r2, [pc, #264]	@ (8003e44 <HAL_DMA_IRQHandler+0xa4c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a40      	ldr	r2, [pc, #256]	@ (8003e48 <HAL_DMA_IRQHandler+0xa50>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e4c <HAL_DMA_IRQHandler+0xa54>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a3d      	ldr	r2, [pc, #244]	@ (8003e50 <HAL_DMA_IRQHandler+0xa58>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3c      	ldr	r2, [pc, #240]	@ (8003e54 <HAL_DMA_IRQHandler+0xa5c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003e58 <HAL_DMA_IRQHandler+0xa60>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x984>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a39      	ldr	r2, [pc, #228]	@ (8003e5c <HAL_DMA_IRQHandler+0xa64>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x988>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <HAL_DMA_IRQHandler+0x98a>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 823f 	beq.w	8004206 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2204      	movs	r2, #4
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80cd 	beq.w	8003f40 <HAL_DMA_IRQHandler+0xb48>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80c7 	beq.w	8003f40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2204      	movs	r2, #4
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d049      	beq.n	8003e60 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8210 	beq.w	8004200 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003de8:	e20a      	b.n	8004200 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8206 	beq.w	8004200 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dfc:	e200      	b.n	8004200 <HAL_DMA_IRQHandler+0xe08>
 8003dfe:	bf00      	nop
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d160      	bne.n	8003f2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7f      	ldr	r2, [pc, #508]	@ (800406c <HAL_DMA_IRQHandler+0xc74>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d04a      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7d      	ldr	r2, [pc, #500]	@ (8004070 <HAL_DMA_IRQHandler+0xc78>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d045      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7c      	ldr	r2, [pc, #496]	@ (8004074 <HAL_DMA_IRQHandler+0xc7c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d040      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a7a      	ldr	r2, [pc, #488]	@ (8004078 <HAL_DMA_IRQHandler+0xc80>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d03b      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a79      	ldr	r2, [pc, #484]	@ (800407c <HAL_DMA_IRQHandler+0xc84>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d036      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a77      	ldr	r2, [pc, #476]	@ (8004080 <HAL_DMA_IRQHandler+0xc88>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d031      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a76      	ldr	r2, [pc, #472]	@ (8004084 <HAL_DMA_IRQHandler+0xc8c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d02c      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	@ (8004088 <HAL_DMA_IRQHandler+0xc90>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d027      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a73      	ldr	r2, [pc, #460]	@ (800408c <HAL_DMA_IRQHandler+0xc94>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d022      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a71      	ldr	r2, [pc, #452]	@ (8004090 <HAL_DMA_IRQHandler+0xc98>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a70      	ldr	r2, [pc, #448]	@ (8004094 <HAL_DMA_IRQHandler+0xc9c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	@ (8004098 <HAL_DMA_IRQHandler+0xca0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800409c <HAL_DMA_IRQHandler+0xca4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80040a0 <HAL_DMA_IRQHandler+0xca8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6a      	ldr	r2, [pc, #424]	@ (80040a4 <HAL_DMA_IRQHandler+0xcac>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_DMA_IRQHandler+0xb12>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a68      	ldr	r2, [pc, #416]	@ (80040a8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_IRQHandler+0xb24>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0208 	bic.w	r2, r2, #8
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	e007      	b.n	8003f2c <HAL_DMA_IRQHandler+0xb34>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8165 	beq.w	8004200 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f3e:	e15f      	b.n	8004200 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2202      	movs	r2, #2
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80c5 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xce8>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80bf 	beq.w	80040e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 813a 	beq.w	8004204 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f98:	e134      	b.n	8004204 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8130 	beq.w	8004204 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fac:	e12a      	b.n	8004204 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 8089 	bne.w	80040cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800406c <HAL_DMA_IRQHandler+0xc74>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d04a      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a29      	ldr	r2, [pc, #164]	@ (8004070 <HAL_DMA_IRQHandler+0xc78>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d045      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a28      	ldr	r2, [pc, #160]	@ (8004074 <HAL_DMA_IRQHandler+0xc7c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d040      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a26      	ldr	r2, [pc, #152]	@ (8004078 <HAL_DMA_IRQHandler+0xc80>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d03b      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a25      	ldr	r2, [pc, #148]	@ (800407c <HAL_DMA_IRQHandler+0xc84>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d036      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a23      	ldr	r2, [pc, #140]	@ (8004080 <HAL_DMA_IRQHandler+0xc88>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d031      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a22      	ldr	r2, [pc, #136]	@ (8004084 <HAL_DMA_IRQHandler+0xc8c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d02c      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a20      	ldr	r2, [pc, #128]	@ (8004088 <HAL_DMA_IRQHandler+0xc90>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d027      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1f      	ldr	r2, [pc, #124]	@ (800408c <HAL_DMA_IRQHandler+0xc94>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <HAL_DMA_IRQHandler+0xc98>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01d      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <HAL_DMA_IRQHandler+0xc9c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1a      	ldr	r2, [pc, #104]	@ (8004098 <HAL_DMA_IRQHandler+0xca0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a19      	ldr	r2, [pc, #100]	@ (800409c <HAL_DMA_IRQHandler+0xca4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <HAL_DMA_IRQHandler+0xca8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <HAL_DMA_IRQHandler+0xcac>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_DMA_IRQHandler+0xc62>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a14      	ldr	r2, [pc, #80]	@ (80040a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d128      	bne.n	80040ac <HAL_DMA_IRQHandler+0xcb4>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0214 	bic.w	r2, r2, #20
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e027      	b.n	80040bc <HAL_DMA_IRQHandler+0xcc4>
 800406c:	40020010 	.word	0x40020010
 8004070:	40020028 	.word	0x40020028
 8004074:	40020040 	.word	0x40020040
 8004078:	40020058 	.word	0x40020058
 800407c:	40020070 	.word	0x40020070
 8004080:	40020088 	.word	0x40020088
 8004084:	400200a0 	.word	0x400200a0
 8004088:	400200b8 	.word	0x400200b8
 800408c:	40020410 	.word	0x40020410
 8004090:	40020428 	.word	0x40020428
 8004094:	40020440 	.word	0x40020440
 8004098:	40020458 	.word	0x40020458
 800409c:	40020470 	.word	0x40020470
 80040a0:	40020488 	.word	0x40020488
 80040a4:	400204a0 	.word	0x400204a0
 80040a8:	400204b8 	.word	0x400204b8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 020a 	bic.w	r2, r2, #10
 80040ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8097 	beq.w	8004204 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040de:	e091      	b.n	8004204 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2208      	movs	r2, #8
 80040ea:	409a      	lsls	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 8088 	beq.w	8004206 <HAL_DMA_IRQHandler+0xe0e>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8082 	beq.w	8004206 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a41      	ldr	r2, [pc, #260]	@ (800420c <HAL_DMA_IRQHandler+0xe14>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d04a      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a3f      	ldr	r2, [pc, #252]	@ (8004210 <HAL_DMA_IRQHandler+0xe18>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d045      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a3e      	ldr	r2, [pc, #248]	@ (8004214 <HAL_DMA_IRQHandler+0xe1c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d040      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3c      	ldr	r2, [pc, #240]	@ (8004218 <HAL_DMA_IRQHandler+0xe20>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d03b      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3b      	ldr	r2, [pc, #236]	@ (800421c <HAL_DMA_IRQHandler+0xe24>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d036      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a39      	ldr	r2, [pc, #228]	@ (8004220 <HAL_DMA_IRQHandler+0xe28>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d031      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a38      	ldr	r2, [pc, #224]	@ (8004224 <HAL_DMA_IRQHandler+0xe2c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d02c      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <HAL_DMA_IRQHandler+0xe30>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d027      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a35      	ldr	r2, [pc, #212]	@ (800422c <HAL_DMA_IRQHandler+0xe34>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d022      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a33      	ldr	r2, [pc, #204]	@ (8004230 <HAL_DMA_IRQHandler+0xe38>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01d      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a32      	ldr	r2, [pc, #200]	@ (8004234 <HAL_DMA_IRQHandler+0xe3c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d018      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a30      	ldr	r2, [pc, #192]	@ (8004238 <HAL_DMA_IRQHandler+0xe40>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2f      	ldr	r2, [pc, #188]	@ (800423c <HAL_DMA_IRQHandler+0xe44>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d00e      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2d      	ldr	r2, [pc, #180]	@ (8004240 <HAL_DMA_IRQHandler+0xe48>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2c      	ldr	r2, [pc, #176]	@ (8004244 <HAL_DMA_IRQHandler+0xe4c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d004      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xdaa>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <HAL_DMA_IRQHandler+0xe50>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d108      	bne.n	80041b4 <HAL_DMA_IRQHandler+0xdbc>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 021c 	bic.w	r2, r2, #28
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e007      	b.n	80041c4 <HAL_DMA_IRQHandler+0xdcc>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 020e 	bic.w	r2, r2, #14
 80041c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
 80041fa:	e004      	b.n	8004206 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004204:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004206:	3728      	adds	r7, #40	@ 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40020010 	.word	0x40020010
 8004210:	40020028 	.word	0x40020028
 8004214:	40020040 	.word	0x40020040
 8004218:	40020058 	.word	0x40020058
 800421c:	40020070 	.word	0x40020070
 8004220:	40020088 	.word	0x40020088
 8004224:	400200a0 	.word	0x400200a0
 8004228:	400200b8 	.word	0x400200b8
 800422c:	40020410 	.word	0x40020410
 8004230:	40020428 	.word	0x40020428
 8004234:	40020440 	.word	0x40020440
 8004238:	40020458 	.word	0x40020458
 800423c:	40020470 	.word	0x40020470
 8004240:	40020488 	.word	0x40020488
 8004244:	400204a0 	.word	0x400204a0
 8004248:	400204b8 	.word	0x400204b8

0800424c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7f      	ldr	r2, [pc, #508]	@ (8004468 <DMA_SetConfig+0x21c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d072      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a7d      	ldr	r2, [pc, #500]	@ (800446c <DMA_SetConfig+0x220>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d06d      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7c      	ldr	r2, [pc, #496]	@ (8004470 <DMA_SetConfig+0x224>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d068      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7a      	ldr	r2, [pc, #488]	@ (8004474 <DMA_SetConfig+0x228>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d063      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a79      	ldr	r2, [pc, #484]	@ (8004478 <DMA_SetConfig+0x22c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d05e      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a77      	ldr	r2, [pc, #476]	@ (800447c <DMA_SetConfig+0x230>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d059      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a76      	ldr	r2, [pc, #472]	@ (8004480 <DMA_SetConfig+0x234>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d054      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a74      	ldr	r2, [pc, #464]	@ (8004484 <DMA_SetConfig+0x238>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d04f      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	@ (8004488 <DMA_SetConfig+0x23c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a71      	ldr	r2, [pc, #452]	@ (800448c <DMA_SetConfig+0x240>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a70      	ldr	r2, [pc, #448]	@ (8004490 <DMA_SetConfig+0x244>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004494 <DMA_SetConfig+0x248>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004498 <DMA_SetConfig+0x24c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6b      	ldr	r2, [pc, #428]	@ (800449c <DMA_SetConfig+0x250>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6a      	ldr	r2, [pc, #424]	@ (80044a0 <DMA_SetConfig+0x254>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <DMA_SetConfig+0x10a>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a68      	ldr	r2, [pc, #416]	@ (80044a4 <DMA_SetConfig+0x258>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a67      	ldr	r2, [pc, #412]	@ (80044a8 <DMA_SetConfig+0x25c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a65      	ldr	r2, [pc, #404]	@ (80044ac <DMA_SetConfig+0x260>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a64      	ldr	r2, [pc, #400]	@ (80044b0 <DMA_SetConfig+0x264>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a62      	ldr	r2, [pc, #392]	@ (80044b4 <DMA_SetConfig+0x268>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a61      	ldr	r2, [pc, #388]	@ (80044b8 <DMA_SetConfig+0x26c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5f      	ldr	r2, [pc, #380]	@ (80044bc <DMA_SetConfig+0x270>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <DMA_SetConfig+0x10a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5e      	ldr	r2, [pc, #376]	@ (80044c0 <DMA_SetConfig+0x274>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <DMA_SetConfig+0x10a>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <DMA_SetConfig+0x278>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d101      	bne.n	800435a <DMA_SetConfig+0x10e>
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <DMA_SetConfig+0x110>
 800435a:	2300      	movs	r3, #0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00d      	beq.n	800437c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004368:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800437a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a39      	ldr	r2, [pc, #228]	@ (8004468 <DMA_SetConfig+0x21c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d04a      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a38      	ldr	r2, [pc, #224]	@ (800446c <DMA_SetConfig+0x220>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d045      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a36      	ldr	r2, [pc, #216]	@ (8004470 <DMA_SetConfig+0x224>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d040      	beq.n	800441c <DMA_SetConfig+0x1d0>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a35      	ldr	r2, [pc, #212]	@ (8004474 <DMA_SetConfig+0x228>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d03b      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a33      	ldr	r2, [pc, #204]	@ (8004478 <DMA_SetConfig+0x22c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d036      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a32      	ldr	r2, [pc, #200]	@ (800447c <DMA_SetConfig+0x230>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d031      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <DMA_SetConfig+0x234>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02c      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <DMA_SetConfig+0x238>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d027      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004488 <DMA_SetConfig+0x23c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2c      	ldr	r2, [pc, #176]	@ (800448c <DMA_SetConfig+0x240>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d01d      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004490 <DMA_SetConfig+0x244>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a29      	ldr	r2, [pc, #164]	@ (8004494 <DMA_SetConfig+0x248>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a27      	ldr	r2, [pc, #156]	@ (8004498 <DMA_SetConfig+0x24c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <DMA_SetConfig+0x1d0>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a26      	ldr	r2, [pc, #152]	@ (800449c <DMA_SetConfig+0x250>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <DMA_SetConfig+0x254>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <DMA_SetConfig+0x1d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <DMA_SetConfig+0x258>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <DMA_SetConfig+0x1d4>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <DMA_SetConfig+0x1d6>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d059      	beq.n	80044da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	223f      	movs	r2, #63	@ 0x3f
 8004430:	409a      	lsls	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004444:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b40      	cmp	r3, #64	@ 0x40
 8004454:	d138      	bne.n	80044c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004466:	e086      	b.n	8004576 <DMA_SetConfig+0x32a>
 8004468:	40020010 	.word	0x40020010
 800446c:	40020028 	.word	0x40020028
 8004470:	40020040 	.word	0x40020040
 8004474:	40020058 	.word	0x40020058
 8004478:	40020070 	.word	0x40020070
 800447c:	40020088 	.word	0x40020088
 8004480:	400200a0 	.word	0x400200a0
 8004484:	400200b8 	.word	0x400200b8
 8004488:	40020410 	.word	0x40020410
 800448c:	40020428 	.word	0x40020428
 8004490:	40020440 	.word	0x40020440
 8004494:	40020458 	.word	0x40020458
 8004498:	40020470 	.word	0x40020470
 800449c:	40020488 	.word	0x40020488
 80044a0:	400204a0 	.word	0x400204a0
 80044a4:	400204b8 	.word	0x400204b8
 80044a8:	58025408 	.word	0x58025408
 80044ac:	5802541c 	.word	0x5802541c
 80044b0:	58025430 	.word	0x58025430
 80044b4:	58025444 	.word	0x58025444
 80044b8:	58025458 	.word	0x58025458
 80044bc:	5802546c 	.word	0x5802546c
 80044c0:	58025480 	.word	0x58025480
 80044c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
}
 80044d8:	e04d      	b.n	8004576 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a29      	ldr	r2, [pc, #164]	@ (8004584 <DMA_SetConfig+0x338>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d022      	beq.n	800452a <DMA_SetConfig+0x2de>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a27      	ldr	r2, [pc, #156]	@ (8004588 <DMA_SetConfig+0x33c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <DMA_SetConfig+0x2de>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a26      	ldr	r2, [pc, #152]	@ (800458c <DMA_SetConfig+0x340>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d018      	beq.n	800452a <DMA_SetConfig+0x2de>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <DMA_SetConfig+0x344>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <DMA_SetConfig+0x2de>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <DMA_SetConfig+0x348>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <DMA_SetConfig+0x2de>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <DMA_SetConfig+0x34c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <DMA_SetConfig+0x2de>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a20      	ldr	r2, [pc, #128]	@ (800459c <DMA_SetConfig+0x350>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <DMA_SetConfig+0x2de>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1e      	ldr	r2, [pc, #120]	@ (80045a0 <DMA_SetConfig+0x354>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <DMA_SetConfig+0x2e2>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <DMA_SetConfig+0x2e4>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d108      	bne.n	8004566 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	60da      	str	r2, [r3, #12]
}
 8004564:	e007      	b.n	8004576 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	58025408 	.word	0x58025408
 8004588:	5802541c 	.word	0x5802541c
 800458c:	58025430 	.word	0x58025430
 8004590:	58025444 	.word	0x58025444
 8004594:	58025458 	.word	0x58025458
 8004598:	5802546c 	.word	0x5802546c
 800459c:	58025480 	.word	0x58025480
 80045a0:	58025494 	.word	0x58025494

080045a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a42      	ldr	r2, [pc, #264]	@ (80046bc <DMA_CalcBaseAndBitshift+0x118>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d04a      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a41      	ldr	r2, [pc, #260]	@ (80046c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d045      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3f      	ldr	r2, [pc, #252]	@ (80046c4 <DMA_CalcBaseAndBitshift+0x120>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d040      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3e      	ldr	r2, [pc, #248]	@ (80046c8 <DMA_CalcBaseAndBitshift+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d03b      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3c      	ldr	r2, [pc, #240]	@ (80046cc <DMA_CalcBaseAndBitshift+0x128>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d036      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3b      	ldr	r2, [pc, #236]	@ (80046d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d031      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a39      	ldr	r2, [pc, #228]	@ (80046d4 <DMA_CalcBaseAndBitshift+0x130>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02c      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <DMA_CalcBaseAndBitshift+0x134>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d027      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a36      	ldr	r2, [pc, #216]	@ (80046dc <DMA_CalcBaseAndBitshift+0x138>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d022      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a35      	ldr	r2, [pc, #212]	@ (80046e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d01d      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a33      	ldr	r2, [pc, #204]	@ (80046e4 <DMA_CalcBaseAndBitshift+0x140>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d018      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a32      	ldr	r2, [pc, #200]	@ (80046e8 <DMA_CalcBaseAndBitshift+0x144>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <DMA_CalcBaseAndBitshift+0x148>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00e      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2f      	ldr	r2, [pc, #188]	@ (80046f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2d      	ldr	r2, [pc, #180]	@ (80046f4 <DMA_CalcBaseAndBitshift+0x150>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <DMA_CalcBaseAndBitshift+0xa8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2c      	ldr	r2, [pc, #176]	@ (80046f8 <DMA_CalcBaseAndBitshift+0x154>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <DMA_CalcBaseAndBitshift+0xac>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <DMA_CalcBaseAndBitshift+0xae>
 8004650:	2300      	movs	r3, #0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3b10      	subs	r3, #16
 800465e:	4a27      	ldr	r2, [pc, #156]	@ (80046fc <DMA_CalcBaseAndBitshift+0x158>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	4a24      	ldr	r2, [pc, #144]	@ (8004700 <DMA_CalcBaseAndBitshift+0x15c>)
 8004670:	5cd3      	ldrb	r3, [r2, r3]
 8004672:	461a      	mov	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d908      	bls.n	8004690 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	4b1f      	ldr	r3, [pc, #124]	@ (8004704 <DMA_CalcBaseAndBitshift+0x160>)
 8004686:	4013      	ands	r3, r2
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	659a      	str	r2, [r3, #88]	@ 0x58
 800468e:	e00d      	b.n	80046ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <DMA_CalcBaseAndBitshift+0x160>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6593      	str	r3, [r2, #88]	@ 0x58
 800469e:	e005      	b.n	80046ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40020010 	.word	0x40020010
 80046c0:	40020028 	.word	0x40020028
 80046c4:	40020040 	.word	0x40020040
 80046c8:	40020058 	.word	0x40020058
 80046cc:	40020070 	.word	0x40020070
 80046d0:	40020088 	.word	0x40020088
 80046d4:	400200a0 	.word	0x400200a0
 80046d8:	400200b8 	.word	0x400200b8
 80046dc:	40020410 	.word	0x40020410
 80046e0:	40020428 	.word	0x40020428
 80046e4:	40020440 	.word	0x40020440
 80046e8:	40020458 	.word	0x40020458
 80046ec:	40020470 	.word	0x40020470
 80046f0:	40020488 	.word	0x40020488
 80046f4:	400204a0 	.word	0x400204a0
 80046f8:	400204b8 	.word	0x400204b8
 80046fc:	aaaaaaab 	.word	0xaaaaaaab
 8004700:	0800afb8 	.word	0x0800afb8
 8004704:	fffffc00 	.word	0xfffffc00

08004708 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d120      	bne.n	800475e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	2b03      	cmp	r3, #3
 8004722:	d858      	bhi.n	80047d6 <DMA_CheckFifoParam+0xce>
 8004724:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <DMA_CheckFifoParam+0x24>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	0800473d 	.word	0x0800473d
 8004730:	0800474f 	.word	0x0800474f
 8004734:	0800473d 	.word	0x0800473d
 8004738:	080047d7 	.word	0x080047d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d048      	beq.n	80047da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800474c:	e045      	b.n	80047da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004756:	d142      	bne.n	80047de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800475c:	e03f      	b.n	80047de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004766:	d123      	bne.n	80047b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	2b03      	cmp	r3, #3
 800476e:	d838      	bhi.n	80047e2 <DMA_CheckFifoParam+0xda>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <DMA_CheckFifoParam+0x70>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	08004789 	.word	0x08004789
 800477c:	0800478f 	.word	0x0800478f
 8004780:	08004789 	.word	0x08004789
 8004784:	080047a1 	.word	0x080047a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
        break;
 800478c:	e030      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d025      	beq.n	80047e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800479e:	e022      	b.n	80047e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047a8:	d11f      	bne.n	80047ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047ae:	e01c      	b.n	80047ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d902      	bls.n	80047be <DMA_CheckFifoParam+0xb6>
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d003      	beq.n	80047c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80047bc:	e018      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
        break;
 80047c2:	e015      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
    break;
 80047d4:	e00b      	b.n	80047ee <DMA_CheckFifoParam+0xe6>
        break;
 80047d6:	bf00      	nop
 80047d8:	e00a      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047da:	bf00      	nop
 80047dc:	e008      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047de:	bf00      	nop
 80047e0:	e006      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047e2:	bf00      	nop
 80047e4:	e004      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
        break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <DMA_CheckFifoParam+0xe8>
    break;
 80047ee:	bf00      	nop
    }
  }

  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a38      	ldr	r2, [pc, #224]	@ (80048f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d022      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a36      	ldr	r2, [pc, #216]	@ (80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01d      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	@ (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d018      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	@ (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d013      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00e      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d009      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	@ (800490c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d004      	beq.n	800485e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	@ (8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d101      	bne.n	8004862 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01a      	beq.n	800489e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3b08      	subs	r3, #8
 8004870:	4a28      	ldr	r2, [pc, #160]	@ (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4b26      	ldr	r3, [pc, #152]	@ (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a24      	ldr	r2, [pc, #144]	@ (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800488c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800489c:	e024      	b.n	80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3b10      	subs	r3, #16
 80048a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d806      	bhi.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d902      	bls.n	80048c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3308      	adds	r3, #8
 80048c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4b18      	ldr	r3, [pc, #96]	@ (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80048d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	58025408 	.word	0x58025408
 80048f8:	5802541c 	.word	0x5802541c
 80048fc:	58025430 	.word	0x58025430
 8004900:	58025444 	.word	0x58025444
 8004904:	58025458 	.word	0x58025458
 8004908:	5802546c 	.word	0x5802546c
 800490c:	58025480 	.word	0x58025480
 8004910:	58025494 	.word	0x58025494
 8004914:	cccccccd 	.word	0xcccccccd
 8004918:	16009600 	.word	0x16009600
 800491c:	58025880 	.word	0x58025880
 8004920:	aaaaaaab 	.word	0xaaaaaaab
 8004924:	400204b8 	.word	0x400204b8
 8004928:	4002040f 	.word	0x4002040f
 800492c:	10008200 	.word	0x10008200
 8004930:	40020880 	.word	0x40020880

08004934 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d04a      	beq.n	80049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d847      	bhi.n	80049e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a25      	ldr	r2, [pc, #148]	@ (80049ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a24      	ldr	r2, [pc, #144]	@ (80049f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a22      	ldr	r2, [pc, #136]	@ (80049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a21      	ldr	r2, [pc, #132]	@ (80049f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1e      	ldr	r2, [pc, #120]	@ (8004a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1c      	ldr	r2, [pc, #112]	@ (8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80049bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80049be:	e009      	b.n	80049d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a11      	ldr	r2, [pc, #68]	@ (8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80049d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80049e0:	bf00      	nop
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	58025408 	.word	0x58025408
 80049f0:	5802541c 	.word	0x5802541c
 80049f4:	58025430 	.word	0x58025430
 80049f8:	58025444 	.word	0x58025444
 80049fc:	58025458 	.word	0x58025458
 8004a00:	5802546c 	.word	0x5802546c
 8004a04:	58025480 	.word	0x58025480
 8004a08:	58025494 	.word	0x58025494
 8004a0c:	1600963f 	.word	0x1600963f
 8004a10:	58025940 	.word	0x58025940
 8004a14:	1000823f 	.word	0x1000823f
 8004a18:	40020940 	.word	0x40020940

08004a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a2a:	4b86      	ldr	r3, [pc, #536]	@ (8004c44 <HAL_GPIO_Init+0x228>)
 8004a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a2e:	e18c      	b.n	8004d4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	2101      	movs	r1, #1
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 817e 	beq.w	8004d44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d005      	beq.n	8004a60 <HAL_GPIO_Init+0x44>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d130      	bne.n	8004ac2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4013      	ands	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a96:	2201      	movs	r2, #1
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	f003 0201 	and.w	r2, r3, #1
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d017      	beq.n	8004afe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d123      	bne.n	8004b52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	08da      	lsrs	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3208      	adds	r2, #8
 8004b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	08da      	lsrs	r2, r3, #3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	69b9      	ldr	r1, [r7, #24]
 8004b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f003 0203 	and.w	r2, r3, #3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80d8 	beq.w	8004d44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b94:	4b2c      	ldr	r3, [pc, #176]	@ (8004c48 <HAL_GPIO_Init+0x22c>)
 8004b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b9a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c48 <HAL_GPIO_Init+0x22c>)
 8004b9c:	f043 0302 	orr.w	r3, r3, #2
 8004ba0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ba4:	4b28      	ldr	r3, [pc, #160]	@ (8004c48 <HAL_GPIO_Init+0x22c>)
 8004ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb2:	4a26      	ldr	r2, [pc, #152]	@ (8004c4c <HAL_GPIO_Init+0x230>)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	220f      	movs	r2, #15
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <HAL_GPIO_Init+0x234>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04a      	beq.n	8004c74 <HAL_GPIO_Init+0x258>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <HAL_GPIO_Init+0x238>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d02b      	beq.n	8004c3e <HAL_GPIO_Init+0x222>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_GPIO_Init+0x23c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d025      	beq.n	8004c3a <HAL_GPIO_Init+0x21e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c5c <HAL_GPIO_Init+0x240>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01f      	beq.n	8004c36 <HAL_GPIO_Init+0x21a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	@ (8004c60 <HAL_GPIO_Init+0x244>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d019      	beq.n	8004c32 <HAL_GPIO_Init+0x216>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a18      	ldr	r2, [pc, #96]	@ (8004c64 <HAL_GPIO_Init+0x248>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_GPIO_Init+0x212>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a17      	ldr	r2, [pc, #92]	@ (8004c68 <HAL_GPIO_Init+0x24c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00d      	beq.n	8004c2a <HAL_GPIO_Init+0x20e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <HAL_GPIO_Init+0x250>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <HAL_GPIO_Init+0x20a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a15      	ldr	r2, [pc, #84]	@ (8004c70 <HAL_GPIO_Init+0x254>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_GPIO_Init+0x206>
 8004c1e:	2309      	movs	r3, #9
 8004c20:	e029      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c22:	230a      	movs	r3, #10
 8004c24:	e027      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c26:	2307      	movs	r3, #7
 8004c28:	e025      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c2a:	2306      	movs	r3, #6
 8004c2c:	e023      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c2e:	2305      	movs	r3, #5
 8004c30:	e021      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c32:	2304      	movs	r3, #4
 8004c34:	e01f      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c36:	2303      	movs	r3, #3
 8004c38:	e01d      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e01b      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e019      	b.n	8004c76 <HAL_GPIO_Init+0x25a>
 8004c42:	bf00      	nop
 8004c44:	58000080 	.word	0x58000080
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	58000400 	.word	0x58000400
 8004c50:	58020000 	.word	0x58020000
 8004c54:	58020400 	.word	0x58020400
 8004c58:	58020800 	.word	0x58020800
 8004c5c:	58020c00 	.word	0x58020c00
 8004c60:	58021000 	.word	0x58021000
 8004c64:	58021400 	.word	0x58021400
 8004c68:	58021800 	.word	0x58021800
 8004c6c:	58021c00 	.word	0x58021c00
 8004c70:	58022400 	.word	0x58022400
 8004c74:	2300      	movs	r3, #0
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	f002 0203 	and.w	r2, r2, #3
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	4093      	lsls	r3, r2
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c86:	4938      	ldr	r1, [pc, #224]	@ (8004d68 <HAL_GPIO_Init+0x34c>)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ce8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3301      	adds	r3, #1
 8004d48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f ae6b 	bne.w	8004a30 <HAL_GPIO_Init+0x14>
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	3724      	adds	r7, #36	@ 0x24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	58000400 	.word	0x58000400

08004d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d7c:	787b      	ldrb	r3, [r7, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d88:	e003      	b.n	8004d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	041a      	lsls	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	619a      	str	r2, [r3, #24]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	460b      	mov	r3, r1
 8004da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004db0:	887a      	ldrh	r2, [r7, #2]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4013      	ands	r3, r2
 8004db6:	041a      	lsls	r2, r3, #16
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	43d9      	mvns	r1, r3
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	400b      	ands	r3, r1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	619a      	str	r2, [r3, #24]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	4603      	mov	r3, r0
 8004dda:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fb ffa7 	bl	8000d4c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004e10:	4b19      	ldr	r3, [pc, #100]	@ (8004e78 <HAL_PWREx_ConfigSupply+0x70>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d00a      	beq.n	8004e32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e1c:	4b16      	ldr	r3, [pc, #88]	@ (8004e78 <HAL_PWREx_ConfigSupply+0x70>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d001      	beq.n	8004e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e01f      	b.n	8004e6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e01d      	b.n	8004e6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e32:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <HAL_PWREx_ConfigSupply+0x70>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 0207 	bic.w	r2, r3, #7
 8004e3a:	490f      	ldr	r1, [pc, #60]	@ (8004e78 <HAL_PWREx_ConfigSupply+0x70>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e42:	f7fc fbf5 	bl	8001630 <HAL_GetTick>
 8004e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e48:	e009      	b.n	8004e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e4a:	f7fc fbf1 	bl	8001630 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e58:	d901      	bls.n	8004e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e007      	b.n	8004e6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_PWREx_ConfigSupply+0x70>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6a:	d1ee      	bne.n	8004e4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	58024800 	.word	0x58024800

08004e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	@ 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e3c8      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8087 	beq.w	8004faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9c:	4b88      	ldr	r3, [pc, #544]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ea6:	4b86      	ldr	r3, [pc, #536]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d007      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x46>
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	2b18      	cmp	r3, #24
 8004eb6:	d110      	bne.n	8004eda <HAL_RCC_OscConfig+0x5e>
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d10b      	bne.n	8004eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d06c      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d168      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e3a2      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee2:	d106      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x76>
 8004ee4:	4b76      	ldr	r3, [pc, #472]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a75      	ldr	r2, [pc, #468]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e02e      	b.n	8004f50 <HAL_RCC_OscConfig+0xd4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x98>
 8004efa:	4b71      	ldr	r3, [pc, #452]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a70      	ldr	r2, [pc, #448]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	4b6e      	ldr	r3, [pc, #440]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e01d      	b.n	8004f50 <HAL_RCC_OscConfig+0xd4>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0xbc>
 8004f1e:	4b68      	ldr	r3, [pc, #416]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a67      	ldr	r2, [pc, #412]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b65      	ldr	r3, [pc, #404]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a64      	ldr	r2, [pc, #400]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0xd4>
 8004f38:	4b61      	ldr	r3, [pc, #388]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a60      	ldr	r2, [pc, #384]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	4b5e      	ldr	r3, [pc, #376]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5d      	ldr	r2, [pc, #372]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d013      	beq.n	8004f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fc fb6a 	bl	8001630 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f60:	f7fc fb66 	bl	8001630 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b64      	cmp	r3, #100	@ 0x64
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e356      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f72:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0f0      	beq.n	8004f60 <HAL_RCC_OscConfig+0xe4>
 8004f7e:	e014      	b.n	8004faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fc fb56 	bl	8001630 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f88:	f7fc fb52 	bl	8001630 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	@ 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e342      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f9a:	4b49      	ldr	r3, [pc, #292]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x10c>
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 808c 	beq.w	80050d0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb8:	4b41      	ldr	r3, [pc, #260]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_RCC_OscConfig+0x162>
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	2b18      	cmp	r3, #24
 8004fd2:	d137      	bne.n	8005044 <HAL_RCC_OscConfig+0x1c8>
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d132      	bne.n	8005044 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fde:	4b38      	ldr	r3, [pc, #224]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x17a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e314      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ff6:	4b32      	ldr	r3, [pc, #200]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0219 	bic.w	r2, r3, #25
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	492f      	ldr	r1, [pc, #188]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005004:	4313      	orrs	r3, r2
 8005006:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fc fb12 	bl	8001630 <HAL_GetTick>
 800500c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005010:	f7fc fb0e 	bl	8001630 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e2fe      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005022:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502e:	4b24      	ldr	r3, [pc, #144]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	061b      	lsls	r3, r3, #24
 800503c:	4920      	ldr	r1, [pc, #128]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005042:	e045      	b.n	80050d0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d026      	beq.n	800509a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800504c:	4b1c      	ldr	r3, [pc, #112]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f023 0219 	bic.w	r2, r3, #25
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4919      	ldr	r1, [pc, #100]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc fae7 	bl	8001630 <HAL_GetTick>
 8005062:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005066:	f7fc fae3 	bl	8001630 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e2d3      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005078:	4b11      	ldr	r3, [pc, #68]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005084:	4b0e      	ldr	r3, [pc, #56]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	061b      	lsls	r3, r3, #24
 8005092:	490b      	ldr	r1, [pc, #44]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
 8005098:	e01a      	b.n	80050d0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <HAL_RCC_OscConfig+0x244>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fc fac3 	bl	8001630 <HAL_GetTick>
 80050aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ae:	f7fc fabf 	bl	8001630 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d903      	bls.n	80050c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e2af      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
 80050c0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050c4:	4b96      	ldr	r3, [pc, #600]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ee      	bne.n	80050ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d06a      	beq.n	80051b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050dc:	4b90      	ldr	r3, [pc, #576]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050e4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050e6:	4b8e      	ldr	r3, [pc, #568]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80050e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d007      	beq.n	8005102 <HAL_RCC_OscConfig+0x286>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b18      	cmp	r3, #24
 80050f6:	d11b      	bne.n	8005130 <HAL_RCC_OscConfig+0x2b4>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d116      	bne.n	8005130 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005102:	4b87      	ldr	r3, [pc, #540]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_RCC_OscConfig+0x29e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b80      	cmp	r3, #128	@ 0x80
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e282      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800511a:	4b81      	ldr	r3, [pc, #516]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	497d      	ldr	r1, [pc, #500]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800512a:	4313      	orrs	r3, r2
 800512c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800512e:	e040      	b.n	80051b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d023      	beq.n	8005180 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005138:	4b79      	ldr	r3, [pc, #484]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a78      	ldr	r2, [pc, #480]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800513e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fc fa74 	bl	8001630 <HAL_GetTick>
 8005148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800514c:	f7fc fa70 	bl	8001630 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e260      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800515e:	4b70      	ldr	r3, [pc, #448]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800516a:	4b6d      	ldr	r3, [pc, #436]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	061b      	lsls	r3, r3, #24
 8005178:	4969      	ldr	r1, [pc, #420]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800517a:	4313      	orrs	r3, r2
 800517c:	60cb      	str	r3, [r1, #12]
 800517e:	e018      	b.n	80051b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005180:	4b67      	ldr	r3, [pc, #412]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a66      	ldr	r2, [pc, #408]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fc fa50 	bl	8001630 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005194:	f7fc fa4c 	bl	8001630 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e23c      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80051a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d036      	beq.n	800522c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d019      	beq.n	80051fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c6:	4b56      	ldr	r3, [pc, #344]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	4a55      	ldr	r2, [pc, #340]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fc fa2d 	bl	8001630 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051da:	f7fc fa29 	bl	8001630 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e219      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x35e>
 80051f8:	e018      	b.n	800522c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fa:	4b49      	ldr	r3, [pc, #292]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80051fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fe:	4a48      	ldr	r2, [pc, #288]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fc fa13 	bl	8001630 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520e:	f7fc fa0f 	bl	8001630 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e1ff      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005220:	4b3f      	ldr	r3, [pc, #252]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d036      	beq.n	80052a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005240:	4b37      	ldr	r3, [pc, #220]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a36      	ldr	r2, [pc, #216]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005246:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800524a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800524c:	f7fc f9f0 	bl	8001630 <HAL_GetTick>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005254:	f7fc f9ec 	bl	8001630 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1dc      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005266:	4b2e      	ldr	r3, [pc, #184]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x3d8>
 8005272:	e018      	b.n	80052a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005274:	4b2a      	ldr	r3, [pc, #168]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a29      	ldr	r2, [pc, #164]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800527a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800527e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005280:	f7fc f9d6 	bl	8001630 <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005288:	f7fc f9d2 	bl	8001630 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e1c2      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800529a:	4b21      	ldr	r3, [pc, #132]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8086 	beq.w	80053c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <HAL_RCC_OscConfig+0x4a8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005324 <HAL_RCC_OscConfig+0x4a8>)
 80052ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c0:	f7fc f9b6 	bl	8001630 <HAL_GetTick>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c8:	f7fc f9b2 	bl	8001630 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	@ 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1a2      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052da:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCC_OscConfig+0x4a8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d106      	bne.n	80052fc <HAL_RCC_OscConfig+0x480>
 80052ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fa:	e032      	b.n	8005362 <HAL_RCC_OscConfig+0x4e6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d111      	bne.n	8005328 <HAL_RCC_OscConfig+0x4ac>
 8005304:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005308:	4a05      	ldr	r2, [pc, #20]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005310:	4b03      	ldr	r3, [pc, #12]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005314:	4a02      	ldr	r2, [pc, #8]	@ (8005320 <HAL_RCC_OscConfig+0x4a4>)
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	6713      	str	r3, [r2, #112]	@ 0x70
 800531c:	e021      	b.n	8005362 <HAL_RCC_OscConfig+0x4e6>
 800531e:	bf00      	nop
 8005320:	58024400 	.word	0x58024400
 8005324:	58024800 	.word	0x58024800
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b05      	cmp	r3, #5
 800532e:	d10c      	bne.n	800534a <HAL_RCC_OscConfig+0x4ce>
 8005330:	4b83      	ldr	r3, [pc, #524]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005334:	4a82      	ldr	r2, [pc, #520]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005336:	f043 0304 	orr.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	4b80      	ldr	r3, [pc, #512]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	4a7f      	ldr	r2, [pc, #508]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6713      	str	r3, [r2, #112]	@ 0x70
 8005348:	e00b      	b.n	8005362 <HAL_RCC_OscConfig+0x4e6>
 800534a:	4b7d      	ldr	r3, [pc, #500]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534e:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6713      	str	r3, [r2, #112]	@ 0x70
 8005356:	4b7a      	ldr	r3, [pc, #488]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	4a79      	ldr	r2, [pc, #484]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d015      	beq.n	8005396 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536a:	f7fc f961 	bl	8001630 <HAL_GetTick>
 800536e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005370:	e00a      	b.n	8005388 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fc f95d 	bl	8001630 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e14b      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005388:	4b6d      	ldr	r3, [pc, #436]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800538a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0ee      	beq.n	8005372 <HAL_RCC_OscConfig+0x4f6>
 8005394:	e014      	b.n	80053c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005396:	f7fc f94b 	bl	8001630 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539e:	f7fc f947 	bl	8001630 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e135      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053b4:	4b62      	ldr	r3, [pc, #392]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ee      	bne.n	800539e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 812a 	beq.w	800561e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d2:	2b18      	cmp	r3, #24
 80053d4:	f000 80ba 	beq.w	800554c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	2b02      	cmp	r3, #2
 80053de:	f040 8095 	bne.w	800550c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b57      	ldr	r3, [pc, #348]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a56      	ldr	r2, [pc, #344]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80053e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ee:	f7fc f91f 	bl	8001630 <HAL_GetTick>
 80053f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fc f91b 	bl	8001630 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e10b      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005408:	4b4d      	ldr	r3, [pc, #308]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005414:	4b4a      	ldr	r3, [pc, #296]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005416:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005418:	4b4a      	ldr	r3, [pc, #296]	@ (8005544 <HAL_RCC_OscConfig+0x6c8>)
 800541a:	4013      	ands	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005424:	0112      	lsls	r2, r2, #4
 8005426:	430a      	orrs	r2, r1
 8005428:	4945      	ldr	r1, [pc, #276]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	628b      	str	r3, [r1, #40]	@ 0x28
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	3b01      	subs	r3, #1
 8005434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543c:	3b01      	subs	r3, #1
 800543e:	025b      	lsls	r3, r3, #9
 8005440:	b29b      	uxth	r3, r3
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005448:	3b01      	subs	r3, #1
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005456:	3b01      	subs	r3, #1
 8005458:	061b      	lsls	r3, r3, #24
 800545a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800545e:	4938      	ldr	r1, [pc, #224]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005464:	4b36      	ldr	r3, [pc, #216]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	4a35      	ldr	r2, [pc, #212]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005470:	4b33      	ldr	r3, [pc, #204]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005474:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <HAL_RCC_OscConfig+0x6cc>)
 8005476:	4013      	ands	r3, r2
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800547c:	00d2      	lsls	r2, r2, #3
 800547e:	4930      	ldr	r1, [pc, #192]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005480:	4313      	orrs	r3, r2
 8005482:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005484:	4b2e      	ldr	r3, [pc, #184]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	f023 020c 	bic.w	r2, r3, #12
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	492b      	ldr	r1, [pc, #172]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005496:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	f023 0202 	bic.w	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	4927      	ldr	r1, [pc, #156]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054a8:	4b25      	ldr	r3, [pc, #148]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	4a24      	ldr	r2, [pc, #144]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b22      	ldr	r3, [pc, #136]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a21      	ldr	r2, [pc, #132]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80054cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 80054de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fc f8a4 	bl	8001630 <HAL_GetTick>
 80054e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fc f8a0 	bl	8001630 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e090      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0x670>
 800550a:	e088      	b.n	800561e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550c:	4b0c      	ldr	r3, [pc, #48]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a0b      	ldr	r2, [pc, #44]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fc f88a 	bl	8001630 <HAL_GetTick>
 800551c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7fc f886 	bl	8001630 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e076      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005532:	4b03      	ldr	r3, [pc, #12]	@ (8005540 <HAL_RCC_OscConfig+0x6c4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x6a4>
 800553e:	e06e      	b.n	800561e <HAL_RCC_OscConfig+0x7a2>
 8005540:	58024400 	.word	0x58024400
 8005544:	fffffc0c 	.word	0xfffffc0c
 8005548:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800554c:	4b36      	ldr	r3, [pc, #216]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005552:	4b35      	ldr	r3, [pc, #212]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	2b01      	cmp	r3, #1
 800555e:	d031      	beq.n	80055c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f003 0203 	and.w	r2, r3, #3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d12a      	bne.n	80055c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	091b      	lsrs	r3, r3, #4
 8005572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d122      	bne.n	80055c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d11a      	bne.n	80055c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	0a5b      	lsrs	r3, r3, #9
 8005592:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d111      	bne.n	80055c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	0c1b      	lsrs	r3, r3, #16
 80055a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d108      	bne.n	80055c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	0e1b      	lsrs	r3, r3, #24
 80055b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e02b      	b.n	8005620 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80055c8:	4b17      	ldr	r3, [pc, #92]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 80055ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055cc:	08db      	lsrs	r3, r3, #3
 80055ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d01f      	beq.n	800561e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80055de:	4b12      	ldr	r3, [pc, #72]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	4a11      	ldr	r2, [pc, #68]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055ea:	f7fc f821 	bl	8001630 <HAL_GetTick>
 80055ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80055f0:	bf00      	nop
 80055f2:	f7fc f81d 	bl	8001630 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d0f9      	beq.n	80055f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 8005600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005602:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <HAL_RCC_OscConfig+0x7b0>)
 8005604:	4013      	ands	r3, r2
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800560a:	00d2      	lsls	r2, r2, #3
 800560c:	4906      	ldr	r1, [pc, #24]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 800560e:	4313      	orrs	r3, r2
 8005610:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005612:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <HAL_RCC_OscConfig+0x7ac>)
 8005618:	f043 0301 	orr.w	r3, r3, #1
 800561c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3730      	adds	r7, #48	@ 0x30
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	58024400 	.word	0x58024400
 800562c:	ffff0007 	.word	0xffff0007

08005630 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e19c      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005644:	4b8a      	ldr	r3, [pc, #552]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d910      	bls.n	8005674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005652:	4b87      	ldr	r3, [pc, #540]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 020f 	bic.w	r2, r3, #15
 800565a:	4985      	ldr	r1, [pc, #532]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	4313      	orrs	r3, r2
 8005660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005662:	4b83      	ldr	r3, [pc, #524]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d001      	beq.n	8005674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e184      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d010      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	4b7b      	ldr	r3, [pc, #492]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800568c:	429a      	cmp	r2, r3
 800568e:	d908      	bls.n	80056a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005690:	4b78      	ldr	r3, [pc, #480]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	4975      	ldr	r1, [pc, #468]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	4b70      	ldr	r3, [pc, #448]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d908      	bls.n	80056d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056be:	4b6d      	ldr	r3, [pc, #436]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	496a      	ldr	r1, [pc, #424]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d010      	beq.n	80056fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	4b64      	ldr	r3, [pc, #400]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d908      	bls.n	80056fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056ec:	4b61      	ldr	r3, [pc, #388]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	495e      	ldr	r1, [pc, #376]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d010      	beq.n	800572c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69da      	ldr	r2, [r3, #28]
 800570e:	4b59      	ldr	r3, [pc, #356]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005716:	429a      	cmp	r2, r3
 8005718:	d908      	bls.n	800572c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800571a:	4b56      	ldr	r3, [pc, #344]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4953      	ldr	r1, [pc, #332]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005728:	4313      	orrs	r3, r2
 800572a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	4b4d      	ldr	r3, [pc, #308]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	429a      	cmp	r2, r3
 8005746:	d908      	bls.n	800575a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005748:	4b4a      	ldr	r3, [pc, #296]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f023 020f 	bic.w	r2, r3, #15
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4947      	ldr	r1, [pc, #284]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005756:	4313      	orrs	r3, r2
 8005758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d055      	beq.n	8005812 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005766:	4b43      	ldr	r3, [pc, #268]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	4940      	ldr	r1, [pc, #256]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005774:	4313      	orrs	r3, r2
 8005776:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d107      	bne.n	8005790 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005780:	4b3c      	ldr	r3, [pc, #240]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d121      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0f6      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005798:	4b36      	ldr	r3, [pc, #216]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d115      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0ea      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057b0:	4b30      	ldr	r3, [pc, #192]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0de      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0d6      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057d0:	4b28      	ldr	r3, [pc, #160]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f023 0207 	bic.w	r2, r3, #7
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4925      	ldr	r1, [pc, #148]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e2:	f7fb ff25 	bl	8001630 <HAL_GetTick>
 80057e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e8:	e00a      	b.n	8005800 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ea:	f7fb ff21 	bl	8001630 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0be      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005800:	4b1c      	ldr	r3, [pc, #112]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	429a      	cmp	r2, r3
 8005810:	d1eb      	bne.n	80057ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d010      	beq.n	8005840 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	4b14      	ldr	r3, [pc, #80]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	429a      	cmp	r2, r3
 800582c:	d208      	bcs.n	8005840 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800582e:	4b11      	ldr	r3, [pc, #68]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f023 020f 	bic.w	r2, r3, #15
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	490e      	ldr	r1, [pc, #56]	@ (8005874 <HAL_RCC_ClockConfig+0x244>)
 800583c:	4313      	orrs	r3, r2
 800583e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d214      	bcs.n	8005878 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584e:	4b08      	ldr	r3, [pc, #32]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f023 020f 	bic.w	r2, r3, #15
 8005856:	4906      	ldr	r1, [pc, #24]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b04      	ldr	r3, [pc, #16]	@ (8005870 <HAL_RCC_ClockConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e086      	b.n	800597e <HAL_RCC_ClockConfig+0x34e>
 8005870:	52002000 	.word	0x52002000
 8005874:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	4b3f      	ldr	r3, [pc, #252]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005890:	429a      	cmp	r2, r3
 8005892:	d208      	bcs.n	80058a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005894:	4b3c      	ldr	r3, [pc, #240]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	4939      	ldr	r1, [pc, #228]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	4b34      	ldr	r3, [pc, #208]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058be:	429a      	cmp	r2, r3
 80058c0:	d208      	bcs.n	80058d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058c2:	4b31      	ldr	r3, [pc, #196]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	492e      	ldr	r1, [pc, #184]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699a      	ldr	r2, [r3, #24]
 80058e4:	4b28      	ldr	r3, [pc, #160]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d208      	bcs.n	8005902 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80058f0:	4b25      	ldr	r3, [pc, #148]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4922      	ldr	r1, [pc, #136]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d010      	beq.n	8005930 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69da      	ldr	r2, [r3, #28]
 8005912:	4b1d      	ldr	r3, [pc, #116]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800591a:	429a      	cmp	r2, r3
 800591c:	d208      	bcs.n	8005930 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800591e:	4b1a      	ldr	r3, [pc, #104]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	4917      	ldr	r1, [pc, #92]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 800592c:	4313      	orrs	r3, r2
 800592e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005930:	f000 f834 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b14      	ldr	r3, [pc, #80]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	4912      	ldr	r1, [pc, #72]	@ (800598c <HAL_RCC_ClockConfig+0x35c>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	fa22 f303 	lsr.w	r3, r2, r3
 800594c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800594e:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <HAL_RCC_ClockConfig+0x358>)
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	4a0d      	ldr	r2, [pc, #52]	@ (800598c <HAL_RCC_ClockConfig+0x35c>)
 8005958:	5cd3      	ldrb	r3, [r2, r3]
 800595a:	f003 031f 	and.w	r3, r3, #31
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	4a0a      	ldr	r2, [pc, #40]	@ (8005990 <HAL_RCC_ClockConfig+0x360>)
 8005966:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005968:	4a0a      	ldr	r2, [pc, #40]	@ (8005994 <HAL_RCC_ClockConfig+0x364>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800596e:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <HAL_RCC_ClockConfig+0x368>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7fb fe12 	bl	800159c <HAL_InitTick>
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	0800afa8 	.word	0x0800afa8
 8005990:	24000008 	.word	0x24000008
 8005994:	24000004 	.word	0x24000004
 8005998:	2400000c 	.word	0x2400000c

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	@ 0x24
 80059a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059a2:	4bb3      	ldr	r3, [pc, #716]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059aa:	2b18      	cmp	r3, #24
 80059ac:	f200 8155 	bhi.w	8005c5a <HAL_RCC_GetSysClockFreq+0x2be>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	08005a1d 	.word	0x08005a1d
 80059bc:	08005c5b 	.word	0x08005c5b
 80059c0:	08005c5b 	.word	0x08005c5b
 80059c4:	08005c5b 	.word	0x08005c5b
 80059c8:	08005c5b 	.word	0x08005c5b
 80059cc:	08005c5b 	.word	0x08005c5b
 80059d0:	08005c5b 	.word	0x08005c5b
 80059d4:	08005c5b 	.word	0x08005c5b
 80059d8:	08005a43 	.word	0x08005a43
 80059dc:	08005c5b 	.word	0x08005c5b
 80059e0:	08005c5b 	.word	0x08005c5b
 80059e4:	08005c5b 	.word	0x08005c5b
 80059e8:	08005c5b 	.word	0x08005c5b
 80059ec:	08005c5b 	.word	0x08005c5b
 80059f0:	08005c5b 	.word	0x08005c5b
 80059f4:	08005c5b 	.word	0x08005c5b
 80059f8:	08005a49 	.word	0x08005a49
 80059fc:	08005c5b 	.word	0x08005c5b
 8005a00:	08005c5b 	.word	0x08005c5b
 8005a04:	08005c5b 	.word	0x08005c5b
 8005a08:	08005c5b 	.word	0x08005c5b
 8005a0c:	08005c5b 	.word	0x08005c5b
 8005a10:	08005c5b 	.word	0x08005c5b
 8005a14:	08005c5b 	.word	0x08005c5b
 8005a18:	08005a4f 	.word	0x08005a4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a1c:	4b94      	ldr	r3, [pc, #592]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a28:	4b91      	ldr	r3, [pc, #580]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	08db      	lsrs	r3, r3, #3
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	4a90      	ldr	r2, [pc, #576]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
 8005a38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a3a:	e111      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a3c:	4b8d      	ldr	r3, [pc, #564]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a3e:	61bb      	str	r3, [r7, #24]
      break;
 8005a40:	e10e      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a42:	4b8d      	ldr	r3, [pc, #564]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a44:	61bb      	str	r3, [r7, #24]
      break;
 8005a46:	e10b      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a48:	4b8c      	ldr	r3, [pc, #560]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a4a:	61bb      	str	r3, [r7, #24]
      break;
 8005a4c:	e108      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a4e:	4b88      	ldr	r3, [pc, #544]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a58:	4b85      	ldr	r3, [pc, #532]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a64:	4b82      	ldr	r3, [pc, #520]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a6e:	4b80      	ldr	r3, [pc, #512]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80e1 	beq.w	8005c54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	f000 8083 	beq.w	8005ba0 <HAL_RCC_GetSysClockFreq+0x204>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	f200 80a1 	bhi.w	8005be4 <HAL_RCC_GetSysClockFreq+0x248>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x114>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d056      	beq.n	8005b5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005aae:	e099      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02d      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005abc:	4b6c      	ldr	r3, [pc, #432]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	08db      	lsrs	r3, r3, #3
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ae6:	4b62      	ldr	r3, [pc, #392]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005af6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005afa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005b16:	e087      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b2a:	4b51      	ldr	r3, [pc, #324]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b5a:	e065      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b6e:	4b40      	ldr	r3, [pc, #256]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b9e:	e043      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005be2:	e021      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c06:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c28:	4b11      	ldr	r3, [pc, #68]	@ (8005c70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2c:	0a5b      	lsrs	r3, r3, #9
 8005c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c32:	3301      	adds	r3, #1
 8005c34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4c:	ee17 3a90 	vmov	r3, s15
 8005c50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c52:	e005      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
      break;
 8005c58:	e002      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c5a:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c5c:	61bb      	str	r3, [r7, #24]
      break;
 8005c5e:	bf00      	nop
  }

  return sysclockfreq;
 8005c60:	69bb      	ldr	r3, [r7, #24]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	@ 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	58024400 	.word	0x58024400
 8005c74:	03d09000 	.word	0x03d09000
 8005c78:	003d0900 	.word	0x003d0900
 8005c7c:	017d7840 	.word	0x017d7840
 8005c80:	46000000 	.word	0x46000000
 8005c84:	4c742400 	.word	0x4c742400
 8005c88:	4a742400 	.word	0x4a742400
 8005c8c:	4bbebc20 	.word	0x4bbebc20

08005c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c96:	f7ff fe81 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	4b10      	ldr	r3, [pc, #64]	@ (8005ce0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	490f      	ldr	r1, [pc, #60]	@ (8005ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ca8:	5ccb      	ldrb	r3, [r1, r3]
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	4a09      	ldr	r2, [pc, #36]	@ (8005ce4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cbe:	5cd3      	ldrb	r3, [r2, r3]
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ccc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cce:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <HAL_RCC_GetHCLKFreq+0x5c>)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	0800afa8 	.word	0x0800afa8
 8005ce8:	24000008 	.word	0x24000008
 8005cec:	24000004 	.word	0x24000004

08005cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005cf4:	f7ff ffcc 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	4b06      	ldr	r3, [pc, #24]	@ (8005d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	4904      	ldr	r1, [pc, #16]	@ (8005d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d06:	5ccb      	ldrb	r3, [r1, r3]
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	58024400 	.word	0x58024400
 8005d18:	0800afa8 	.word	0x0800afa8

08005d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d20:	f7ff ffb6 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4904      	ldr	r1, [pc, #16]	@ (8005d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	58024400 	.word	0x58024400
 8005d44:	0800afa8 	.word	0x0800afa8

08005d48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d4c:	b0c6      	sub	sp, #280	@ 0x118
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d54:	2300      	movs	r3, #0
 8005d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005d6c:	2500      	movs	r5, #0
 8005d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8005d72:	d049      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d7e:	d02f      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d84:	d828      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d90:	d822      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d9a:	d007      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d9c:	e01c      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d9e:	4bab      	ldr	r3, [pc, #684]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	4aaa      	ldr	r2, [pc, #680]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005daa:	e01a      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db0:	3308      	adds	r3, #8
 8005db2:	2102      	movs	r1, #2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fc25 	bl	8007604 <RCCEx_PLL2_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dc0:	e00f      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc6:	3328      	adds	r3, #40	@ 0x28
 8005dc8:	2102      	movs	r1, #2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 fccc 	bl	8007768 <RCCEx_PLL3_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dd6:	e004      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005dea:	4b98      	ldr	r3, [pc, #608]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df8:	4a94      	ldr	r2, [pc, #592]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dfe:	e003      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005e14:	f04f 0900 	mov.w	r9, #0
 8005e18:	ea58 0309 	orrs.w	r3, r8, r9
 8005e1c:	d047      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d82a      	bhi.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e28:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e45 	.word	0x08005e45
 8005e34:	08005e53 	.word	0x08005e53
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e87 	.word	0x08005e87
 8005e40:	08005e87 	.word	0x08005e87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e44:	4b81      	ldr	r3, [pc, #516]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e48:	4a80      	ldr	r2, [pc, #512]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e50:	e01a      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e56:	3308      	adds	r3, #8
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f001 fbd2 	bl	8007604 <RCCEx_PLL2_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e66:	e00f      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e6c:	3328      	adds	r3, #40	@ 0x28
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f001 fc79 	bl	8007768 <RCCEx_PLL3_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e7c:	e004      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e90:	4b6e      	ldr	r3, [pc, #440]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e94:	f023 0107 	bic.w	r1, r3, #7
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ea4:	e003      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005eba:	f04f 0b00 	mov.w	fp, #0
 8005ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005ec2:	d05b      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ecc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ed0:	d03b      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005ed2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ed6:	d834      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005edc:	d037      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ee2:	d82e      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ee4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ee8:	d033      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005eea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005eee:	d828      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ef4:	d01a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005efa:	d822      	bhi.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f04:	d007      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005f06:	e01c      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f08:	4b50      	ldr	r3, [pc, #320]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f14:	e01e      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fb70 	bl	8007604 <RCCEx_PLL2_Config>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f2a:	e013      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f30:	3328      	adds	r3, #40	@ 0x28
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fc17 	bl	8007768 <RCCEx_PLL3_Config>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f40:	e008      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f48:	e004      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f4a:	bf00      	nop
 8005f4c:	e002      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f4e:	bf00      	nop
 8005f50:	e000      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10b      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f6c:	4a37      	ldr	r2, [pc, #220]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f6e:	430b      	orrs	r3, r1
 8005f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f72:	e003      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005f92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005f96:	460b      	mov	r3, r1
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	d05d      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fa0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fa4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005fa8:	d03b      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005faa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005fae:	d834      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fb4:	d037      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fba:	d82e      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fc0:	d033      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005fc6:	d828      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fcc:	d01a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fd2:	d822      	bhi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fdc:	d007      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005fde:	e01c      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fec:	e01e      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f001 fb04 	bl	8007604 <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006002:	e013      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006008:	3328      	adds	r3, #40	@ 0x28
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fbab 	bl	8007768 <RCCEx_PLL3_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006018:	e008      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006020:	e004      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006022:	bf00      	nop
 8006024:	e002      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006026:	bf00      	nop
 8006028:	e000      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800602a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800602c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10d      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006034:	4b05      	ldr	r3, [pc, #20]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006038:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006044:	4a01      	ldr	r2, [pc, #4]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006046:	430b      	orrs	r3, r1
 8006048:	6593      	str	r3, [r2, #88]	@ 0x58
 800604a:	e005      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800604c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006064:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800606e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d03a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800607e:	2b30      	cmp	r3, #48	@ 0x30
 8006080:	d01f      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006082:	2b30      	cmp	r3, #48	@ 0x30
 8006084:	d819      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d00c      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800608a:	2b20      	cmp	r3, #32
 800608c:	d815      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d019      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006092:	2b10      	cmp	r3, #16
 8006094:	d111      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006096:	4baa      	ldr	r3, [pc, #680]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	4aa9      	ldr	r2, [pc, #676]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800609c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060a2:	e011      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060a8:	3308      	adds	r3, #8
 80060aa:	2102      	movs	r1, #2
 80060ac:	4618      	mov	r0, r3
 80060ae:	f001 faa9 	bl	8007604 <RCCEx_PLL2_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80060d0:	4b9b      	ldr	r3, [pc, #620]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80060d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060de:	4a98      	ldr	r2, [pc, #608]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060e0:	430b      	orrs	r3, r1
 80060e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060e4:	e003      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80060ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80060fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060fe:	2300      	movs	r3, #0
 8006100:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006104:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006108:	460b      	mov	r3, r1
 800610a:	4313      	orrs	r3, r2
 800610c:	d051      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006118:	d035      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800611a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800611e:	d82e      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006124:	d031      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800612a:	d828      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006130:	d01a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006136:	d822      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800613c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006140:	d007      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006142:	e01c      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006144:	4b7e      	ldr	r3, [pc, #504]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	4a7d      	ldr	r2, [pc, #500]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800614a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800614e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006150:	e01c      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	3308      	adds	r3, #8
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f001 fa52 	bl	8007604 <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006166:	e011      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	3328      	adds	r3, #40	@ 0x28
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f001 faf9 	bl	8007768 <RCCEx_PLL3_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800617c:	e006      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006184:	e002      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800618a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006194:	4b6a      	ldr	r3, [pc, #424]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006198:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a2:	4a67      	ldr	r2, [pc, #412]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061a8:	e003      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80061be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061c2:	2300      	movs	r3, #0
 80061c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4313      	orrs	r3, r2
 80061d0:	d053      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061dc:	d033      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80061de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061e2:	d82c      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80061e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061e8:	d02f      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80061ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061ee:	d826      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80061f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061f4:	d02b      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80061f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061fa:	d820      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80061fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006200:	d012      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006206:	d81a      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d022      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006210:	d115      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006216:	3308      	adds	r3, #8
 8006218:	2101      	movs	r1, #1
 800621a:	4618      	mov	r0, r3
 800621c:	f001 f9f2 	bl	8007604 <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006226:	e015      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622c:	3328      	adds	r3, #40	@ 0x28
 800622e:	2101      	movs	r1, #1
 8006230:	4618      	mov	r0, r3
 8006232:	f001 fa99 	bl	8007768 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800623c:	e00a      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800625c:	4b38      	ldr	r3, [pc, #224]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800625e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626a:	4a35      	ldr	r2, [pc, #212]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800626c:	430b      	orrs	r3, r1
 800626e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006270:	e003      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006276:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800628a:	2300      	movs	r3, #0
 800628c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006290:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d058      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800629a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80062a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a6:	d033      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80062a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062ac:	d82c      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b2:	d02f      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b8:	d826      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062be:	d02b      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80062c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c4:	d820      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ca:	d012      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80062cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d0:	d81a      	bhi.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d022      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80062d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062da:	d115      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e0:	3308      	adds	r3, #8
 80062e2:	2101      	movs	r1, #1
 80062e4:	4618      	mov	r0, r3
 80062e6:	f001 f98d 	bl	8007604 <RCCEx_PLL2_Config>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062f0:	e015      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f6:	3328      	adds	r3, #40	@ 0x28
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fa34 	bl	8007768 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006306:	e00a      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800630e:	e006      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006310:	bf00      	nop
 8006312:	e004      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006314:	bf00      	nop
 8006316:	e002      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006318:	bf00      	nop
 800631a:	e000      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800631c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800631e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10e      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006326:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800632a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006332:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006336:	4a02      	ldr	r2, [pc, #8]	@ (8006340 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006338:	430b      	orrs	r3, r1
 800633a:	6593      	str	r3, [r2, #88]	@ 0x58
 800633c:	e006      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006362:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006366:	460b      	mov	r3, r1
 8006368:	4313      	orrs	r3, r2
 800636a:	d037      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006376:	d00e      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800637c:	d816      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d018      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006386:	d111      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006388:	4bc4      	ldr	r3, [pc, #784]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	4ac3      	ldr	r2, [pc, #780]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006394:	e00f      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639a:	3308      	adds	r3, #8
 800639c:	2101      	movs	r1, #1
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 f930 	bl	8007604 <RCCEx_PLL2_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063aa:	e004      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063b2:	e000      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80063b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063be:	4bb7      	ldr	r3, [pc, #732]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80063c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063cc:	4ab3      	ldr	r2, [pc, #716]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ce:	430b      	orrs	r3, r1
 80063d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80063e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d039      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80063fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006402:	2b03      	cmp	r3, #3
 8006404:	d81c      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006406:	a201      	add	r2, pc, #4	@ (adr r2, 800640c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006449 	.word	0x08006449
 8006410:	0800641d 	.word	0x0800641d
 8006414:	0800642b 	.word	0x0800642b
 8006418:	08006449 	.word	0x08006449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800641c:	4b9f      	ldr	r3, [pc, #636]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	4a9e      	ldr	r2, [pc, #632]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006428:	e00f      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	3308      	adds	r3, #8
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f8e6 	bl	8007604 <RCCEx_PLL2_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800643e:	e004      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006446:	e000      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006452:	4b92      	ldr	r3, [pc, #584]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006456:	f023 0103 	bic.w	r1, r3, #3
 800645a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006460:	4a8e      	ldr	r2, [pc, #568]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006462:	430b      	orrs	r3, r1
 8006464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006466:	e003      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800646c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800647c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006480:	2300      	movs	r3, #0
 8006482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800648a:	460b      	mov	r3, r1
 800648c:	4313      	orrs	r3, r2
 800648e:	f000 8099 	beq.w	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006492:	4b83      	ldr	r3, [pc, #524]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a82      	ldr	r2, [pc, #520]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800649c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800649e:	f7fb f8c7 	bl	8001630 <HAL_GetTick>
 80064a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064a6:	e00b      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064a8:	f7fb f8c2 	bl	8001630 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b64      	cmp	r3, #100	@ 0x64
 80064b6:	d903      	bls.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064be:	e005      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064c0:	4b77      	ldr	r3, [pc, #476]	@ (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ed      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80064cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d173      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80064d4:	4b71      	ldr	r3, [pc, #452]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064e0:	4053      	eors	r3, r2
 80064e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d015      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064ea:	4b6c      	ldr	r3, [pc, #432]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064f6:	4b69      	ldr	r3, [pc, #420]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	4a68      	ldr	r2, [pc, #416]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006500:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006502:	4b66      	ldr	r3, [pc, #408]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006506:	4a65      	ldr	r2, [pc, #404]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800650e:	4a63      	ldr	r2, [pc, #396]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800651e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006522:	d118      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006524:	f7fb f884 	bl	8001630 <HAL_GetTick>
 8006528:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800652c:	e00d      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652e:	f7fb f87f 	bl	8001630 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800653e:	429a      	cmp	r2, r3
 8006540:	d903      	bls.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006548:	e005      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800654a:	4b54      	ldr	r3, [pc, #336]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0eb      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800655a:	2b00      	cmp	r3, #0
 800655c:	d129      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800655e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006562:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800656a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800656e:	d10e      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006570:	4b4a      	ldr	r3, [pc, #296]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006580:	091a      	lsrs	r2, r3, #4
 8006582:	4b48      	ldr	r3, [pc, #288]	@ (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006584:	4013      	ands	r3, r2
 8006586:	4a45      	ldr	r2, [pc, #276]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006588:	430b      	orrs	r3, r1
 800658a:	6113      	str	r3, [r2, #16]
 800658c:	e005      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800658e:	4b43      	ldr	r3, [pc, #268]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	4a42      	ldr	r2, [pc, #264]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006598:	6113      	str	r3, [r2, #16]
 800659a:	4b40      	ldr	r3, [pc, #256]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800659c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80065a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065aa:	4a3c      	ldr	r2, [pc, #240]	@ (800669c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80065b0:	e008      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80065ba:	e003      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f002 0301 	and.w	r3, r2, #1
 80065d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80065da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80065de:	460b      	mov	r3, r1
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f000 808f 	beq.w	8006704 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065ec:	2b28      	cmp	r3, #40	@ 0x28
 80065ee:	d871      	bhi.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80065f0:	a201      	add	r2, pc, #4	@ (adr r2, 80065f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	080066dd 	.word	0x080066dd
 80065fc:	080066d5 	.word	0x080066d5
 8006600:	080066d5 	.word	0x080066d5
 8006604:	080066d5 	.word	0x080066d5
 8006608:	080066d5 	.word	0x080066d5
 800660c:	080066d5 	.word	0x080066d5
 8006610:	080066d5 	.word	0x080066d5
 8006614:	080066d5 	.word	0x080066d5
 8006618:	080066a9 	.word	0x080066a9
 800661c:	080066d5 	.word	0x080066d5
 8006620:	080066d5 	.word	0x080066d5
 8006624:	080066d5 	.word	0x080066d5
 8006628:	080066d5 	.word	0x080066d5
 800662c:	080066d5 	.word	0x080066d5
 8006630:	080066d5 	.word	0x080066d5
 8006634:	080066d5 	.word	0x080066d5
 8006638:	080066bf 	.word	0x080066bf
 800663c:	080066d5 	.word	0x080066d5
 8006640:	080066d5 	.word	0x080066d5
 8006644:	080066d5 	.word	0x080066d5
 8006648:	080066d5 	.word	0x080066d5
 800664c:	080066d5 	.word	0x080066d5
 8006650:	080066d5 	.word	0x080066d5
 8006654:	080066d5 	.word	0x080066d5
 8006658:	080066dd 	.word	0x080066dd
 800665c:	080066d5 	.word	0x080066d5
 8006660:	080066d5 	.word	0x080066d5
 8006664:	080066d5 	.word	0x080066d5
 8006668:	080066d5 	.word	0x080066d5
 800666c:	080066d5 	.word	0x080066d5
 8006670:	080066d5 	.word	0x080066d5
 8006674:	080066d5 	.word	0x080066d5
 8006678:	080066dd 	.word	0x080066dd
 800667c:	080066d5 	.word	0x080066d5
 8006680:	080066d5 	.word	0x080066d5
 8006684:	080066d5 	.word	0x080066d5
 8006688:	080066d5 	.word	0x080066d5
 800668c:	080066d5 	.word	0x080066d5
 8006690:	080066d5 	.word	0x080066d5
 8006694:	080066d5 	.word	0x080066d5
 8006698:	080066dd 	.word	0x080066dd
 800669c:	58024400 	.word	0x58024400
 80066a0:	58024800 	.word	0x58024800
 80066a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ac:	3308      	adds	r3, #8
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ffa7 	bl	8007604 <RCCEx_PLL2_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066bc:	e00f      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c2:	3328      	adds	r3, #40	@ 0x28
 80066c4:	2101      	movs	r1, #1
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 f84e 	bl	8007768 <RCCEx_PLL3_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066d2:	e004      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066da:	e000      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80066dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066e6:	4bbf      	ldr	r3, [pc, #764]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066f4:	4abb      	ldr	r2, [pc, #748]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80066fa:	e003      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006700:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670c:	f002 0302 	and.w	r3, r2, #2
 8006710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006714:	2300      	movs	r3, #0
 8006716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800671a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800671e:	460b      	mov	r3, r1
 8006720:	4313      	orrs	r3, r2
 8006722:	d041      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800672a:	2b05      	cmp	r3, #5
 800672c:	d824      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006781 	.word	0x08006781
 8006738:	0800674d 	.word	0x0800674d
 800673c:	08006763 	.word	0x08006763
 8006740:	08006781 	.word	0x08006781
 8006744:	08006781 	.word	0x08006781
 8006748:	08006781 	.word	0x08006781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006750:	3308      	adds	r3, #8
 8006752:	2101      	movs	r1, #1
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ff55 	bl	8007604 <RCCEx_PLL2_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006760:	e00f      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006766:	3328      	adds	r3, #40	@ 0x28
 8006768:	2101      	movs	r1, #1
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fffc 	bl	8007768 <RCCEx_PLL3_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006776:	e004      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800677e:	e000      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006782:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800678a:	4b96      	ldr	r3, [pc, #600]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800678c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800678e:	f023 0107 	bic.w	r1, r3, #7
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006798:	4a92      	ldr	r2, [pc, #584]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800679a:	430b      	orrs	r3, r1
 800679c:	6553      	str	r3, [r2, #84]	@ 0x54
 800679e:	e003      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f002 0304 	and.w	r3, r2, #4
 80067b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067b8:	2300      	movs	r3, #0
 80067ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067c2:	460b      	mov	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	d044      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d825      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80067d4:	a201      	add	r2, pc, #4	@ (adr r2, 80067dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	08006829 	.word	0x08006829
 80067e0:	080067f5 	.word	0x080067f5
 80067e4:	0800680b 	.word	0x0800680b
 80067e8:	08006829 	.word	0x08006829
 80067ec:	08006829 	.word	0x08006829
 80067f0:	08006829 	.word	0x08006829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	3308      	adds	r3, #8
 80067fa:	2101      	movs	r1, #1
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 ff01 	bl	8007604 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006808:	e00f      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	3328      	adds	r3, #40	@ 0x28
 8006810:	2101      	movs	r1, #1
 8006812:	4618      	mov	r0, r3
 8006814:	f000 ffa8 	bl	8007768 <RCCEx_PLL3_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800681e:	e004      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006826:	e000      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006832:	4b6c      	ldr	r3, [pc, #432]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	f023 0107 	bic.w	r1, r3, #7
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006842:	4a68      	ldr	r2, [pc, #416]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006844:	430b      	orrs	r3, r1
 8006846:	6593      	str	r3, [r2, #88]	@ 0x58
 8006848:	e003      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800684e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f002 0320 	and.w	r3, r2, #32
 800685e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006868:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800686c:	460b      	mov	r3, r1
 800686e:	4313      	orrs	r3, r2
 8006870:	d055      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800687a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800687e:	d033      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006884:	d82c      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800688a:	d02f      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800688c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006890:	d826      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006896:	d02b      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800689c:	d820      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800689e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a2:	d012      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068a8:	d81a      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d022      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80068ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068b2:	d115      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b8:	3308      	adds	r3, #8
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fea1 	bl	8007604 <RCCEx_PLL2_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068c8:	e015      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	3328      	adds	r3, #40	@ 0x28
 80068d0:	2102      	movs	r1, #2
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 ff48 	bl	8007768 <RCCEx_PLL3_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80068de:	e00a      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068e6:	e006      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80068e8:	bf00      	nop
 80068ea:	e004      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80068ec:	bf00      	nop
 80068ee:	e002      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80068f0:	bf00      	nop
 80068f2:	e000      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80068f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068fe:	4b39      	ldr	r3, [pc, #228]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006902:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800690e:	4a35      	ldr	r2, [pc, #212]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006910:	430b      	orrs	r3, r1
 8006912:	6553      	str	r3, [r2, #84]	@ 0x54
 8006914:	e003      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800691a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800692a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800692e:	2300      	movs	r3, #0
 8006930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006934:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006938:	460b      	mov	r3, r1
 800693a:	4313      	orrs	r3, r2
 800693c:	d058      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006946:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800694a:	d033      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800694c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006950:	d82c      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006956:	d02f      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800695c:	d826      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800695e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006962:	d02b      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006968:	d820      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800696a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800696e:	d012      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006974:	d81a      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d022      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697e:	d115      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006984:	3308      	adds	r3, #8
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fe3b 	bl	8007604 <RCCEx_PLL2_Config>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006994:	e015      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	3328      	adds	r3, #40	@ 0x28
 800699c:	2102      	movs	r1, #2
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fee2 	bl	8007768 <RCCEx_PLL3_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069aa:	e00a      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069b2:	e006      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069b4:	bf00      	nop
 80069b6:	e004      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069b8:	bf00      	nop
 80069ba:	e002      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80069c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10e      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069ca:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069da:	4a02      	ldr	r2, [pc, #8]	@ (80069e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069dc:	430b      	orrs	r3, r1
 80069de:	6593      	str	r3, [r2, #88]	@ 0x58
 80069e0:	e006      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80069e2:	bf00      	nop
 80069e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80069fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a00:	2300      	movs	r3, #0
 8006a02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	d055      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a1c:	d033      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006a1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a22:	d82c      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a28:	d02f      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a2e:	d826      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a34:	d02b      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006a36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a3a:	d820      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a40:	d012      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a46:	d81a      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d022      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a50:	d115      	bne.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a56:	3308      	adds	r3, #8
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fdd2 	bl	8007604 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a66:	e015      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6c:	3328      	adds	r3, #40	@ 0x28
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fe79 	bl	8007768 <RCCEx_PLL3_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a7c:	e00a      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a84:	e006      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a86:	bf00      	nop
 8006a88:	e004      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a8a:	bf00      	nop
 8006a8c:	e002      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a8e:	bf00      	nop
 8006a90:	e000      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10b      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a9c:	4ba0      	ldr	r3, [pc, #640]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aac:	4a9c      	ldr	r2, [pc, #624]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ab2:	e003      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f002 0308 	and.w	r3, r2, #8
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006acc:	2300      	movs	r3, #0
 8006ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ad2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	d01e      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	3328      	adds	r3, #40	@ 0x28
 8006af0:	2102      	movs	r1, #2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fe38 	bl	8007768 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006b04:	4b86      	ldr	r3, [pc, #536]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b14:	4a82      	ldr	r2, [pc, #520]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f002 0310 	and.w	r3, r2, #16
 8006b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006b34:	460b      	mov	r3, r1
 8006b36:	4313      	orrs	r3, r2
 8006b38:	d01e      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b46:	d10c      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4c:	3328      	adds	r3, #40	@ 0x28
 8006b4e:	2102      	movs	r1, #2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fe09 	bl	8007768 <RCCEx_PLL3_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b62:	4b6f      	ldr	r3, [pc, #444]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b72:	4a6b      	ldr	r2, [pc, #428]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b86:	2300      	movs	r3, #0
 8006b88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d03e      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba0:	d022      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ba6:	d81b      	bhi.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bb0:	d00b      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006bb2:	e015      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	3308      	adds	r3, #8
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fd21 	bl	8007604 <RCCEx_PLL2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bc8:	e00f      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	3328      	adds	r3, #40	@ 0x28
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fdc8 	bl	8007768 <RCCEx_PLL3_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c02:	4a47      	ldr	r2, [pc, #284]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c20:	2300      	movs	r3, #0
 8006c22:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c3a:	d01f      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006c3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c40:	d818      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006c42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c4c:	d007      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006c4e:	e011      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c50:	4b33      	ldr	r3, [pc, #204]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	4a32      	ldr	r2, [pc, #200]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c5c:	e00f      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c62:	3328      	adds	r3, #40	@ 0x28
 8006c64:	2101      	movs	r1, #1
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fd7e 	bl	8007768 <RCCEx_PLL3_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c72:	e004      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c86:	4b26      	ldr	r3, [pc, #152]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c96:	4a22      	ldr	r2, [pc, #136]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	d034      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd0:	d007      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006cd2:	e011      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd4:	4b12      	ldr	r3, [pc, #72]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ce0:	e00e      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fc8a 	bl	8007604 <RCCEx_PLL2_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d08:	4b05      	ldr	r3, [pc, #20]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d16:	4a02      	ldr	r2, [pc, #8]	@ (8006d20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006d1e:	bf00      	nop
 8006d20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d00c      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	3328      	adds	r3, #40	@ 0x28
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fd09 	bl	8007768 <RCCEx_PLL3_Config>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d70:	2300      	movs	r3, #0
 8006d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	d036      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d88:	d018      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d8e:	d811      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d94:	d014      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d9a:	d80b      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d011      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da6:	4bb7      	ldr	r3, [pc, #732]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006daa:	4ab6      	ldr	r2, [pc, #728]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006db2:	e008      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006dba:	e004      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dce:	4bad      	ldr	r3, [pc, #692]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ddc:	4aa9      	ldr	r2, [pc, #676]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dde:	430b      	orrs	r3, r1
 8006de0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006de2:	e003      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006de8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006df8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e02:	460b      	mov	r3, r1
 8006e04:	4313      	orrs	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e08:	4b9e      	ldr	r3, [pc, #632]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e16:	4a9b      	ldr	r2, [pc, #620]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e18:	430b      	orrs	r3, r1
 8006e1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006e32:	460b      	mov	r3, r1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d009      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e38:	4b92      	ldr	r3, [pc, #584]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e46:	4a8f      	ldr	r2, [pc, #572]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006e58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006e62:	460b      	mov	r3, r1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e68:	4b86      	ldr	r3, [pc, #536]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	4a85      	ldr	r2, [pc, #532]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e72:	6113      	str	r3, [r2, #16]
 8006e74:	4b83      	ldr	r3, [pc, #524]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e76:	6919      	ldr	r1, [r3, #16]
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e80:	4a80      	ldr	r2, [pc, #512]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e82:	430b      	orrs	r3, r1
 8006e84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006e92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e94:	2300      	movs	r3, #0
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006ea2:	4b78      	ldr	r3, [pc, #480]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ea6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb0:	4a74      	ldr	r2, [pc, #464]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006eb2:	430b      	orrs	r3, r1
 8006eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d00a      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee2:	4a68      	ldr	r2, [pc, #416]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006efa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d011      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	3308      	adds	r3, #8
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fb79 	bl	8007604 <RCCEx_PLL2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	2100      	movs	r1, #0
 8006f32:	6239      	str	r1, [r7, #32]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d011      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	3308      	adds	r3, #8
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fb59 	bl	8007604 <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	2100      	movs	r1, #0
 8006f72:	61b9      	str	r1, [r7, #24]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4313      	orrs	r3, r2
 8006f82:	d011      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	3308      	adds	r3, #8
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fb39 	bl	8007604 <RCCEx_PLL2_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	6139      	str	r1, [r7, #16]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	d011      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	3328      	adds	r3, #40	@ 0x28
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fbcb 	bl	8007768 <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ffe:	460b      	mov	r3, r1
 8007000:	4313      	orrs	r3, r2
 8007002:	d011      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	3328      	adds	r3, #40	@ 0x28
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fbab 	bl	8007768 <RCCEx_PLL3_Config>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	2100      	movs	r1, #0
 8007032:	6039      	str	r1, [r7, #0]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800703e:	460b      	mov	r3, r1
 8007040:	4313      	orrs	r3, r2
 8007042:	d011      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	3328      	adds	r3, #40	@ 0x28
 800704a:	2102      	movs	r1, #2
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fb8b 	bl	8007768 <RCCEx_PLL3_Config>
 8007052:	4603      	mov	r3, r0
 8007054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007068:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
}
 8007076:	4618      	mov	r0, r3
 8007078:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800707c:	46bd      	mov	sp, r7
 800707e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400

08007088 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800708c:	f7fe fe00 	bl	8005c90 <HAL_RCC_GetHCLKFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4904      	ldr	r1, [pc, #16]	@ (80070b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	58024400 	.word	0x58024400
 80070b0:	0800afa8 	.word	0x0800afa8

080070b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b089      	sub	sp, #36	@ 0x24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070bc:	4ba1      	ldr	r3, [pc, #644]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	f003 0303 	and.w	r3, r3, #3
 80070c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070c6:	4b9f      	ldr	r3, [pc, #636]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ca:	0b1b      	lsrs	r3, r3, #12
 80070cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070d2:	4b9c      	ldr	r3, [pc, #624]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	091b      	lsrs	r3, r3, #4
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070de:	4b99      	ldr	r3, [pc, #612]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e2:	08db      	lsrs	r3, r3, #3
 80070e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	fb02 f303 	mul.w	r3, r2, r3
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8111 	beq.w	8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	2b02      	cmp	r3, #2
 8007106:	f000 8083 	beq.w	8007210 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b02      	cmp	r3, #2
 800710e:	f200 80a1 	bhi.w	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d056      	beq.n	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800711e:	e099      	b.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007120:	4b88      	ldr	r3, [pc, #544]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0320 	and.w	r3, r3, #32
 8007128:	2b00      	cmp	r3, #0
 800712a:	d02d      	beq.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800712c:	4b85      	ldr	r3, [pc, #532]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	08db      	lsrs	r3, r3, #3
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	4a84      	ldr	r2, [pc, #528]	@ (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
 800713c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b7b      	ldr	r3, [pc, #492]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007166:	ed97 6a03 	vldr	s12, [r7, #12]
 800716a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800734c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007186:	e087      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719a:	4b6a      	ldr	r3, [pc, #424]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800734c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ca:	e065      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	ee07 3a90 	vmov	s15, r3
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071de:	4b59      	ldr	r3, [pc, #356]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e6:	ee07 3a90 	vmov	s15, r3
 80071ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800734c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800720e:	e043      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b48      	ldr	r3, [pc, #288]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800734c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007252:	e021      	b.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b37      	ldr	r3, [pc, #220]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800734c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007296:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007298:	4b2a      	ldr	r3, [pc, #168]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	0a5b      	lsrs	r3, r3, #9
 800729e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072be:	ee17 2a90 	vmov	r2, s15
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ec:	ee17 2a90 	vmov	r2, s15
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072f4:	4b13      	ldr	r3, [pc, #76]	@ (8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	0e1b      	lsrs	r3, r3, #24
 80072fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800730a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800730e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731a:	ee17 2a90 	vmov	r2, s15
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007322:	e008      	b.n	8007336 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	609a      	str	r2, [r3, #8]
}
 8007336:	bf00      	nop
 8007338:	3724      	adds	r7, #36	@ 0x24
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	58024400 	.word	0x58024400
 8007348:	03d09000 	.word	0x03d09000
 800734c:	46000000 	.word	0x46000000
 8007350:	4c742400 	.word	0x4c742400
 8007354:	4a742400 	.word	0x4a742400
 8007358:	4bbebc20 	.word	0x4bbebc20

0800735c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800735c:	b480      	push	{r7}
 800735e:	b089      	sub	sp, #36	@ 0x24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007364:	4ba1      	ldr	r3, [pc, #644]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800736e:	4b9f      	ldr	r3, [pc, #636]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007372:	0d1b      	lsrs	r3, r3, #20
 8007374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007378:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800737a:	4b9c      	ldr	r3, [pc, #624]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007386:	4b99      	ldr	r3, [pc, #612]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738a:	08db      	lsrs	r3, r3, #3
 800738c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	fb02 f303 	mul.w	r3, r2, r3
 8007396:	ee07 3a90 	vmov	s15, r3
 800739a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8111 	beq.w	80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	f000 8083 	beq.w	80074b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	f200 80a1 	bhi.w	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d056      	beq.n	8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073c6:	e099      	b.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c8:	4b88      	ldr	r3, [pc, #544]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d02d      	beq.n	8007430 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d4:	4b85      	ldr	r3, [pc, #532]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	08db      	lsrs	r3, r3, #3
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	4a84      	ldr	r2, [pc, #528]	@ (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fe:	4b7b      	ldr	r3, [pc, #492]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007412:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800742e:	e087      	b.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800743e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007442:	4b6a      	ldr	r3, [pc, #424]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	ed97 6a03 	vldr	s12, [r7, #12]
 8007456:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007472:	e065      	b.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b59      	ldr	r3, [pc, #356]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b6:	e043      	b.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b48      	ldr	r3, [pc, #288]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fa:	e021      	b.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b37      	ldr	r3, [pc, #220]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800753e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007540:	4b2a      	ldr	r3, [pc, #168]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007544:	0a5b      	lsrs	r3, r3, #9
 8007546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755a:	edd7 6a07 	vldr	s13, [r7, #28]
 800755e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007566:	ee17 2a90 	vmov	r2, s15
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800756e:	4b1f      	ldr	r3, [pc, #124]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007578:	ee07 3a90 	vmov	s15, r3
 800757c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007588:	edd7 6a07 	vldr	s13, [r7, #28]
 800758c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007594:	ee17 2a90 	vmov	r2, s15
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800759c:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800759e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c2:	ee17 2a90 	vmov	r2, s15
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075ca:	e008      	b.n	80075de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	609a      	str	r2, [r3, #8]
}
 80075de:	bf00      	nop
 80075e0:	3724      	adds	r7, #36	@ 0x24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400
 80075f0:	03d09000 	.word	0x03d09000
 80075f4:	46000000 	.word	0x46000000
 80075f8:	4c742400 	.word	0x4c742400
 80075fc:	4a742400 	.word	0x4a742400
 8007600:	4bbebc20 	.word	0x4bbebc20

08007604 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007612:	4b53      	ldr	r3, [pc, #332]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d101      	bne.n	8007622 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e099      	b.n	8007756 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007622:	4b4f      	ldr	r3, [pc, #316]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4e      	ldr	r2, [pc, #312]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007628:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800762c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762e:	f7f9 ffff 	bl	8001630 <HAL_GetTick>
 8007632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007634:	e008      	b.n	8007648 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007636:	f7f9 fffb 	bl	8001630 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e086      	b.n	8007756 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007648:	4b45      	ldr	r3, [pc, #276]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f0      	bne.n	8007636 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007654:	4b42      	ldr	r3, [pc, #264]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007658:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	031b      	lsls	r3, r3, #12
 8007662:	493f      	ldr	r1, [pc, #252]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007664:	4313      	orrs	r3, r2
 8007666:	628b      	str	r3, [r1, #40]	@ 0x28
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	3b01      	subs	r3, #1
 800766e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	3b01      	subs	r3, #1
 8007678:	025b      	lsls	r3, r3, #9
 800767a:	b29b      	uxth	r3, r3
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	3b01      	subs	r3, #1
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	3b01      	subs	r3, #1
 8007692:	061b      	lsls	r3, r3, #24
 8007694:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007698:	4931      	ldr	r1, [pc, #196]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800769e:	4b30      	ldr	r3, [pc, #192]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	492d      	ldr	r1, [pc, #180]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	f023 0220 	bic.w	r2, r3, #32
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	4928      	ldr	r1, [pc, #160]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076c2:	4b27      	ldr	r3, [pc, #156]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c6:	4a26      	ldr	r2, [pc, #152]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	f023 0310 	bic.w	r3, r3, #16
 80076cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076ce:	4b24      	ldr	r3, [pc, #144]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d2:	4b24      	ldr	r3, [pc, #144]	@ (8007764 <RCCEx_PLL2_Config+0x160>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	69d2      	ldr	r2, [r2, #28]
 80076da:	00d2      	lsls	r2, r2, #3
 80076dc:	4920      	ldr	r1, [pc, #128]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076e8:	f043 0310 	orr.w	r3, r3, #16
 80076ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	4a19      	ldr	r2, [pc, #100]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 80076fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007700:	e00f      	b.n	8007722 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d106      	bne.n	8007716 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a14      	ldr	r2, [pc, #80]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 800770e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007714:	e005      	b.n	8007722 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007716:	4b12      	ldr	r3, [pc, #72]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	4a11      	ldr	r2, [pc, #68]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 800771c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007722:	4b0f      	ldr	r3, [pc, #60]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a0e      	ldr	r2, [pc, #56]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 8007728:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800772c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772e:	f7f9 ff7f 	bl	8001630 <HAL_GetTick>
 8007732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007734:	e008      	b.n	8007748 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007736:	f7f9 ff7b 	bl	8001630 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e006      	b.n	8007756 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007748:	4b05      	ldr	r3, [pc, #20]	@ (8007760 <RCCEx_PLL2_Config+0x15c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f0      	beq.n	8007736 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
 8007764:	ffff0007 	.word	0xffff0007

08007768 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007776:	4b53      	ldr	r3, [pc, #332]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	2b03      	cmp	r3, #3
 8007780:	d101      	bne.n	8007786 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e099      	b.n	80078ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007786:	4b4f      	ldr	r3, [pc, #316]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a4e      	ldr	r2, [pc, #312]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800778c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007792:	f7f9 ff4d 	bl	8001630 <HAL_GetTick>
 8007796:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007798:	e008      	b.n	80077ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800779a:	f7f9 ff49 	bl	8001630 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e086      	b.n	80078ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077ac:	4b45      	ldr	r3, [pc, #276]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f0      	bne.n	800779a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077b8:	4b42      	ldr	r3, [pc, #264]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	051b      	lsls	r3, r3, #20
 80077c6:	493f      	ldr	r1, [pc, #252]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	3b01      	subs	r3, #1
 80077dc:	025b      	lsls	r3, r3, #9
 80077de:	b29b      	uxth	r3, r3
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	041b      	lsls	r3, r3, #16
 80077ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	061b      	lsls	r3, r3, #24
 80077f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077fc:	4931      	ldr	r1, [pc, #196]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007802:	4b30      	ldr	r3, [pc, #192]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	492d      	ldr	r1, [pc, #180]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007814:	4b2b      	ldr	r3, [pc, #172]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	4928      	ldr	r1, [pc, #160]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007822:	4313      	orrs	r3, r2
 8007824:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007826:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a26      	ldr	r2, [pc, #152]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800782c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007830:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007832:	4b24      	ldr	r3, [pc, #144]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007836:	4b24      	ldr	r3, [pc, #144]	@ (80078c8 <RCCEx_PLL3_Config+0x160>)
 8007838:	4013      	ands	r3, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	69d2      	ldr	r2, [r2, #28]
 800783e:	00d2      	lsls	r2, r2, #3
 8007840:	4920      	ldr	r1, [pc, #128]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007846:	4b1f      	ldr	r3, [pc, #124]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	4a1e      	ldr	r2, [pc, #120]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800784c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007850:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007858:	4b1a      	ldr	r3, [pc, #104]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	4a19      	ldr	r2, [pc, #100]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800785e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007864:	e00f      	b.n	8007886 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d106      	bne.n	800787a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800786c:	4b15      	ldr	r3, [pc, #84]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800786e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007870:	4a14      	ldr	r2, [pc, #80]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007872:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007878:	e005      	b.n	8007886 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800787a:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800787c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787e:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007884:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007886:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a0e      	ldr	r2, [pc, #56]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007892:	f7f9 fecd 	bl	8001630 <HAL_GetTick>
 8007896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007898:	e008      	b.n	80078ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800789a:	f7f9 fec9 	bl	8001630 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e006      	b.n	80078ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078ac:	4b05      	ldr	r3, [pc, #20]	@ (80078c4 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	58024400 	.word	0x58024400
 80078c8:	ffff0007 	.word	0xffff0007

080078cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e049      	b.n	8007972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7f9 fb40 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	4619      	mov	r1, r3
 800790a:	4610      	mov	r0, r2
 800790c:	f000 fc58 	bl	80081c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d001      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e05e      	b.n	8007a52 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2202      	movs	r2, #2
 8007998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007a60 <HAL_TIM_Base_Start_IT+0xe4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d02c      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079be:	d027      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a27      	ldr	r2, [pc, #156]	@ (8007a64 <HAL_TIM_Base_Start_IT+0xe8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d022      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a26      	ldr	r2, [pc, #152]	@ (8007a68 <HAL_TIM_Base_Start_IT+0xec>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d01d      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a24      	ldr	r2, [pc, #144]	@ (8007a6c <HAL_TIM_Base_Start_IT+0xf0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d018      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a23      	ldr	r2, [pc, #140]	@ (8007a70 <HAL_TIM_Base_Start_IT+0xf4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a21      	ldr	r2, [pc, #132]	@ (8007a74 <HAL_TIM_Base_Start_IT+0xf8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a20      	ldr	r2, [pc, #128]	@ (8007a78 <HAL_TIM_Base_Start_IT+0xfc>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a1e      	ldr	r2, [pc, #120]	@ (8007a7c <HAL_TIM_Base_Start_IT+0x100>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x94>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <HAL_TIM_Base_Start_IT+0x104>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d115      	bne.n	8007a3c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	4b1b      	ldr	r3, [pc, #108]	@ (8007a84 <HAL_TIM_Base_Start_IT+0x108>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b06      	cmp	r3, #6
 8007a20:	d015      	beq.n	8007a4e <HAL_TIM_Base_Start_IT+0xd2>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a28:	d011      	beq.n	8007a4e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0201 	orr.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a3a:	e008      	b.n	8007a4e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0201 	orr.w	r2, r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e000      	b.n	8007a50 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40010000 	.word	0x40010000
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40000c00 	.word	0x40000c00
 8007a70:	40010400 	.word	0x40010400
 8007a74:	40001800 	.word	0x40001800
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	4000e000 	.word	0x4000e000
 8007a80:	4000e400 	.word	0x4000e400
 8007a84:	00010007 	.word	0x00010007

08007a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e049      	b.n	8007b2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f841 	bl	8007b36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f000 fb7a 	bl	80081c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b3e:	bf00      	nop
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d020      	beq.n	8007bae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01b      	beq.n	8007bae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0202 	mvn.w	r2, #2
 8007b7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 faf5 	bl	8008184 <HAL_TIM_IC_CaptureCallback>
 8007b9a:	e005      	b.n	8007ba8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fae7 	bl	8008170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 faf8 	bl	8008198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d020      	beq.n	8007bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01b      	beq.n	8007bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f06f 0204 	mvn.w	r2, #4
 8007bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 facf 	bl	8008184 <HAL_TIM_IC_CaptureCallback>
 8007be6:	e005      	b.n	8007bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fac1 	bl	8008170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fad2 	bl	8008198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d020      	beq.n	8007c46 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01b      	beq.n	8007c46 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f06f 0208 	mvn.w	r2, #8
 8007c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 faa9 	bl	8008184 <HAL_TIM_IC_CaptureCallback>
 8007c32:	e005      	b.n	8007c40 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa9b 	bl	8008170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 faac 	bl	8008198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f003 0310 	and.w	r3, r3, #16
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d020      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d01b      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f06f 0210 	mvn.w	r2, #16
 8007c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2208      	movs	r2, #8
 8007c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa83 	bl	8008184 <HAL_TIM_IC_CaptureCallback>
 8007c7e:	e005      	b.n	8007c8c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa75 	bl	8008170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa86 	bl	8008198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00c      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f06f 0201 	mvn.w	r2, #1
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7f9 f85f 	bl	8000d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00c      	beq.n	8007ce4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d007      	beq.n	8007ce4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 ff3a 	bl	8008b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 ff32 	bl	8008b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00c      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa40 	bl	80081ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00c      	beq.n	8007d50 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0220 	mvn.w	r2, #32
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fefa 	bl	8008b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d101      	bne.n	8007d76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e0ff      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b14      	cmp	r3, #20
 8007d82:	f200 80f0 	bhi.w	8007f66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007d86:	a201      	add	r2, pc, #4	@ (adr r2, 8007d8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007de1 	.word	0x08007de1
 8007d90:	08007f67 	.word	0x08007f67
 8007d94:	08007f67 	.word	0x08007f67
 8007d98:	08007f67 	.word	0x08007f67
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007f67 	.word	0x08007f67
 8007da4:	08007f67 	.word	0x08007f67
 8007da8:	08007f67 	.word	0x08007f67
 8007dac:	08007e63 	.word	0x08007e63
 8007db0:	08007f67 	.word	0x08007f67
 8007db4:	08007f67 	.word	0x08007f67
 8007db8:	08007f67 	.word	0x08007f67
 8007dbc:	08007ea3 	.word	0x08007ea3
 8007dc0:	08007f67 	.word	0x08007f67
 8007dc4:	08007f67 	.word	0x08007f67
 8007dc8:	08007f67 	.word	0x08007f67
 8007dcc:	08007ee5 	.word	0x08007ee5
 8007dd0:	08007f67 	.word	0x08007f67
 8007dd4:	08007f67 	.word	0x08007f67
 8007dd8:	08007f67 	.word	0x08007f67
 8007ddc:	08007f25 	.word	0x08007f25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fa9c 	bl	8008324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0204 	bic.w	r2, r2, #4
 8007e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6999      	ldr	r1, [r3, #24]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	619a      	str	r2, [r3, #24]
      break;
 8007e1e:	e0a5      	b.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fb0c 	bl	8008444 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699a      	ldr	r2, [r3, #24]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6999      	ldr	r1, [r3, #24]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	021a      	lsls	r2, r3, #8
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	619a      	str	r2, [r3, #24]
      break;
 8007e60:	e084      	b.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 fb75 	bl	8008558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69da      	ldr	r2, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0208 	orr.w	r2, r2, #8
 8007e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0204 	bic.w	r2, r2, #4
 8007e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69d9      	ldr	r1, [r3, #28]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	61da      	str	r2, [r3, #28]
      break;
 8007ea0:	e064      	b.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fbdd 	bl	8008668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69da      	ldr	r2, [r3, #28]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69d9      	ldr	r1, [r3, #28]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	021a      	lsls	r2, r3, #8
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	61da      	str	r2, [r3, #28]
      break;
 8007ee2:	e043      	b.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fc26 	bl	800873c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0208 	orr.w	r2, r2, #8
 8007efe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0204 	bic.w	r2, r2, #4
 8007f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	691a      	ldr	r2, [r3, #16]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f22:	e023      	b.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fc6a 	bl	8008804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	021a      	lsls	r2, r3, #8
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007f64:	e002      	b.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop

08007f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e0dc      	b.n	8008156 <HAL_TIM_ConfigClockSource+0x1d6>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8008160 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a64      	ldr	r2, [pc, #400]	@ (8008164 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f000 80a9 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fd8:	4a62      	ldr	r2, [pc, #392]	@ (8008164 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	f200 80ae 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fe0:	4a61      	ldr	r2, [pc, #388]	@ (8008168 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	f000 80a1 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8008168 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	f200 80a6 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8007ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800816c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	f000 8099 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8007ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800816c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	f200 809e 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8008000:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008004:	f000 8091 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8008008:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800800c:	f200 8096 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008014:	f000 8089 	beq.w	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8008018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800801c:	f200 808e 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8008020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008024:	d03e      	beq.n	80080a4 <HAL_TIM_ConfigClockSource+0x124>
 8008026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800802a:	f200 8087 	bhi.w	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 800802e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008032:	f000 8086 	beq.w	8008142 <HAL_TIM_ConfigClockSource+0x1c2>
 8008036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800803a:	d87f      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 800803c:	2b70      	cmp	r3, #112	@ 0x70
 800803e:	d01a      	beq.n	8008076 <HAL_TIM_ConfigClockSource+0xf6>
 8008040:	2b70      	cmp	r3, #112	@ 0x70
 8008042:	d87b      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8008044:	2b60      	cmp	r3, #96	@ 0x60
 8008046:	d050      	beq.n	80080ea <HAL_TIM_ConfigClockSource+0x16a>
 8008048:	2b60      	cmp	r3, #96	@ 0x60
 800804a:	d877      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 800804c:	2b50      	cmp	r3, #80	@ 0x50
 800804e:	d03c      	beq.n	80080ca <HAL_TIM_ConfigClockSource+0x14a>
 8008050:	2b50      	cmp	r3, #80	@ 0x50
 8008052:	d873      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8008054:	2b40      	cmp	r3, #64	@ 0x40
 8008056:	d058      	beq.n	800810a <HAL_TIM_ConfigClockSource+0x18a>
 8008058:	2b40      	cmp	r3, #64	@ 0x40
 800805a:	d86f      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 800805c:	2b30      	cmp	r3, #48	@ 0x30
 800805e:	d064      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8008060:	2b30      	cmp	r3, #48	@ 0x30
 8008062:	d86b      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 8008064:	2b20      	cmp	r3, #32
 8008066:	d060      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8008068:	2b20      	cmp	r3, #32
 800806a:	d867      	bhi.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d05c      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8008070:	2b10      	cmp	r3, #16
 8008072:	d05a      	beq.n	800812a <HAL_TIM_ConfigClockSource+0x1aa>
 8008074:	e062      	b.n	800813c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008086:	f000 fca1 	bl	80089cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	609a      	str	r2, [r3, #8]
      break;
 80080a2:	e04f      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080b4:	f000 fc8a 	bl	80089cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080c6:	609a      	str	r2, [r3, #8]
      break;
 80080c8:	e03c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080d6:	461a      	mov	r2, r3
 80080d8:	f000 fbfa 	bl	80088d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2150      	movs	r1, #80	@ 0x50
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fc54 	bl	8008990 <TIM_ITRx_SetConfig>
      break;
 80080e8:	e02c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080f6:	461a      	mov	r2, r3
 80080f8:	f000 fc19 	bl	800892e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2160      	movs	r1, #96	@ 0x60
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fc44 	bl	8008990 <TIM_ITRx_SetConfig>
      break;
 8008108:	e01c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008116:	461a      	mov	r2, r3
 8008118:	f000 fbda 	bl	80088d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2140      	movs	r1, #64	@ 0x40
 8008122:	4618      	mov	r0, r3
 8008124:	f000 fc34 	bl	8008990 <TIM_ITRx_SetConfig>
      break;
 8008128:	e00c      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f000 fc2b 	bl	8008990 <TIM_ITRx_SetConfig>
      break;
 800813a:	e003      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	73fb      	strb	r3, [r7, #15]
      break;
 8008140:	e000      	b.n	8008144 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	ffceff88 	.word	0xffceff88
 8008164:	00100040 	.word	0x00100040
 8008168:	00100030 	.word	0x00100030
 800816c:	00100020 	.word	0x00100020

08008170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a4a      	ldr	r2, [pc, #296]	@ (80082fc <TIM_Base_SetConfig+0x13c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d013      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081de:	d00f      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a47      	ldr	r2, [pc, #284]	@ (8008300 <TIM_Base_SetConfig+0x140>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00b      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a46      	ldr	r2, [pc, #280]	@ (8008304 <TIM_Base_SetConfig+0x144>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d007      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a45      	ldr	r2, [pc, #276]	@ (8008308 <TIM_Base_SetConfig+0x148>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a44      	ldr	r2, [pc, #272]	@ (800830c <TIM_Base_SetConfig+0x14c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d108      	bne.n	8008212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a39      	ldr	r2, [pc, #228]	@ (80082fc <TIM_Base_SetConfig+0x13c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d027      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008220:	d023      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a36      	ldr	r2, [pc, #216]	@ (8008300 <TIM_Base_SetConfig+0x140>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d01f      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a35      	ldr	r2, [pc, #212]	@ (8008304 <TIM_Base_SetConfig+0x144>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d01b      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a34      	ldr	r2, [pc, #208]	@ (8008308 <TIM_Base_SetConfig+0x148>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d017      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a33      	ldr	r2, [pc, #204]	@ (800830c <TIM_Base_SetConfig+0x14c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d013      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a32      	ldr	r2, [pc, #200]	@ (8008310 <TIM_Base_SetConfig+0x150>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00f      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a31      	ldr	r2, [pc, #196]	@ (8008314 <TIM_Base_SetConfig+0x154>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d00b      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a30      	ldr	r2, [pc, #192]	@ (8008318 <TIM_Base_SetConfig+0x158>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d007      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2f      	ldr	r2, [pc, #188]	@ (800831c <TIM_Base_SetConfig+0x15c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d003      	beq.n	800826a <TIM_Base_SetConfig+0xaa>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2e      	ldr	r2, [pc, #184]	@ (8008320 <TIM_Base_SetConfig+0x160>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d108      	bne.n	800827c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a16      	ldr	r2, [pc, #88]	@ (80082fc <TIM_Base_SetConfig+0x13c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00f      	beq.n	80082c8 <TIM_Base_SetConfig+0x108>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a18      	ldr	r2, [pc, #96]	@ (800830c <TIM_Base_SetConfig+0x14c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00b      	beq.n	80082c8 <TIM_Base_SetConfig+0x108>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a17      	ldr	r2, [pc, #92]	@ (8008310 <TIM_Base_SetConfig+0x150>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d007      	beq.n	80082c8 <TIM_Base_SetConfig+0x108>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a16      	ldr	r2, [pc, #88]	@ (8008314 <TIM_Base_SetConfig+0x154>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_Base_SetConfig+0x108>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a15      	ldr	r2, [pc, #84]	@ (8008318 <TIM_Base_SetConfig+0x158>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d103      	bne.n	80082d0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	691a      	ldr	r2, [r3, #16]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d105      	bne.n	80082ee <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f023 0201 	bic.w	r2, r3, #1
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	611a      	str	r2, [r3, #16]
  }
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40010000 	.word	0x40010000
 8008300:	40000400 	.word	0x40000400
 8008304:	40000800 	.word	0x40000800
 8008308:	40000c00 	.word	0x40000c00
 800830c:	40010400 	.word	0x40010400
 8008310:	40014000 	.word	0x40014000
 8008314:	40014400 	.word	0x40014400
 8008318:	40014800 	.word	0x40014800
 800831c:	4000e000 	.word	0x4000e000
 8008320:	4000e400 	.word	0x4000e400

08008324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008324:	b480      	push	{r7}
 8008326:	b087      	sub	sp, #28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f023 0201 	bic.w	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <TIM_OC1_SetConfig+0x108>)
 8008350:	4013      	ands	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f023 0302 	bic.w	r3, r3, #2
 800836c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a2d      	ldr	r2, [pc, #180]	@ (8008430 <TIM_OC1_SetConfig+0x10c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00f      	beq.n	80083a0 <TIM_OC1_SetConfig+0x7c>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a2c      	ldr	r2, [pc, #176]	@ (8008434 <TIM_OC1_SetConfig+0x110>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00b      	beq.n	80083a0 <TIM_OC1_SetConfig+0x7c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a2b      	ldr	r2, [pc, #172]	@ (8008438 <TIM_OC1_SetConfig+0x114>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_OC1_SetConfig+0x7c>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a2a      	ldr	r2, [pc, #168]	@ (800843c <TIM_OC1_SetConfig+0x118>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC1_SetConfig+0x7c>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a29      	ldr	r2, [pc, #164]	@ (8008440 <TIM_OC1_SetConfig+0x11c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10c      	bne.n	80083ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f023 0308 	bic.w	r3, r3, #8
 80083a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f023 0304 	bic.w	r3, r3, #4
 80083b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008430 <TIM_OC1_SetConfig+0x10c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00f      	beq.n	80083e2 <TIM_OC1_SetConfig+0xbe>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008434 <TIM_OC1_SetConfig+0x110>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00b      	beq.n	80083e2 <TIM_OC1_SetConfig+0xbe>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008438 <TIM_OC1_SetConfig+0x114>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d007      	beq.n	80083e2 <TIM_OC1_SetConfig+0xbe>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a19      	ldr	r2, [pc, #100]	@ (800843c <TIM_OC1_SetConfig+0x118>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d003      	beq.n	80083e2 <TIM_OC1_SetConfig+0xbe>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <TIM_OC1_SetConfig+0x11c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d111      	bne.n	8008406 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	621a      	str	r2, [r3, #32]
}
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	fffeff8f 	.word	0xfffeff8f
 8008430:	40010000 	.word	0x40010000
 8008434:	40010400 	.word	0x40010400
 8008438:	40014000 	.word	0x40014000
 800843c:	40014400 	.word	0x40014400
 8008440:	40014800 	.word	0x40014800

08008444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	f023 0210 	bic.w	r2, r3, #16
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4b34      	ldr	r3, [pc, #208]	@ (8008540 <TIM_OC2_SetConfig+0xfc>)
 8008470:	4013      	ands	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800847a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4313      	orrs	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f023 0320 	bic.w	r3, r3, #32
 800848e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a29      	ldr	r2, [pc, #164]	@ (8008544 <TIM_OC2_SetConfig+0x100>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_OC2_SetConfig+0x68>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a28      	ldr	r2, [pc, #160]	@ (8008548 <TIM_OC2_SetConfig+0x104>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d10d      	bne.n	80084c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008544 <TIM_OC2_SetConfig+0x100>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d00f      	beq.n	80084f0 <TIM_OC2_SetConfig+0xac>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008548 <TIM_OC2_SetConfig+0x104>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00b      	beq.n	80084f0 <TIM_OC2_SetConfig+0xac>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a1c      	ldr	r2, [pc, #112]	@ (800854c <TIM_OC2_SetConfig+0x108>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d007      	beq.n	80084f0 <TIM_OC2_SetConfig+0xac>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008550 <TIM_OC2_SetConfig+0x10c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d003      	beq.n	80084f0 <TIM_OC2_SetConfig+0xac>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008554 <TIM_OC2_SetConfig+0x110>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d113      	bne.n	8008518 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	4313      	orrs	r3, r2
 800850a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	4313      	orrs	r3, r2
 8008516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	feff8fff 	.word	0xfeff8fff
 8008544:	40010000 	.word	0x40010000
 8008548:	40010400 	.word	0x40010400
 800854c:	40014000 	.word	0x40014000
 8008550:	40014400 	.word	0x40014400
 8008554:	40014800 	.word	0x40014800

08008558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	4b33      	ldr	r3, [pc, #204]	@ (8008650 <TIM_OC3_SetConfig+0xf8>)
 8008584:	4013      	ands	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4313      	orrs	r3, r2
 8008598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80085a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a28      	ldr	r2, [pc, #160]	@ (8008654 <TIM_OC3_SetConfig+0xfc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d003      	beq.n	80085be <TIM_OC3_SetConfig+0x66>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a27      	ldr	r2, [pc, #156]	@ (8008658 <TIM_OC3_SetConfig+0x100>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d10d      	bne.n	80085da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80085c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008654 <TIM_OC3_SetConfig+0xfc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00f      	beq.n	8008602 <TIM_OC3_SetConfig+0xaa>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008658 <TIM_OC3_SetConfig+0x100>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d00b      	beq.n	8008602 <TIM_OC3_SetConfig+0xaa>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a1b      	ldr	r2, [pc, #108]	@ (800865c <TIM_OC3_SetConfig+0x104>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d007      	beq.n	8008602 <TIM_OC3_SetConfig+0xaa>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008660 <TIM_OC3_SetConfig+0x108>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d003      	beq.n	8008602 <TIM_OC3_SetConfig+0xaa>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a19      	ldr	r2, [pc, #100]	@ (8008664 <TIM_OC3_SetConfig+0x10c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d113      	bne.n	800862a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	621a      	str	r2, [r3, #32]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	fffeff8f 	.word	0xfffeff8f
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400
 800865c:	40014000 	.word	0x40014000
 8008660:	40014400 	.word	0x40014400
 8008664:	40014800 	.word	0x40014800

08008668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4b24      	ldr	r3, [pc, #144]	@ (8008724 <TIM_OC4_SetConfig+0xbc>)
 8008694:	4013      	ands	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800869e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	031b      	lsls	r3, r3, #12
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a19      	ldr	r2, [pc, #100]	@ (8008728 <TIM_OC4_SetConfig+0xc0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00f      	beq.n	80086e8 <TIM_OC4_SetConfig+0x80>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a18      	ldr	r2, [pc, #96]	@ (800872c <TIM_OC4_SetConfig+0xc4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00b      	beq.n	80086e8 <TIM_OC4_SetConfig+0x80>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <TIM_OC4_SetConfig+0xc8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d007      	beq.n	80086e8 <TIM_OC4_SetConfig+0x80>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a16      	ldr	r2, [pc, #88]	@ (8008734 <TIM_OC4_SetConfig+0xcc>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d003      	beq.n	80086e8 <TIM_OC4_SetConfig+0x80>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a15      	ldr	r2, [pc, #84]	@ (8008738 <TIM_OC4_SetConfig+0xd0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d109      	bne.n	80086fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	019b      	lsls	r3, r3, #6
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	feff8fff 	.word	0xfeff8fff
 8008728:	40010000 	.word	0x40010000
 800872c:	40010400 	.word	0x40010400
 8008730:	40014000 	.word	0x40014000
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800

0800873c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4b21      	ldr	r3, [pc, #132]	@ (80087ec <TIM_OC5_SetConfig+0xb0>)
 8008768:	4013      	ands	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800877c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a18      	ldr	r2, [pc, #96]	@ (80087f0 <TIM_OC5_SetConfig+0xb4>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00f      	beq.n	80087b2 <TIM_OC5_SetConfig+0x76>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a17      	ldr	r2, [pc, #92]	@ (80087f4 <TIM_OC5_SetConfig+0xb8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00b      	beq.n	80087b2 <TIM_OC5_SetConfig+0x76>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a16      	ldr	r2, [pc, #88]	@ (80087f8 <TIM_OC5_SetConfig+0xbc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d007      	beq.n	80087b2 <TIM_OC5_SetConfig+0x76>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a15      	ldr	r2, [pc, #84]	@ (80087fc <TIM_OC5_SetConfig+0xc0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_OC5_SetConfig+0x76>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a14      	ldr	r2, [pc, #80]	@ (8008800 <TIM_OC5_SetConfig+0xc4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d109      	bne.n	80087c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	621a      	str	r2, [r3, #32]
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	fffeff8f 	.word	0xfffeff8f
 80087f0:	40010000 	.word	0x40010000
 80087f4:	40010400 	.word	0x40010400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800

08008804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4b22      	ldr	r3, [pc, #136]	@ (80088b8 <TIM_OC6_SetConfig+0xb4>)
 8008830:	4013      	ands	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	051b      	lsls	r3, r3, #20
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a19      	ldr	r2, [pc, #100]	@ (80088bc <TIM_OC6_SetConfig+0xb8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00f      	beq.n	800887c <TIM_OC6_SetConfig+0x78>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a18      	ldr	r2, [pc, #96]	@ (80088c0 <TIM_OC6_SetConfig+0xbc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00b      	beq.n	800887c <TIM_OC6_SetConfig+0x78>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a17      	ldr	r2, [pc, #92]	@ (80088c4 <TIM_OC6_SetConfig+0xc0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d007      	beq.n	800887c <TIM_OC6_SetConfig+0x78>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a16      	ldr	r2, [pc, #88]	@ (80088c8 <TIM_OC6_SetConfig+0xc4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_OC6_SetConfig+0x78>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a15      	ldr	r2, [pc, #84]	@ (80088cc <TIM_OC6_SetConfig+0xc8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d109      	bne.n	8008890 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008882:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	029b      	lsls	r3, r3, #10
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	621a      	str	r2, [r3, #32]
}
 80088aa:	bf00      	nop
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	feff8fff 	.word	0xfeff8fff
 80088bc:	40010000 	.word	0x40010000
 80088c0:	40010400 	.word	0x40010400
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800

080088d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f023 0201 	bic.w	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f023 030a 	bic.w	r3, r3, #10
 800890c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	4313      	orrs	r3, r2
 8008914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	621a      	str	r2, [r3, #32]
}
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800892e:	b480      	push	{r7}
 8008930:	b087      	sub	sp, #28
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	f023 0210 	bic.w	r2, r3, #16
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	031b      	lsls	r3, r3, #12
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800896a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4b09      	ldr	r3, [pc, #36]	@ (80089c8 <TIM_ITRx_SetConfig+0x38>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f043 0307 	orr.w	r3, r3, #7
 80089b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	609a      	str	r2, [r3, #8]
}
 80089ba:	bf00      	nop
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	ffcfff8f 	.word	0xffcfff8f

080089cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	021a      	lsls	r2, r3, #8
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	609a      	str	r2, [r3, #8]
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e077      	b.n	8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a35      	ldr	r2, [pc, #212]	@ (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a34      	ldr	r2, [pc, #208]	@ (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d108      	bne.n	8008a6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008a5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a25      	ldr	r2, [pc, #148]	@ (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d02c      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a96:	d027      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a22      	ldr	r2, [pc, #136]	@ (8008b28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d022      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a21      	ldr	r2, [pc, #132]	@ (8008b2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d01d      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d018      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1a      	ldr	r2, [pc, #104]	@ (8008b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d013      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00e      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a1a      	ldr	r2, [pc, #104]	@ (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d009      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a18      	ldr	r2, [pc, #96]	@ (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d004      	beq.n	8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a17      	ldr	r2, [pc, #92]	@ (8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d10c      	bne.n	8008b02 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40010400 	.word	0x40010400
 8008b28:	40000400 	.word	0x40000400
 8008b2c:	40000800 	.word	0x40000800
 8008b30:	40000c00 	.word	0x40000c00
 8008b34:	40001800 	.word	0x40001800
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	4000e000 	.word	0x4000e000
 8008b40:	4000e400 	.word	0x4000e400

08008b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e04a      	b.n	8008c28 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7f8 fa0d 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2224      	movs	r2, #36	@ 0x24
 8008bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0201 	bic.w	r2, r2, #1
 8008bc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 fba6 	bl	800a31c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fd37 	bl	8009644 <UART_SetConfig>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e023      	b.n	8008c28 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689a      	ldr	r2, [r3, #8]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008bfe:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0208 	orr.w	r2, r2, #8
 8008c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fc1d 	bl	800a460 <UART_CheckIdleState>
 8008c26:	4603      	mov	r3, r0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	@ 0x28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c44:	2b20      	cmp	r3, #32
 8008c46:	d167      	bne.n	8008d18 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <HAL_UART_Transmit_DMA+0x24>
 8008c4e:	88fb      	ldrh	r3, [r7, #6]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e060      	b.n	8008d1a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	88fa      	ldrh	r2, [r7, #6]
 8008c62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	88fa      	ldrh	r2, [r7, #6]
 8008c6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2221      	movs	r2, #33	@ 0x21
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d028      	beq.n	8008cd8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c8a:	4a26      	ldr	r2, [pc, #152]	@ (8008d24 <HAL_UART_Transmit_DMA+0xf4>)
 8008c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c92:	4a25      	ldr	r2, [pc, #148]	@ (8008d28 <HAL_UART_Transmit_DMA+0xf8>)
 8008c94:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c9a:	4a24      	ldr	r2, [pc, #144]	@ (8008d2c <HAL_UART_Transmit_DMA+0xfc>)
 8008c9c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3328      	adds	r3, #40	@ 0x28
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	f7f9 fbcf 	bl	800245c <HAL_DMA_Start_IT>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d009      	beq.n	8008cd8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2210      	movs	r2, #16
 8008cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e020      	b.n	8008d1a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2240      	movs	r2, #64	@ 0x40
 8008cde:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d00:	623a      	str	r2, [r7, #32]
 8008d02:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	69f9      	ldr	r1, [r7, #28]
 8008d06:	6a3a      	ldr	r2, [r7, #32]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e5      	bne.n	8008ce0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	e000      	b.n	8008d1a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d18:	2302      	movs	r3, #2
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3728      	adds	r7, #40	@ 0x28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	0800a92d 	.word	0x0800a92d
 8008d28:	0800a9c3 	.word	0x0800a9c3
 8008d2c:	0800ab45 	.word	0x0800ab45

08008d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0ba      	sub	sp, #232	@ 0xe8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008d5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008d5e:	4013      	ands	r3, r2
 8008d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d11b      	bne.n	8008da4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d015      	beq.n	8008da4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7c:	f003 0320 	and.w	r3, r3, #32
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d105      	bne.n	8008d90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8377 	beq.w	8009488 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
      }
      return;
 8008da2:	e371      	b.n	8009488 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 8123 	beq.w	8008ff4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008dae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008db2:	4b8d      	ldr	r3, [pc, #564]	@ (8008fe8 <HAL_UART_IRQHandler+0x2b8>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008dbe:	4b8b      	ldr	r3, [pc, #556]	@ (8008fec <HAL_UART_IRQHandler+0x2bc>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8116 	beq.w	8008ff4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d011      	beq.n	8008df8 <HAL_UART_IRQHandler+0xc8>
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2201      	movs	r2, #1
 8008de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dee:	f043 0201 	orr.w	r2, r3, #1
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfc:	f003 0302 	and.w	r3, r3, #2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d011      	beq.n	8008e28 <HAL_UART_IRQHandler+0xf8>
 8008e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2202      	movs	r2, #2
 8008e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e1e:	f043 0204 	orr.w	r2, r3, #4
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d011      	beq.n	8008e58 <HAL_UART_IRQHandler+0x128>
 8008e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2204      	movs	r2, #4
 8008e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4e:	f043 0202 	orr.w	r2, r3, #2
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d017      	beq.n	8008e94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d105      	bne.n	8008e7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e74:	4b5c      	ldr	r3, [pc, #368]	@ (8008fe8 <HAL_UART_IRQHandler+0x2b8>)
 8008e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2208      	movs	r2, #8
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8a:	f043 0208 	orr.w	r2, r3, #8
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d012      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x196>
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00c      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ebc:	f043 0220 	orr.w	r2, r3, #32
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 82dd 	beq.w	800948c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d013      	beq.n	8008f06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1a:	2b40      	cmp	r3, #64	@ 0x40
 8008f1c:	d005      	beq.n	8008f2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d054      	beq.n	8008fd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 fc98 	bl	800a860 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d146      	bne.n	8008fcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3308      	adds	r3, #8
 8008f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d9      	bne.n	8008f3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d017      	beq.n	8008fc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f9a:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <HAL_UART_IRQHandler+0x2c0>)
 8008f9c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7f9 ffe1 	bl	8002f6c <HAL_DMA_Abort_IT>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d019      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc2:	e00f      	b.n	8008fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fa8b 	bl	80094e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fca:	e00b      	b.n	8008fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa87 	bl	80094e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd2:	e007      	b.n	8008fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa83 	bl	80094e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008fe2:	e253      	b.n	800948c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe4:	bf00      	nop
    return;
 8008fe6:	e251      	b.n	800948c <HAL_UART_IRQHandler+0x75c>
 8008fe8:	10000001 	.word	0x10000001
 8008fec:	04000120 	.word	0x04000120
 8008ff0:	0800abc5 	.word	0x0800abc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	f040 81e7 	bne.w	80093cc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009002:	f003 0310 	and.w	r3, r3, #16
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 81e0 	beq.w	80093cc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800900c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 81d9 	beq.w	80093cc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2210      	movs	r2, #16
 8009020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800902c:	2b40      	cmp	r3, #64	@ 0x40
 800902e:	f040 8151 	bne.w	80092d4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a96      	ldr	r2, [pc, #600]	@ (8009294 <HAL_UART_IRQHandler+0x564>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d068      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a93      	ldr	r2, [pc, #588]	@ (8009298 <HAL_UART_IRQHandler+0x568>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d061      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a91      	ldr	r2, [pc, #580]	@ (800929c <HAL_UART_IRQHandler+0x56c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d05a      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a8e      	ldr	r2, [pc, #568]	@ (80092a0 <HAL_UART_IRQHandler+0x570>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d053      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a8c      	ldr	r2, [pc, #560]	@ (80092a4 <HAL_UART_IRQHandler+0x574>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d04c      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a89      	ldr	r2, [pc, #548]	@ (80092a8 <HAL_UART_IRQHandler+0x578>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d045      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a87      	ldr	r2, [pc, #540]	@ (80092ac <HAL_UART_IRQHandler+0x57c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d03e      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a84      	ldr	r2, [pc, #528]	@ (80092b0 <HAL_UART_IRQHandler+0x580>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d037      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a82      	ldr	r2, [pc, #520]	@ (80092b4 <HAL_UART_IRQHandler+0x584>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d030      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a7f      	ldr	r2, [pc, #508]	@ (80092b8 <HAL_UART_IRQHandler+0x588>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d029      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a7d      	ldr	r2, [pc, #500]	@ (80092bc <HAL_UART_IRQHandler+0x58c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d022      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a7a      	ldr	r2, [pc, #488]	@ (80092c0 <HAL_UART_IRQHandler+0x590>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d01b      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a78      	ldr	r2, [pc, #480]	@ (80092c4 <HAL_UART_IRQHandler+0x594>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d014      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a75      	ldr	r2, [pc, #468]	@ (80092c8 <HAL_UART_IRQHandler+0x598>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00d      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a73      	ldr	r2, [pc, #460]	@ (80092cc <HAL_UART_IRQHandler+0x59c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d006      	beq.n	8009112 <HAL_UART_IRQHandler+0x3e2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a70      	ldr	r2, [pc, #448]	@ (80092d0 <HAL_UART_IRQHandler+0x5a0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d106      	bne.n	8009120 <HAL_UART_IRQHandler+0x3f0>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	b29b      	uxth	r3, r3
 800911e:	e005      	b.n	800912c <HAL_UART_IRQHandler+0x3fc>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	b29b      	uxth	r3, r3
 800912c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 81ab 	beq.w	8009490 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009144:	429a      	cmp	r2, r3
 8009146:	f080 81a3 	bcs.w	8009490 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009150:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009160:	f000 8087 	beq.w	8009272 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009178:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800917c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	461a      	mov	r2, r3
 800918a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800918e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009192:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800919a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800919e:	e841 2300 	strex	r3, r2, [r1]
 80091a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1da      	bne.n	8009164 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091c0:	f023 0301 	bic.w	r3, r3, #1
 80091c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80091da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e1      	bne.n	80091ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009200:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3308      	adds	r3, #8
 800920a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800920e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009210:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800921c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e3      	bne.n	80091ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800923e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009240:	f023 0310 	bic.w	r3, r3, #16
 8009244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009252:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009254:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009258:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e4      	bne.n	8009230 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926c:	4618      	mov	r0, r3
 800926e:	f7f9 fb5f 	bl	8002930 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2202      	movs	r2, #2
 8009276:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009284:	b29b      	uxth	r3, r3
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b29b      	uxth	r3, r3
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7f7 fde7 	bl	8000e60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009292:	e0fd      	b.n	8009490 <HAL_UART_IRQHandler+0x760>
 8009294:	40020010 	.word	0x40020010
 8009298:	40020028 	.word	0x40020028
 800929c:	40020040 	.word	0x40020040
 80092a0:	40020058 	.word	0x40020058
 80092a4:	40020070 	.word	0x40020070
 80092a8:	40020088 	.word	0x40020088
 80092ac:	400200a0 	.word	0x400200a0
 80092b0:	400200b8 	.word	0x400200b8
 80092b4:	40020410 	.word	0x40020410
 80092b8:	40020428 	.word	0x40020428
 80092bc:	40020440 	.word	0x40020440
 80092c0:	40020458 	.word	0x40020458
 80092c4:	40020470 	.word	0x40020470
 80092c8:	40020488 	.word	0x40020488
 80092cc:	400204a0 	.word	0x400204a0
 80092d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 80cf 	beq.w	8009494 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80092f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 80ca 	beq.w	8009494 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800930e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009322:	647b      	str	r3, [r7, #68]	@ 0x44
 8009324:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e4      	bne.n	8009300 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3308      	adds	r3, #8
 800933c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	623b      	str	r3, [r7, #32]
   return(result);
 8009346:	6a3a      	ldr	r2, [r7, #32]
 8009348:	4b55      	ldr	r3, [pc, #340]	@ (80094a0 <HAL_UART_IRQHandler+0x770>)
 800934a:	4013      	ands	r3, r2
 800934c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800935a:	633a      	str	r2, [r7, #48]	@ 0x30
 800935c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e3      	bne.n	8009336 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0310 	bic.w	r3, r3, #16
 8009396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	69b9      	ldr	r1, [r7, #24]
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	617b      	str	r3, [r7, #20]
   return(result);
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e4      	bne.n	8009382 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7f7 fd4b 	bl	8000e60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093ca:	e063      	b.n	8009494 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00e      	beq.n	80093f6 <HAL_UART_IRQHandler+0x6c6>
 80093d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d008      	beq.n	80093f6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80093ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fc29 	bl	800ac46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093f4:	e051      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d014      	beq.n	800942c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800940a:	2b00      	cmp	r3, #0
 800940c:	d105      	bne.n	800941a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800940e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009412:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d008      	beq.n	800942c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800941e:	2b00      	cmp	r3, #0
 8009420:	d03a      	beq.n	8009498 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3
    }
    return;
 800942a:	e035      	b.n	8009498 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800942c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <HAL_UART_IRQHandler+0x71c>
 8009438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800943c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f001 fbd3 	bl	800abf0 <UART_EndTransmit_IT>
    return;
 800944a:	e026      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800944c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009450:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <HAL_UART_IRQHandler+0x73c>
 8009458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800945c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f001 fc02 	bl	800ac6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800946a:	e016      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800946c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d010      	beq.n	800949a <HAL_UART_IRQHandler+0x76a>
 8009478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800947c:	2b00      	cmp	r3, #0
 800947e:	da0c      	bge.n	800949a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fbea 	bl	800ac5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009486:	e008      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
      return;
 8009488:	bf00      	nop
 800948a:	e006      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
    return;
 800948c:	bf00      	nop
 800948e:	e004      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
      return;
 8009490:	bf00      	nop
 8009492:	e002      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
      return;
 8009494:	bf00      	nop
 8009496:	e000      	b.n	800949a <HAL_UART_IRQHandler+0x76a>
    return;
 8009498:	bf00      	nop
  }
}
 800949a:	37e8      	adds	r7, #232	@ 0xe8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	effffffe 	.word	0xeffffffe

080094a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b08f      	sub	sp, #60	@ 0x3c
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8009506:	2302      	movs	r3, #2
 8009508:	e042      	b.n	8009590 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2224      	movs	r2, #36	@ 0x24
 8009516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	e853 3f00 	ldrex	r3, [r3]
 8009526:	61fb      	str	r3, [r7, #28]
   return(result);
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	f023 030c 	bic.w	r3, r3, #12
 800952e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	461a      	mov	r2, r3
 8009536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800953a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800953e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009540:	e841 2300 	strex	r3, r2, [r1]
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1e6      	bne.n	800951a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	60bb      	str	r3, [r7, #8]
   return(result);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f043 0308 	orr.w	r3, r3, #8
 8009560:	633b      	str	r3, [r7, #48]	@ 0x30
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	61bb      	str	r3, [r7, #24]
 800956c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6979      	ldr	r1, [r7, #20]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e6      	bne.n	800954c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2220      	movs	r2, #32
 8009582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	373c      	adds	r7, #60	@ 0x3c
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b08f      	sub	sp, #60	@ 0x3c
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <HAL_HalfDuplex_EnableReceiver+0x16>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e042      	b.n	8009638 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2224      	movs	r2, #36	@ 0x24
 80095be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f023 030c 	bic.w	r3, r3, #12
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e6      	bne.n	80095c2 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	60bb      	str	r3, [r7, #8]
   return(result);
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f043 0304 	orr.w	r3, r3, #4
 8009608:	633b      	str	r3, [r7, #48]	@ 0x30
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	61bb      	str	r3, [r7, #24]
 8009614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6979      	ldr	r1, [r7, #20]
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	613b      	str	r3, [r7, #16]
   return(result);
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2220      	movs	r2, #32
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	373c      	adds	r7, #60	@ 0x3c
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009648:	b092      	sub	sp, #72	@ 0x48
 800964a:	af00      	add	r7, sp, #0
 800964c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	431a      	orrs	r2, r3
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	431a      	orrs	r2, r3
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	4313      	orrs	r3, r2
 800966a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4bbe      	ldr	r3, [pc, #760]	@ (800996c <UART_SetConfig+0x328>)
 8009674:	4013      	ands	r3, r2
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800967c:	430b      	orrs	r3, r1
 800967e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4ab3      	ldr	r2, [pc, #716]	@ (8009970 <UART_SetConfig+0x32c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d004      	beq.n	80096b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096ac:	4313      	orrs	r3, r2
 80096ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	4baf      	ldr	r3, [pc, #700]	@ (8009974 <UART_SetConfig+0x330>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	6812      	ldr	r2, [r2, #0]
 80096be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80096c0:	430b      	orrs	r3, r1
 80096c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ca:	f023 010f 	bic.w	r1, r3, #15
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4aa6      	ldr	r2, [pc, #664]	@ (8009978 <UART_SetConfig+0x334>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d177      	bne.n	80097d4 <UART_SetConfig+0x190>
 80096e4:	4ba5      	ldr	r3, [pc, #660]	@ (800997c <UART_SetConfig+0x338>)
 80096e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096ec:	2b28      	cmp	r3, #40	@ 0x28
 80096ee:	d86d      	bhi.n	80097cc <UART_SetConfig+0x188>
 80096f0:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0xb4>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	0800979d 	.word	0x0800979d
 80096fc:	080097cd 	.word	0x080097cd
 8009700:	080097cd 	.word	0x080097cd
 8009704:	080097cd 	.word	0x080097cd
 8009708:	080097cd 	.word	0x080097cd
 800970c:	080097cd 	.word	0x080097cd
 8009710:	080097cd 	.word	0x080097cd
 8009714:	080097cd 	.word	0x080097cd
 8009718:	080097a5 	.word	0x080097a5
 800971c:	080097cd 	.word	0x080097cd
 8009720:	080097cd 	.word	0x080097cd
 8009724:	080097cd 	.word	0x080097cd
 8009728:	080097cd 	.word	0x080097cd
 800972c:	080097cd 	.word	0x080097cd
 8009730:	080097cd 	.word	0x080097cd
 8009734:	080097cd 	.word	0x080097cd
 8009738:	080097ad 	.word	0x080097ad
 800973c:	080097cd 	.word	0x080097cd
 8009740:	080097cd 	.word	0x080097cd
 8009744:	080097cd 	.word	0x080097cd
 8009748:	080097cd 	.word	0x080097cd
 800974c:	080097cd 	.word	0x080097cd
 8009750:	080097cd 	.word	0x080097cd
 8009754:	080097cd 	.word	0x080097cd
 8009758:	080097b5 	.word	0x080097b5
 800975c:	080097cd 	.word	0x080097cd
 8009760:	080097cd 	.word	0x080097cd
 8009764:	080097cd 	.word	0x080097cd
 8009768:	080097cd 	.word	0x080097cd
 800976c:	080097cd 	.word	0x080097cd
 8009770:	080097cd 	.word	0x080097cd
 8009774:	080097cd 	.word	0x080097cd
 8009778:	080097bd 	.word	0x080097bd
 800977c:	080097cd 	.word	0x080097cd
 8009780:	080097cd 	.word	0x080097cd
 8009784:	080097cd 	.word	0x080097cd
 8009788:	080097cd 	.word	0x080097cd
 800978c:	080097cd 	.word	0x080097cd
 8009790:	080097cd 	.word	0x080097cd
 8009794:	080097cd 	.word	0x080097cd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e326      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e322      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e31e      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e31a      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e316      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e312      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097cc:	2380      	movs	r3, #128	@ 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e30e      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a69      	ldr	r2, [pc, #420]	@ (8009980 <UART_SetConfig+0x33c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d130      	bne.n	8009840 <UART_SetConfig+0x1fc>
 80097de:	4b67      	ldr	r3, [pc, #412]	@ (800997c <UART_SetConfig+0x338>)
 80097e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d826      	bhi.n	8009838 <UART_SetConfig+0x1f4>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0x1ac>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009819 	.word	0x08009819
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009829 	.word	0x08009829
 8009804:	08009831 	.word	0x08009831
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e2f0      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009810:	2304      	movs	r3, #4
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e2ec      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009818:	2308      	movs	r3, #8
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e2e8      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009820:	2310      	movs	r3, #16
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e2e4      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009828:	2320      	movs	r3, #32
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e2e0      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009830:	2340      	movs	r3, #64	@ 0x40
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e2dc      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009838:	2380      	movs	r3, #128	@ 0x80
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e2d8      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a4f      	ldr	r2, [pc, #316]	@ (8009984 <UART_SetConfig+0x340>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d130      	bne.n	80098ac <UART_SetConfig+0x268>
 800984a:	4b4c      	ldr	r3, [pc, #304]	@ (800997c <UART_SetConfig+0x338>)
 800984c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b05      	cmp	r3, #5
 8009854:	d826      	bhi.n	80098a4 <UART_SetConfig+0x260>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <UART_SetConfig+0x218>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009875 	.word	0x08009875
 8009860:	0800987d 	.word	0x0800987d
 8009864:	08009885 	.word	0x08009885
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	2300      	movs	r3, #0
 8009876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987a:	e2ba      	b.n	8009df2 <UART_SetConfig+0x7ae>
 800987c:	2304      	movs	r3, #4
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009882:	e2b6      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009884:	2308      	movs	r3, #8
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988a:	e2b2      	b.n	8009df2 <UART_SetConfig+0x7ae>
 800988c:	2310      	movs	r3, #16
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e2ae      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009894:	2320      	movs	r3, #32
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e2aa      	b.n	8009df2 <UART_SetConfig+0x7ae>
 800989c:	2340      	movs	r3, #64	@ 0x40
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e2a6      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80098a4:	2380      	movs	r3, #128	@ 0x80
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e2a2      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a35      	ldr	r2, [pc, #212]	@ (8009988 <UART_SetConfig+0x344>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d130      	bne.n	8009918 <UART_SetConfig+0x2d4>
 80098b6:	4b31      	ldr	r3, [pc, #196]	@ (800997c <UART_SetConfig+0x338>)
 80098b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	2b05      	cmp	r3, #5
 80098c0:	d826      	bhi.n	8009910 <UART_SetConfig+0x2cc>
 80098c2:	a201      	add	r2, pc, #4	@ (adr r2, 80098c8 <UART_SetConfig+0x284>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098e9 	.word	0x080098e9
 80098d0:	080098f1 	.word	0x080098f1
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	08009901 	.word	0x08009901
 80098dc:	08009909 	.word	0x08009909
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e284      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80098e8:	2304      	movs	r3, #4
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ee:	e280      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80098f0:	2308      	movs	r3, #8
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f6:	e27c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80098f8:	2310      	movs	r3, #16
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fe:	e278      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009900:	2320      	movs	r3, #32
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009906:	e274      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009908:	2340      	movs	r3, #64	@ 0x40
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800990e:	e270      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009910:	2380      	movs	r3, #128	@ 0x80
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009916:	e26c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a1b      	ldr	r2, [pc, #108]	@ (800998c <UART_SetConfig+0x348>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d142      	bne.n	80099a8 <UART_SetConfig+0x364>
 8009922:	4b16      	ldr	r3, [pc, #88]	@ (800997c <UART_SetConfig+0x338>)
 8009924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009926:	f003 0307 	and.w	r3, r3, #7
 800992a:	2b05      	cmp	r3, #5
 800992c:	d838      	bhi.n	80099a0 <UART_SetConfig+0x35c>
 800992e:	a201      	add	r2, pc, #4	@ (adr r2, 8009934 <UART_SetConfig+0x2f0>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	0800994d 	.word	0x0800994d
 8009938:	08009955 	.word	0x08009955
 800993c:	0800995d 	.word	0x0800995d
 8009940:	08009965 	.word	0x08009965
 8009944:	08009991 	.word	0x08009991
 8009948:	08009999 	.word	0x08009999
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009952:	e24e      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009954:	2304      	movs	r3, #4
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800995a:	e24a      	b.n	8009df2 <UART_SetConfig+0x7ae>
 800995c:	2308      	movs	r3, #8
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009962:	e246      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009964:	2310      	movs	r3, #16
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800996a:	e242      	b.n	8009df2 <UART_SetConfig+0x7ae>
 800996c:	cfff69f3 	.word	0xcfff69f3
 8009970:	58000c00 	.word	0x58000c00
 8009974:	11fff4ff 	.word	0x11fff4ff
 8009978:	40011000 	.word	0x40011000
 800997c:	58024400 	.word	0x58024400
 8009980:	40004400 	.word	0x40004400
 8009984:	40004800 	.word	0x40004800
 8009988:	40004c00 	.word	0x40004c00
 800998c:	40005000 	.word	0x40005000
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009996:	e22c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009998:	2340      	movs	r3, #64	@ 0x40
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800999e:	e228      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80099a0:	2380      	movs	r3, #128	@ 0x80
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099a6:	e224      	b.n	8009df2 <UART_SetConfig+0x7ae>
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4ab1      	ldr	r2, [pc, #708]	@ (8009c74 <UART_SetConfig+0x630>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d176      	bne.n	8009aa0 <UART_SetConfig+0x45c>
 80099b2:	4bb1      	ldr	r3, [pc, #708]	@ (8009c78 <UART_SetConfig+0x634>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ba:	2b28      	cmp	r3, #40	@ 0x28
 80099bc:	d86c      	bhi.n	8009a98 <UART_SetConfig+0x454>
 80099be:	a201      	add	r2, pc, #4	@ (adr r2, 80099c4 <UART_SetConfig+0x380>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	08009a69 	.word	0x08009a69
 80099c8:	08009a99 	.word	0x08009a99
 80099cc:	08009a99 	.word	0x08009a99
 80099d0:	08009a99 	.word	0x08009a99
 80099d4:	08009a99 	.word	0x08009a99
 80099d8:	08009a99 	.word	0x08009a99
 80099dc:	08009a99 	.word	0x08009a99
 80099e0:	08009a99 	.word	0x08009a99
 80099e4:	08009a71 	.word	0x08009a71
 80099e8:	08009a99 	.word	0x08009a99
 80099ec:	08009a99 	.word	0x08009a99
 80099f0:	08009a99 	.word	0x08009a99
 80099f4:	08009a99 	.word	0x08009a99
 80099f8:	08009a99 	.word	0x08009a99
 80099fc:	08009a99 	.word	0x08009a99
 8009a00:	08009a99 	.word	0x08009a99
 8009a04:	08009a79 	.word	0x08009a79
 8009a08:	08009a99 	.word	0x08009a99
 8009a0c:	08009a99 	.word	0x08009a99
 8009a10:	08009a99 	.word	0x08009a99
 8009a14:	08009a99 	.word	0x08009a99
 8009a18:	08009a99 	.word	0x08009a99
 8009a1c:	08009a99 	.word	0x08009a99
 8009a20:	08009a99 	.word	0x08009a99
 8009a24:	08009a81 	.word	0x08009a81
 8009a28:	08009a99 	.word	0x08009a99
 8009a2c:	08009a99 	.word	0x08009a99
 8009a30:	08009a99 	.word	0x08009a99
 8009a34:	08009a99 	.word	0x08009a99
 8009a38:	08009a99 	.word	0x08009a99
 8009a3c:	08009a99 	.word	0x08009a99
 8009a40:	08009a99 	.word	0x08009a99
 8009a44:	08009a89 	.word	0x08009a89
 8009a48:	08009a99 	.word	0x08009a99
 8009a4c:	08009a99 	.word	0x08009a99
 8009a50:	08009a99 	.word	0x08009a99
 8009a54:	08009a99 	.word	0x08009a99
 8009a58:	08009a99 	.word	0x08009a99
 8009a5c:	08009a99 	.word	0x08009a99
 8009a60:	08009a99 	.word	0x08009a99
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a6e:	e1c0      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a76:	e1bc      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a7e:	e1b8      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e1b4      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e1b0      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009a90:	2340      	movs	r3, #64	@ 0x40
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e1ac      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009a98:	2380      	movs	r3, #128	@ 0x80
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e1a8      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a75      	ldr	r2, [pc, #468]	@ (8009c7c <UART_SetConfig+0x638>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d130      	bne.n	8009b0c <UART_SetConfig+0x4c8>
 8009aaa:	4b73      	ldr	r3, [pc, #460]	@ (8009c78 <UART_SetConfig+0x634>)
 8009aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d826      	bhi.n	8009b04 <UART_SetConfig+0x4c0>
 8009ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <UART_SetConfig+0x478>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ada:	e18a      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ae2:	e186      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aea:	e182      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009af2:	e17e      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009afa:	e17a      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009afc:	2340      	movs	r3, #64	@ 0x40
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b02:	e176      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b04:	2380      	movs	r3, #128	@ 0x80
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b0a:	e172      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a5b      	ldr	r2, [pc, #364]	@ (8009c80 <UART_SetConfig+0x63c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d130      	bne.n	8009b78 <UART_SetConfig+0x534>
 8009b16:	4b58      	ldr	r3, [pc, #352]	@ (8009c78 <UART_SetConfig+0x634>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d826      	bhi.n	8009b70 <UART_SetConfig+0x52c>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0x4e4>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b61 	.word	0x08009b61
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b46:	e154      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b4e:	e150      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b56:	e14c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b5e:	e148      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b60:	2320      	movs	r3, #32
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b66:	e144      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b68:	2340      	movs	r3, #64	@ 0x40
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b6e:	e140      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b70:	2380      	movs	r3, #128	@ 0x80
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b76:	e13c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a41      	ldr	r2, [pc, #260]	@ (8009c84 <UART_SetConfig+0x640>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	f040 8082 	bne.w	8009c88 <UART_SetConfig+0x644>
 8009b84:	4b3c      	ldr	r3, [pc, #240]	@ (8009c78 <UART_SetConfig+0x634>)
 8009b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b8c:	2b28      	cmp	r3, #40	@ 0x28
 8009b8e:	d86d      	bhi.n	8009c6c <UART_SetConfig+0x628>
 8009b90:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <UART_SetConfig+0x554>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009c3d 	.word	0x08009c3d
 8009b9c:	08009c6d 	.word	0x08009c6d
 8009ba0:	08009c6d 	.word	0x08009c6d
 8009ba4:	08009c6d 	.word	0x08009c6d
 8009ba8:	08009c6d 	.word	0x08009c6d
 8009bac:	08009c6d 	.word	0x08009c6d
 8009bb0:	08009c6d 	.word	0x08009c6d
 8009bb4:	08009c6d 	.word	0x08009c6d
 8009bb8:	08009c45 	.word	0x08009c45
 8009bbc:	08009c6d 	.word	0x08009c6d
 8009bc0:	08009c6d 	.word	0x08009c6d
 8009bc4:	08009c6d 	.word	0x08009c6d
 8009bc8:	08009c6d 	.word	0x08009c6d
 8009bcc:	08009c6d 	.word	0x08009c6d
 8009bd0:	08009c6d 	.word	0x08009c6d
 8009bd4:	08009c6d 	.word	0x08009c6d
 8009bd8:	08009c4d 	.word	0x08009c4d
 8009bdc:	08009c6d 	.word	0x08009c6d
 8009be0:	08009c6d 	.word	0x08009c6d
 8009be4:	08009c6d 	.word	0x08009c6d
 8009be8:	08009c6d 	.word	0x08009c6d
 8009bec:	08009c6d 	.word	0x08009c6d
 8009bf0:	08009c6d 	.word	0x08009c6d
 8009bf4:	08009c6d 	.word	0x08009c6d
 8009bf8:	08009c55 	.word	0x08009c55
 8009bfc:	08009c6d 	.word	0x08009c6d
 8009c00:	08009c6d 	.word	0x08009c6d
 8009c04:	08009c6d 	.word	0x08009c6d
 8009c08:	08009c6d 	.word	0x08009c6d
 8009c0c:	08009c6d 	.word	0x08009c6d
 8009c10:	08009c6d 	.word	0x08009c6d
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	08009c6d 	.word	0x08009c6d
 8009c24:	08009c6d 	.word	0x08009c6d
 8009c28:	08009c6d 	.word	0x08009c6d
 8009c2c:	08009c6d 	.word	0x08009c6d
 8009c30:	08009c6d 	.word	0x08009c6d
 8009c34:	08009c6d 	.word	0x08009c6d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e0d6      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e0d2      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e0ce      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e0ca      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e0c6      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c64:	2340      	movs	r3, #64	@ 0x40
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e0c2      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c6c:	2380      	movs	r3, #128	@ 0x80
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e0be      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009c74:	40011400 	.word	0x40011400
 8009c78:	58024400 	.word	0x58024400
 8009c7c:	40007800 	.word	0x40007800
 8009c80:	40007c00 	.word	0x40007c00
 8009c84:	40011800 	.word	0x40011800
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4aad      	ldr	r2, [pc, #692]	@ (8009f44 <UART_SetConfig+0x900>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d176      	bne.n	8009d80 <UART_SetConfig+0x73c>
 8009c92:	4bad      	ldr	r3, [pc, #692]	@ (8009f48 <UART_SetConfig+0x904>)
 8009c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c9a:	2b28      	cmp	r3, #40	@ 0x28
 8009c9c:	d86c      	bhi.n	8009d78 <UART_SetConfig+0x734>
 8009c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca4 <UART_SetConfig+0x660>)
 8009ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca4:	08009d49 	.word	0x08009d49
 8009ca8:	08009d79 	.word	0x08009d79
 8009cac:	08009d79 	.word	0x08009d79
 8009cb0:	08009d79 	.word	0x08009d79
 8009cb4:	08009d79 	.word	0x08009d79
 8009cb8:	08009d79 	.word	0x08009d79
 8009cbc:	08009d79 	.word	0x08009d79
 8009cc0:	08009d79 	.word	0x08009d79
 8009cc4:	08009d51 	.word	0x08009d51
 8009cc8:	08009d79 	.word	0x08009d79
 8009ccc:	08009d79 	.word	0x08009d79
 8009cd0:	08009d79 	.word	0x08009d79
 8009cd4:	08009d79 	.word	0x08009d79
 8009cd8:	08009d79 	.word	0x08009d79
 8009cdc:	08009d79 	.word	0x08009d79
 8009ce0:	08009d79 	.word	0x08009d79
 8009ce4:	08009d59 	.word	0x08009d59
 8009ce8:	08009d79 	.word	0x08009d79
 8009cec:	08009d79 	.word	0x08009d79
 8009cf0:	08009d79 	.word	0x08009d79
 8009cf4:	08009d79 	.word	0x08009d79
 8009cf8:	08009d79 	.word	0x08009d79
 8009cfc:	08009d79 	.word	0x08009d79
 8009d00:	08009d79 	.word	0x08009d79
 8009d04:	08009d61 	.word	0x08009d61
 8009d08:	08009d79 	.word	0x08009d79
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009d79 	.word	0x08009d79
 8009d14:	08009d79 	.word	0x08009d79
 8009d18:	08009d79 	.word	0x08009d79
 8009d1c:	08009d79 	.word	0x08009d79
 8009d20:	08009d79 	.word	0x08009d79
 8009d24:	08009d69 	.word	0x08009d69
 8009d28:	08009d79 	.word	0x08009d79
 8009d2c:	08009d79 	.word	0x08009d79
 8009d30:	08009d79 	.word	0x08009d79
 8009d34:	08009d79 	.word	0x08009d79
 8009d38:	08009d79 	.word	0x08009d79
 8009d3c:	08009d79 	.word	0x08009d79
 8009d40:	08009d79 	.word	0x08009d79
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4e:	e050      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d56:	e04c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5e:	e048      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d66:	e044      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d68:	2320      	movs	r3, #32
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d6e:	e040      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d70:	2340      	movs	r3, #64	@ 0x40
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d76:	e03c      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d78:	2380      	movs	r3, #128	@ 0x80
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e038      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a71      	ldr	r2, [pc, #452]	@ (8009f4c <UART_SetConfig+0x908>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d130      	bne.n	8009dec <UART_SetConfig+0x7a8>
 8009d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8009f48 <UART_SetConfig+0x904>)
 8009d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d8e:	f003 0307 	and.w	r3, r3, #7
 8009d92:	2b05      	cmp	r3, #5
 8009d94:	d826      	bhi.n	8009de4 <UART_SetConfig+0x7a0>
 8009d96:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <UART_SetConfig+0x758>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009db5 	.word	0x08009db5
 8009da0:	08009dbd 	.word	0x08009dbd
 8009da4:	08009dc5 	.word	0x08009dc5
 8009da8:	08009dcd 	.word	0x08009dcd
 8009dac:	08009dd5 	.word	0x08009dd5
 8009db0:	08009ddd 	.word	0x08009ddd
 8009db4:	2302      	movs	r3, #2
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dba:	e01a      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009dbc:	2304      	movs	r3, #4
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc2:	e016      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dca:	e012      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dd2:	e00e      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dda:	e00a      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009ddc:	2340      	movs	r3, #64	@ 0x40
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009de2:	e006      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009de4:	2380      	movs	r3, #128	@ 0x80
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e002      	b.n	8009df2 <UART_SetConfig+0x7ae>
 8009dec:	2380      	movs	r3, #128	@ 0x80
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a55      	ldr	r2, [pc, #340]	@ (8009f4c <UART_SetConfig+0x908>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	f040 80f8 	bne.w	8009fee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009dfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	dc46      	bgt.n	8009e94 <UART_SetConfig+0x850>
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	db75      	blt.n	8009ef6 <UART_SetConfig+0x8b2>
 8009e0a:	3b02      	subs	r3, #2
 8009e0c:	2b1e      	cmp	r3, #30
 8009e0e:	d872      	bhi.n	8009ef6 <UART_SetConfig+0x8b2>
 8009e10:	a201      	add	r2, pc, #4	@ (adr r2, 8009e18 <UART_SetConfig+0x7d4>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	08009e9b 	.word	0x08009e9b
 8009e1c:	08009ef7 	.word	0x08009ef7
 8009e20:	08009ea3 	.word	0x08009ea3
 8009e24:	08009ef7 	.word	0x08009ef7
 8009e28:	08009ef7 	.word	0x08009ef7
 8009e2c:	08009ef7 	.word	0x08009ef7
 8009e30:	08009eb3 	.word	0x08009eb3
 8009e34:	08009ef7 	.word	0x08009ef7
 8009e38:	08009ef7 	.word	0x08009ef7
 8009e3c:	08009ef7 	.word	0x08009ef7
 8009e40:	08009ef7 	.word	0x08009ef7
 8009e44:	08009ef7 	.word	0x08009ef7
 8009e48:	08009ef7 	.word	0x08009ef7
 8009e4c:	08009ef7 	.word	0x08009ef7
 8009e50:	08009ec3 	.word	0x08009ec3
 8009e54:	08009ef7 	.word	0x08009ef7
 8009e58:	08009ef7 	.word	0x08009ef7
 8009e5c:	08009ef7 	.word	0x08009ef7
 8009e60:	08009ef7 	.word	0x08009ef7
 8009e64:	08009ef7 	.word	0x08009ef7
 8009e68:	08009ef7 	.word	0x08009ef7
 8009e6c:	08009ef7 	.word	0x08009ef7
 8009e70:	08009ef7 	.word	0x08009ef7
 8009e74:	08009ef7 	.word	0x08009ef7
 8009e78:	08009ef7 	.word	0x08009ef7
 8009e7c:	08009ef7 	.word	0x08009ef7
 8009e80:	08009ef7 	.word	0x08009ef7
 8009e84:	08009ef7 	.word	0x08009ef7
 8009e88:	08009ef7 	.word	0x08009ef7
 8009e8c:	08009ef7 	.word	0x08009ef7
 8009e90:	08009ee9 	.word	0x08009ee9
 8009e94:	2b40      	cmp	r3, #64	@ 0x40
 8009e96:	d02a      	beq.n	8009eee <UART_SetConfig+0x8aa>
 8009e98:	e02d      	b.n	8009ef6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e9a:	f7fd f8f5 	bl	8007088 <HAL_RCCEx_GetD3PCLK1Freq>
 8009e9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ea0:	e02f      	b.n	8009f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fd f904 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb0:	e027      	b.n	8009f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eb2:	f107 0318 	add.w	r3, r7, #24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fd fa50 	bl	800735c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec0:	e01f      	b.n	8009f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec2:	4b21      	ldr	r3, [pc, #132]	@ (8009f48 <UART_SetConfig+0x904>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ece:	4b1e      	ldr	r3, [pc, #120]	@ (8009f48 <UART_SetConfig+0x904>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	08db      	lsrs	r3, r3, #3
 8009ed4:	f003 0303 	and.w	r3, r3, #3
 8009ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f50 <UART_SetConfig+0x90c>)
 8009eda:	fa22 f303 	lsr.w	r3, r2, r3
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ee0:	e00f      	b.n	8009f02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f50 <UART_SetConfig+0x90c>)
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee6:	e00c      	b.n	8009f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f54 <UART_SetConfig+0x910>)
 8009eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eec:	e009      	b.n	8009f02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef4:	e005      	b.n	8009f02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 81ee 	beq.w	800a2e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0e:	4a12      	ldr	r2, [pc, #72]	@ (8009f58 <UART_SetConfig+0x914>)
 8009f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f1c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	4613      	mov	r3, r2
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	4413      	add	r3, r2
 8009f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d305      	bcc.n	8009f3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d910      	bls.n	8009f5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f40:	e1d1      	b.n	800a2e6 <UART_SetConfig+0xca2>
 8009f42:	bf00      	nop
 8009f44:	40011c00 	.word	0x40011c00
 8009f48:	58024400 	.word	0x58024400
 8009f4c:	58000c00 	.word	0x58000c00
 8009f50:	03d09000 	.word	0x03d09000
 8009f54:	003d0900 	.word	0x003d0900
 8009f58:	0800afc0 	.word	0x0800afc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f5e:	2200      	movs	r2, #0
 8009f60:	60bb      	str	r3, [r7, #8]
 8009f62:	60fa      	str	r2, [r7, #12]
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f68:	4ac0      	ldr	r2, [pc, #768]	@ (800a26c <UART_SetConfig+0xc28>)
 8009f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	2200      	movs	r2, #0
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	607a      	str	r2, [r7, #4]
 8009f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f7e:	f7f6 f9c5 	bl	800030c <__aeabi_uldivmod>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4610      	mov	r0, r2
 8009f88:	4619      	mov	r1, r3
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	020b      	lsls	r3, r1, #8
 8009f94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f98:	0202      	lsls	r2, r0, #8
 8009f9a:	6979      	ldr	r1, [r7, #20]
 8009f9c:	6849      	ldr	r1, [r1, #4]
 8009f9e:	0849      	lsrs	r1, r1, #1
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	eb12 0804 	adds.w	r8, r2, r4
 8009faa:	eb43 0905 	adc.w	r9, r3, r5
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	469a      	mov	sl, r3
 8009fb6:	4693      	mov	fp, r2
 8009fb8:	4652      	mov	r2, sl
 8009fba:	465b      	mov	r3, fp
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	f7f6 f9a4 	bl	800030c <__aeabi_uldivmod>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	4613      	mov	r3, r2
 8009fca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd2:	d308      	bcc.n	8009fe6 <UART_SetConfig+0x9a2>
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fda:	d204      	bcs.n	8009fe6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fe2:	60da      	str	r2, [r3, #12]
 8009fe4:	e17f      	b.n	800a2e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009fec:	e17b      	b.n	800a2e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff6:	f040 80bd 	bne.w	800a174 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	dc48      	bgt.n	800a094 <UART_SetConfig+0xa50>
 800a002:	2b00      	cmp	r3, #0
 800a004:	db7b      	blt.n	800a0fe <UART_SetConfig+0xaba>
 800a006:	2b20      	cmp	r3, #32
 800a008:	d879      	bhi.n	800a0fe <UART_SetConfig+0xaba>
 800a00a:	a201      	add	r2, pc, #4	@ (adr r2, 800a010 <UART_SetConfig+0x9cc>)
 800a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a010:	0800a09b 	.word	0x0800a09b
 800a014:	0800a0a3 	.word	0x0800a0a3
 800a018:	0800a0ff 	.word	0x0800a0ff
 800a01c:	0800a0ff 	.word	0x0800a0ff
 800a020:	0800a0ab 	.word	0x0800a0ab
 800a024:	0800a0ff 	.word	0x0800a0ff
 800a028:	0800a0ff 	.word	0x0800a0ff
 800a02c:	0800a0ff 	.word	0x0800a0ff
 800a030:	0800a0bb 	.word	0x0800a0bb
 800a034:	0800a0ff 	.word	0x0800a0ff
 800a038:	0800a0ff 	.word	0x0800a0ff
 800a03c:	0800a0ff 	.word	0x0800a0ff
 800a040:	0800a0ff 	.word	0x0800a0ff
 800a044:	0800a0ff 	.word	0x0800a0ff
 800a048:	0800a0ff 	.word	0x0800a0ff
 800a04c:	0800a0ff 	.word	0x0800a0ff
 800a050:	0800a0cb 	.word	0x0800a0cb
 800a054:	0800a0ff 	.word	0x0800a0ff
 800a058:	0800a0ff 	.word	0x0800a0ff
 800a05c:	0800a0ff 	.word	0x0800a0ff
 800a060:	0800a0ff 	.word	0x0800a0ff
 800a064:	0800a0ff 	.word	0x0800a0ff
 800a068:	0800a0ff 	.word	0x0800a0ff
 800a06c:	0800a0ff 	.word	0x0800a0ff
 800a070:	0800a0ff 	.word	0x0800a0ff
 800a074:	0800a0ff 	.word	0x0800a0ff
 800a078:	0800a0ff 	.word	0x0800a0ff
 800a07c:	0800a0ff 	.word	0x0800a0ff
 800a080:	0800a0ff 	.word	0x0800a0ff
 800a084:	0800a0ff 	.word	0x0800a0ff
 800a088:	0800a0ff 	.word	0x0800a0ff
 800a08c:	0800a0ff 	.word	0x0800a0ff
 800a090:	0800a0f1 	.word	0x0800a0f1
 800a094:	2b40      	cmp	r3, #64	@ 0x40
 800a096:	d02e      	beq.n	800a0f6 <UART_SetConfig+0xab2>
 800a098:	e031      	b.n	800a0fe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a09a:	f7fb fe29 	bl	8005cf0 <HAL_RCC_GetPCLK1Freq>
 800a09e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0a0:	e033      	b.n	800a10a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0a2:	f7fb fe3b 	bl	8005d1c <HAL_RCC_GetPCLK2Freq>
 800a0a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0a8:	e02f      	b.n	800a10a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fd f800 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b8:	e027      	b.n	800a10a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ba:	f107 0318 	add.w	r3, r7, #24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fd f94c 	bl	800735c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c8:	e01f      	b.n	800a10a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ca:	4b69      	ldr	r3, [pc, #420]	@ (800a270 <UART_SetConfig+0xc2c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d009      	beq.n	800a0ea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0d6:	4b66      	ldr	r3, [pc, #408]	@ (800a270 <UART_SetConfig+0xc2c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	08db      	lsrs	r3, r3, #3
 800a0dc:	f003 0303 	and.w	r3, r3, #3
 800a0e0:	4a64      	ldr	r2, [pc, #400]	@ (800a274 <UART_SetConfig+0xc30>)
 800a0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0e8:	e00f      	b.n	800a10a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a0ea:	4b62      	ldr	r3, [pc, #392]	@ (800a274 <UART_SetConfig+0xc30>)
 800a0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ee:	e00c      	b.n	800a10a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0f0:	4b61      	ldr	r3, [pc, #388]	@ (800a278 <UART_SetConfig+0xc34>)
 800a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f4:	e009      	b.n	800a10a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0fc:	e005      	b.n	800a10a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a108:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 80ea 	beq.w	800a2e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a116:	4a55      	ldr	r2, [pc, #340]	@ (800a26c <UART_SetConfig+0xc28>)
 800a118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11c:	461a      	mov	r2, r3
 800a11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a120:	fbb3 f3f2 	udiv	r3, r3, r2
 800a124:	005a      	lsls	r2, r3, #1
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	441a      	add	r2, r3
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	fbb2 f3f3 	udiv	r3, r2, r3
 800a136:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13a:	2b0f      	cmp	r3, #15
 800a13c:	d916      	bls.n	800a16c <UART_SetConfig+0xb28>
 800a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a144:	d212      	bcs.n	800a16c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a148:	b29b      	uxth	r3, r3
 800a14a:	f023 030f 	bic.w	r3, r3, #15
 800a14e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	085b      	lsrs	r3, r3, #1
 800a154:	b29b      	uxth	r3, r3
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a15e:	4313      	orrs	r3, r2
 800a160:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a168:	60da      	str	r2, [r3, #12]
 800a16a:	e0bc      	b.n	800a2e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a172:	e0b8      	b.n	800a2e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a174:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a178:	2b20      	cmp	r3, #32
 800a17a:	dc4b      	bgt.n	800a214 <UART_SetConfig+0xbd0>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f2c0 8087 	blt.w	800a290 <UART_SetConfig+0xc4c>
 800a182:	2b20      	cmp	r3, #32
 800a184:	f200 8084 	bhi.w	800a290 <UART_SetConfig+0xc4c>
 800a188:	a201      	add	r2, pc, #4	@ (adr r2, 800a190 <UART_SetConfig+0xb4c>)
 800a18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18e:	bf00      	nop
 800a190:	0800a21b 	.word	0x0800a21b
 800a194:	0800a223 	.word	0x0800a223
 800a198:	0800a291 	.word	0x0800a291
 800a19c:	0800a291 	.word	0x0800a291
 800a1a0:	0800a22b 	.word	0x0800a22b
 800a1a4:	0800a291 	.word	0x0800a291
 800a1a8:	0800a291 	.word	0x0800a291
 800a1ac:	0800a291 	.word	0x0800a291
 800a1b0:	0800a23b 	.word	0x0800a23b
 800a1b4:	0800a291 	.word	0x0800a291
 800a1b8:	0800a291 	.word	0x0800a291
 800a1bc:	0800a291 	.word	0x0800a291
 800a1c0:	0800a291 	.word	0x0800a291
 800a1c4:	0800a291 	.word	0x0800a291
 800a1c8:	0800a291 	.word	0x0800a291
 800a1cc:	0800a291 	.word	0x0800a291
 800a1d0:	0800a24b 	.word	0x0800a24b
 800a1d4:	0800a291 	.word	0x0800a291
 800a1d8:	0800a291 	.word	0x0800a291
 800a1dc:	0800a291 	.word	0x0800a291
 800a1e0:	0800a291 	.word	0x0800a291
 800a1e4:	0800a291 	.word	0x0800a291
 800a1e8:	0800a291 	.word	0x0800a291
 800a1ec:	0800a291 	.word	0x0800a291
 800a1f0:	0800a291 	.word	0x0800a291
 800a1f4:	0800a291 	.word	0x0800a291
 800a1f8:	0800a291 	.word	0x0800a291
 800a1fc:	0800a291 	.word	0x0800a291
 800a200:	0800a291 	.word	0x0800a291
 800a204:	0800a291 	.word	0x0800a291
 800a208:	0800a291 	.word	0x0800a291
 800a20c:	0800a291 	.word	0x0800a291
 800a210:	0800a283 	.word	0x0800a283
 800a214:	2b40      	cmp	r3, #64	@ 0x40
 800a216:	d037      	beq.n	800a288 <UART_SetConfig+0xc44>
 800a218:	e03a      	b.n	800a290 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a21a:	f7fb fd69 	bl	8005cf0 <HAL_RCC_GetPCLK1Freq>
 800a21e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a220:	e03c      	b.n	800a29c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a222:	f7fb fd7b 	bl	8005d1c <HAL_RCC_GetPCLK2Freq>
 800a226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a228:	e038      	b.n	800a29c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a22a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fc ff40 	bl	80070b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a238:	e030      	b.n	800a29c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a23a:	f107 0318 	add.w	r3, r7, #24
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fd f88c 	bl	800735c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a248:	e028      	b.n	800a29c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a24a:	4b09      	ldr	r3, [pc, #36]	@ (800a270 <UART_SetConfig+0xc2c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b00      	cmp	r3, #0
 800a254:	d012      	beq.n	800a27c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a256:	4b06      	ldr	r3, [pc, #24]	@ (800a270 <UART_SetConfig+0xc2c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	4a04      	ldr	r2, [pc, #16]	@ (800a274 <UART_SetConfig+0xc30>)
 800a262:	fa22 f303 	lsr.w	r3, r2, r3
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a268:	e018      	b.n	800a29c <UART_SetConfig+0xc58>
 800a26a:	bf00      	nop
 800a26c:	0800afc0 	.word	0x0800afc0
 800a270:	58024400 	.word	0x58024400
 800a274:	03d09000 	.word	0x03d09000
 800a278:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a27c:	4b24      	ldr	r3, [pc, #144]	@ (800a310 <UART_SetConfig+0xccc>)
 800a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a280:	e00c      	b.n	800a29c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a282:	4b24      	ldr	r3, [pc, #144]	@ (800a314 <UART_SetConfig+0xcd0>)
 800a284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a286:	e009      	b.n	800a29c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28e:	e005      	b.n	800a29c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a29a:	bf00      	nop
    }

    if (pclk != 0U)
 800a29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d021      	beq.n	800a2e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	@ (800a318 <UART_SetConfig+0xcd4>)
 800a2a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	441a      	add	r2, r3
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	2b0f      	cmp	r3, #15
 800a2ca:	d909      	bls.n	800a2e0 <UART_SetConfig+0xc9c>
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2d2:	d205      	bcs.n	800a2e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	60da      	str	r2, [r3, #12]
 800a2de:	e002      	b.n	800a2e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	2200      	movs	r2, #0
 800a300:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a302:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a306:	4618      	mov	r0, r3
 800a308:	3748      	adds	r7, #72	@ 0x48
 800a30a:	46bd      	mov	sp, r7
 800a30c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a310:	03d09000 	.word	0x03d09000
 800a314:	003d0900 	.word	0x003d0900
 800a318:	0800afc0 	.word	0x0800afc0

0800a31c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a328:	f003 0308 	and.w	r3, r3, #8
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	430a      	orrs	r2, r1
 800a366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00a      	beq.n	800a38a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38e:	f003 0304 	and.w	r3, r3, #4
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00a      	beq.n	800a3ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b0:	f003 0310 	and.w	r3, r3, #16
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00a      	beq.n	800a3ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	430a      	orrs	r2, r1
 800a3cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00a      	beq.n	800a3f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01a      	beq.n	800a432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a41a:	d10a      	bne.n	800a432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b098      	sub	sp, #96	@ 0x60
 800a464:	af02      	add	r7, sp, #8
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a470:	f7f7 f8de 	bl	8001630 <HAL_GetTick>
 800a474:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b08      	cmp	r3, #8
 800a482:	d12f      	bne.n	800a4e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a484:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a48c:	2200      	movs	r2, #0
 800a48e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f88e 	bl	800a5b4 <UART_WaitOnFlagUntilTimeout>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d022      	beq.n	800a4e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4c4:	e841 2300 	strex	r3, r2, [r1]
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e6      	bne.n	800a49e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e063      	b.n	800a5ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d149      	bne.n	800a586 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f857 	bl	800a5b4 <UART_WaitOnFlagUntilTimeout>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d03c      	beq.n	800a586 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	623b      	str	r3, [r7, #32]
   return(result);
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a52a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a52c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1e6      	bne.n	800a50c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3308      	adds	r3, #8
 800a544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f023 0301 	bic.w	r3, r3, #1
 800a554:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3308      	adds	r3, #8
 800a55c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a55e:	61fa      	str	r2, [r7, #28]
 800a560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	69b9      	ldr	r1, [r7, #24]
 800a564:	69fa      	ldr	r2, [r7, #28]
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	617b      	str	r3, [r7, #20]
   return(result);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e5      	bne.n	800a53e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e012      	b.n	800a5ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2220      	movs	r2, #32
 800a58a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2220      	movs	r2, #32
 800a592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3758      	adds	r7, #88	@ 0x58
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5c4:	e04f      	b.n	800a666 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d04b      	beq.n	800a666 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5ce:	f7f7 f82f 	bl	8001630 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d302      	bcc.n	800a5e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e04e      	b.n	800a686 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 0304 	and.w	r3, r3, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d037      	beq.n	800a666 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b80      	cmp	r3, #128	@ 0x80
 800a5fa:	d034      	beq.n	800a666 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b40      	cmp	r3, #64	@ 0x40
 800a600:	d031      	beq.n	800a666 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d110      	bne.n	800a632 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2208      	movs	r2, #8
 800a616:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f921 	bl	800a860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2208      	movs	r2, #8
 800a622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e029      	b.n	800a686 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a63c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a640:	d111      	bne.n	800a666 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a64a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f907 	bl	800a860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e00f      	b.n	800a686 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	69da      	ldr	r2, [r3, #28]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4013      	ands	r3, r2
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	429a      	cmp	r2, r3
 800a674:	bf0c      	ite	eq
 800a676:	2301      	moveq	r3, #1
 800a678:	2300      	movne	r3, #0
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	461a      	mov	r2, r3
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	429a      	cmp	r2, r3
 800a682:	d0a0      	beq.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b096      	sub	sp, #88	@ 0x58
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	88fa      	ldrh	r2, [r7, #6]
 800a6a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2222      	movs	r2, #34	@ 0x22
 800a6b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02d      	beq.n	800a722 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6cc:	4a40      	ldr	r2, [pc, #256]	@ (800a7d0 <UART_Start_Receive_DMA+0x140>)
 800a6ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6d6:	4a3f      	ldr	r2, [pc, #252]	@ (800a7d4 <UART_Start_Receive_DMA+0x144>)
 800a6d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e0:	4a3d      	ldr	r2, [pc, #244]	@ (800a7d8 <UART_Start_Receive_DMA+0x148>)
 800a6e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3324      	adds	r3, #36	@ 0x24
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a700:	461a      	mov	r2, r3
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	f7f7 feaa 	bl	800245c <HAL_DMA_Start_IT>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2210      	movs	r2, #16
 800a712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2220      	movs	r2, #32
 800a71a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e051      	b.n	800a7c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d018      	beq.n	800a75c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a73e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a74a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a74e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e6      	bne.n	800a72a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	653b      	str	r3, [r7, #80]	@ 0x50
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a77c:	637a      	str	r2, [r7, #52]	@ 0x34
 800a77e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e5      	bne.n	800a75c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3308      	adds	r3, #8
 800a796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7b0:	623a      	str	r2, [r7, #32]
 800a7b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	69f9      	ldr	r1, [r7, #28]
 800a7b6:	6a3a      	ldr	r2, [r7, #32]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e5      	bne.n	800a790 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3758      	adds	r7, #88	@ 0x58
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	0800a9df 	.word	0x0800a9df
 800a7d4:	0800ab07 	.word	0x0800ab07
 800a7d8:	0800ab45 	.word	0x0800ab45

0800a7dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b08f      	sub	sp, #60	@ 0x3c
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	e853 3f00 	ldrex	r3, [r3]
 800a7f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a804:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a806:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e6      	bne.n	800a7e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	e853 3f00 	ldrex	r3, [r3]
 800a824:	60bb      	str	r3, [r7, #8]
   return(result);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a82c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	3308      	adds	r3, #8
 800a834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a836:	61ba      	str	r2, [r7, #24]
 800a838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83a:	6979      	ldr	r1, [r7, #20]
 800a83c:	69ba      	ldr	r2, [r7, #24]
 800a83e:	e841 2300 	strex	r3, r2, [r1]
 800a842:	613b      	str	r3, [r7, #16]
   return(result);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1e5      	bne.n	800a816 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a852:	bf00      	nop
 800a854:	373c      	adds	r7, #60	@ 0x3c
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
	...

0800a860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b095      	sub	sp, #84	@ 0x54
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a870:	e853 3f00 	ldrex	r3, [r3]
 800a874:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a87c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a886:	643b      	str	r3, [r7, #64]	@ 0x40
 800a888:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a88c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a88e:	e841 2300 	strex	r3, r2, [r1]
 800a892:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e6      	bne.n	800a868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	e853 3f00 	ldrex	r3, [r3]
 800a8a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	4b1e      	ldr	r3, [pc, #120]	@ (800a928 <UART_EndRxTransfer+0xc8>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e5      	bne.n	800a89a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d118      	bne.n	800a908 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	e853 3f00 	ldrex	r3, [r3]
 800a8e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f023 0310 	bic.w	r3, r3, #16
 800a8ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f8:	6979      	ldr	r1, [r7, #20]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	e841 2300 	strex	r3, r2, [r1]
 800a900:	613b      	str	r3, [r7, #16]
   return(result);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1e6      	bne.n	800a8d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a91c:	bf00      	nop
 800a91e:	3754      	adds	r7, #84	@ 0x54
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	effffffe 	.word	0xeffffffe

0800a92c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b090      	sub	sp, #64	@ 0x40
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a942:	d037      	beq.n	800a9b4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a946:	2200      	movs	r2, #0
 800a948:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3308      	adds	r3, #8
 800a952:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a956:	e853 3f00 	ldrex	r3, [r3]
 800a95a:	623b      	str	r3, [r7, #32]
   return(result);
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a962:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3308      	adds	r3, #8
 800a96a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a96c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a974:	e841 2300 	strex	r3, r2, [r1]
 800a978:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e5      	bne.n	800a94c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a994:	637b      	str	r3, [r7, #52]	@ 0x34
 800a996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99e:	61fb      	str	r3, [r7, #28]
 800a9a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	69b9      	ldr	r1, [r7, #24]
 800a9a4:	69fa      	ldr	r2, [r7, #28]
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e6      	bne.n	800a980 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9b2:	e002      	b.n	800a9ba <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a9b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a9b6:	f7f6 fa49 	bl	8000e4c <HAL_UART_TxCpltCallback>
}
 800a9ba:	bf00      	nop
 800a9bc:	3740      	adds	r7, #64	@ 0x40
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7fe fd67 	bl	80094a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b09c      	sub	sp, #112	@ 0x70
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9f4:	d071      	beq.n	800aada <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa06:	e853 3f00 	ldrex	r3, [r3]
 800aa0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa12:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa24:	e841 2300 	strex	r3, r2, [r1]
 800aa28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e6      	bne.n	800a9fe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3a:	e853 3f00 	ldrex	r3, [r3]
 800aa3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa50:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa52:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa58:	e841 2300 	strex	r3, r2, [r1]
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e5      	bne.n	800aa30 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3308      	adds	r3, #8
 800aa6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	e853 3f00 	ldrex	r3, [r3]
 800aa72:	623b      	str	r3, [r7, #32]
   return(result);
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa7a:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	3308      	adds	r3, #8
 800aa82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa84:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa8c:	e841 2300 	strex	r3, r2, [r1]
 800aa90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1e5      	bne.n	800aa64 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d118      	bne.n	800aada <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	e853 3f00 	ldrex	r3, [r3]
 800aab4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f023 0310 	bic.w	r3, r3, #16
 800aabc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aac6:	61fb      	str	r3, [r7, #28]
 800aac8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaca:	69b9      	ldr	r1, [r7, #24]
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	e841 2300 	strex	r3, r2, [r1]
 800aad2:	617b      	str	r3, [r7, #20]
   return(result);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1e6      	bne.n	800aaa8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aadc:	2200      	movs	r2, #0
 800aade:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d107      	bne.n	800aaf8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aaf2:	f7f6 f9b5 	bl	8000e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaf6:	e002      	b.n	800aafe <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800aaf8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aafa:	f7fe fcdd 	bl	80094b8 <HAL_UART_RxCpltCallback>
}
 800aafe:	bf00      	nop
 800ab00:	3770      	adds	r7, #112	@ 0x70
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2201      	movs	r2, #1
 800ab18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d109      	bne.n	800ab36 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ab28:	085b      	lsrs	r3, r3, #1
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7f6 f996 	bl	8000e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab34:	e002      	b.n	800ab3c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f7fe fcc8 	bl	80094cc <HAL_UART_RxHalfCpltCallback>
}
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab6c:	2b80      	cmp	r3, #128	@ 0x80
 800ab6e:	d109      	bne.n	800ab84 <UART_DMAError+0x40>
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	2b21      	cmp	r3, #33	@ 0x21
 800ab74:	d106      	bne.n	800ab84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ab7e:	6978      	ldr	r0, [r7, #20]
 800ab80:	f7ff fe2c 	bl	800a7dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab8e:	2b40      	cmp	r3, #64	@ 0x40
 800ab90:	d109      	bne.n	800aba6 <UART_DMAError+0x62>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b22      	cmp	r3, #34	@ 0x22
 800ab96:	d106      	bne.n	800aba6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aba0:	6978      	ldr	r0, [r7, #20]
 800aba2:	f7ff fe5d 	bl	800a860 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abac:	f043 0210 	orr.w	r2, r3, #16
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abb6:	6978      	ldr	r0, [r7, #20]
 800abb8:	f7fe fc92 	bl	80094e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abbc:	bf00      	nop
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7fe fc7c 	bl	80094e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abe8:	bf00      	nop
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac0c:	61fb      	str	r3, [r7, #28]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	61bb      	str	r3, [r7, #24]
 800ac18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6979      	ldr	r1, [r7, #20]
 800ac1c:	69ba      	ldr	r2, [r7, #24]
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	613b      	str	r3, [r7, #16]
   return(result);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e6      	bne.n	800abf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2220      	movs	r2, #32
 800ac2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7f6 f907 	bl	8000e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac3e:	bf00      	nop
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e027      	b.n	800ace8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2224      	movs	r2, #36	@ 0x24
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f022 0201 	bic.w	r2, r2, #1
 800acbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2220      	movs	r2, #32
 800acda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d101      	bne.n	800ad0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e02d      	b.n	800ad68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2224      	movs	r2, #36	@ 0x24
 800ad18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f022 0201 	bic.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	430a      	orrs	r2, r1
 800ad46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f8a3 	bl	800ae94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d101      	bne.n	800ad88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad84:	2302      	movs	r3, #2
 800ad86:	e02d      	b.n	800ade4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2224      	movs	r2, #36	@ 0x24
 800ad94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 0201 	bic.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	430a      	orrs	r2, r1
 800adc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f865 	bl	800ae94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2220      	movs	r2, #32
 800add6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b08c      	sub	sp, #48	@ 0x30
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	4613      	mov	r3, r2
 800adf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae00:	2b20      	cmp	r3, #32
 800ae02:	d142      	bne.n	800ae8a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d002      	beq.n	800ae10 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e03b      	b.n	800ae8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2201      	movs	r2, #1
 800ae18:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ae20:	88fb      	ldrh	r3, [r7, #6]
 800ae22:	461a      	mov	r2, r3
 800ae24:	68b9      	ldr	r1, [r7, #8]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff fc32 	bl	800a690 <UART_Start_Receive_DMA>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ae32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d124      	bne.n	800ae84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d11d      	bne.n	800ae7e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2210      	movs	r2, #16
 800ae48:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	e853 3f00 	ldrex	r3, [r3]
 800ae56:	617b      	str	r3, [r7, #20]
   return(result);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f043 0310 	orr.w	r3, r3, #16
 800ae5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae6a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6a39      	ldr	r1, [r7, #32]
 800ae6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e6      	bne.n	800ae4a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ae7c:	e002      	b.n	800ae84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800ae84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ae88:	e000      	b.n	800ae8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ae8a:	2302      	movs	r3, #2
  }
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3730      	adds	r7, #48	@ 0x30
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d108      	bne.n	800aeb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aeb4:	e031      	b.n	800af1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aeb6:	2310      	movs	r3, #16
 800aeb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aeba:	2310      	movs	r3, #16
 800aebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	0e5b      	lsrs	r3, r3, #25
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	0f5b      	lsrs	r3, r3, #29
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	f003 0307 	and.w	r3, r3, #7
 800aedc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	7b3a      	ldrb	r2, [r7, #12]
 800aee2:	4911      	ldr	r1, [pc, #68]	@ (800af28 <UARTEx_SetNbDataToProcess+0x94>)
 800aee4:	5c8a      	ldrb	r2, [r1, r2]
 800aee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aeea:	7b3a      	ldrb	r2, [r7, #12]
 800aeec:	490f      	ldr	r1, [pc, #60]	@ (800af2c <UARTEx_SetNbDataToProcess+0x98>)
 800aeee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aef0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	7b7a      	ldrb	r2, [r7, #13]
 800af00:	4909      	ldr	r1, [pc, #36]	@ (800af28 <UARTEx_SetNbDataToProcess+0x94>)
 800af02:	5c8a      	ldrb	r2, [r1, r2]
 800af04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af08:	7b7a      	ldrb	r2, [r7, #13]
 800af0a:	4908      	ldr	r1, [pc, #32]	@ (800af2c <UARTEx_SetNbDataToProcess+0x98>)
 800af0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af1a:	bf00      	nop
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	0800afd8 	.word	0x0800afd8
 800af2c:	0800afe0 	.word	0x0800afe0

0800af30 <memset>:
 800af30:	4402      	add	r2, r0
 800af32:	4603      	mov	r3, r0
 800af34:	4293      	cmp	r3, r2
 800af36:	d100      	bne.n	800af3a <memset+0xa>
 800af38:	4770      	bx	lr
 800af3a:	f803 1b01 	strb.w	r1, [r3], #1
 800af3e:	e7f9      	b.n	800af34 <memset+0x4>

0800af40 <__libc_init_array>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	4d0d      	ldr	r5, [pc, #52]	@ (800af78 <__libc_init_array+0x38>)
 800af44:	4c0d      	ldr	r4, [pc, #52]	@ (800af7c <__libc_init_array+0x3c>)
 800af46:	1b64      	subs	r4, r4, r5
 800af48:	10a4      	asrs	r4, r4, #2
 800af4a:	2600      	movs	r6, #0
 800af4c:	42a6      	cmp	r6, r4
 800af4e:	d109      	bne.n	800af64 <__libc_init_array+0x24>
 800af50:	4d0b      	ldr	r5, [pc, #44]	@ (800af80 <__libc_init_array+0x40>)
 800af52:	4c0c      	ldr	r4, [pc, #48]	@ (800af84 <__libc_init_array+0x44>)
 800af54:	f000 f818 	bl	800af88 <_init>
 800af58:	1b64      	subs	r4, r4, r5
 800af5a:	10a4      	asrs	r4, r4, #2
 800af5c:	2600      	movs	r6, #0
 800af5e:	42a6      	cmp	r6, r4
 800af60:	d105      	bne.n	800af6e <__libc_init_array+0x2e>
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	f855 3b04 	ldr.w	r3, [r5], #4
 800af68:	4798      	blx	r3
 800af6a:	3601      	adds	r6, #1
 800af6c:	e7ee      	b.n	800af4c <__libc_init_array+0xc>
 800af6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af72:	4798      	blx	r3
 800af74:	3601      	adds	r6, #1
 800af76:	e7f2      	b.n	800af5e <__libc_init_array+0x1e>
 800af78:	0800aff0 	.word	0x0800aff0
 800af7c:	0800aff0 	.word	0x0800aff0
 800af80:	0800aff0 	.word	0x0800aff0
 800af84:	0800aff4 	.word	0x0800aff4

0800af88 <_init>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr

0800af94 <_fini>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	bf00      	nop
 800af98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9a:	bc08      	pop	{r3}
 800af9c:	469e      	mov	lr, r3
 800af9e:	4770      	bx	lr
