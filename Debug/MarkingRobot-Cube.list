
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e70  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800817c  0800817c  0000917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008180  08008180  00009180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08008184  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000026c  24000014  08008198  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000280  08008198  0000a280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016819  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a5c  00000000  00000000  0002085b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001180  00000000  00000000  000232b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000db2  00000000  00000000  00024438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000032ce  00000000  00000000  000251ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018fc4  00000000  00000000  000284b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c6c0  00000000  00000000  0004147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018db3c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a0c  00000000  00000000  0018db80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  0019258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008124 	.word	0x08008124

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	08008124 	.word	0x08008124

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000602:	f000 fb77 	bl	8000cf4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fe39 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f847 	bl	800069c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fa39 	bl	8000a84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f9e7 	bl	80009e4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000616:	f000 f8b1 	bl	800077c <MX_CRC_Init>
  MX_UART8_Init();
 800061a:	f000 f993 	bl	8000944 <MX_UART8_Init>
  MX_TIM2_Init();
 800061e:	f000 f8cf 	bl	80007c0 <MX_TIM2_Init>
  MX_UART4_Init();
 8000622:	f000 f943 	bl	80008ac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000626:	4816      	ldr	r0, [pc, #88]	@ (8000680 <main+0x84>)
 8000628:	f004 fe2e 	bl	8005288 <HAL_TIM_Base_Start_IT>
	__HAL_RCC_CRC_CLK_ENABLE();
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <main+0x88>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000632:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <main+0x88>)
 8000634:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <main+0x88>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
	HAL_HalfDuplex_Init(&huart4);
 800064a:	480f      	ldr	r0, [pc, #60]	@ (8000688 <main+0x8c>)
 800064c:	f005 ff1e 	bl	800648c <HAL_HalfDuplex_Init>
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000650:	2200      	movs	r2, #0
 8000652:	2140      	movs	r1, #64	@ 0x40
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <main+0x90>)
 8000656:	f002 f829 	bl	80026ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 800065a:	2200      	movs	r2, #0
 800065c:	2101      	movs	r1, #1
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <main+0x94>)
 8000660:	f002 f824 	bl	80026ac <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(BatteryAlarm)
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <main+0x98>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0fa      	beq.n	8000664 <main+0x68>
		{
			//TODO gebe leeren Batteriestand auf Display aus
			if(Move_To_Pos(HomePos))
 800066e:	480a      	ldr	r0, [pc, #40]	@ (8000698 <main+0x9c>)
 8000670:	f000 fb72 	bl	8000d58 <Move_To_Pos>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f4      	beq.n	8000664 <main+0x68>
				Error_Handler();
 800067a:	f000 fb67 	bl	8000d4c <Error_Handler>
		if(BatteryAlarm)
 800067e:	e7f1      	b.n	8000664 <main+0x68>
 8000680:	24000054 	.word	0x24000054
 8000684:	58024400 	.word	0x58024400
 8000688:	240000a0 	.word	0x240000a0
 800068c:	58020c00 	.word	0x58020c00
 8000690:	58021000 	.word	0x58021000
 8000694:	2400025c 	.word	0x2400025c
 8000698:	24000260 	.word	0x24000260

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b09c      	sub	sp, #112	@ 0x70
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006a6:	224c      	movs	r2, #76	@ 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fd0e 	bl	80080cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2220      	movs	r2, #32
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 fd08 	bl	80080cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006bc:	2002      	movs	r0, #2
 80006be:	f002 f829 	bl	8002714 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemClock_Config+0xdc>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000778 <SystemClock_Config+0xdc>)
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemClock_Config+0xdc>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006de:	bf00      	nop
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SystemClock_Config+0xdc>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ec:	d1f8      	bne.n	80006e0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006f6:	2340      	movs	r3, #64	@ 0x40
 80006f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fe:	2300      	movs	r3, #0
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000702:	2304      	movs	r3, #4
 8000704:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000706:	2322      	movs	r3, #34	@ 0x22
 8000708:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800070e:	2303      	movs	r3, #3
 8000710:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000716:	230c      	movs	r3, #12
 8000718:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071a:	2300      	movs	r3, #0
 800071c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800071e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000722:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f82d 	bl	8002788 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000734:	f000 fb0a 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	233f      	movs	r3, #63	@ 0x3f
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000744:	2308      	movs	r3, #8
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000748:	2340      	movs	r3, #64	@ 0x40
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074c:	2340      	movs	r3, #64	@ 0x40
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000754:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000756:	2340      	movs	r3, #64	@ 0x40
 8000758:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2103      	movs	r1, #3
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fbec 	bl	8002f3c <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800076a:	f000 faef 	bl	8000d4c <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3770      	adds	r7, #112	@ 0x70
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58024800 	.word	0x58024800

0800077c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000780:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <MX_CRC_Init+0x3c>)
 8000782:	4a0e      	ldr	r2, [pc, #56]	@ (80007bc <MX_CRC_Init+0x40>)
 8000784:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_CRC_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_CRC_Init+0x3c>)
 800078e:	2200      	movs	r2, #0
 8000790:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_CRC_Init+0x3c>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_CRC_Init+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_CRC_Init+0x3c>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_CRC_Init+0x3c>)
 80007a6:	f000 ff83 	bl	80016b0 <HAL_CRC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007b0:	f000 facc 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000030 	.word	0x24000030
 80007bc:	58024c00 	.word	0x58024c00

080007c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	@ 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 80007fc:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 800080a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 800081e:	f004 fcdb 	bl	80051d8 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000828:	f000 fa90 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000836:	4619      	mov	r1, r3
 8000838:	481b      	ldr	r0, [pc, #108]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 800083a:	f005 f827 	bl	800588c <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000844:	f000 fa82 	bl	8000d4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000848:	4817      	ldr	r0, [pc, #92]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 800084a:	f004 fda3 	bl	8005394 <HAL_TIM_PWM_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000854:	f000 fa7a 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 8000868:	f005 fd56 	bl	8006318 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000872:	f000 fa6b 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000876:	2360      	movs	r3, #96	@ 0x60
 8000878:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800087a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800087e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	@ (80008a8 <MX_TIM2_Init+0xe8>)
 8000890:	f004 fee8 	bl	8005664 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800089a:	f000 fa57 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	@ 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	24000054 	.word	0x24000054

080008ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008b0:	4b22      	ldr	r3, [pc, #136]	@ (800093c <MX_UART4_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	@ (8000940 <MX_UART4_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	@ (800093c <MX_UART4_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <MX_UART4_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <MX_UART4_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	@ (800093c <MX_UART4_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_UART4_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <MX_UART4_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_UART4_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_UART4_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_UART4_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_UART4_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	@ (800093c <MX_UART4_Init+0x90>)
 80008f6:	f005 fdc9 	bl	800648c <HAL_HalfDuplex_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 fa24 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_UART4_Init+0x90>)
 8000908:	f007 fb16 	bl	8007f38 <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 fa1b 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	@ (800093c <MX_UART4_Init+0x90>)
 800091a:	f007 fb4b 	bl	8007fb4 <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 fa12 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_UART4_Init+0x90>)
 800092a:	f007 facc 	bl	8007ec6 <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 fa0a 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	240000a0 	.word	0x240000a0
 8000940:	40004c00 	.word	0x40004c00

08000944 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_UART8_Init+0x98>)
 800094a:	4a25      	ldr	r2, [pc, #148]	@ (80009e0 <MX_UART8_Init+0x9c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_UART8_Init+0x98>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_UART8_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <MX_UART8_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_UART8_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_UART8_Init+0x98>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_UART8_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_UART8_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_UART8_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_UART8_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_UART8_Init+0x98>)
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart8.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800098c:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_UART8_Init+0x98>)
 800098e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000992:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 8000994:	4811      	ldr	r0, [pc, #68]	@ (80009dc <MX_UART8_Init+0x98>)
 8000996:	f005 fd79 	bl	800648c <HAL_HalfDuplex_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_UART8_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 f9d4 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_UART8_Init+0x98>)
 80009a8:	f007 fac6 	bl	8007f38 <HAL_UARTEx_SetTxFifoThreshold>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_UART8_Init+0x72>
  {
    Error_Handler();
 80009b2:	f000 f9cb 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_UART8_Init+0x98>)
 80009ba:	f007 fafb 	bl	8007fb4 <HAL_UARTEx_SetRxFifoThreshold>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_UART8_Init+0x84>
  {
    Error_Handler();
 80009c4:	f000 f9c2 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_UART8_Init+0x98>)
 80009ca:	f007 fa7c 	bl	8007ec6 <HAL_UARTEx_DisableFifoMode>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_UART8_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 f9ba 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	24000134 	.word	0x24000134
 80009e0:	40007c00 	.word	0x40007c00

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 80009ea:	4a25      	ldr	r2, [pc, #148]	@ (8000a80 <MX_USART2_UART_Init+0x9c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a2e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a36:	f005 fd29 	bl	800648c <HAL_HalfDuplex_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8000a40:	f000 f984 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a48:	f007 fa76 	bl	8007f38 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8000a52:	f000 f97b 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a5a:	f007 faab 	bl	8007fb4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8000a64:	f000 f972 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_USART2_UART_Init+0x98>)
 8000a6a:	f007 fa2c 	bl	8007ec6 <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8000a74:	f000 f96a 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240001c8 	.word	0x240001c8
 8000a80:	40004400 	.word	0x40004400

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	4a58      	ldr	r2, [pc, #352]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aaa:	4b56      	ldr	r3, [pc, #344]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b52      	ldr	r3, [pc, #328]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	4a51      	ldr	r2, [pc, #324]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac8:	4b4e      	ldr	r3, [pc, #312]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a49      	ldr	r2, [pc, #292]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b47      	ldr	r3, [pc, #284]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	4b43      	ldr	r3, [pc, #268]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	4a42      	ldr	r2, [pc, #264]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b04:	4b3f      	ldr	r3, [pc, #252]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b3c      	ldr	r3, [pc, #240]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a3a      	ldr	r2, [pc, #232]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b38      	ldr	r3, [pc, #224]	@ (8000c04 <MX_GPIO_Init+0x180>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	210c      	movs	r1, #12
 8000b34:	4834      	ldr	r0, [pc, #208]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b36:	f001 fdb9 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2118      	movs	r1, #24
 8000b3e:	4833      	ldr	r0, [pc, #204]	@ (8000c0c <MX_GPIO_Init+0x188>)
 8000b40:	f001 fdb4 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2140      	movs	r1, #64	@ 0x40
 8000b48:	4830      	ldr	r0, [pc, #192]	@ (8000c0c <MX_GPIO_Init+0x188>)
 8000b4a:	f001 fdaf 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2108      	movs	r1, #8
 8000b52:	482f      	ldr	r0, [pc, #188]	@ (8000c10 <MX_GPIO_Init+0x18c>)
 8000b54:	f001 fdaa 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	482a      	ldr	r0, [pc, #168]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b5e:	f001 fda5 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
  GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 8000b62:	230d      	movs	r3, #13
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4823      	ldr	r0, [pc, #140]	@ (8000c08 <MX_GPIO_Init+0x184>)
 8000b7a:	f001 fbef 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRDET_Pin */
  GPIO_InitStruct.Pin = PWRDET_Pin;
 8000b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b84:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	481f      	ldr	r0, [pc, #124]	@ (8000c14 <MX_GPIO_Init+0x190>)
 8000b96:	f001 fbe1 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
  GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4819      	ldr	r0, [pc, #100]	@ (8000c14 <MX_GPIO_Init+0x190>)
 8000bae:	f001 fbd5 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000bb2:	2358      	movs	r3, #88	@ 0x58
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <MX_GPIO_Init+0x188>)
 8000bca:	f001 fbc7 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : HE0_PWM_Pin */
  GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <MX_GPIO_Init+0x18c>)
 8000be6:	f001 fbb9 	bl	800235c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2028      	movs	r0, #40	@ 0x28
 8000bf0:	f000 fcb1 	bl	8001556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf4:	2028      	movs	r0, #40	@ 0x28
 8000bf6:	f000 fcc8 	bl	800158a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	@ 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58021000 	.word	0x58021000
 8000c0c:	58020c00 	.word	0x58020c00
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58020800 	.word	0x58020800

08000c18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin)
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c28:	d102      	bne.n	8000c30 <HAL_GPIO_EXTI_Callback+0x18>
	{
		BatteryAlarm = true;
 8000c2a:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <HAL_GPIO_EXTI_Callback+0x24>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	2400025c 	.word	0x2400025c

08000c40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c50:	d13d      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if (PWMEnabledX)
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d038      	beq.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			PWMCounterX++;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c68:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod)
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d307      	bcc.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x4a>
			{
				PWMCounterX = 0;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	4a17      	ldr	r2, [pc, #92]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c88:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth)
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d205      	bcs.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	4813      	ldr	r0, [pc, #76]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ca0:	f001 fd04 	bl	80026ac <HAL_GPIO_WritePin>
 8000ca4:	e004      	b.n	8000cb0 <HAL_TIM_PeriodElapsedCallback+0x70>
			}
			else
			{
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4810      	ldr	r0, [pc, #64]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cac:	f001 fcfe 	bl	80026ac <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX)
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d307      	bcc.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				PWMEnabledX = false;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	4808      	ldr	r0, [pc, #32]	@ (8000cec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cca:	f001 fcef 	bl	80026ac <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000278 	.word	0x24000278
 8000cdc:	24000270 	.word	0x24000270
 8000ce0:	24000000 	.word	0x24000000
 8000ce4:	2400026c 	.word	0x2400026c
 8000ce8:	24000002 	.word	0x24000002
 8000cec:	58020c00 	.word	0x58020c00
 8000cf0:	24000274 	.word	0x24000274

08000cf4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d06:	f000 fc5b 	bl	80015c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d16:	231f      	movs	r3, #31
 8000d18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d1a:	2387      	movs	r3, #135	@ 0x87
 8000d1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fc79 	bl	8001630 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d3e:	2004      	movs	r0, #4
 8000d40:	f000 fc56 	bl	80015f0 <HAL_MPU_Enable>

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <Move_To_Pos>:
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, (Dir == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	PWMEnabledX = true; // Start Bewegung
}

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	if(NextPosition[0] != PosX && NextPosition[1] != PosY)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	ee07 3a90 	vmov	s15, r3
 8000d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <Move_To_Pos+0x38>)
 8000d6e:	edd3 7a00 	vldr	s15, [r3]
 8000d72:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	d001      	beq.n	8000d80 <Move_To_Pos+0x28>
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <Move_To_Pos+0x3c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
	{
		//TODO Logik für Bewegung zu nächstem Punkt
	}
	return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	24000264 	.word	0x24000264
 8000d94:	24000268 	.word	0x24000268

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_MspInit+0x30>)
 8000da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da4:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x30>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x30>)
 8000db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	58024400 	.word	0x58024400

08000dcc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <HAL_CRC_MspInit+0x3c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10e      	bne.n	8000dfc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_CRC_MspInit+0x40>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <HAL_CRC_MspInit+0x40>)
 8000de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <HAL_CRC_MspInit+0x40>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	58024c00 	.word	0x58024c00
 8000e0c:	58024400 	.word	0x58024400

08000e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e20:	d116      	bne.n	8000e50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_TIM_Base_MspInit+0x48>)
 8000e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_TIM_Base_MspInit+0x48>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_TIM_Base_MspInit+0x48>)
 8000e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2100      	movs	r1, #0
 8000e44:	201c      	movs	r0, #28
 8000e46:	f000 fb86 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e4a:	201c      	movs	r0, #28
 8000e4c:	f000 fb9d 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58024400 	.word	0x58024400

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0bc      	sub	sp, #240	@ 0xf0
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	22b8      	movs	r2, #184	@ 0xb8
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f007 f925 	bl	80080cc <memset>
  if(huart->Instance==UART4)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7a      	ldr	r2, [pc, #488]	@ (8001070 <HAL_UART_MspInit+0x214>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d146      	bne.n	8000f1a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e8c:	f04f 0202 	mov.w	r2, #2
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fbd6 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eae:	f7ff ff4d 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eb2:	4b70      	ldr	r3, [pc, #448]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000eba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b68      	ldr	r3, [pc, #416]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	4a67      	ldr	r2, [pc, #412]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee0:	4b64      	ldr	r3, [pc, #400]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART4_TEST_Pin;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f06:	2308      	movs	r3, #8
 8000f08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(UART4_TEST_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f10:	4619      	mov	r1, r3
 8000f12:	4859      	ldr	r0, [pc, #356]	@ (8001078 <HAL_UART_MspInit+0x21c>)
 8000f14:	f001 fa22 	bl	800235c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f18:	e0a6      	b.n	8001068 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==UART8)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a57      	ldr	r2, [pc, #348]	@ (800107c <HAL_UART_MspInit+0x220>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d14e      	bne.n	8000fc2 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000f24:	f04f 0202 	mov.w	r2, #2
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fb8a 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000f46:	f7ff ff01 	bl	8000d4c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f50:	4a48      	ldr	r2, [pc, #288]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f5a:	4b46      	ldr	r3, [pc, #280]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f68:	4b42      	ldr	r3, [pc, #264]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	4a41      	ldr	r2, [pc, #260]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f78:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4835      	ldr	r0, [pc, #212]	@ (8001080 <HAL_UART_MspInit+0x224>)
 8000fac:	f001 f9d6 	bl	800235c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2053      	movs	r0, #83	@ 0x53
 8000fb6:	f000 face 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000fba:	2053      	movs	r0, #83	@ 0x53
 8000fbc:	f000 fae5 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 8000fc0:	e052      	b.n	8001068 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2f      	ldr	r2, [pc, #188]	@ (8001084 <HAL_UART_MspInit+0x228>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d14d      	bne.n	8001068 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fcc:	f04f 0202 	mov.w	r2, #2
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fb36 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0x196>
      Error_Handler();
 8000fee:	f7ff fead 	bl	8000d4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001002:	4b1c      	ldr	r3, [pc, #112]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8001004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001010:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <HAL_UART_MspInit+0x218>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 800102e:	2320      	movs	r3, #32
 8001030:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103a:	2301      	movs	r3, #1
 800103c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001046:	2307      	movs	r3, #7
 8001048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001050:	4619      	mov	r1, r3
 8001052:	480d      	ldr	r0, [pc, #52]	@ (8001088 <HAL_UART_MspInit+0x22c>)
 8001054:	f001 f982 	bl	800235c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2026      	movs	r0, #38	@ 0x26
 800105e:	f000 fa7a 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001062:	2026      	movs	r0, #38	@ 0x26
 8001064:	f000 fa91 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 8001068:	bf00      	nop
 800106a:	37f0      	adds	r7, #240	@ 0xf0
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40004c00 	.word	0x40004c00
 8001074:	58024400 	.word	0x58024400
 8001078:	58020000 	.word	0x58020000
 800107c:	40007c00 	.word	0x40007c00
 8001080:	58021000 	.word	0x58021000
 8001084:	40004400 	.word	0x40004400
 8001088:	58020c00 	.word	0x58020c00

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <NMI_Handler+0x4>

08001094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e2:	f000 f93d 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM2_IRQHandler+0x10>)
 80010f2:	f004 f9b0 	bl	8005456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000054 	.word	0x24000054

08001100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <USART2_IRQHandler+0x10>)
 8001106:	f005 fa19 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240001c8 	.word	0x240001c8

08001114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001118:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800111c:	f001 fadf 	bl	80026de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <UART8_IRQHandler+0x10>)
 800112a:	f005 fa07 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	24000134 	.word	0x24000134

08001138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800113c:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <SystemInit+0xd0>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001142:	4a31      	ldr	r2, [pc, #196]	@ (8001208 <SystemInit+0xd0>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114c:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <SystemInit+0xd4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	2b06      	cmp	r3, #6
 8001156:	d807      	bhi.n	8001168 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001158:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <SystemInit+0xd4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 030f 	bic.w	r3, r3, #15
 8001160:	4a2a      	ldr	r2, [pc, #168]	@ (800120c <SystemInit+0xd4>)
 8001162:	f043 0307 	orr.w	r3, r3, #7
 8001166:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001168:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <SystemInit+0xd8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <SystemInit+0xd8>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001174:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <SystemInit+0xd8>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117a:	4b25      	ldr	r3, [pc, #148]	@ (8001210 <SystemInit+0xd8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4924      	ldr	r1, [pc, #144]	@ (8001210 <SystemInit+0xd8>)
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <SystemInit+0xdc>)
 8001182:	4013      	ands	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <SystemInit+0xd4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001192:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <SystemInit+0xd4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 030f 	bic.w	r3, r3, #15
 800119a:	4a1c      	ldr	r2, [pc, #112]	@ (800120c <SystemInit+0xd4>)
 800119c:	f043 0307 	orr.w	r3, r3, #7
 80011a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <SystemInit+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011a8:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <SystemInit+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <SystemInit+0xd8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <SystemInit+0xd8>)
 80011b6:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <SystemInit+0xe0>)
 80011b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <SystemInit+0xd8>)
 80011bc:	4a17      	ldr	r2, [pc, #92]	@ (800121c <SystemInit+0xe4>)
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c0:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <SystemInit+0xd8>)
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <SystemInit+0xe8>)
 80011c4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011c6:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <SystemInit+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011cc:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <SystemInit+0xd8>)
 80011ce:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <SystemInit+0xe8>)
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <SystemInit+0xd8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <SystemInit+0xd8>)
 80011da:	4a11      	ldr	r2, [pc, #68]	@ (8001220 <SystemInit+0xe8>)
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <SystemInit+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <SystemInit+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <SystemInit+0xd8>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <SystemInit+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <SystemInit+0xec>)
 80011f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	52002000 	.word	0x52002000
 8001210:	58024400 	.word	0x58024400
 8001214:	eaf6ed7f 	.word	0xeaf6ed7f
 8001218:	02020200 	.word	0x02020200
 800121c:	01ff0000 	.word	0x01ff0000
 8001220:	01010280 	.word	0x01010280
 8001224:	52004000 	.word	0x52004000

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff ff84 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	@ (8001268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	@ (8001274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f006 ff41 	bl	80080dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff f9cf 	bl	80005fc <main>
  bx  lr
 800125e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001264:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001268:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800126c:	08008184 	.word	0x08008184
  ldr r2, =_sbss
 8001270:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001274:	24000280 	.word	0x24000280

08001278 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC3_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001282:	2003      	movs	r0, #3
 8001284:	f000 f95c 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001288:	f002 f80e 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 800128c:	4602      	mov	r2, r0
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_Init+0x68>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	f003 030f 	and.w	r3, r3, #15
 8001298:	4913      	ldr	r1, [pc, #76]	@ (80012e8 <HAL_Init+0x6c>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	fa22 f303 	lsr.w	r3, r2, r3
 80012a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_Init+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	4a0e      	ldr	r2, [pc, #56]	@ (80012e8 <HAL_Init+0x6c>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	f003 031f 	and.w	r3, r3, #31
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_Init+0x70>)
 80012be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <HAL_Init+0x74>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c6:	200f      	movs	r0, #15
 80012c8:	f000 f814 	bl	80012f4 <HAL_InitTick>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e002      	b.n	80012dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012d6:	f7ff fd5f 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	58024400 	.word	0x58024400
 80012e8:	0800813c 	.word	0x0800813c
 80012ec:	24000008 	.word	0x24000008
 80012f0:	24000004 	.word	0x24000004

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_InitTick+0x60>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e021      	b.n	800134c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <HAL_InitTick+0x64>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_InitTick+0x60>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f941 	bl	80015a6 <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f90b 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	@ (800135c <HAL_InitTick+0x68>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000010 	.word	0x24000010
 8001358:	24000004 	.word	0x24000004
 800135c:	2400000c 	.word	0x2400000c

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	24000010 	.word	0x24000010
 8001384:	2400027c 	.word	0x2400027c

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2400027c 	.word	0x2400027c

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x40>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x40>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	05fa0000 	.word	0x05fa0000

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	2b00      	cmp	r3, #0
 8001414:	db0b      	blt.n	800142e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	f003 021f 	and.w	r2, r3, #31
 800141c:	4907      	ldr	r1, [pc, #28]	@ (800143c <__NVIC_EnableIRQ+0x38>)
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	2001      	movs	r0, #1
 8001426:	fa00 f202 	lsl.w	r2, r0, r2
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	@ (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	@ (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	@ 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff8e 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff29 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff40 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff33 	bl	8001404 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa4 	bl	80014fc <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015c4:	f3bf 8f5f 	dmb	sy
}
 80015c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <HAL_MPU_Disable+0x28>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <HAL_MPU_Disable+0x28>)
 80015d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015d4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_MPU_Disable+0x2c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	605a      	str	r2, [r3, #4]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	e000ed90 	.word	0xe000ed90

080015f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_MPU_Enable+0x38>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_MPU_Enable+0x3c>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <HAL_MPU_Enable+0x3c>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800160e:	f3bf 8f4f 	dsb	sy
}
 8001612:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001614:	f3bf 8f6f 	isb	sy
}
 8001618:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed90 	.word	0xe000ed90
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	785a      	ldrb	r2, [r3, #1]
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_MPU_ConfigRegion+0x7c>)
 800163e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_MPU_ConfigRegion+0x7c>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <HAL_MPU_ConfigRegion+0x7c>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <HAL_MPU_ConfigRegion+0x7c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7b1b      	ldrb	r3, [r3, #12]
 8001658:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7adb      	ldrb	r3, [r3, #11]
 800165e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7a9b      	ldrb	r3, [r3, #10]
 8001666:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7b5b      	ldrb	r3, [r3, #13]
 800166e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b9b      	ldrb	r3, [r3, #14]
 8001676:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7bdb      	ldrb	r3, [r3, #15]
 800167e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7a5b      	ldrb	r3, [r3, #9]
 8001686:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7a1b      	ldrb	r3, [r3, #8]
 800168e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001690:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800169a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800169c:	6113      	str	r3, [r2, #16]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed90 	.word	0xe000ed90

080016b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e054      	b.n	800176c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7f5b      	ldrb	r3, [r3, #29]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fb7a 	bl	8000dcc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <HAL_CRC_Init+0xc4>)
 80016ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0218 	bic.w	r2, r2, #24
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	e00c      	b.n	800171a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	461a      	mov	r2, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f834 	bl	8001778 <HAL_CRCEx_Polynomial_Set>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e028      	b.n	800176c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	795b      	ldrb	r3, [r3, #5]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 32ff 	mov.w	r2, #4294967295
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	e004      	b.n	8001738 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6912      	ldr	r2, [r2, #16]
 8001736:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	04c11db7 	.word	0x04c11db7

08001778 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001788:	231f      	movs	r3, #31
 800178a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
 800179a:	e063      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800179c:	bf00      	nop
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	613a      	str	r2, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <HAL_CRCEx_Polynomial_Set+0x44>
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	fa22 f303 	lsr.w	r3, r2, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b18      	cmp	r3, #24
 80017c0:	d846      	bhi.n	8001850 <HAL_CRCEx_Polynomial_Set+0xd8>
 80017c2:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	08001857 	.word	0x08001857
 80017cc:	08001851 	.word	0x08001851
 80017d0:	08001851 	.word	0x08001851
 80017d4:	08001851 	.word	0x08001851
 80017d8:	08001851 	.word	0x08001851
 80017dc:	08001851 	.word	0x08001851
 80017e0:	08001851 	.word	0x08001851
 80017e4:	08001851 	.word	0x08001851
 80017e8:	08001845 	.word	0x08001845
 80017ec:	08001851 	.word	0x08001851
 80017f0:	08001851 	.word	0x08001851
 80017f4:	08001851 	.word	0x08001851
 80017f8:	08001851 	.word	0x08001851
 80017fc:	08001851 	.word	0x08001851
 8001800:	08001851 	.word	0x08001851
 8001804:	08001851 	.word	0x08001851
 8001808:	08001839 	.word	0x08001839
 800180c:	08001851 	.word	0x08001851
 8001810:	08001851 	.word	0x08001851
 8001814:	08001851 	.word	0x08001851
 8001818:	08001851 	.word	0x08001851
 800181c:	08001851 	.word	0x08001851
 8001820:	08001851 	.word	0x08001851
 8001824:	08001851 	.word	0x08001851
 8001828:	0800182d 	.word	0x0800182d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b06      	cmp	r3, #6
 8001830:	d913      	bls.n	800185a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001836:	e010      	b.n	800185a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	2b07      	cmp	r3, #7
 800183c:	d90f      	bls.n	800185e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001842:	e00c      	b.n	800185e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d90b      	bls.n	8001862 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800184e:	e008      	b.n	8001862 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	75fb      	strb	r3, [r7, #23]
        break;
 8001854:	e006      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001856:	bf00      	nop
 8001858:	e004      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800185a:	bf00      	nop
 800185c:	e002      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001862:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 0118 	bic.w	r1, r3, #24
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001886:	7dfb      	ldrb	r3, [r7, #23]
}
 8001888:	4618      	mov	r0, r3
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff fd74 	bl	8001388 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e2dc      	b.n	8001e66 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d008      	beq.n	80018ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2280      	movs	r2, #128	@ 0x80
 80018bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e2cd      	b.n	8001e66 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a76      	ldr	r2, [pc, #472]	@ (8001aa8 <HAL_DMA_Abort+0x214>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04a      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a74      	ldr	r2, [pc, #464]	@ (8001aac <HAL_DMA_Abort+0x218>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d045      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a73      	ldr	r2, [pc, #460]	@ (8001ab0 <HAL_DMA_Abort+0x21c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d040      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a71      	ldr	r2, [pc, #452]	@ (8001ab4 <HAL_DMA_Abort+0x220>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d03b      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a70      	ldr	r2, [pc, #448]	@ (8001ab8 <HAL_DMA_Abort+0x224>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d036      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6e      	ldr	r2, [pc, #440]	@ (8001abc <HAL_DMA_Abort+0x228>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6d      	ldr	r2, [pc, #436]	@ (8001ac0 <HAL_DMA_Abort+0x22c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d02c      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6b      	ldr	r2, [pc, #428]	@ (8001ac4 <HAL_DMA_Abort+0x230>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d027      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac8 <HAL_DMA_Abort+0x234>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d022      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a68      	ldr	r2, [pc, #416]	@ (8001acc <HAL_DMA_Abort+0x238>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01d      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a67      	ldr	r2, [pc, #412]	@ (8001ad0 <HAL_DMA_Abort+0x23c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d018      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a65      	ldr	r2, [pc, #404]	@ (8001ad4 <HAL_DMA_Abort+0x240>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a64      	ldr	r2, [pc, #400]	@ (8001ad8 <HAL_DMA_Abort+0x244>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00e      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a62      	ldr	r2, [pc, #392]	@ (8001adc <HAL_DMA_Abort+0x248>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d009      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a61      	ldr	r2, [pc, #388]	@ (8001ae0 <HAL_DMA_Abort+0x24c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d004      	beq.n	800196a <HAL_DMA_Abort+0xd6>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_DMA_Abort+0x250>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_DMA_Abort+0xda>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_DMA_Abort+0xdc>
 800196e:	2300      	movs	r3, #0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 021e 	bic.w	r2, r2, #30
 8001982:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001992:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e00a      	b.n	80019b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020e 	bic.w	r2, r2, #14
 80019aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3c      	ldr	r2, [pc, #240]	@ (8001aa8 <HAL_DMA_Abort+0x214>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d072      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3a      	ldr	r2, [pc, #232]	@ (8001aac <HAL_DMA_Abort+0x218>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d06d      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a39      	ldr	r2, [pc, #228]	@ (8001ab0 <HAL_DMA_Abort+0x21c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d068      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a37      	ldr	r2, [pc, #220]	@ (8001ab4 <HAL_DMA_Abort+0x220>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d063      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a36      	ldr	r2, [pc, #216]	@ (8001ab8 <HAL_DMA_Abort+0x224>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a34      	ldr	r2, [pc, #208]	@ (8001abc <HAL_DMA_Abort+0x228>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d059      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a33      	ldr	r2, [pc, #204]	@ (8001ac0 <HAL_DMA_Abort+0x22c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d054      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a31      	ldr	r2, [pc, #196]	@ (8001ac4 <HAL_DMA_Abort+0x230>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04f      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a30      	ldr	r2, [pc, #192]	@ (8001ac8 <HAL_DMA_Abort+0x234>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d04a      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2e      	ldr	r2, [pc, #184]	@ (8001acc <HAL_DMA_Abort+0x238>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d045      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad0 <HAL_DMA_Abort+0x23c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d040      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a2b      	ldr	r2, [pc, #172]	@ (8001ad4 <HAL_DMA_Abort+0x240>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d03b      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ad8 <HAL_DMA_Abort+0x244>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d036      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a28      	ldr	r2, [pc, #160]	@ (8001adc <HAL_DMA_Abort+0x248>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d031      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a27      	ldr	r2, [pc, #156]	@ (8001ae0 <HAL_DMA_Abort+0x24c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d02c      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <HAL_DMA_Abort+0x250>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d027      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <HAL_DMA_Abort+0x254>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <HAL_DMA_Abort+0x258>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01d      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <HAL_DMA_Abort+0x25c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d018      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a1f      	ldr	r2, [pc, #124]	@ (8001af4 <HAL_DMA_Abort+0x260>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001af8 <HAL_DMA_Abort+0x264>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00e      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <HAL_DMA_Abort+0x268>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1b      	ldr	r2, [pc, #108]	@ (8001b00 <HAL_DMA_Abort+0x26c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d004      	beq.n	8001aa2 <HAL_DMA_Abort+0x20e>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_DMA_Abort+0x270>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d132      	bne.n	8001b08 <HAL_DMA_Abort+0x274>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e031      	b.n	8001b0a <HAL_DMA_Abort+0x276>
 8001aa6:	bf00      	nop
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40020040 	.word	0x40020040
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	40020070 	.word	0x40020070
 8001abc:	40020088 	.word	0x40020088
 8001ac0:	400200a0 	.word	0x400200a0
 8001ac4:	400200b8 	.word	0x400200b8
 8001ac8:	40020410 	.word	0x40020410
 8001acc:	40020428 	.word	0x40020428
 8001ad0:	40020440 	.word	0x40020440
 8001ad4:	40020458 	.word	0x40020458
 8001ad8:	40020470 	.word	0x40020470
 8001adc:	40020488 	.word	0x40020488
 8001ae0:	400204a0 	.word	0x400204a0
 8001ae4:	400204b8 	.word	0x400204b8
 8001ae8:	58025408 	.word	0x58025408
 8001aec:	5802541c 	.word	0x5802541c
 8001af0:	58025430 	.word	0x58025430
 8001af4:	58025444 	.word	0x58025444
 8001af8:	58025458 	.word	0x58025458
 8001afc:	5802546c 	.word	0x5802546c
 8001b00:	58025480 	.word	0x58025480
 8001b04:	58025494 	.word	0x58025494
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd8 <HAL_DMA_Abort+0x444>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d04a      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8001cdc <HAL_DMA_Abort+0x448>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d045      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6a      	ldr	r2, [pc, #424]	@ (8001ce0 <HAL_DMA_Abort+0x44c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d040      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a68      	ldr	r2, [pc, #416]	@ (8001ce4 <HAL_DMA_Abort+0x450>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d03b      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a67      	ldr	r2, [pc, #412]	@ (8001ce8 <HAL_DMA_Abort+0x454>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d036      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a65      	ldr	r2, [pc, #404]	@ (8001cec <HAL_DMA_Abort+0x458>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d031      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a64      	ldr	r2, [pc, #400]	@ (8001cf0 <HAL_DMA_Abort+0x45c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d02c      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a62      	ldr	r2, [pc, #392]	@ (8001cf4 <HAL_DMA_Abort+0x460>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d027      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a61      	ldr	r2, [pc, #388]	@ (8001cf8 <HAL_DMA_Abort+0x464>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d022      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5f      	ldr	r2, [pc, #380]	@ (8001cfc <HAL_DMA_Abort+0x468>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01d      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5e      	ldr	r2, [pc, #376]	@ (8001d00 <HAL_DMA_Abort+0x46c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d018      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5c      	ldr	r2, [pc, #368]	@ (8001d04 <HAL_DMA_Abort+0x470>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d08 <HAL_DMA_Abort+0x474>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a59      	ldr	r2, [pc, #356]	@ (8001d0c <HAL_DMA_Abort+0x478>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d009      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a58      	ldr	r2, [pc, #352]	@ (8001d10 <HAL_DMA_Abort+0x47c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <HAL_DMA_Abort+0x32a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a56      	ldr	r2, [pc, #344]	@ (8001d14 <HAL_DMA_Abort+0x480>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d108      	bne.n	8001bd0 <HAL_DMA_Abort+0x33c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0201 	bic.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e007      	b.n	8001be0 <HAL_DMA_Abort+0x34c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001be0:	e013      	b.n	8001c0a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be2:	f7ff fbd1 	bl	8001388 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d90c      	bls.n	8001c0a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e12d      	b.n	8001e66 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1e5      	bne.n	8001be2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd8 <HAL_DMA_Abort+0x444>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d04a      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2d      	ldr	r2, [pc, #180]	@ (8001cdc <HAL_DMA_Abort+0x448>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d045      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce0 <HAL_DMA_Abort+0x44c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d040      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce4 <HAL_DMA_Abort+0x450>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d03b      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a29      	ldr	r2, [pc, #164]	@ (8001ce8 <HAL_DMA_Abort+0x454>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d036      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <HAL_DMA_Abort+0x458>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d031      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_DMA_Abort+0x45c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d02c      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a24      	ldr	r2, [pc, #144]	@ (8001cf4 <HAL_DMA_Abort+0x460>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d027      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a23      	ldr	r2, [pc, #140]	@ (8001cf8 <HAL_DMA_Abort+0x464>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d022      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a21      	ldr	r2, [pc, #132]	@ (8001cfc <HAL_DMA_Abort+0x468>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01d      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <HAL_DMA_Abort+0x46c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d018      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_DMA_Abort+0x470>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d013      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <HAL_DMA_Abort+0x474>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00e      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <HAL_DMA_Abort+0x478>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d009      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <HAL_DMA_Abort+0x47c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d004      	beq.n	8001cb6 <HAL_DMA_Abort+0x422>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <HAL_DMA_Abort+0x480>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_DMA_Abort+0x426>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_DMA_Abort+0x428>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d02b      	beq.n	8001d18 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	223f      	movs	r2, #63	@ 0x3f
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	e02a      	b.n	8001d2e <HAL_DMA_Abort+0x49a>
 8001cd8:	40020010 	.word	0x40020010
 8001cdc:	40020028 	.word	0x40020028
 8001ce0:	40020040 	.word	0x40020040
 8001ce4:	40020058 	.word	0x40020058
 8001ce8:	40020070 	.word	0x40020070
 8001cec:	40020088 	.word	0x40020088
 8001cf0:	400200a0 	.word	0x400200a0
 8001cf4:	400200b8 	.word	0x400200b8
 8001cf8:	40020410 	.word	0x40020410
 8001cfc:	40020428 	.word	0x40020428
 8001d00:	40020440 	.word	0x40020440
 8001d04:	40020458 	.word	0x40020458
 8001d08:	40020470 	.word	0x40020470
 8001d0c:	40020488 	.word	0x40020488
 8001d10:	400204a0 	.word	0x400204a0
 8001d14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a4f      	ldr	r2, [pc, #316]	@ (8001e70 <HAL_DMA_Abort+0x5dc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d072      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <HAL_DMA_Abort+0x5e0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d06d      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a4c      	ldr	r2, [pc, #304]	@ (8001e78 <HAL_DMA_Abort+0x5e4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d068      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4a      	ldr	r2, [pc, #296]	@ (8001e7c <HAL_DMA_Abort+0x5e8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d063      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a49      	ldr	r2, [pc, #292]	@ (8001e80 <HAL_DMA_Abort+0x5ec>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a47      	ldr	r2, [pc, #284]	@ (8001e84 <HAL_DMA_Abort+0x5f0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d059      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a46      	ldr	r2, [pc, #280]	@ (8001e88 <HAL_DMA_Abort+0x5f4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d054      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a44      	ldr	r2, [pc, #272]	@ (8001e8c <HAL_DMA_Abort+0x5f8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d04f      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a43      	ldr	r2, [pc, #268]	@ (8001e90 <HAL_DMA_Abort+0x5fc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04a      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a41      	ldr	r2, [pc, #260]	@ (8001e94 <HAL_DMA_Abort+0x600>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d045      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a40      	ldr	r2, [pc, #256]	@ (8001e98 <HAL_DMA_Abort+0x604>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d040      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3e      	ldr	r2, [pc, #248]	@ (8001e9c <HAL_DMA_Abort+0x608>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d03b      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea0 <HAL_DMA_Abort+0x60c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d036      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea4 <HAL_DMA_Abort+0x610>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d031      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	@ (8001ea8 <HAL_DMA_Abort+0x614>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a38      	ldr	r2, [pc, #224]	@ (8001eac <HAL_DMA_Abort+0x618>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a37      	ldr	r2, [pc, #220]	@ (8001eb0 <HAL_DMA_Abort+0x61c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a35      	ldr	r2, [pc, #212]	@ (8001eb4 <HAL_DMA_Abort+0x620>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01d      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a34      	ldr	r2, [pc, #208]	@ (8001eb8 <HAL_DMA_Abort+0x624>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a32      	ldr	r2, [pc, #200]	@ (8001ebc <HAL_DMA_Abort+0x628>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a31      	ldr	r2, [pc, #196]	@ (8001ec0 <HAL_DMA_Abort+0x62c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2f      	ldr	r2, [pc, #188]	@ (8001ec4 <HAL_DMA_Abort+0x630>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec8 <HAL_DMA_Abort+0x634>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_Abort+0x58a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2c      	ldr	r2, [pc, #176]	@ (8001ecc <HAL_DMA_Abort+0x638>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_DMA_Abort+0x58e>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_DMA_Abort+0x590>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d015      	beq.n	8001e54 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e30:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e48:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e52:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40020010 	.word	0x40020010
 8001e74:	40020028 	.word	0x40020028
 8001e78:	40020040 	.word	0x40020040
 8001e7c:	40020058 	.word	0x40020058
 8001e80:	40020070 	.word	0x40020070
 8001e84:	40020088 	.word	0x40020088
 8001e88:	400200a0 	.word	0x400200a0
 8001e8c:	400200b8 	.word	0x400200b8
 8001e90:	40020410 	.word	0x40020410
 8001e94:	40020428 	.word	0x40020428
 8001e98:	40020440 	.word	0x40020440
 8001e9c:	40020458 	.word	0x40020458
 8001ea0:	40020470 	.word	0x40020470
 8001ea4:	40020488 	.word	0x40020488
 8001ea8:	400204a0 	.word	0x400204a0
 8001eac:	400204b8 	.word	0x400204b8
 8001eb0:	58025408 	.word	0x58025408
 8001eb4:	5802541c 	.word	0x5802541c
 8001eb8:	58025430 	.word	0x58025430
 8001ebc:	58025444 	.word	0x58025444
 8001ec0:	58025458 	.word	0x58025458
 8001ec4:	5802546c 	.word	0x5802546c
 8001ec8:	58025480 	.word	0x58025480
 8001ecc:	58025494 	.word	0x58025494

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e237      	b.n	8002352 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d004      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2280      	movs	r2, #128	@ 0x80
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e22c      	b.n	8002352 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a5c      	ldr	r2, [pc, #368]	@ (8002070 <HAL_DMA_Abort_IT+0x1a0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04a      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5b      	ldr	r2, [pc, #364]	@ (8002074 <HAL_DMA_Abort_IT+0x1a4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d045      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <HAL_DMA_Abort_IT+0x1a8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a58      	ldr	r2, [pc, #352]	@ (800207c <HAL_DMA_Abort_IT+0x1ac>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03b      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_DMA_Abort_IT+0x1b0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a55      	ldr	r2, [pc, #340]	@ (8002084 <HAL_DMA_Abort_IT+0x1b4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a53      	ldr	r2, [pc, #332]	@ (8002088 <HAL_DMA_Abort_IT+0x1b8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02c      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a52      	ldr	r2, [pc, #328]	@ (800208c <HAL_DMA_Abort_IT+0x1bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d027      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a50      	ldr	r2, [pc, #320]	@ (8002090 <HAL_DMA_Abort_IT+0x1c0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a4f      	ldr	r2, [pc, #316]	@ (8002094 <HAL_DMA_Abort_IT+0x1c4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a4d      	ldr	r2, [pc, #308]	@ (8002098 <HAL_DMA_Abort_IT+0x1c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800209c <HAL_DMA_Abort_IT+0x1cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a4a      	ldr	r2, [pc, #296]	@ (80020a0 <HAL_DMA_Abort_IT+0x1d0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a49      	ldr	r2, [pc, #292]	@ (80020a4 <HAL_DMA_Abort_IT+0x1d4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a47      	ldr	r2, [pc, #284]	@ (80020a8 <HAL_DMA_Abort_IT+0x1d8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Abort_IT+0xc8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a46      	ldr	r2, [pc, #280]	@ (80020ac <HAL_DMA_Abort_IT+0x1dc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Abort_IT+0xcc>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Abort_IT+0xce>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8086 	beq.w	80020b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002070 <HAL_DMA_Abort_IT+0x1a0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d04a      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2e      	ldr	r2, [pc, #184]	@ (8002074 <HAL_DMA_Abort_IT+0x1a4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d045      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002078 <HAL_DMA_Abort_IT+0x1a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2b      	ldr	r2, [pc, #172]	@ (800207c <HAL_DMA_Abort_IT+0x1ac>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d03b      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a29      	ldr	r2, [pc, #164]	@ (8002080 <HAL_DMA_Abort_IT+0x1b0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <HAL_DMA_Abort_IT+0x1b4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <HAL_DMA_Abort_IT+0x1b8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d02c      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	@ (800208c <HAL_DMA_Abort_IT+0x1bc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d027      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <HAL_DMA_Abort_IT+0x1c0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d022      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_DMA_Abort_IT+0x1c4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01d      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <HAL_DMA_Abort_IT+0x1c8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d018      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1f      	ldr	r2, [pc, #124]	@ (800209c <HAL_DMA_Abort_IT+0x1cc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_DMA_Abort_IT+0x1d0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <HAL_DMA_Abort_IT+0x1d4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <HAL_DMA_Abort_IT+0x1d8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_DMA_Abort_IT+0x17c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_DMA_Abort_IT+0x1dc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d108      	bne.n	800205e <HAL_DMA_Abort_IT+0x18e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e178      	b.n	8002350 <HAL_DMA_Abort_IT+0x480>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e16f      	b.n	8002350 <HAL_DMA_Abort_IT+0x480>
 8002070:	40020010 	.word	0x40020010
 8002074:	40020028 	.word	0x40020028
 8002078:	40020040 	.word	0x40020040
 800207c:	40020058 	.word	0x40020058
 8002080:	40020070 	.word	0x40020070
 8002084:	40020088 	.word	0x40020088
 8002088:	400200a0 	.word	0x400200a0
 800208c:	400200b8 	.word	0x400200b8
 8002090:	40020410 	.word	0x40020410
 8002094:	40020428 	.word	0x40020428
 8002098:	40020440 	.word	0x40020440
 800209c:	40020458 	.word	0x40020458
 80020a0:	40020470 	.word	0x40020470
 80020a4:	40020488 	.word	0x40020488
 80020a8:	400204a0 	.word	0x400204a0
 80020ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 020e 	bic.w	r2, r2, #14
 80020be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6c      	ldr	r2, [pc, #432]	@ (8002278 <HAL_DMA_Abort_IT+0x3a8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d04a      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6b      	ldr	r2, [pc, #428]	@ (800227c <HAL_DMA_Abort_IT+0x3ac>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d045      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a69      	ldr	r2, [pc, #420]	@ (8002280 <HAL_DMA_Abort_IT+0x3b0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d040      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a68      	ldr	r2, [pc, #416]	@ (8002284 <HAL_DMA_Abort_IT+0x3b4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d03b      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a66      	ldr	r2, [pc, #408]	@ (8002288 <HAL_DMA_Abort_IT+0x3b8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d036      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a65      	ldr	r2, [pc, #404]	@ (800228c <HAL_DMA_Abort_IT+0x3bc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d031      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a63      	ldr	r2, [pc, #396]	@ (8002290 <HAL_DMA_Abort_IT+0x3c0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d02c      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a62      	ldr	r2, [pc, #392]	@ (8002294 <HAL_DMA_Abort_IT+0x3c4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d027      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a60      	ldr	r2, [pc, #384]	@ (8002298 <HAL_DMA_Abort_IT+0x3c8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d022      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5f      	ldr	r2, [pc, #380]	@ (800229c <HAL_DMA_Abort_IT+0x3cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d01d      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5d      	ldr	r2, [pc, #372]	@ (80022a0 <HAL_DMA_Abort_IT+0x3d0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d018      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5c      	ldr	r2, [pc, #368]	@ (80022a4 <HAL_DMA_Abort_IT+0x3d4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5a      	ldr	r2, [pc, #360]	@ (80022a8 <HAL_DMA_Abort_IT+0x3d8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00e      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a59      	ldr	r2, [pc, #356]	@ (80022ac <HAL_DMA_Abort_IT+0x3dc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d009      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a57      	ldr	r2, [pc, #348]	@ (80022b0 <HAL_DMA_Abort_IT+0x3e0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_DMA_Abort_IT+0x290>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a56      	ldr	r2, [pc, #344]	@ (80022b4 <HAL_DMA_Abort_IT+0x3e4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d108      	bne.n	8002172 <HAL_DMA_Abort_IT+0x2a2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e007      	b.n	8002182 <HAL_DMA_Abort_IT+0x2b2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a3c      	ldr	r2, [pc, #240]	@ (8002278 <HAL_DMA_Abort_IT+0x3a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d072      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a3a      	ldr	r2, [pc, #232]	@ (800227c <HAL_DMA_Abort_IT+0x3ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d06d      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a39      	ldr	r2, [pc, #228]	@ (8002280 <HAL_DMA_Abort_IT+0x3b0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d068      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a37      	ldr	r2, [pc, #220]	@ (8002284 <HAL_DMA_Abort_IT+0x3b4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d063      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <HAL_DMA_Abort_IT+0x3b8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d05e      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a34      	ldr	r2, [pc, #208]	@ (800228c <HAL_DMA_Abort_IT+0x3bc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d059      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a33      	ldr	r2, [pc, #204]	@ (8002290 <HAL_DMA_Abort_IT+0x3c0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d054      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a31      	ldr	r2, [pc, #196]	@ (8002294 <HAL_DMA_Abort_IT+0x3c4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d04f      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a30      	ldr	r2, [pc, #192]	@ (8002298 <HAL_DMA_Abort_IT+0x3c8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04a      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2e      	ldr	r2, [pc, #184]	@ (800229c <HAL_DMA_Abort_IT+0x3cc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d045      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2d      	ldr	r2, [pc, #180]	@ (80022a0 <HAL_DMA_Abort_IT+0x3d0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d040      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <HAL_DMA_Abort_IT+0x3d4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d03b      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <HAL_DMA_Abort_IT+0x3d8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d036      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a28      	ldr	r2, [pc, #160]	@ (80022ac <HAL_DMA_Abort_IT+0x3dc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a27      	ldr	r2, [pc, #156]	@ (80022b0 <HAL_DMA_Abort_IT+0x3e0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d02c      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a25      	ldr	r2, [pc, #148]	@ (80022b4 <HAL_DMA_Abort_IT+0x3e4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d027      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a24      	ldr	r2, [pc, #144]	@ (80022b8 <HAL_DMA_Abort_IT+0x3e8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d022      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <HAL_DMA_Abort_IT+0x3ec>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d01d      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <HAL_DMA_Abort_IT+0x3f0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d018      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1f      	ldr	r2, [pc, #124]	@ (80022c4 <HAL_DMA_Abort_IT+0x3f4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d013      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1e      	ldr	r2, [pc, #120]	@ (80022c8 <HAL_DMA_Abort_IT+0x3f8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00e      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1c      	ldr	r2, [pc, #112]	@ (80022cc <HAL_DMA_Abort_IT+0x3fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d009      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1b      	ldr	r2, [pc, #108]	@ (80022d0 <HAL_DMA_Abort_IT+0x400>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort_IT+0x3a2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a19      	ldr	r2, [pc, #100]	@ (80022d4 <HAL_DMA_Abort_IT+0x404>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d132      	bne.n	80022d8 <HAL_DMA_Abort_IT+0x408>
 8002272:	2301      	movs	r3, #1
 8002274:	e031      	b.n	80022da <HAL_DMA_Abort_IT+0x40a>
 8002276:	bf00      	nop
 8002278:	40020010 	.word	0x40020010
 800227c:	40020028 	.word	0x40020028
 8002280:	40020040 	.word	0x40020040
 8002284:	40020058 	.word	0x40020058
 8002288:	40020070 	.word	0x40020070
 800228c:	40020088 	.word	0x40020088
 8002290:	400200a0 	.word	0x400200a0
 8002294:	400200b8 	.word	0x400200b8
 8002298:	40020410 	.word	0x40020410
 800229c:	40020428 	.word	0x40020428
 80022a0:	40020440 	.word	0x40020440
 80022a4:	40020458 	.word	0x40020458
 80022a8:	40020470 	.word	0x40020470
 80022ac:	40020488 	.word	0x40020488
 80022b0:	400204a0 	.word	0x400204a0
 80022b4:	400204b8 	.word	0x400204b8
 80022b8:	58025408 	.word	0x58025408
 80022bc:	5802541c 	.word	0x5802541c
 80022c0:	58025430 	.word	0x58025430
 80022c4:	58025444 	.word	0x58025444
 80022c8:	58025458 	.word	0x58025458
 80022cc:	5802546c 	.word	0x5802546c
 80022d0:	58025480 	.word	0x58025480
 80022d4:	58025494 	.word	0x58025494
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d028      	beq.n	8002330 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2201      	movs	r2, #1
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800230c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002320:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002324:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800232e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800236a:	4b86      	ldr	r3, [pc, #536]	@ (8002584 <HAL_GPIO_Init+0x228>)
 800236c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800236e:	e18c      	b.n	800268a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2101      	movs	r1, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 817e 	beq.w	8002684 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_Init+0x44>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023d6:	2201      	movs	r2, #1
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0201 	and.w	r2, r3, #1
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d017      	beq.n	800243e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d123      	bne.n	8002492 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	69b9      	ldr	r1, [r7, #24]
 800248e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80d8 	beq.w	8002684 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002588 <HAL_GPIO_Init+0x22c>)
 80024d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024da:	4a2b      	ldr	r2, [pc, #172]	@ (8002588 <HAL_GPIO_Init+0x22c>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024e4:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <HAL_GPIO_Init+0x22c>)
 80024e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a26      	ldr	r2, [pc, #152]	@ (800258c <HAL_GPIO_Init+0x230>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <HAL_GPIO_Init+0x234>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d04a      	beq.n	80025b4 <HAL_GPIO_Init+0x258>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <HAL_GPIO_Init+0x238>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d02b      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1b      	ldr	r2, [pc, #108]	@ (8002598 <HAL_GPIO_Init+0x23c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d025      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1a      	ldr	r2, [pc, #104]	@ (800259c <HAL_GPIO_Init+0x240>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d01f      	beq.n	8002576 <HAL_GPIO_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a19      	ldr	r2, [pc, #100]	@ (80025a0 <HAL_GPIO_Init+0x244>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d019      	beq.n	8002572 <HAL_GPIO_Init+0x216>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a18      	ldr	r2, [pc, #96]	@ (80025a4 <HAL_GPIO_Init+0x248>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0x212>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HAL_GPIO_Init+0x24c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00d      	beq.n	800256a <HAL_GPIO_Init+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a16      	ldr	r2, [pc, #88]	@ (80025ac <HAL_GPIO_Init+0x250>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <HAL_GPIO_Init+0x20a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <HAL_GPIO_Init+0x254>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_GPIO_Init+0x206>
 800255e:	2309      	movs	r3, #9
 8002560:	e029      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002562:	230a      	movs	r3, #10
 8002564:	e027      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002566:	2307      	movs	r3, #7
 8002568:	e025      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800256a:	2306      	movs	r3, #6
 800256c:	e023      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800256e:	2305      	movs	r3, #5
 8002570:	e021      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002572:	2304      	movs	r3, #4
 8002574:	e01f      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002576:	2303      	movs	r3, #3
 8002578:	e01d      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800257a:	2302      	movs	r3, #2
 800257c:	e01b      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 800257e:	2301      	movs	r3, #1
 8002580:	e019      	b.n	80025b6 <HAL_GPIO_Init+0x25a>
 8002582:	bf00      	nop
 8002584:	58000080 	.word	0x58000080
 8002588:	58024400 	.word	0x58024400
 800258c:	58000400 	.word	0x58000400
 8002590:	58020000 	.word	0x58020000
 8002594:	58020400 	.word	0x58020400
 8002598:	58020800 	.word	0x58020800
 800259c:	58020c00 	.word	0x58020c00
 80025a0:	58021000 	.word	0x58021000
 80025a4:	58021400 	.word	0x58021400
 80025a8:	58021800 	.word	0x58021800
 80025ac:	58021c00 	.word	0x58021c00
 80025b0:	58022400 	.word	0x58022400
 80025b4:	2300      	movs	r3, #0
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	4093      	lsls	r3, r2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c6:	4938      	ldr	r1, [pc, #224]	@ (80026a8 <HAL_GPIO_Init+0x34c>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	089b      	lsrs	r3, r3, #2
 80025cc:	3302      	adds	r3, #2
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002628:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f ae6b 	bne.w	8002370 <HAL_GPIO_Init+0x14>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3724      	adds	r7, #36	@ 0x24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	58000400 	.word	0x58000400

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026c8:	e003      	b.n	80026d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	041a      	lsls	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fa87 	bl	8000c18 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <HAL_PWREx_ConfigSupply+0x70>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d00a      	beq.n	800273e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002728:	4b16      	ldr	r3, [pc, #88]	@ (8002784 <HAL_PWREx_ConfigSupply+0x70>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d001      	beq.n	800273a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e01f      	b.n	800277a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e01d      	b.n	800277a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_PWREx_ConfigSupply+0x70>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	490f      	ldr	r1, [pc, #60]	@ (8002784 <HAL_PWREx_ConfigSupply+0x70>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800274e:	f7fe fe1b 	bl	8001388 <HAL_GetTick>
 8002752:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002754:	e009      	b.n	800276a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002756:	f7fe fe17 	bl	8001388 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002764:	d901      	bls.n	800276a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e007      	b.n	800277a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_PWREx_ConfigSupply+0x70>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002776:	d1ee      	bne.n	8002756 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	58024800 	.word	0x58024800

08002788 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	@ 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e3c8      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8087 	beq.w	80028b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a8:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027b2:	4b86      	ldr	r3, [pc, #536]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d007      	beq.n	80027ce <HAL_RCC_OscConfig+0x46>
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	2b18      	cmp	r3, #24
 80027c2:	d110      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5e>
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d10b      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ce:	4b7f      	ldr	r3, [pc, #508]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d06c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x12c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d168      	bne.n	80028b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e3a2      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x76>
 80027f0:	4b76      	ldr	r3, [pc, #472]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a75      	ldr	r2, [pc, #468]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e02e      	b.n	800285c <HAL_RCC_OscConfig+0xd4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x98>
 8002806:	4b71      	ldr	r3, [pc, #452]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a70      	ldr	r2, [pc, #448]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800280c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b6e      	ldr	r3, [pc, #440]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6d      	ldr	r2, [pc, #436]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002818:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e01d      	b.n	800285c <HAL_RCC_OscConfig+0xd4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0xbc>
 800282a:	4b68      	ldr	r3, [pc, #416]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a67      	ldr	r2, [pc, #412]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b65      	ldr	r3, [pc, #404]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a64      	ldr	r2, [pc, #400]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0xd4>
 8002844:	4b61      	ldr	r3, [pc, #388]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a60      	ldr	r2, [pc, #384]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b5e      	ldr	r3, [pc, #376]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a5d      	ldr	r2, [pc, #372]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fd90 	bl	8001388 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7fe fd8c 	bl	8001388 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e356      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800287e:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0xe4>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe fd7c 	bl	8001388 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fd78 	bl	8001388 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e342      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x10c>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 808c 	beq.w	80029dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c4:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028ce:	4b3f      	ldr	r3, [pc, #252]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_RCC_OscConfig+0x162>
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	2b18      	cmp	r3, #24
 80028de:	d137      	bne.n	8002950 <HAL_RCC_OscConfig+0x1c8>
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d132      	bne.n	8002950 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ea:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_RCC_OscConfig+0x17a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e314      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002902:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 0219 	bic.w	r2, r3, #25
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	492f      	ldr	r1, [pc, #188]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fd38 	bl	8001388 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291c:	f7fe fd34 	bl	8001388 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e2fe      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292e:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	061b      	lsls	r3, r3, #24
 8002948:	4920      	ldr	r1, [pc, #128]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294e:	e045      	b.n	80029dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d026      	beq.n	80029a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002958:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 0219 	bic.w	r2, r3, #25
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4919      	ldr	r1, [pc, #100]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fd0d 	bl	8001388 <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe fd09 	bl	8001388 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e2d3      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	490b      	ldr	r1, [pc, #44]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	e01a      	b.n	80029dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a08      	ldr	r2, [pc, #32]	@ (80029cc <HAL_RCC_OscConfig+0x244>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fce9 	bl	8001388 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fce5 	bl	8001388 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d903      	bls.n	80029d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e2af      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
 80029cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d0:	4b96      	ldr	r3, [pc, #600]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ee      	bne.n	80029ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d06a      	beq.n	8002abe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e8:	4b90      	ldr	r3, [pc, #576]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029f2:	4b8e      	ldr	r3, [pc, #568]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d007      	beq.n	8002a0e <HAL_RCC_OscConfig+0x286>
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b18      	cmp	r3, #24
 8002a02:	d11b      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2b4>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0e:	4b87      	ldr	r3, [pc, #540]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x29e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b80      	cmp	r3, #128	@ 0x80
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e282      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a26:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	497d      	ldr	r1, [pc, #500]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a3a:	e040      	b.n	8002abe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d023      	beq.n	8002a8c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a44:	4b79      	ldr	r3, [pc, #484]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a78      	ldr	r2, [pc, #480]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fc9a 	bl	8001388 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a58:	f7fe fc96 	bl	8001388 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e260      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a6a:	4b70      	ldr	r3, [pc, #448]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a76:	4b6d      	ldr	r3, [pc, #436]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	4969      	ldr	r1, [pc, #420]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
 8002a8a:	e018      	b.n	8002abe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a8c:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a66      	ldr	r2, [pc, #408]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fc76 	bl	8001388 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fc72 	bl	8001388 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e23c      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d036      	beq.n	8002b38 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b56      	ldr	r3, [pc, #344]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad6:	4a55      	ldr	r2, [pc, #340]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fc53 	bl	8001388 <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fc4f 	bl	8001388 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e219      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002af8:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002afa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x35e>
 8002b04:	e018      	b.n	8002b38 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	4a48      	ldr	r2, [pc, #288]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe fc39 	bl	8001388 <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fc35 	bl	8001388 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1ff      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d036      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d019      	beq.n	8002b80 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b4c:	4b37      	ldr	r3, [pc, #220]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a36      	ldr	r2, [pc, #216]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b58:	f7fe fc16 	bl	8001388 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b60:	f7fe fc12 	bl	8001388 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1dc      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b72:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x3d8>
 8002b7e:	e018      	b.n	8002bb2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b80:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a29      	ldr	r2, [pc, #164]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002b86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fbfc 	bl	8001388 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b94:	f7fe fbf8 	bl	8001388 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1c2      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8086 	beq.w	8002ccc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fbdc 	bl	8001388 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe fbd8 	bl	8001388 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1a2      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_RCC_OscConfig+0x4a8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x480>
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c06:	e032      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <HAL_RCC_OscConfig+0x4ac>
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c20:	4a02      	ldr	r2, [pc, #8]	@ (8002c2c <HAL_RCC_OscConfig+0x4a4>)
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c28:	e021      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e6>
 8002c2a:	bf00      	nop
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	58024800 	.word	0x58024800
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b05      	cmp	r3, #5
 8002c3a:	d10c      	bne.n	8002c56 <HAL_RCC_OscConfig+0x4ce>
 8002c3c:	4b83      	ldr	r3, [pc, #524]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a82      	ldr	r2, [pc, #520]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c48:	4b80      	ldr	r3, [pc, #512]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a7f      	ldr	r2, [pc, #508]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e6>
 8002c56:	4b7d      	ldr	r3, [pc, #500]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c62:	4b7a      	ldr	r3, [pc, #488]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	4a79      	ldr	r2, [pc, #484]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d015      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe fb87 	bl	8001388 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe fb83 	bl	8001388 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e14b      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c94:	4b6d      	ldr	r3, [pc, #436]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ee      	beq.n	8002c7e <HAL_RCC_OscConfig+0x4f6>
 8002ca0:	e014      	b.n	8002ccc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fb71 	bl	8001388 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fb6d 	bl	8001388 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e135      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc0:	4b62      	ldr	r3, [pc, #392]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 812a 	beq.w	8002f2a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cde:	2b18      	cmp	r3, #24
 8002ce0:	f000 80ba 	beq.w	8002e58 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f040 8095 	bne.w	8002e18 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b57      	ldr	r3, [pc, #348]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a56      	ldr	r2, [pc, #344]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002cf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fb45 	bl	8001388 <HAL_GetTick>
 8002cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fb41 	bl	8001388 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e10b      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d14:	4b4d      	ldr	r3, [pc, #308]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d20:	4b4a      	ldr	r3, [pc, #296]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d24:	4b4a      	ldr	r3, [pc, #296]	@ (8002e50 <HAL_RCC_OscConfig+0x6c8>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	430a      	orrs	r2, r1
 8002d34:	4945      	ldr	r1, [pc, #276]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	025b      	lsls	r3, r3, #9
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	3b01      	subs	r3, #1
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d62:	3b01      	subs	r3, #1
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d6a:	4938      	ldr	r1, [pc, #224]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d70:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	4a35      	ldr	r2, [pc, #212]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d7c:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d80:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_RCC_OscConfig+0x6cc>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d88:	00d2      	lsls	r2, r2, #3
 8002d8a:	4930      	ldr	r1, [pc, #192]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d90:	4b2e      	ldr	r3, [pc, #184]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d94:	f023 020c 	bic.w	r2, r3, #12
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	492b      	ldr	r1, [pc, #172]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002da2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	f023 0202 	bic.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dae:	4927      	ldr	r1, [pc, #156]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	4a24      	ldr	r2, [pc, #144]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	4a21      	ldr	r2, [pc, #132]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de4:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe faca 	bl	8001388 <HAL_GetTick>
 8002df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fac6 	bl	8001388 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e090      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x670>
 8002e16:	e088      	b.n	8002f2a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fab0 	bl	8001388 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe faac 	bl	8001388 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e076      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3e:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_RCC_OscConfig+0x6c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x6a4>
 8002e4a:	e06e      	b.n	8002f2a <HAL_RCC_OscConfig+0x7a2>
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	fffffc0c 	.word	0xfffffc0c
 8002e54:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e58:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e5e:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d031      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0203 	and.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d12a      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d122      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0a5b      	lsrs	r3, r3, #9
 8002e9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d111      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d108      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	0e1b      	lsrs	r3, r3, #24
 8002ec2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e02b      	b.n	8002f2c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ed4:	4b17      	ldr	r3, [pc, #92]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed8:	08db      	lsrs	r3, r3, #3
 8002eda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ede:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d01f      	beq.n	8002f2a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002eea:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	4a11      	ldr	r2, [pc, #68]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ef6:	f7fe fa47 	bl	8001388 <HAL_GetTick>
 8002efa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002efc:	bf00      	nop
 8002efe:	f7fe fa43 	bl	8001388 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d0f9      	beq.n	8002efe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_OscConfig+0x7b0>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f16:	00d2      	lsls	r2, r2, #3
 8002f18:	4906      	ldr	r1, [pc, #24]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f1e:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	4a04      	ldr	r2, [pc, #16]	@ (8002f34 <HAL_RCC_OscConfig+0x7ac>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3730      	adds	r7, #48	@ 0x30
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	58024400 	.word	0x58024400
 8002f38:	ffff0007 	.word	0xffff0007

08002f3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e19c      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b8a      	ldr	r3, [pc, #552]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d910      	bls.n	8002f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b87      	ldr	r3, [pc, #540]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 020f 	bic.w	r2, r3, #15
 8002f66:	4985      	ldr	r1, [pc, #532]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b83      	ldr	r3, [pc, #524]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e184      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	4b7b      	ldr	r3, [pc, #492]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d908      	bls.n	8002fae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f9c:	4b78      	ldr	r3, [pc, #480]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	4975      	ldr	r1, [pc, #468]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	4b70      	ldr	r3, [pc, #448]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d908      	bls.n	8002fdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fca:	4b6d      	ldr	r3, [pc, #436]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	496a      	ldr	r1, [pc, #424]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	4b64      	ldr	r3, [pc, #400]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d908      	bls.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ff8:	4b61      	ldr	r3, [pc, #388]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	495e      	ldr	r1, [pc, #376]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003006:	4313      	orrs	r3, r2
 8003008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003022:	429a      	cmp	r2, r3
 8003024:	d908      	bls.n	8003038 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003026:	4b56      	ldr	r3, [pc, #344]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4953      	ldr	r1, [pc, #332]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003034:	4313      	orrs	r3, r2
 8003036:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4b4d      	ldr	r3, [pc, #308]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	429a      	cmp	r2, r3
 8003052:	d908      	bls.n	8003066 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003054:	4b4a      	ldr	r3, [pc, #296]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f023 020f 	bic.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4947      	ldr	r1, [pc, #284]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003062:	4313      	orrs	r3, r2
 8003064:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d055      	beq.n	800311e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003072:	4b43      	ldr	r3, [pc, #268]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4940      	ldr	r1, [pc, #256]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003080:	4313      	orrs	r3, r2
 8003082:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d107      	bne.n	800309c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800308c:	4b3c      	ldr	r3, [pc, #240]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d121      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0f6      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030a4:	4b36      	ldr	r3, [pc, #216]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d115      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0ea      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030bc:	4b30      	ldr	r3, [pc, #192]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0de      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0d6      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030dc:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f023 0207 	bic.w	r2, r3, #7
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4925      	ldr	r1, [pc, #148]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ee:	f7fe f94b 	bl	8001388 <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f4:	e00a      	b.n	800310c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f6:	f7fe f947 	bl	8001388 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0be      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	429a      	cmp	r2, r3
 800311c:	d1eb      	bne.n	80030f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	429a      	cmp	r2, r3
 8003138:	d208      	bcs.n	800314c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313a:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_RCC_ClockConfig+0x244>)
 8003148:	4313      	orrs	r3, r2
 800314a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d214      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	4906      	ldr	r1, [pc, #24]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <HAL_RCC_ClockConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e086      	b.n	800328a <HAL_RCC_ClockConfig+0x34e>
 800317c:	52002000 	.word	0x52002000
 8003180:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	4b3f      	ldr	r3, [pc, #252]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800319c:	429a      	cmp	r2, r3
 800319e:	d208      	bcs.n	80031b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4939      	ldr	r1, [pc, #228]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d208      	bcs.n	80031e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ce:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	492e      	ldr	r1, [pc, #184]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	4b28      	ldr	r3, [pc, #160]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d208      	bcs.n	800320e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031fc:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4922      	ldr	r1, [pc, #136]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 800320a:	4313      	orrs	r3, r2
 800320c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003226:	429a      	cmp	r2, r3
 8003228:	d208      	bcs.n	800323c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800322a:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4917      	ldr	r1, [pc, #92]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 8003238:	4313      	orrs	r3, r2
 800323a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800323c:	f000 f834 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	4912      	ldr	r1, [pc, #72]	@ (8003298 <HAL_RCC_ClockConfig+0x35c>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800325a:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <HAL_RCC_ClockConfig+0x358>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	4a0d      	ldr	r2, [pc, #52]	@ (8003298 <HAL_RCC_ClockConfig+0x35c>)
 8003264:	5cd3      	ldrb	r3, [r2, r3]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_RCC_ClockConfig+0x360>)
 8003272:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003274:	4a0a      	ldr	r2, [pc, #40]	@ (80032a0 <HAL_RCC_ClockConfig+0x364>)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800327a:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <HAL_RCC_ClockConfig+0x368>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe f838 	bl	80012f4 <HAL_InitTick>
 8003284:	4603      	mov	r3, r0
 8003286:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	58024400 	.word	0x58024400
 8003298:	0800813c 	.word	0x0800813c
 800329c:	24000008 	.word	0x24000008
 80032a0:	24000004 	.word	0x24000004
 80032a4:	2400000c 	.word	0x2400000c

080032a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	@ 0x24
 80032ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ae:	4bb3      	ldr	r3, [pc, #716]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032b6:	2b18      	cmp	r3, #24
 80032b8:	f200 8155 	bhi.w	8003566 <HAL_RCC_GetSysClockFreq+0x2be>
 80032bc:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	08003329 	.word	0x08003329
 80032c8:	08003567 	.word	0x08003567
 80032cc:	08003567 	.word	0x08003567
 80032d0:	08003567 	.word	0x08003567
 80032d4:	08003567 	.word	0x08003567
 80032d8:	08003567 	.word	0x08003567
 80032dc:	08003567 	.word	0x08003567
 80032e0:	08003567 	.word	0x08003567
 80032e4:	0800334f 	.word	0x0800334f
 80032e8:	08003567 	.word	0x08003567
 80032ec:	08003567 	.word	0x08003567
 80032f0:	08003567 	.word	0x08003567
 80032f4:	08003567 	.word	0x08003567
 80032f8:	08003567 	.word	0x08003567
 80032fc:	08003567 	.word	0x08003567
 8003300:	08003567 	.word	0x08003567
 8003304:	08003355 	.word	0x08003355
 8003308:	08003567 	.word	0x08003567
 800330c:	08003567 	.word	0x08003567
 8003310:	08003567 	.word	0x08003567
 8003314:	08003567 	.word	0x08003567
 8003318:	08003567 	.word	0x08003567
 800331c:	08003567 	.word	0x08003567
 8003320:	08003567 	.word	0x08003567
 8003324:	0800335b 	.word	0x0800335b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003328:	4b94      	ldr	r3, [pc, #592]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d009      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003334:	4b91      	ldr	r3, [pc, #580]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	4a90      	ldr	r2, [pc, #576]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003346:	e111      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003348:	4b8d      	ldr	r3, [pc, #564]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800334a:	61bb      	str	r3, [r7, #24]
      break;
 800334c:	e10e      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800334e:	4b8d      	ldr	r3, [pc, #564]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003350:	61bb      	str	r3, [r7, #24]
      break;
 8003352:	e10b      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003354:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003356:	61bb      	str	r3, [r7, #24]
      break;
 8003358:	e108      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800335a:	4b88      	ldr	r3, [pc, #544]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003364:	4b85      	ldr	r3, [pc, #532]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800336e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003370:	4b82      	ldr	r3, [pc, #520]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800337a:	4b80      	ldr	r3, [pc, #512]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337e:	08db      	lsrs	r3, r3, #3
 8003380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80e1 	beq.w	8003560 <HAL_RCC_GetSysClockFreq+0x2b8>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	f000 8083 	beq.w	80034ac <HAL_RCC_GetSysClockFreq+0x204>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	f200 80a1 	bhi.w	80034f0 <HAL_RCC_GetSysClockFreq+0x248>
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x114>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d056      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033ba:	e099      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033bc:	4b6f      	ldr	r3, [pc, #444]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02d      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033c8:	4b6c      	ldr	r3, [pc, #432]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f2:	4b62      	ldr	r3, [pc, #392]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003402:	ed97 6a02 	vldr	s12, [r7, #8]
 8003406:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800358c <HAL_RCC_GetSysClockFreq+0x2e4>
 800340a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003422:	e087      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003590 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003436:	4b51      	ldr	r3, [pc, #324]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003446:	ed97 6a02 	vldr	s12, [r7, #8]
 800344a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800358c <HAL_RCC_GetSysClockFreq+0x2e4>
 800344e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800345a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003466:	e065      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003594 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347a:	4b40      	ldr	r3, [pc, #256]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348a:	ed97 6a02 	vldr	s12, [r7, #8]
 800348e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800358c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800349e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034aa:	e043      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003598 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034be:	4b2f      	ldr	r3, [pc, #188]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800358c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ee:	e021      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003594 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003512:	ed97 6a02 	vldr	s12, [r7, #8]
 8003516:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800358c <HAL_RCC_GetSysClockFreq+0x2e4>
 800351a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800351e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003532:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003534:	4b11      	ldr	r3, [pc, #68]	@ (800357c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800353e:	3301      	adds	r3, #1
 8003540:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800354c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003558:	ee17 3a90 	vmov	r3, s15
 800355c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800355e:	e005      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
      break;
 8003564:	e002      	b.n	800356c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003566:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003568:	61bb      	str	r3, [r7, #24]
      break;
 800356a:	bf00      	nop
  }

  return sysclockfreq;
 800356c:	69bb      	ldr	r3, [r7, #24]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	@ 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
 8003580:	03d09000 	.word	0x03d09000
 8003584:	003d0900 	.word	0x003d0900
 8003588:	017d7840 	.word	0x017d7840
 800358c:	46000000 	.word	0x46000000
 8003590:	4c742400 	.word	0x4c742400
 8003594:	4a742400 	.word	0x4a742400
 8003598:	4bbebc20 	.word	0x4bbebc20

0800359c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035a2:	f7ff fe81 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <HAL_RCC_GetHCLKFreq+0x50>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490f      	ldr	r1, [pc, #60]	@ (80035f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035c0:	4b0a      	ldr	r3, [pc, #40]	@ (80035ec <HAL_RCC_GetHCLKFreq+0x50>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	f003 031f 	and.w	r3, r3, #31
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035da:	4a07      	ldr	r2, [pc, #28]	@ (80035f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035e0:	4b04      	ldr	r3, [pc, #16]	@ (80035f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	58024400 	.word	0x58024400
 80035f0:	0800813c 	.word	0x0800813c
 80035f4:	24000008 	.word	0x24000008
 80035f8:	24000004 	.word	0x24000004

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003600:	f7ff ffcc 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4904      	ldr	r1, [pc, #16]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	58024400 	.word	0x58024400
 8003624:	0800813c 	.word	0x0800813c

08003628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800362c:	f7ff ffb6 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4904      	ldr	r1, [pc, #16]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x28>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	58024400 	.word	0x58024400
 8003650:	0800813c 	.word	0x0800813c

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b0c6      	sub	sp, #280	@ 0x118
 800365a:	af00      	add	r7, sp, #0
 800365c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003660:	2300      	movs	r3, #0
 8003662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800366c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003678:	2500      	movs	r5, #0
 800367a:	ea54 0305 	orrs.w	r3, r4, r5
 800367e:	d049      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003686:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800368a:	d02f      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800368c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003690:	d828      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003696:	d01a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800369c:	d822      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a6:	d007      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036a8:	e01c      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036aa:	4bab      	ldr	r3, [pc, #684]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ae:	4aaa      	ldr	r2, [pc, #680]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036b6:	e01a      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036bc:	3308      	adds	r3, #8
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fc25 	bl	8004f10 <RCCEx_PLL2_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036cc:	e00f      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d2:	3328      	adds	r3, #40	@ 0x28
 80036d4:	2102      	movs	r1, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 fccc 	bl	8005074 <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e2:	e004      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10a      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036f6:	4b98      	ldr	r3, [pc, #608]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003704:	4a94      	ldr	r2, [pc, #592]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003706:	430b      	orrs	r3, r1
 8003708:	6513      	str	r3, [r2, #80]	@ 0x50
 800370a:	e003      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003720:	f04f 0900 	mov.w	r9, #0
 8003724:	ea58 0309 	orrs.w	r3, r8, r9
 8003728:	d047      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800372a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003730:	2b04      	cmp	r3, #4
 8003732:	d82a      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003734:	a201      	add	r2, pc, #4	@ (adr r2, 800373c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003751 	.word	0x08003751
 8003740:	0800375f 	.word	0x0800375f
 8003744:	08003775 	.word	0x08003775
 8003748:	08003793 	.word	0x08003793
 800374c:	08003793 	.word	0x08003793
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b81      	ldr	r3, [pc, #516]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	4a80      	ldr	r2, [pc, #512]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800375c:	e01a      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	3308      	adds	r3, #8
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fbd2 	bl	8004f10 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003772:	e00f      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003778:	3328      	adds	r3, #40	@ 0x28
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fc79 	bl	8005074 <RCCEx_PLL3_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003788:	e004      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003794:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800379c:	4b6e      	ldr	r3, [pc, #440]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a0:	f023 0107 	bic.w	r1, r3, #7
 80037a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80037c6:	f04f 0b00 	mov.w	fp, #0
 80037ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80037ce:	d05b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037d8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80037dc:	d03b      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80037de:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80037e2:	d834      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037e8:	d037      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80037ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037ee:	d82e      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037f4:	d033      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80037f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037fa:	d828      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80037fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003800:	d01a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003806:	d822      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800380c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003812:	e01c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b50      	ldr	r3, [pc, #320]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a4f      	ldr	r2, [pc, #316]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003820:	e01e      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fb70 	bl	8004f10 <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003836:	e013      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	3328      	adds	r3, #40	@ 0x28
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fc17 	bl	8005074 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800384c:	e008      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003854:	e004      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003868:	4b3b      	ldr	r3, [pc, #236]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003878:	4a37      	ldr	r2, [pc, #220]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6593      	str	r3, [r2, #88]	@ 0x58
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800389e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d05d      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038b4:	d03b      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038b6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80038ba:	d834      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c0:	d037      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80038c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038c6:	d82e      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038cc:	d033      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80038ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038d2:	d828      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038d8:	d01a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80038da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038de:	d822      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e8:	d007      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80038ea:	e01c      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	4a19      	ldr	r2, [pc, #100]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038f8:	e01e      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fe:	3308      	adds	r3, #8
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fb04 	bl	8004f10 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800390e:	e013      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003914:	3328      	adds	r3, #40	@ 0x28
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f001 fbab 	bl	8005074 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800392c:	e004      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800392e:	bf00      	nop
 8003930:	e002      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003932:	bf00      	nop
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003950:	4a01      	ldr	r2, [pc, #4]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003952:	430b      	orrs	r3, r1
 8003954:	6593      	str	r3, [r2, #88]	@ 0x58
 8003956:	e005      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003958:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003960:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003970:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800397a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d03a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	2b30      	cmp	r3, #48	@ 0x30
 800398c:	d01f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800398e:	2b30      	cmp	r3, #48	@ 0x30
 8003990:	d819      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003992:	2b20      	cmp	r3, #32
 8003994:	d00c      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d815      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800399a:	2b00      	cmp	r3, #0
 800399c:	d019      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d111      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a2:	4baa      	ldr	r3, [pc, #680]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	4aa9      	ldr	r2, [pc, #676]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039ae:	e011      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b4:	3308      	adds	r3, #8
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 faa9 	bl	8004f10 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80039d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039dc:	4b9b      	ldr	r3, [pc, #620]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80039e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	4a98      	ldr	r2, [pc, #608]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d051      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a24:	d035      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003a26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a2a:	d82e      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a30:	d031      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003a32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a36:	d828      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3c:	d01a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a42:	d822      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4c:	d007      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4b7e      	ldr	r3, [pc, #504]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4a7d      	ldr	r2, [pc, #500]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a62:	3308      	adds	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fa52 	bl	8004f10 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 faf9 	bl	8005074 <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	4a67      	ldr	r2, [pc, #412]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ab4:	e003      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003aca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ad4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4313      	orrs	r3, r2
 8003adc:	d053      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae8:	d033      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003aea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aee:	d82c      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003af0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003af4:	d02f      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003afa:	d826      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003afc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b00:	d02b      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b06:	d820      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b0c:	d012      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b12:	d81a      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d022      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1c:	d115      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b22:	3308      	adds	r3, #8
 8003b24:	2101      	movs	r1, #1
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f9f2 	bl	8004f10 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b32:	e015      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b38:	3328      	adds	r3, #40	@ 0x28
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fa99 	bl	8005074 <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b48:	e00a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b50:	e006      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b52:	bf00      	nop
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b68:	4b38      	ldr	r3, [pc, #224]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b7c:	e003      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d058      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003baa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb2:	d033      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bb8:	d82c      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bbe:	d02f      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc4:	d826      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bca:	d02b      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003bcc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003bd0:	d820      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bd6:	d012      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bdc:	d81a      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d022      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003be6:	d115      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bec:	3308      	adds	r3, #8
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f98d 	bl	8004f10 <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e015      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c02:	3328      	adds	r3, #40	@ 0x28
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 fa34 	bl	8005074 <RCCEx_PLL3_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c12:	e00a      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c1a:	e006      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c1c:	bf00      	nop
 8003c1e:	e004      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10e      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c42:	4a02      	ldr	r2, [pc, #8]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c4a:	bf00      	nop
 8003c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d037      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c88:	d816      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d018      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c92:	d111      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4bc4      	ldr	r3, [pc, #784]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	4ac3      	ldr	r2, [pc, #780]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f930 	bl	8004f10 <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cca:	4bb7      	ldr	r3, [pc, #732]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd8:	4ab3      	ldr	r2, [pc, #716]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d039      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d81c      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d55 	.word	0x08003d55
 8003d1c:	08003d29 	.word	0x08003d29
 8003d20:	08003d37 	.word	0x08003d37
 8003d24:	08003d55 	.word	0x08003d55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d28:	4b9f      	ldr	r3, [pc, #636]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	4a9e      	ldr	r2, [pc, #632]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d34:	e00f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 f8e6 	bl	8004f10 <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d4a:	e004      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d52:	e000      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d5e:	4b92      	ldr	r3, [pc, #584]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	f023 0103 	bic.w	r1, r3, #3
 8003d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	4a8e      	ldr	r2, [pc, #568]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f000 8099 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9e:	4b83      	ldr	r3, [pc, #524]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a82      	ldr	r2, [pc, #520]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003daa:	f7fd faed 	bl	8001388 <HAL_GetTick>
 8003dae:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fd fae8 	bl	8001388 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	@ 0x64
 8003dc2:	d903      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dcc:	4b77      	ldr	r3, [pc, #476]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ed      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d173      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003de0:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dec:	4053      	eors	r3, r2
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d015      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df6:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e02:	4b69      	ldr	r3, [pc, #420]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	4a68      	ldr	r2, [pc, #416]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e0e:	4b66      	ldr	r3, [pc, #408]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a65      	ldr	r2, [pc, #404]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e1a:	4a63      	ldr	r2, [pc, #396]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d118      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd faaa 	bl	8001388 <HAL_GetTick>
 8003e34:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e38:	e00d      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fd faa5 	bl	8001388 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d903      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e56:	4b54      	ldr	r3, [pc, #336]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0eb      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d129      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e7a:	d10e      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e8c:	091a      	lsrs	r2, r3, #4
 8003e8e:	4b48      	ldr	r3, [pc, #288]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	4a45      	ldr	r2, [pc, #276]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6113      	str	r3, [r2, #16]
 8003e98:	e005      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e9a:	4b43      	ldr	r3, [pc, #268]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4a42      	ldr	r2, [pc, #264]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ea0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ea4:	6113      	str	r3, [r2, #16]
 8003ea6:	4b40      	ldr	r3, [pc, #256]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ea8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ec2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 0301 	and.w	r3, r2, #1
 8003edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ee6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f000 808f 	beq.w	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef8:	2b28      	cmp	r3, #40	@ 0x28
 8003efa:	d871      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003efc:	a201      	add	r2, pc, #4	@ (adr r2, 8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003fe9 	.word	0x08003fe9
 8003f08:	08003fe1 	.word	0x08003fe1
 8003f0c:	08003fe1 	.word	0x08003fe1
 8003f10:	08003fe1 	.word	0x08003fe1
 8003f14:	08003fe1 	.word	0x08003fe1
 8003f18:	08003fe1 	.word	0x08003fe1
 8003f1c:	08003fe1 	.word	0x08003fe1
 8003f20:	08003fe1 	.word	0x08003fe1
 8003f24:	08003fb5 	.word	0x08003fb5
 8003f28:	08003fe1 	.word	0x08003fe1
 8003f2c:	08003fe1 	.word	0x08003fe1
 8003f30:	08003fe1 	.word	0x08003fe1
 8003f34:	08003fe1 	.word	0x08003fe1
 8003f38:	08003fe1 	.word	0x08003fe1
 8003f3c:	08003fe1 	.word	0x08003fe1
 8003f40:	08003fe1 	.word	0x08003fe1
 8003f44:	08003fcb 	.word	0x08003fcb
 8003f48:	08003fe1 	.word	0x08003fe1
 8003f4c:	08003fe1 	.word	0x08003fe1
 8003f50:	08003fe1 	.word	0x08003fe1
 8003f54:	08003fe1 	.word	0x08003fe1
 8003f58:	08003fe1 	.word	0x08003fe1
 8003f5c:	08003fe1 	.word	0x08003fe1
 8003f60:	08003fe1 	.word	0x08003fe1
 8003f64:	08003fe9 	.word	0x08003fe9
 8003f68:	08003fe1 	.word	0x08003fe1
 8003f6c:	08003fe1 	.word	0x08003fe1
 8003f70:	08003fe1 	.word	0x08003fe1
 8003f74:	08003fe1 	.word	0x08003fe1
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fe9 	.word	0x08003fe9
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fe1 	.word	0x08003fe1
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe9 	.word	0x08003fe9
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	58024800 	.word	0x58024800
 8003fb0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb8:	3308      	adds	r3, #8
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 ffa7 	bl	8004f10 <RCCEx_PLL2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fc8:	e00f      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fce:	3328      	adds	r3, #40	@ 0x28
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 f84e 	bl	8005074 <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ff2:	4bbf      	ldr	r3, [pc, #764]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004000:	4abb      	ldr	r2, [pc, #748]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6553      	str	r3, [r2, #84]	@ 0x54
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800400c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 0302 	and.w	r3, r2, #2
 800401c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004026:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d041      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004036:	2b05      	cmp	r3, #5
 8004038:	d824      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	0800408d 	.word	0x0800408d
 8004044:	08004059 	.word	0x08004059
 8004048:	0800406f 	.word	0x0800406f
 800404c:	0800408d 	.word	0x0800408d
 8004050:	0800408d 	.word	0x0800408d
 8004054:	0800408d 	.word	0x0800408d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405c:	3308      	adds	r3, #8
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 ff55 	bl	8004f10 <RCCEx_PLL2_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800406c:	e00f      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004072:	3328      	adds	r3, #40	@ 0x28
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fffc 	bl	8005074 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004082:	e004      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004096:	4b96      	ldr	r3, [pc, #600]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409a:	f023 0107 	bic.w	r1, r3, #7
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a4:	4a92      	ldr	r2, [pc, #584]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f002 0304 	and.w	r3, r2, #4
 80040c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d044      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d825      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80040e0:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	08004135 	.word	0x08004135
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004117 	.word	0x08004117
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004104:	3308      	adds	r3, #8
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 ff01 	bl	8004f10 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004114:	e00f      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411a:	3328      	adds	r3, #40	@ 0x28
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ffa8 	bl	8005074 <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800413e:	4b6c      	ldr	r3, [pc, #432]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	f023 0107 	bic.w	r1, r3, #7
 8004146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414e:	4a68      	ldr	r2, [pc, #416]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004150:	430b      	orrs	r3, r1
 8004152:	6593      	str	r3, [r2, #88]	@ 0x58
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800415a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800415e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	f002 0320 	and.w	r3, r2, #32
 800416a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004174:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004178:	460b      	mov	r3, r1
 800417a:	4313      	orrs	r3, r2
 800417c:	d055      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800417e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418a:	d033      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800418c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004190:	d82c      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d826      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800419e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a2:	d02b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80041a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041a8:	d820      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b4:	d81a      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d022      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041be:	d115      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fea1 	bl	8004f10 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041d4:	e015      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 ff48 	bl	8005074 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041ea:	e00a      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041f2:	e006      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80041f4:	bf00      	nop
 80041f6:	e004      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80041f8:	bf00      	nop
 80041fa:	e002      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80041fc:	bf00      	nop
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004202:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800421a:	4a35      	ldr	r2, [pc, #212]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004220:	e003      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004226:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800422a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004236:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004240:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004244:	460b      	mov	r3, r1
 8004246:	4313      	orrs	r3, r2
 8004248:	d058      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004252:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004256:	d033      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004258:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800425c:	d82c      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004262:	d02f      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004268:	d826      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800426a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800426e:	d02b      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004274:	d820      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427a:	d012      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800427c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004280:	d81a      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d022      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d115      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800428c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004290:	3308      	adds	r3, #8
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fe3b 	bl	8004f10 <RCCEx_PLL2_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042a0:	e015      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a6:	3328      	adds	r3, #40	@ 0x28
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fee2 	bl	8005074 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042b6:	e00a      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042be:	e006      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042c0:	bf00      	nop
 80042c2:	e004      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042c4:	bf00      	nop
 80042c6:	e002      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d6:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80042de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042e6:	4a02      	ldr	r2, [pc, #8]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004312:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d055      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004324:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004328:	d033      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800432a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800432e:	d82c      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004334:	d02f      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800433a:	d826      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800433c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004340:	d02b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004342:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004346:	d820      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800434c:	d012      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800434e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004352:	d81a      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d022      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800435c:	d115      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004362:	3308      	adds	r3, #8
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fdd2 	bl	8004f10 <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004372:	e015      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004378:	3328      	adds	r3, #40	@ 0x28
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fe79 	bl	8005074 <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004388:	e00a      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004390:	e006      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004392:	bf00      	nop
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800439e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043a8:	4ba0      	ldr	r3, [pc, #640]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043b8:	4a9c      	ldr	r2, [pc, #624]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ba:	430b      	orrs	r3, r1
 80043bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f002 0308 	and.w	r3, r2, #8
 80043d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d01e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fa:	3328      	adds	r3, #40	@ 0x28
 80043fc:	2102      	movs	r1, #2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fe38 	bl	8005074 <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004410:	4b86      	ldr	r3, [pc, #536]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004420:	4a82      	ldr	r2, [pc, #520]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f002 0310 	and.w	r3, r2, #16
 8004432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800443c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004440:	460b      	mov	r3, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	d01e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d10c      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004458:	3328      	adds	r3, #40	@ 0x28
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fe09 	bl	8005074 <RCCEx_PLL3_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800446e:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004472:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800447e:	4a6b      	ldr	r2, [pc, #428]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004480:	430b      	orrs	r3, r1
 8004482:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004490:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004492:	2300      	movs	r3, #0
 8004494:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004496:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d03e      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044ac:	d022      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80044ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044b2:	d81b      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80044be:	e015      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c4:	3308      	adds	r3, #8
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fd21 	bl	8004f10 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044da:	3328      	adds	r3, #40	@ 0x28
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fdc8 	bl	8005074 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fe:	4b4b      	ldr	r3, [pc, #300]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800450e:	4a47      	ldr	r2, [pc, #284]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6593      	str	r3, [r2, #88]	@ 0x58
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800451a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800452a:	673b      	str	r3, [r7, #112]	@ 0x70
 800452c:	2300      	movs	r3, #0
 800452e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004530:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d03b      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004542:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004546:	d01f      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004548:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800454c:	d818      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004558:	d007      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455c:	4b33      	ldr	r3, [pc, #204]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	4a32      	ldr	r2, [pc, #200]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004568:	e00f      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456e:	3328      	adds	r3, #40	@ 0x28
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd7e 	bl	8005074 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800457e:	e004      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004586:	e000      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004592:	4b26      	ldr	r3, [pc, #152]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a2:	4a22      	ldr	r2, [pc, #136]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c0:	2300      	movs	r3, #0
 80045c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045c8:	460b      	mov	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	d034      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045dc:	d007      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80045de:	e011      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4b12      	ldr	r3, [pc, #72]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	4a11      	ldr	r2, [pc, #68]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045ec:	e00e      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f2:	3308      	adds	r3, #8
 80045f4:	2102      	movs	r1, #2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fc8a 	bl	8004f10 <RCCEx_PLL2_Config>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800460a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800460c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800461c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004622:	4a02      	ldr	r2, [pc, #8]	@ (800462c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004624:	430b      	orrs	r3, r1
 8004626:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004628:	e006      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800462a:	bf00      	nop
 800462c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004644:	663b      	str	r3, [r7, #96]	@ 0x60
 8004646:	2300      	movs	r3, #0
 8004648:	667b      	str	r3, [r7, #100]	@ 0x64
 800464a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d00c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	3328      	adds	r3, #40	@ 0x28
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fd09 	bl	8005074 <RCCEx_PLL3_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800466e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800467a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800467c:	2300      	movs	r3, #0
 800467e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004680:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d036      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004694:	d018      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800469a:	d811      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800469c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a0:	d014      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a6:	d80b      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80046ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b0:	d106      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b2:	4bb7      	ldr	r3, [pc, #732]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b6:	4ab6      	ldr	r2, [pc, #728]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80046be:	e008      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046c8:	bf00      	nop
 80046ca:	e002      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046da:	4bad      	ldr	r3, [pc, #692]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046e8:	4aa9      	ldr	r2, [pc, #676]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004704:	653b      	str	r3, [r7, #80]	@ 0x50
 8004706:	2300      	movs	r3, #0
 8004708:	657b      	str	r3, [r7, #84]	@ 0x54
 800470a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800470e:	460b      	mov	r3, r1
 8004710:	4313      	orrs	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004714:	4b9e      	ldr	r3, [pc, #632]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004718:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800471c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	4a9b      	ldr	r2, [pc, #620]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004736:	2300      	movs	r3, #0
 8004738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800473a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800473e:	460b      	mov	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004744:	4b92      	ldr	r3, [pc, #584]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004748:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800474c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004752:	4a8f      	ldr	r2, [pc, #572]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004754:	430b      	orrs	r3, r1
 8004756:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004764:	643b      	str	r3, [r7, #64]	@ 0x40
 8004766:	2300      	movs	r3, #0
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
 800476a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d00e      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004774:	4b86      	ldr	r3, [pc, #536]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4a85      	ldr	r2, [pc, #532]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800477a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800477e:	6113      	str	r3, [r2, #16]
 8004780:	4b83      	ldr	r3, [pc, #524]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004782:	6919      	ldr	r1, [r3, #16]
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800478c:	4a80      	ldr	r2, [pc, #512]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800478e:	430b      	orrs	r3, r1
 8004790:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800479e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047a0:	2300      	movs	r3, #0
 80047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047a8:	460b      	mov	r3, r1
 80047aa:	4313      	orrs	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047ae:	4b78      	ldr	r3, [pc, #480]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80047b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047bc:	4a74      	ldr	r2, [pc, #464]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047be:	430b      	orrs	r3, r1
 80047c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d0:	2300      	movs	r3, #0
 80047d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047de:	4b6c      	ldr	r3, [pc, #432]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ee:	4a68      	ldr	r2, [pc, #416]	@ (8004990 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	2100      	movs	r1, #0
 80047fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004806:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800480a:	460b      	mov	r3, r1
 800480c:	4313      	orrs	r3, r2
 800480e:	d011      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004814:	3308      	adds	r3, #8
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fb79 	bl	8004f10 <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	2100      	movs	r1, #0
 800483e:	6239      	str	r1, [r7, #32]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
 8004846:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d011      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004854:	3308      	adds	r3, #8
 8004856:	2101      	movs	r1, #1
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fb59 	bl	8004f10 <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004870:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	2100      	movs	r1, #0
 800487e:	61b9      	str	r1, [r7, #24]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d011      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004894:	3308      	adds	r3, #8
 8004896:	2102      	movs	r1, #2
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fb39 	bl	8004f10 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	2100      	movs	r1, #0
 80048be:	6139      	str	r1, [r7, #16]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d011      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d4:	3328      	adds	r3, #40	@ 0x28
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fbcb 	bl	8005074 <RCCEx_PLL3_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80048e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	2100      	movs	r1, #0
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800490a:	460b      	mov	r3, r1
 800490c:	4313      	orrs	r3, r2
 800490e:	d011      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004914:	3328      	adds	r3, #40	@ 0x28
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fbab 	bl	8005074 <RCCEx_PLL3_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	2100      	movs	r1, #0
 800493e:	6039      	str	r1, [r7, #0]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	e9d7 1200 	ldrd	r1, r2, [r7]
 800494a:	460b      	mov	r3, r1
 800494c:	4313      	orrs	r3, r2
 800494e:	d011      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004954:	3328      	adds	r3, #40	@ 0x28
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fb8b 	bl	8005074 <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004970:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004974:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
}
 8004982:	4618      	mov	r0, r3
 8004984:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004988:	46bd      	mov	sp, r7
 800498a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400

08004994 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004998:	f7fe fe00 	bl	800359c <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4904      	ldr	r1, [pc, #16]	@ (80049bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	58024400 	.word	0x58024400
 80049bc:	0800813c 	.word	0x0800813c

080049c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	@ 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	0b1b      	lsrs	r3, r3, #12
 80049d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049de:	4b9c      	ldr	r3, [pc, #624]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049ea:	4b99      	ldr	r3, [pc, #612]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8111 	beq.w	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f000 8083 	beq.w	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f200 80a1 	bhi.w	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a2a:	e099      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2c:	4b88      	ldr	r3, [pc, #544]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a38:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	4a84      	ldr	r2, [pc, #528]	@ (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b7b      	ldr	r3, [pc, #492]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a92:	e087      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	e065      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1a:	e043      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b48      	ldr	r3, [pc, #288]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5e:	e021      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b72:	4b37      	ldr	r3, [pc, #220]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bca:	ee17 2a90 	vmov	r2, s15
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf8:	ee17 2a90 	vmov	r2, s15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c00:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c26:	ee17 2a90 	vmov	r2, s15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]
}
 8004c42:	bf00      	nop
 8004c44:	3724      	adds	r7, #36	@ 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	03d09000 	.word	0x03d09000
 8004c58:	46000000 	.word	0x46000000
 8004c5c:	4c742400 	.word	0x4c742400
 8004c60:	4a742400 	.word	0x4a742400
 8004c64:	4bbebc20 	.word	0x4bbebc20

08004c68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	@ 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c70:	4ba1      	ldr	r3, [pc, #644]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c7a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	0d1b      	lsrs	r3, r3, #20
 8004c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c86:	4b9c      	ldr	r3, [pc, #624]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c92:	4b99      	ldr	r3, [pc, #612]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	08db      	lsrs	r3, r3, #3
 8004c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8111 	beq.w	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	f000 8083 	beq.w	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	f200 80a1 	bhi.w	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d056      	beq.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cd2:	e099      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cd4:	4b88      	ldr	r3, [pc, #544]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02d      	beq.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ce0:	4b85      	ldr	r3, [pc, #532]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	08db      	lsrs	r3, r3, #3
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	4a84      	ldr	r2, [pc, #528]	@ (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d3a:	e087      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e065      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b59      	ldr	r3, [pc, #356]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	e043      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b48      	ldr	r3, [pc, #288]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e06:	e021      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b37      	ldr	r3, [pc, #220]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	0a5b      	lsrs	r3, r3, #9
 8004e52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e72:	ee17 2a90 	vmov	r2, s15
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea0:	ee17 2a90 	vmov	r2, s15
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ea8:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ece:	ee17 2a90 	vmov	r2, s15
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ed6:	e008      	b.n	8004eea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
}
 8004eea:	bf00      	nop
 8004eec:	3724      	adds	r7, #36	@ 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	03d09000 	.word	0x03d09000
 8004f00:	46000000 	.word	0x46000000
 8004f04:	4c742400 	.word	0x4c742400
 8004f08:	4a742400 	.word	0x4a742400
 8004f0c:	4bbebc20 	.word	0x4bbebc20

08004f10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f1e:	4b53      	ldr	r3, [pc, #332]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d101      	bne.n	8004f2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e099      	b.n	8005062 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4e      	ldr	r2, [pc, #312]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fa25 	bl	8001388 <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f42:	f7fc fa21 	bl	8001388 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e086      	b.n	8005062 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f54:	4b45      	ldr	r3, [pc, #276]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f60:	4b42      	ldr	r3, [pc, #264]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	493f      	ldr	r1, [pc, #252]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fa4:	4931      	ldr	r1, [pc, #196]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004faa:	4b30      	ldr	r3, [pc, #192]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	492d      	ldr	r1, [pc, #180]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	f023 0220 	bic.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	4928      	ldr	r1, [pc, #160]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fce:	4b27      	ldr	r3, [pc, #156]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	4a26      	ldr	r2, [pc, #152]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fda:	4b24      	ldr	r3, [pc, #144]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fde:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <RCCEx_PLL2_Config+0x160>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	69d2      	ldr	r2, [r2, #28]
 8004fe6:	00d2      	lsls	r2, r2, #3
 8004fe8:	4920      	ldr	r1, [pc, #128]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fee:	4b1f      	ldr	r3, [pc, #124]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	f043 0310 	orr.w	r3, r3, #16
 8004ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005000:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4a19      	ldr	r2, [pc, #100]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005006:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800500a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800500c:	e00f      	b.n	800502e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005014:	4b15      	ldr	r3, [pc, #84]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	4a14      	ldr	r2, [pc, #80]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800501e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005020:	e005      	b.n	800502e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005022:	4b12      	ldr	r3, [pc, #72]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	4a11      	ldr	r2, [pc, #68]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005028:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800502c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800502e:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a0e      	ldr	r2, [pc, #56]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005034:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503a:	f7fc f9a5 	bl	8001388 <HAL_GetTick>
 800503e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005040:	e008      	b.n	8005054 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005042:	f7fc f9a1 	bl	8001388 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e006      	b.n	8005062 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <RCCEx_PLL2_Config+0x15c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
 8005070:	ffff0007 	.word	0xffff0007

08005074 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005082:	4b53      	ldr	r3, [pc, #332]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d101      	bne.n	8005092 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e099      	b.n	80051c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005092:	4b4f      	ldr	r3, [pc, #316]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4e      	ldr	r2, [pc, #312]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509e:	f7fc f973 	bl	8001388 <HAL_GetTick>
 80050a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050a4:	e008      	b.n	80050b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050a6:	f7fc f96f 	bl	8001388 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e086      	b.n	80051c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050b8:	4b45      	ldr	r3, [pc, #276]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050c4:	4b42      	ldr	r3, [pc, #264]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	493f      	ldr	r1, [pc, #252]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	3b01      	subs	r3, #1
 80050de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	025b      	lsls	r3, r3, #9
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	3b01      	subs	r3, #1
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005108:	4931      	ldr	r1, [pc, #196]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800510e:	4b30      	ldr	r3, [pc, #192]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	492d      	ldr	r1, [pc, #180]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005120:	4b2b      	ldr	r3, [pc, #172]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	4928      	ldr	r1, [pc, #160]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005132:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	4a26      	ldr	r2, [pc, #152]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005140:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005142:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <RCCEx_PLL3_Config+0x160>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	69d2      	ldr	r2, [r2, #28]
 800514a:	00d2      	lsls	r2, r2, #3
 800514c:	4920      	ldr	r1, [pc, #128]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800514e:	4313      	orrs	r3, r2
 8005150:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005152:	4b1f      	ldr	r3, [pc, #124]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005156:	4a1e      	ldr	r2, [pc, #120]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005164:	4b1a      	ldr	r3, [pc, #104]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	4a19      	ldr	r2, [pc, #100]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800516a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800516e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005170:	e00f      	b.n	8005192 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005178:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	4a14      	ldr	r2, [pc, #80]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800517e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005182:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005184:	e005      	b.n	8005192 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005186:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	4a11      	ldr	r2, [pc, #68]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800518c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005190:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005192:	4b0f      	ldr	r3, [pc, #60]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a0e      	ldr	r2, [pc, #56]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800519c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519e:	f7fc f8f3 	bl	8001388 <HAL_GetTick>
 80051a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051a6:	f7fc f8ef 	bl	8001388 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e006      	b.n	80051c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400
 80051d4:	ffff0007 	.word	0xffff0007

080051d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e049      	b.n	800527e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fb fe06 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fc58 	bl	8005acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e05e      	b.n	800535e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	@ (800536c <HAL_TIM_Base_Start_IT+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d02c      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ca:	d027      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a27      	ldr	r2, [pc, #156]	@ (8005370 <HAL_TIM_Base_Start_IT+0xe8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d022      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a26      	ldr	r2, [pc, #152]	@ (8005374 <HAL_TIM_Base_Start_IT+0xec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01d      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a24      	ldr	r2, [pc, #144]	@ (8005378 <HAL_TIM_Base_Start_IT+0xf0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d018      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a23      	ldr	r2, [pc, #140]	@ (800537c <HAL_TIM_Base_Start_IT+0xf4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d013      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a21      	ldr	r2, [pc, #132]	@ (8005380 <HAL_TIM_Base_Start_IT+0xf8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00e      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <HAL_TIM_Base_Start_IT+0xfc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <HAL_TIM_Base_Start_IT+0x100>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIM_Base_Start_IT+0x94>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <HAL_TIM_Base_Start_IT+0x104>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d115      	bne.n	8005348 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <HAL_TIM_Base_Start_IT+0x108>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b06      	cmp	r3, #6
 800532c:	d015      	beq.n	800535a <HAL_TIM_Base_Start_IT+0xd2>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005334:	d011      	beq.n	800535a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	e008      	b.n	800535a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e000      	b.n	800535c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40010400 	.word	0x40010400
 8005380:	40001800 	.word	0x40001800
 8005384:	40014000 	.word	0x40014000
 8005388:	4000e000 	.word	0x4000e000
 800538c:	4000e400 	.word	0x4000e400
 8005390:	00010007 	.word	0x00010007

08005394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e049      	b.n	800543a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f841 	bl	8005442 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 fb7a 	bl	8005acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0202 	mvn.w	r2, #2
 800548a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 faf5 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 80054a6:	e005      	b.n	80054b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fae7 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 faf8 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01b      	beq.n	8005506 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0204 	mvn.w	r2, #4
 80054d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 facf 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 80054f2:	e005      	b.n	8005500 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fac1 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fad2 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d020      	beq.n	8005552 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01b      	beq.n	8005552 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0208 	mvn.w	r2, #8
 8005522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 faa9 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 800553e:	e005      	b.n	800554c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa9b 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 faac 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d020      	beq.n	800559e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01b      	beq.n	800559e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0210 	mvn.w	r2, #16
 800556e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2208      	movs	r2, #8
 8005574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa83 	bl	8005a90 <HAL_TIM_IC_CaptureCallback>
 800558a:	e005      	b.n	8005598 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa75 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa86 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f06f 0201 	mvn.w	r2, #1
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fb fb3f 	bl	8000c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00c      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 ff3a 	bl	8006464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 ff32 	bl	8006478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00c      	beq.n	8005638 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fa40 	bl	8005ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00c      	beq.n	800565c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0220 	mvn.w	r2, #32
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fefa 	bl	8006450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e0ff      	b.n	8005882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b14      	cmp	r3, #20
 800568e:	f200 80f0 	bhi.w	8005872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005692:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056ed 	.word	0x080056ed
 800569c:	08005873 	.word	0x08005873
 80056a0:	08005873 	.word	0x08005873
 80056a4:	08005873 	.word	0x08005873
 80056a8:	0800572d 	.word	0x0800572d
 80056ac:	08005873 	.word	0x08005873
 80056b0:	08005873 	.word	0x08005873
 80056b4:	08005873 	.word	0x08005873
 80056b8:	0800576f 	.word	0x0800576f
 80056bc:	08005873 	.word	0x08005873
 80056c0:	08005873 	.word	0x08005873
 80056c4:	08005873 	.word	0x08005873
 80056c8:	080057af 	.word	0x080057af
 80056cc:	08005873 	.word	0x08005873
 80056d0:	08005873 	.word	0x08005873
 80056d4:	08005873 	.word	0x08005873
 80056d8:	080057f1 	.word	0x080057f1
 80056dc:	08005873 	.word	0x08005873
 80056e0:	08005873 	.word	0x08005873
 80056e4:	08005873 	.word	0x08005873
 80056e8:	08005831 	.word	0x08005831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fa9c 	bl	8005c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0204 	bic.w	r2, r2, #4
 8005716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6999      	ldr	r1, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	619a      	str	r2, [r3, #24]
      break;
 800572a:	e0a5      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fb0c 	bl	8005d50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6999      	ldr	r1, [r3, #24]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	619a      	str	r2, [r3, #24]
      break;
 800576c:	e084      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb75 	bl	8005e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0208 	orr.w	r2, r2, #8
 8005788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69da      	ldr	r2, [r3, #28]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0204 	bic.w	r2, r2, #4
 8005798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69d9      	ldr	r1, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	61da      	str	r2, [r3, #28]
      break;
 80057ac:	e064      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fbdd 	bl	8005f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69d9      	ldr	r1, [r3, #28]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	021a      	lsls	r2, r3, #8
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	61da      	str	r2, [r3, #28]
      break;
 80057ee:	e043      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fc26 	bl	8006048 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0204 	bic.w	r2, r2, #4
 800581a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691a      	ldr	r2, [r3, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800582e:	e023      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fc6a 	bl	8006110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800585a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005870:	e002      	b.n	8005878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
      break;
 8005876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop

0800588c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_TIM_ConfigClockSource+0x1c>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e0dc      	b.n	8005a62 <HAL_TIM_ConfigClockSource+0x1d6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a6c <HAL_TIM_ConfigClockSource+0x1e0>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a64      	ldr	r2, [pc, #400]	@ (8005a70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	f000 80a9 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 80058e4:	4a62      	ldr	r2, [pc, #392]	@ (8005a70 <HAL_TIM_ConfigClockSource+0x1e4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	f200 80ae 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 80058ec:	4a61      	ldr	r2, [pc, #388]	@ (8005a74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f000 80a1 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 80058f4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a74 <HAL_TIM_ConfigClockSource+0x1e8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	f200 80a6 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 80058fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005a78 <HAL_TIM_ConfigClockSource+0x1ec>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	f000 8099 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8005904:	4a5c      	ldr	r2, [pc, #368]	@ (8005a78 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	f200 809e 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800590c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005910:	f000 8091 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8005914:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005918:	f200 8096 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800591c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005920:	f000 8089 	beq.w	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8005924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005928:	f200 808e 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800592c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005930:	d03e      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0x124>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005936:	f200 8087 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593e:	f000 8086 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x1c2>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005946:	d87f      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005948:	2b70      	cmp	r3, #112	@ 0x70
 800594a:	d01a      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0xf6>
 800594c:	2b70      	cmp	r3, #112	@ 0x70
 800594e:	d87b      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005950:	2b60      	cmp	r3, #96	@ 0x60
 8005952:	d050      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x16a>
 8005954:	2b60      	cmp	r3, #96	@ 0x60
 8005956:	d877      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005958:	2b50      	cmp	r3, #80	@ 0x50
 800595a:	d03c      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0x14a>
 800595c:	2b50      	cmp	r3, #80	@ 0x50
 800595e:	d873      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	d058      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x18a>
 8005964:	2b40      	cmp	r3, #64	@ 0x40
 8005966:	d86f      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005968:	2b30      	cmp	r3, #48	@ 0x30
 800596a:	d064      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 800596c:	2b30      	cmp	r3, #48	@ 0x30
 800596e:	d86b      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005970:	2b20      	cmp	r3, #32
 8005972:	d060      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8005974:	2b20      	cmp	r3, #32
 8005976:	d867      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 800597c:	2b10      	cmp	r3, #16
 800597e:	d05a      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x1aa>
 8005980:	e062      	b.n	8005a48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005992:	f000 fca1 	bl	80062d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	609a      	str	r2, [r3, #8]
      break;
 80059ae:	e04f      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059c0:	f000 fc8a 	bl	80062d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059d2:	609a      	str	r2, [r3, #8]
      break;
 80059d4:	e03c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	461a      	mov	r2, r3
 80059e4:	f000 fbfa 	bl	80061dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2150      	movs	r1, #80	@ 0x50
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fc54 	bl	800629c <TIM_ITRx_SetConfig>
      break;
 80059f4:	e02c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 fc19 	bl	800623a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2160      	movs	r1, #96	@ 0x60
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fc44 	bl	800629c <TIM_ITRx_SetConfig>
      break;
 8005a14:	e01c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 fbda 	bl	80061dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2140      	movs	r1, #64	@ 0x40
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fc34 	bl	800629c <TIM_ITRx_SetConfig>
      break;
 8005a34:	e00c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 fc2b 	bl	800629c <TIM_ITRx_SetConfig>
      break;
 8005a46:	e003      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	ffceff88 	.word	0xffceff88
 8005a70:	00100040 	.word	0x00100040
 8005a74:	00100030 	.word	0x00100030
 8005a78:	00100020 	.word	0x00100020

08005a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a4a      	ldr	r2, [pc, #296]	@ (8005c08 <TIM_Base_SetConfig+0x13c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aea:	d00f      	beq.n	8005b0c <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a47      	ldr	r2, [pc, #284]	@ (8005c0c <TIM_Base_SetConfig+0x140>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a46      	ldr	r2, [pc, #280]	@ (8005c10 <TIM_Base_SetConfig+0x144>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a45      	ldr	r2, [pc, #276]	@ (8005c14 <TIM_Base_SetConfig+0x148>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a44      	ldr	r2, [pc, #272]	@ (8005c18 <TIM_Base_SetConfig+0x14c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d108      	bne.n	8005b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a39      	ldr	r2, [pc, #228]	@ (8005c08 <TIM_Base_SetConfig+0x13c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2c:	d023      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a36      	ldr	r2, [pc, #216]	@ (8005c0c <TIM_Base_SetConfig+0x140>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01f      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a35      	ldr	r2, [pc, #212]	@ (8005c10 <TIM_Base_SetConfig+0x144>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01b      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a34      	ldr	r2, [pc, #208]	@ (8005c14 <TIM_Base_SetConfig+0x148>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d017      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a33      	ldr	r2, [pc, #204]	@ (8005c18 <TIM_Base_SetConfig+0x14c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a32      	ldr	r2, [pc, #200]	@ (8005c1c <TIM_Base_SetConfig+0x150>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00f      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a31      	ldr	r2, [pc, #196]	@ (8005c20 <TIM_Base_SetConfig+0x154>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a30      	ldr	r2, [pc, #192]	@ (8005c24 <TIM_Base_SetConfig+0x158>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	@ (8005c28 <TIM_Base_SetConfig+0x15c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0xaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2e      	ldr	r2, [pc, #184]	@ (8005c2c <TIM_Base_SetConfig+0x160>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d108      	bne.n	8005b88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a16      	ldr	r2, [pc, #88]	@ (8005c08 <TIM_Base_SetConfig+0x13c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x108>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <TIM_Base_SetConfig+0x14c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x108>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a17      	ldr	r2, [pc, #92]	@ (8005c1c <TIM_Base_SetConfig+0x150>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x108>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a16      	ldr	r2, [pc, #88]	@ (8005c20 <TIM_Base_SetConfig+0x154>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x108>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <TIM_Base_SetConfig+0x158>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40014400 	.word	0x40014400
 8005c24:	40014800 	.word	0x40014800
 8005c28:	4000e000 	.word	0x4000e000
 8005c2c:	4000e400 	.word	0x4000e400

08005c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f023 0201 	bic.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4b37      	ldr	r3, [pc, #220]	@ (8005d38 <TIM_OC1_SetConfig+0x108>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0303 	bic.w	r3, r3, #3
 8005c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 0302 	bic.w	r3, r3, #2
 8005c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2d      	ldr	r2, [pc, #180]	@ (8005d3c <TIM_OC1_SetConfig+0x10c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <TIM_OC1_SetConfig+0x7c>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d40 <TIM_OC1_SetConfig+0x110>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_OC1_SetConfig+0x7c>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <TIM_OC1_SetConfig+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_OC1_SetConfig+0x7c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d48 <TIM_OC1_SetConfig+0x118>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC1_SetConfig+0x7c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a29      	ldr	r2, [pc, #164]	@ (8005d4c <TIM_OC1_SetConfig+0x11c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d10c      	bne.n	8005cc6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0308 	bic.w	r3, r3, #8
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 0304 	bic.w	r3, r3, #4
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d3c <TIM_OC1_SetConfig+0x10c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_OC1_SetConfig+0xbe>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d40 <TIM_OC1_SetConfig+0x110>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_OC1_SetConfig+0xbe>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d44 <TIM_OC1_SetConfig+0x114>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_OC1_SetConfig+0xbe>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a19      	ldr	r2, [pc, #100]	@ (8005d48 <TIM_OC1_SetConfig+0x118>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_OC1_SetConfig+0xbe>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <TIM_OC1_SetConfig+0x11c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	bf00      	nop
 8005d2e:	371c      	adds	r7, #28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	fffeff8f 	.word	0xfffeff8f
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f023 0210 	bic.w	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4b34      	ldr	r3, [pc, #208]	@ (8005e4c <TIM_OC2_SetConfig+0xfc>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0320 	bic.w	r3, r3, #32
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a29      	ldr	r2, [pc, #164]	@ (8005e50 <TIM_OC2_SetConfig+0x100>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC2_SetConfig+0x68>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a28      	ldr	r2, [pc, #160]	@ (8005e54 <TIM_OC2_SetConfig+0x104>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d10d      	bne.n	8005dd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <TIM_OC2_SetConfig+0x100>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <TIM_OC2_SetConfig+0xac>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <TIM_OC2_SetConfig+0x104>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_OC2_SetConfig+0xac>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <TIM_OC2_SetConfig+0x108>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_OC2_SetConfig+0xac>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <TIM_OC2_SetConfig+0x10c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC2_SetConfig+0xac>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e60 <TIM_OC2_SetConfig+0x110>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d113      	bne.n	8005e24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	feff8fff 	.word	0xfeff8fff
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40014400 	.word	0x40014400
 8005e60:	40014800 	.word	0x40014800

08005e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4b33      	ldr	r3, [pc, #204]	@ (8005f5c <TIM_OC3_SetConfig+0xf8>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a28      	ldr	r2, [pc, #160]	@ (8005f60 <TIM_OC3_SetConfig+0xfc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_OC3_SetConfig+0x66>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a27      	ldr	r2, [pc, #156]	@ (8005f64 <TIM_OC3_SetConfig+0x100>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d10d      	bne.n	8005ee6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <TIM_OC3_SetConfig+0xfc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00f      	beq.n	8005f0e <TIM_OC3_SetConfig+0xaa>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f64 <TIM_OC3_SetConfig+0x100>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00b      	beq.n	8005f0e <TIM_OC3_SetConfig+0xaa>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f68 <TIM_OC3_SetConfig+0x104>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d007      	beq.n	8005f0e <TIM_OC3_SetConfig+0xaa>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1a      	ldr	r2, [pc, #104]	@ (8005f6c <TIM_OC3_SetConfig+0x108>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d003      	beq.n	8005f0e <TIM_OC3_SetConfig+0xaa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a19      	ldr	r2, [pc, #100]	@ (8005f70 <TIM_OC3_SetConfig+0x10c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d113      	bne.n	8005f36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	fffeff8f 	.word	0xfffeff8f
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800

08005f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4b24      	ldr	r3, [pc, #144]	@ (8006030 <TIM_OC4_SetConfig+0xbc>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	031b      	lsls	r3, r3, #12
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <TIM_OC4_SetConfig+0xc0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00f      	beq.n	8005ff4 <TIM_OC4_SetConfig+0x80>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <TIM_OC4_SetConfig+0xc4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <TIM_OC4_SetConfig+0x80>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a17      	ldr	r2, [pc, #92]	@ (800603c <TIM_OC4_SetConfig+0xc8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d007      	beq.n	8005ff4 <TIM_OC4_SetConfig+0x80>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a16      	ldr	r2, [pc, #88]	@ (8006040 <TIM_OC4_SetConfig+0xcc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_OC4_SetConfig+0x80>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a15      	ldr	r2, [pc, #84]	@ (8006044 <TIM_OC4_SetConfig+0xd0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d109      	bne.n	8006008 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	019b      	lsls	r3, r3, #6
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	feff8fff 	.word	0xfeff8fff
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4b21      	ldr	r3, [pc, #132]	@ (80060f8 <TIM_OC5_SetConfig+0xb0>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006088:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <TIM_OC5_SetConfig+0xb4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00f      	beq.n	80060be <TIM_OC5_SetConfig+0x76>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a17      	ldr	r2, [pc, #92]	@ (8006100 <TIM_OC5_SetConfig+0xb8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00b      	beq.n	80060be <TIM_OC5_SetConfig+0x76>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <TIM_OC5_SetConfig+0xbc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_OC5_SetConfig+0x76>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a15      	ldr	r2, [pc, #84]	@ (8006108 <TIM_OC5_SetConfig+0xc0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC5_SetConfig+0x76>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a14      	ldr	r2, [pc, #80]	@ (800610c <TIM_OC5_SetConfig+0xc4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d109      	bne.n	80060d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	fffeff8f 	.word	0xfffeff8f
 80060fc:	40010000 	.word	0x40010000
 8006100:	40010400 	.word	0x40010400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800

08006110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4b22      	ldr	r3, [pc, #136]	@ (80061c4 <TIM_OC6_SetConfig+0xb4>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	021b      	lsls	r3, r3, #8
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	051b      	lsls	r3, r3, #20
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a19      	ldr	r2, [pc, #100]	@ (80061c8 <TIM_OC6_SetConfig+0xb8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00f      	beq.n	8006188 <TIM_OC6_SetConfig+0x78>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <TIM_OC6_SetConfig+0xbc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_OC6_SetConfig+0x78>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <TIM_OC6_SetConfig+0xc0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_OC6_SetConfig+0x78>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <TIM_OC6_SetConfig+0xc4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_OC6_SetConfig+0x78>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a15      	ldr	r2, [pc, #84]	@ (80061d8 <TIM_OC6_SetConfig+0xc8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d109      	bne.n	800619c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800618e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	029b      	lsls	r3, r3, #10
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	feff8fff 	.word	0xfeff8fff
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010400 	.word	0x40010400
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400
 80061d8:	40014800 	.word	0x40014800

080061dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f023 0201 	bic.w	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 030a 	bic.w	r3, r3, #10
 8006218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	bf00      	nop
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f023 0210 	bic.w	r2, r3, #16
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	031b      	lsls	r3, r3, #12
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006276:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <TIM_ITRx_SetConfig+0x38>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f043 0307 	orr.w	r3, r3, #7
 80062be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	609a      	str	r2, [r3, #8]
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	ffcfff8f 	.word	0xffcfff8f

080062d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	021a      	lsls	r2, r3, #8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4313      	orrs	r3, r2
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	609a      	str	r2, [r3, #8]
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e077      	b.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a35      	ldr	r2, [pc, #212]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a34      	ldr	r2, [pc, #208]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d108      	bne.n	8006376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800636a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a25      	ldr	r2, [pc, #148]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d02c      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a2:	d027      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a22      	ldr	r2, [pc, #136]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d022      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a21      	ldr	r2, [pc, #132]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d01d      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1f      	ldr	r2, [pc, #124]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d018      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00e      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d009      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a17      	ldr	r2, [pc, #92]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10c      	bne.n	800640e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40010000 	.word	0x40010000
 8006430:	40010400 	.word	0x40010400
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40000c00 	.word	0x40000c00
 8006440:	40001800 	.word	0x40001800
 8006444:	40014000 	.word	0x40014000
 8006448:	4000e000 	.word	0x4000e000
 800644c:	4000e400 	.word	0x4000e400

08006450 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e04a      	b.n	8006534 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fa fcd3 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2224      	movs	r2, #36	@ 0x24
 80064ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0201 	bic.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fa76 	bl	80079c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fc07 	bl	8006cf0 <UART_SetConfig>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e023      	b.n	8006534 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800650a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0208 	orr.w	r2, r2, #8
 800651a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 faed 	bl	8007b0c <UART_CheckIdleState>
 8006532:	4603      	mov	r3, r0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b0ba      	sub	sp, #232	@ 0xe8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006566:	f640 030f 	movw	r3, #2063	@ 0x80f
 800656a:	4013      	ands	r3, r2
 800656c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d11b      	bne.n	80065b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d015      	beq.n	80065b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d009      	beq.n	80065b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8377 	beq.w	8006c94 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	4798      	blx	r3
      }
      return;
 80065ae:	e371      	b.n	8006c94 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8123 	beq.w	8006800 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065be:	4b8d      	ldr	r3, [pc, #564]	@ (80067f4 <HAL_UART_IRQHandler+0x2b8>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065ca:	4b8b      	ldr	r3, [pc, #556]	@ (80067f8 <HAL_UART_IRQHandler+0x2bc>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8116 	beq.w	8006800 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d011      	beq.n	8006604 <HAL_UART_IRQHandler+0xc8>
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fa:	f043 0201 	orr.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d011      	beq.n	8006634 <HAL_UART_IRQHandler+0xf8>
 8006610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2202      	movs	r2, #2
 8006622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662a:	f043 0204 	orr.w	r2, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d011      	beq.n	8006664 <HAL_UART_IRQHandler+0x128>
 8006640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2204      	movs	r2, #4
 8006652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665a:	f043 0202 	orr.w	r2, r3, #2
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d017      	beq.n	80066a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006674:	f003 0320 	and.w	r3, r3, #32
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800667c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006680:	4b5c      	ldr	r3, [pc, #368]	@ (80067f4 <HAL_UART_IRQHandler+0x2b8>)
 8006682:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00b      	beq.n	80066a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2208      	movs	r2, #8
 800668e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006696:	f043 0208 	orr.w	r2, r3, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d012      	beq.n	80066d2 <HAL_UART_IRQHandler+0x196>
 80066ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00c      	beq.n	80066d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 82dd 	beq.w	8006c98 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d013      	beq.n	8006712 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006718:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006726:	2b40      	cmp	r3, #64	@ 0x40
 8006728:	d005      	beq.n	8006736 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800672e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006732:	2b00      	cmp	r3, #0
 8006734:	d054      	beq.n	80067e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 fb00 	bl	8007d3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006746:	2b40      	cmp	r3, #64	@ 0x40
 8006748:	d146      	bne.n	80067d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006760:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3308      	adds	r3, #8
 8006772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006776:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800677a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800678e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1d9      	bne.n	800674a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679c:	2b00      	cmp	r3, #0
 800679e:	d017      	beq.n	80067d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a6:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <HAL_UART_IRQHandler+0x2c0>)
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fb fb8d 	bl	8001ed0 <HAL_DMA_Abort_IT>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d019      	beq.n	80067f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ce:	e00f      	b.n	80067f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fa77 	bl	8006cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d6:	e00b      	b.n	80067f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa73 	bl	8006cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067de:	e007      	b.n	80067f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa6f 	bl	8006cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80067ee:	e253      	b.n	8006c98 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	bf00      	nop
    return;
 80067f2:	e251      	b.n	8006c98 <HAL_UART_IRQHandler+0x75c>
 80067f4:	10000001 	.word	0x10000001
 80067f8:	04000120 	.word	0x04000120
 80067fc:	08007e09 	.word	0x08007e09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006804:	2b01      	cmp	r3, #1
 8006806:	f040 81e7 	bne.w	8006bd8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 81e0 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 81d9 	beq.w	8006bd8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2210      	movs	r2, #16
 800682c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006838:	2b40      	cmp	r3, #64	@ 0x40
 800683a:	f040 8151 	bne.w	8006ae0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a96      	ldr	r2, [pc, #600]	@ (8006aa0 <HAL_UART_IRQHandler+0x564>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d068      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a93      	ldr	r2, [pc, #588]	@ (8006aa4 <HAL_UART_IRQHandler+0x568>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d061      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a91      	ldr	r2, [pc, #580]	@ (8006aa8 <HAL_UART_IRQHandler+0x56c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d05a      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a8e      	ldr	r2, [pc, #568]	@ (8006aac <HAL_UART_IRQHandler+0x570>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d053      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a8c      	ldr	r2, [pc, #560]	@ (8006ab0 <HAL_UART_IRQHandler+0x574>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d04c      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a89      	ldr	r2, [pc, #548]	@ (8006ab4 <HAL_UART_IRQHandler+0x578>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d045      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a87      	ldr	r2, [pc, #540]	@ (8006ab8 <HAL_UART_IRQHandler+0x57c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d03e      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a84      	ldr	r2, [pc, #528]	@ (8006abc <HAL_UART_IRQHandler+0x580>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d037      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a82      	ldr	r2, [pc, #520]	@ (8006ac0 <HAL_UART_IRQHandler+0x584>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d030      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a7f      	ldr	r2, [pc, #508]	@ (8006ac4 <HAL_UART_IRQHandler+0x588>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d029      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a7d      	ldr	r2, [pc, #500]	@ (8006ac8 <HAL_UART_IRQHandler+0x58c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d022      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a7a      	ldr	r2, [pc, #488]	@ (8006acc <HAL_UART_IRQHandler+0x590>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01b      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a78      	ldr	r2, [pc, #480]	@ (8006ad0 <HAL_UART_IRQHandler+0x594>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d014      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a75      	ldr	r2, [pc, #468]	@ (8006ad4 <HAL_UART_IRQHandler+0x598>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00d      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a73      	ldr	r2, [pc, #460]	@ (8006ad8 <HAL_UART_IRQHandler+0x59c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d006      	beq.n	800691e <HAL_UART_IRQHandler+0x3e2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a70      	ldr	r2, [pc, #448]	@ (8006adc <HAL_UART_IRQHandler+0x5a0>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d106      	bne.n	800692c <HAL_UART_IRQHandler+0x3f0>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	b29b      	uxth	r3, r3
 800692a:	e005      	b.n	8006938 <HAL_UART_IRQHandler+0x3fc>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800693c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 81ab 	beq.w	8006c9c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800694c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006950:	429a      	cmp	r2, r3
 8006952:	f080 81a3 	bcs.w	8006c9c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800695c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800696c:	f000 8087 	beq.w	8006a7e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800698c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800699a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800699e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1da      	bne.n	8006970 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3308      	adds	r3, #8
 80069da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e1      	bne.n	80069ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e3      	bne.n	80069f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4c:	f023 0310 	bic.w	r3, r3, #16
 8006a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e4      	bne.n	8006a3c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fa ff0b 	bl	8001894 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f91d 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a9e:	e0fd      	b.n	8006c9c <HAL_UART_IRQHandler+0x760>
 8006aa0:	40020010 	.word	0x40020010
 8006aa4:	40020028 	.word	0x40020028
 8006aa8:	40020040 	.word	0x40020040
 8006aac:	40020058 	.word	0x40020058
 8006ab0:	40020070 	.word	0x40020070
 8006ab4:	40020088 	.word	0x40020088
 8006ab8:	400200a0 	.word	0x400200a0
 8006abc:	400200b8 	.word	0x400200b8
 8006ac0:	40020410 	.word	0x40020410
 8006ac4:	40020428 	.word	0x40020428
 8006ac8:	40020440 	.word	0x40020440
 8006acc:	40020458 	.word	0x40020458
 8006ad0:	40020470 	.word	0x40020470
 8006ad4:	40020488 	.word	0x40020488
 8006ad8:	400204a0 	.word	0x400204a0
 8006adc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 80cf 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80ca 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b30:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e4      	bne.n	8006b0c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	623b      	str	r3, [r7, #32]
   return(result);
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	4b55      	ldr	r3, [pc, #340]	@ (8006cac <HAL_UART_IRQHandler+0x770>)
 8006b56:	4013      	ands	r3, r2
 8006b58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b66:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0310 	bic.w	r3, r3, #16
 8006ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	69b9      	ldr	r1, [r7, #24]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e4      	bne.n	8006b8e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f881 	bl	8006cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd6:	e063      	b.n	8006ca0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00e      	beq.n	8006c02 <HAL_UART_IRQHandler+0x6c6>
 8006be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f945 	bl	8007e8a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c00:	e051      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d014      	beq.n	8006c38 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d008      	beq.n	8006c38 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d03a      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4798      	blx	r3
    }
    return;
 8006c36:	e035      	b.n	8006ca4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <HAL_UART_IRQHandler+0x71c>
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f8ef 	bl	8007e34 <UART_EndTransmit_IT>
    return;
 8006c56:	e026      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d009      	beq.n	8006c78 <HAL_UART_IRQHandler+0x73c>
 8006c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 f91e 	bl	8007eb2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c76:	e016      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d010      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da0c      	bge.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f906 	bl	8007e9e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c92:	e008      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006c94:	bf00      	nop
 8006c96:	e006      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
    return;
 8006c98:	bf00      	nop
 8006c9a:	e004      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
      return;
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_UART_IRQHandler+0x76a>
    return;
 8006ca4:	bf00      	nop
  }
}
 8006ca6:	37e8      	adds	r7, #232	@ 0xe8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	effffffe 	.word	0xeffffffe

08006cb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf4:	b092      	sub	sp, #72	@ 0x48
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	4bbe      	ldr	r3, [pc, #760]	@ (8007018 <UART_SetConfig+0x328>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4ab3      	ldr	r2, [pc, #716]	@ (800701c <UART_SetConfig+0x32c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	4baf      	ldr	r3, [pc, #700]	@ (8007020 <UART_SetConfig+0x330>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	f023 010f 	bic.w	r1, r3, #15
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4aa6      	ldr	r2, [pc, #664]	@ (8007024 <UART_SetConfig+0x334>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d177      	bne.n	8006e80 <UART_SetConfig+0x190>
 8006d90:	4ba5      	ldr	r3, [pc, #660]	@ (8007028 <UART_SetConfig+0x338>)
 8006d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d98:	2b28      	cmp	r3, #40	@ 0x28
 8006d9a:	d86d      	bhi.n	8006e78 <UART_SetConfig+0x188>
 8006d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0xb4>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006e49 	.word	0x08006e49
 8006da8:	08006e79 	.word	0x08006e79
 8006dac:	08006e79 	.word	0x08006e79
 8006db0:	08006e79 	.word	0x08006e79
 8006db4:	08006e79 	.word	0x08006e79
 8006db8:	08006e79 	.word	0x08006e79
 8006dbc:	08006e79 	.word	0x08006e79
 8006dc0:	08006e79 	.word	0x08006e79
 8006dc4:	08006e51 	.word	0x08006e51
 8006dc8:	08006e79 	.word	0x08006e79
 8006dcc:	08006e79 	.word	0x08006e79
 8006dd0:	08006e79 	.word	0x08006e79
 8006dd4:	08006e79 	.word	0x08006e79
 8006dd8:	08006e79 	.word	0x08006e79
 8006ddc:	08006e79 	.word	0x08006e79
 8006de0:	08006e79 	.word	0x08006e79
 8006de4:	08006e59 	.word	0x08006e59
 8006de8:	08006e79 	.word	0x08006e79
 8006dec:	08006e79 	.word	0x08006e79
 8006df0:	08006e79 	.word	0x08006e79
 8006df4:	08006e79 	.word	0x08006e79
 8006df8:	08006e79 	.word	0x08006e79
 8006dfc:	08006e79 	.word	0x08006e79
 8006e00:	08006e79 	.word	0x08006e79
 8006e04:	08006e61 	.word	0x08006e61
 8006e08:	08006e79 	.word	0x08006e79
 8006e0c:	08006e79 	.word	0x08006e79
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	08006e79 	.word	0x08006e79
 8006e18:	08006e79 	.word	0x08006e79
 8006e1c:	08006e79 	.word	0x08006e79
 8006e20:	08006e79 	.word	0x08006e79
 8006e24:	08006e69 	.word	0x08006e69
 8006e28:	08006e79 	.word	0x08006e79
 8006e2c:	08006e79 	.word	0x08006e79
 8006e30:	08006e79 	.word	0x08006e79
 8006e34:	08006e79 	.word	0x08006e79
 8006e38:	08006e79 	.word	0x08006e79
 8006e3c:	08006e79 	.word	0x08006e79
 8006e40:	08006e79 	.word	0x08006e79
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4e:	e326      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e50:	2304      	movs	r3, #4
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e56:	e322      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e58:	2308      	movs	r3, #8
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5e:	e31e      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e60:	2310      	movs	r3, #16
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e66:	e31a      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e68:	2320      	movs	r3, #32
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6e:	e316      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e70:	2340      	movs	r3, #64	@ 0x40
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e76:	e312      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e78:	2380      	movs	r3, #128	@ 0x80
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7e:	e30e      	b.n	800749e <UART_SetConfig+0x7ae>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a69      	ldr	r2, [pc, #420]	@ (800702c <UART_SetConfig+0x33c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d130      	bne.n	8006eec <UART_SetConfig+0x1fc>
 8006e8a:	4b67      	ldr	r3, [pc, #412]	@ (8007028 <UART_SetConfig+0x338>)
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d826      	bhi.n	8006ee4 <UART_SetConfig+0x1f4>
 8006e96:	a201      	add	r2, pc, #4	@ (adr r2, 8006e9c <UART_SetConfig+0x1ac>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006eb5 	.word	0x08006eb5
 8006ea0:	08006ebd 	.word	0x08006ebd
 8006ea4:	08006ec5 	.word	0x08006ec5
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006edd 	.word	0x08006edd
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e2f0      	b.n	800749e <UART_SetConfig+0x7ae>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e2ec      	b.n	800749e <UART_SetConfig+0x7ae>
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e2e8      	b.n	800749e <UART_SetConfig+0x7ae>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed2:	e2e4      	b.n	800749e <UART_SetConfig+0x7ae>
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eda:	e2e0      	b.n	800749e <UART_SetConfig+0x7ae>
 8006edc:	2340      	movs	r3, #64	@ 0x40
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee2:	e2dc      	b.n	800749e <UART_SetConfig+0x7ae>
 8006ee4:	2380      	movs	r3, #128	@ 0x80
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eea:	e2d8      	b.n	800749e <UART_SetConfig+0x7ae>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8007030 <UART_SetConfig+0x340>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d130      	bne.n	8006f58 <UART_SetConfig+0x268>
 8006ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8007028 <UART_SetConfig+0x338>)
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d826      	bhi.n	8006f50 <UART_SetConfig+0x260>
 8006f02:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <UART_SetConfig+0x218>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f21 	.word	0x08006f21
 8006f0c:	08006f29 	.word	0x08006f29
 8006f10:	08006f31 	.word	0x08006f31
 8006f14:	08006f39 	.word	0x08006f39
 8006f18:	08006f41 	.word	0x08006f41
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	2300      	movs	r3, #0
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e2ba      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e2b6      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f30:	2308      	movs	r3, #8
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e2b2      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e2ae      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f40:	2320      	movs	r3, #32
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f46:	e2aa      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f48:	2340      	movs	r3, #64	@ 0x40
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4e:	e2a6      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f50:	2380      	movs	r3, #128	@ 0x80
 8006f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f56:	e2a2      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a35      	ldr	r2, [pc, #212]	@ (8007034 <UART_SetConfig+0x344>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d130      	bne.n	8006fc4 <UART_SetConfig+0x2d4>
 8006f62:	4b31      	ldr	r3, [pc, #196]	@ (8007028 <UART_SetConfig+0x338>)
 8006f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	d826      	bhi.n	8006fbc <UART_SetConfig+0x2cc>
 8006f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f74 <UART_SetConfig+0x284>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f8d 	.word	0x08006f8d
 8006f78:	08006f95 	.word	0x08006f95
 8006f7c:	08006f9d 	.word	0x08006f9d
 8006f80:	08006fa5 	.word	0x08006fa5
 8006f84:	08006fad 	.word	0x08006fad
 8006f88:	08006fb5 	.word	0x08006fb5
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e284      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f94:	2304      	movs	r3, #4
 8006f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9a:	e280      	b.n	800749e <UART_SetConfig+0x7ae>
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa2:	e27c      	b.n	800749e <UART_SetConfig+0x7ae>
 8006fa4:	2310      	movs	r3, #16
 8006fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006faa:	e278      	b.n	800749e <UART_SetConfig+0x7ae>
 8006fac:	2320      	movs	r3, #32
 8006fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb2:	e274      	b.n	800749e <UART_SetConfig+0x7ae>
 8006fb4:	2340      	movs	r3, #64	@ 0x40
 8006fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fba:	e270      	b.n	800749e <UART_SetConfig+0x7ae>
 8006fbc:	2380      	movs	r3, #128	@ 0x80
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc2:	e26c      	b.n	800749e <UART_SetConfig+0x7ae>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <UART_SetConfig+0x348>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d142      	bne.n	8007054 <UART_SetConfig+0x364>
 8006fce:	4b16      	ldr	r3, [pc, #88]	@ (8007028 <UART_SetConfig+0x338>)
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	2b05      	cmp	r3, #5
 8006fd8:	d838      	bhi.n	800704c <UART_SetConfig+0x35c>
 8006fda:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <UART_SetConfig+0x2f0>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08006ff9 	.word	0x08006ff9
 8006fe4:	08007001 	.word	0x08007001
 8006fe8:	08007009 	.word	0x08007009
 8006fec:	08007011 	.word	0x08007011
 8006ff0:	0800703d 	.word	0x0800703d
 8006ff4:	08007045 	.word	0x08007045
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffe:	e24e      	b.n	800749e <UART_SetConfig+0x7ae>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007006:	e24a      	b.n	800749e <UART_SetConfig+0x7ae>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700e:	e246      	b.n	800749e <UART_SetConfig+0x7ae>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007016:	e242      	b.n	800749e <UART_SetConfig+0x7ae>
 8007018:	cfff69f3 	.word	0xcfff69f3
 800701c:	58000c00 	.word	0x58000c00
 8007020:	11fff4ff 	.word	0x11fff4ff
 8007024:	40011000 	.word	0x40011000
 8007028:	58024400 	.word	0x58024400
 800702c:	40004400 	.word	0x40004400
 8007030:	40004800 	.word	0x40004800
 8007034:	40004c00 	.word	0x40004c00
 8007038:	40005000 	.word	0x40005000
 800703c:	2320      	movs	r3, #32
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007042:	e22c      	b.n	800749e <UART_SetConfig+0x7ae>
 8007044:	2340      	movs	r3, #64	@ 0x40
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704a:	e228      	b.n	800749e <UART_SetConfig+0x7ae>
 800704c:	2380      	movs	r3, #128	@ 0x80
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007052:	e224      	b.n	800749e <UART_SetConfig+0x7ae>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4ab1      	ldr	r2, [pc, #708]	@ (8007320 <UART_SetConfig+0x630>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d176      	bne.n	800714c <UART_SetConfig+0x45c>
 800705e:	4bb1      	ldr	r3, [pc, #708]	@ (8007324 <UART_SetConfig+0x634>)
 8007060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007066:	2b28      	cmp	r3, #40	@ 0x28
 8007068:	d86c      	bhi.n	8007144 <UART_SetConfig+0x454>
 800706a:	a201      	add	r2, pc, #4	@ (adr r2, 8007070 <UART_SetConfig+0x380>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	08007115 	.word	0x08007115
 8007074:	08007145 	.word	0x08007145
 8007078:	08007145 	.word	0x08007145
 800707c:	08007145 	.word	0x08007145
 8007080:	08007145 	.word	0x08007145
 8007084:	08007145 	.word	0x08007145
 8007088:	08007145 	.word	0x08007145
 800708c:	08007145 	.word	0x08007145
 8007090:	0800711d 	.word	0x0800711d
 8007094:	08007145 	.word	0x08007145
 8007098:	08007145 	.word	0x08007145
 800709c:	08007145 	.word	0x08007145
 80070a0:	08007145 	.word	0x08007145
 80070a4:	08007145 	.word	0x08007145
 80070a8:	08007145 	.word	0x08007145
 80070ac:	08007145 	.word	0x08007145
 80070b0:	08007125 	.word	0x08007125
 80070b4:	08007145 	.word	0x08007145
 80070b8:	08007145 	.word	0x08007145
 80070bc:	08007145 	.word	0x08007145
 80070c0:	08007145 	.word	0x08007145
 80070c4:	08007145 	.word	0x08007145
 80070c8:	08007145 	.word	0x08007145
 80070cc:	08007145 	.word	0x08007145
 80070d0:	0800712d 	.word	0x0800712d
 80070d4:	08007145 	.word	0x08007145
 80070d8:	08007145 	.word	0x08007145
 80070dc:	08007145 	.word	0x08007145
 80070e0:	08007145 	.word	0x08007145
 80070e4:	08007145 	.word	0x08007145
 80070e8:	08007145 	.word	0x08007145
 80070ec:	08007145 	.word	0x08007145
 80070f0:	08007135 	.word	0x08007135
 80070f4:	08007145 	.word	0x08007145
 80070f8:	08007145 	.word	0x08007145
 80070fc:	08007145 	.word	0x08007145
 8007100:	08007145 	.word	0x08007145
 8007104:	08007145 	.word	0x08007145
 8007108:	08007145 	.word	0x08007145
 800710c:	08007145 	.word	0x08007145
 8007110:	0800713d 	.word	0x0800713d
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e1c0      	b.n	800749e <UART_SetConfig+0x7ae>
 800711c:	2304      	movs	r3, #4
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e1bc      	b.n	800749e <UART_SetConfig+0x7ae>
 8007124:	2308      	movs	r3, #8
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e1b8      	b.n	800749e <UART_SetConfig+0x7ae>
 800712c:	2310      	movs	r3, #16
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e1b4      	b.n	800749e <UART_SetConfig+0x7ae>
 8007134:	2320      	movs	r3, #32
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713a:	e1b0      	b.n	800749e <UART_SetConfig+0x7ae>
 800713c:	2340      	movs	r3, #64	@ 0x40
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007142:	e1ac      	b.n	800749e <UART_SetConfig+0x7ae>
 8007144:	2380      	movs	r3, #128	@ 0x80
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714a:	e1a8      	b.n	800749e <UART_SetConfig+0x7ae>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a75      	ldr	r2, [pc, #468]	@ (8007328 <UART_SetConfig+0x638>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d130      	bne.n	80071b8 <UART_SetConfig+0x4c8>
 8007156:	4b73      	ldr	r3, [pc, #460]	@ (8007324 <UART_SetConfig+0x634>)
 8007158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	2b05      	cmp	r3, #5
 8007160:	d826      	bhi.n	80071b0 <UART_SetConfig+0x4c0>
 8007162:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <UART_SetConfig+0x478>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	08007181 	.word	0x08007181
 800716c:	08007189 	.word	0x08007189
 8007170:	08007191 	.word	0x08007191
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	2300      	movs	r3, #0
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e18a      	b.n	800749e <UART_SetConfig+0x7ae>
 8007188:	2304      	movs	r3, #4
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e186      	b.n	800749e <UART_SetConfig+0x7ae>
 8007190:	2308      	movs	r3, #8
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e182      	b.n	800749e <UART_SetConfig+0x7ae>
 8007198:	2310      	movs	r3, #16
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719e:	e17e      	b.n	800749e <UART_SetConfig+0x7ae>
 80071a0:	2320      	movs	r3, #32
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a6:	e17a      	b.n	800749e <UART_SetConfig+0x7ae>
 80071a8:	2340      	movs	r3, #64	@ 0x40
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ae:	e176      	b.n	800749e <UART_SetConfig+0x7ae>
 80071b0:	2380      	movs	r3, #128	@ 0x80
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b6:	e172      	b.n	800749e <UART_SetConfig+0x7ae>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a5b      	ldr	r2, [pc, #364]	@ (800732c <UART_SetConfig+0x63c>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d130      	bne.n	8007224 <UART_SetConfig+0x534>
 80071c2:	4b58      	ldr	r3, [pc, #352]	@ (8007324 <UART_SetConfig+0x634>)
 80071c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d826      	bhi.n	800721c <UART_SetConfig+0x52c>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <UART_SetConfig+0x4e4>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071ed 	.word	0x080071ed
 80071d8:	080071f5 	.word	0x080071f5
 80071dc:	080071fd 	.word	0x080071fd
 80071e0:	08007205 	.word	0x08007205
 80071e4:	0800720d 	.word	0x0800720d
 80071e8:	08007215 	.word	0x08007215
 80071ec:	2300      	movs	r3, #0
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e154      	b.n	800749e <UART_SetConfig+0x7ae>
 80071f4:	2304      	movs	r3, #4
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e150      	b.n	800749e <UART_SetConfig+0x7ae>
 80071fc:	2308      	movs	r3, #8
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e14c      	b.n	800749e <UART_SetConfig+0x7ae>
 8007204:	2310      	movs	r3, #16
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e148      	b.n	800749e <UART_SetConfig+0x7ae>
 800720c:	2320      	movs	r3, #32
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e144      	b.n	800749e <UART_SetConfig+0x7ae>
 8007214:	2340      	movs	r3, #64	@ 0x40
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721a:	e140      	b.n	800749e <UART_SetConfig+0x7ae>
 800721c:	2380      	movs	r3, #128	@ 0x80
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007222:	e13c      	b.n	800749e <UART_SetConfig+0x7ae>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a41      	ldr	r2, [pc, #260]	@ (8007330 <UART_SetConfig+0x640>)
 800722a:	4293      	cmp	r3, r2
 800722c:	f040 8082 	bne.w	8007334 <UART_SetConfig+0x644>
 8007230:	4b3c      	ldr	r3, [pc, #240]	@ (8007324 <UART_SetConfig+0x634>)
 8007232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007238:	2b28      	cmp	r3, #40	@ 0x28
 800723a:	d86d      	bhi.n	8007318 <UART_SetConfig+0x628>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <UART_SetConfig+0x554>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	080072e9 	.word	0x080072e9
 8007248:	08007319 	.word	0x08007319
 800724c:	08007319 	.word	0x08007319
 8007250:	08007319 	.word	0x08007319
 8007254:	08007319 	.word	0x08007319
 8007258:	08007319 	.word	0x08007319
 800725c:	08007319 	.word	0x08007319
 8007260:	08007319 	.word	0x08007319
 8007264:	080072f1 	.word	0x080072f1
 8007268:	08007319 	.word	0x08007319
 800726c:	08007319 	.word	0x08007319
 8007270:	08007319 	.word	0x08007319
 8007274:	08007319 	.word	0x08007319
 8007278:	08007319 	.word	0x08007319
 800727c:	08007319 	.word	0x08007319
 8007280:	08007319 	.word	0x08007319
 8007284:	080072f9 	.word	0x080072f9
 8007288:	08007319 	.word	0x08007319
 800728c:	08007319 	.word	0x08007319
 8007290:	08007319 	.word	0x08007319
 8007294:	08007319 	.word	0x08007319
 8007298:	08007319 	.word	0x08007319
 800729c:	08007319 	.word	0x08007319
 80072a0:	08007319 	.word	0x08007319
 80072a4:	08007301 	.word	0x08007301
 80072a8:	08007319 	.word	0x08007319
 80072ac:	08007319 	.word	0x08007319
 80072b0:	08007319 	.word	0x08007319
 80072b4:	08007319 	.word	0x08007319
 80072b8:	08007319 	.word	0x08007319
 80072bc:	08007319 	.word	0x08007319
 80072c0:	08007319 	.word	0x08007319
 80072c4:	08007309 	.word	0x08007309
 80072c8:	08007319 	.word	0x08007319
 80072cc:	08007319 	.word	0x08007319
 80072d0:	08007319 	.word	0x08007319
 80072d4:	08007319 	.word	0x08007319
 80072d8:	08007319 	.word	0x08007319
 80072dc:	08007319 	.word	0x08007319
 80072e0:	08007319 	.word	0x08007319
 80072e4:	08007311 	.word	0x08007311
 80072e8:	2301      	movs	r3, #1
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e0d6      	b.n	800749e <UART_SetConfig+0x7ae>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e0d2      	b.n	800749e <UART_SetConfig+0x7ae>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e0ce      	b.n	800749e <UART_SetConfig+0x7ae>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007306:	e0ca      	b.n	800749e <UART_SetConfig+0x7ae>
 8007308:	2320      	movs	r3, #32
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800730e:	e0c6      	b.n	800749e <UART_SetConfig+0x7ae>
 8007310:	2340      	movs	r3, #64	@ 0x40
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e0c2      	b.n	800749e <UART_SetConfig+0x7ae>
 8007318:	2380      	movs	r3, #128	@ 0x80
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e0be      	b.n	800749e <UART_SetConfig+0x7ae>
 8007320:	40011400 	.word	0x40011400
 8007324:	58024400 	.word	0x58024400
 8007328:	40007800 	.word	0x40007800
 800732c:	40007c00 	.word	0x40007c00
 8007330:	40011800 	.word	0x40011800
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4aad      	ldr	r2, [pc, #692]	@ (80075f0 <UART_SetConfig+0x900>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d176      	bne.n	800742c <UART_SetConfig+0x73c>
 800733e:	4bad      	ldr	r3, [pc, #692]	@ (80075f4 <UART_SetConfig+0x904>)
 8007340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007342:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007346:	2b28      	cmp	r3, #40	@ 0x28
 8007348:	d86c      	bhi.n	8007424 <UART_SetConfig+0x734>
 800734a:	a201      	add	r2, pc, #4	@ (adr r2, 8007350 <UART_SetConfig+0x660>)
 800734c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007350:	080073f5 	.word	0x080073f5
 8007354:	08007425 	.word	0x08007425
 8007358:	08007425 	.word	0x08007425
 800735c:	08007425 	.word	0x08007425
 8007360:	08007425 	.word	0x08007425
 8007364:	08007425 	.word	0x08007425
 8007368:	08007425 	.word	0x08007425
 800736c:	08007425 	.word	0x08007425
 8007370:	080073fd 	.word	0x080073fd
 8007374:	08007425 	.word	0x08007425
 8007378:	08007425 	.word	0x08007425
 800737c:	08007425 	.word	0x08007425
 8007380:	08007425 	.word	0x08007425
 8007384:	08007425 	.word	0x08007425
 8007388:	08007425 	.word	0x08007425
 800738c:	08007425 	.word	0x08007425
 8007390:	08007405 	.word	0x08007405
 8007394:	08007425 	.word	0x08007425
 8007398:	08007425 	.word	0x08007425
 800739c:	08007425 	.word	0x08007425
 80073a0:	08007425 	.word	0x08007425
 80073a4:	08007425 	.word	0x08007425
 80073a8:	08007425 	.word	0x08007425
 80073ac:	08007425 	.word	0x08007425
 80073b0:	0800740d 	.word	0x0800740d
 80073b4:	08007425 	.word	0x08007425
 80073b8:	08007425 	.word	0x08007425
 80073bc:	08007425 	.word	0x08007425
 80073c0:	08007425 	.word	0x08007425
 80073c4:	08007425 	.word	0x08007425
 80073c8:	08007425 	.word	0x08007425
 80073cc:	08007425 	.word	0x08007425
 80073d0:	08007415 	.word	0x08007415
 80073d4:	08007425 	.word	0x08007425
 80073d8:	08007425 	.word	0x08007425
 80073dc:	08007425 	.word	0x08007425
 80073e0:	08007425 	.word	0x08007425
 80073e4:	08007425 	.word	0x08007425
 80073e8:	08007425 	.word	0x08007425
 80073ec:	08007425 	.word	0x08007425
 80073f0:	0800741d 	.word	0x0800741d
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e050      	b.n	800749e <UART_SetConfig+0x7ae>
 80073fc:	2304      	movs	r3, #4
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e04c      	b.n	800749e <UART_SetConfig+0x7ae>
 8007404:	2308      	movs	r3, #8
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e048      	b.n	800749e <UART_SetConfig+0x7ae>
 800740c:	2310      	movs	r3, #16
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e044      	b.n	800749e <UART_SetConfig+0x7ae>
 8007414:	2320      	movs	r3, #32
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e040      	b.n	800749e <UART_SetConfig+0x7ae>
 800741c:	2340      	movs	r3, #64	@ 0x40
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e03c      	b.n	800749e <UART_SetConfig+0x7ae>
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742a:	e038      	b.n	800749e <UART_SetConfig+0x7ae>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a71      	ldr	r2, [pc, #452]	@ (80075f8 <UART_SetConfig+0x908>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d130      	bne.n	8007498 <UART_SetConfig+0x7a8>
 8007436:	4b6f      	ldr	r3, [pc, #444]	@ (80075f4 <UART_SetConfig+0x904>)
 8007438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	2b05      	cmp	r3, #5
 8007440:	d826      	bhi.n	8007490 <UART_SetConfig+0x7a0>
 8007442:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <UART_SetConfig+0x758>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	08007461 	.word	0x08007461
 800744c:	08007469 	.word	0x08007469
 8007450:	08007471 	.word	0x08007471
 8007454:	08007479 	.word	0x08007479
 8007458:	08007481 	.word	0x08007481
 800745c:	08007489 	.word	0x08007489
 8007460:	2302      	movs	r3, #2
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007466:	e01a      	b.n	800749e <UART_SetConfig+0x7ae>
 8007468:	2304      	movs	r3, #4
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746e:	e016      	b.n	800749e <UART_SetConfig+0x7ae>
 8007470:	2308      	movs	r3, #8
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007476:	e012      	b.n	800749e <UART_SetConfig+0x7ae>
 8007478:	2310      	movs	r3, #16
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747e:	e00e      	b.n	800749e <UART_SetConfig+0x7ae>
 8007480:	2320      	movs	r3, #32
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e00a      	b.n	800749e <UART_SetConfig+0x7ae>
 8007488:	2340      	movs	r3, #64	@ 0x40
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748e:	e006      	b.n	800749e <UART_SetConfig+0x7ae>
 8007490:	2380      	movs	r3, #128	@ 0x80
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007496:	e002      	b.n	800749e <UART_SetConfig+0x7ae>
 8007498:	2380      	movs	r3, #128	@ 0x80
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a55      	ldr	r2, [pc, #340]	@ (80075f8 <UART_SetConfig+0x908>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	f040 80f8 	bne.w	800769a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	dc46      	bgt.n	8007540 <UART_SetConfig+0x850>
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	db75      	blt.n	80075a2 <UART_SetConfig+0x8b2>
 80074b6:	3b02      	subs	r3, #2
 80074b8:	2b1e      	cmp	r3, #30
 80074ba:	d872      	bhi.n	80075a2 <UART_SetConfig+0x8b2>
 80074bc:	a201      	add	r2, pc, #4	@ (adr r2, 80074c4 <UART_SetConfig+0x7d4>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007547 	.word	0x08007547
 80074c8:	080075a3 	.word	0x080075a3
 80074cc:	0800754f 	.word	0x0800754f
 80074d0:	080075a3 	.word	0x080075a3
 80074d4:	080075a3 	.word	0x080075a3
 80074d8:	080075a3 	.word	0x080075a3
 80074dc:	0800755f 	.word	0x0800755f
 80074e0:	080075a3 	.word	0x080075a3
 80074e4:	080075a3 	.word	0x080075a3
 80074e8:	080075a3 	.word	0x080075a3
 80074ec:	080075a3 	.word	0x080075a3
 80074f0:	080075a3 	.word	0x080075a3
 80074f4:	080075a3 	.word	0x080075a3
 80074f8:	080075a3 	.word	0x080075a3
 80074fc:	0800756f 	.word	0x0800756f
 8007500:	080075a3 	.word	0x080075a3
 8007504:	080075a3 	.word	0x080075a3
 8007508:	080075a3 	.word	0x080075a3
 800750c:	080075a3 	.word	0x080075a3
 8007510:	080075a3 	.word	0x080075a3
 8007514:	080075a3 	.word	0x080075a3
 8007518:	080075a3 	.word	0x080075a3
 800751c:	080075a3 	.word	0x080075a3
 8007520:	080075a3 	.word	0x080075a3
 8007524:	080075a3 	.word	0x080075a3
 8007528:	080075a3 	.word	0x080075a3
 800752c:	080075a3 	.word	0x080075a3
 8007530:	080075a3 	.word	0x080075a3
 8007534:	080075a3 	.word	0x080075a3
 8007538:	080075a3 	.word	0x080075a3
 800753c:	08007595 	.word	0x08007595
 8007540:	2b40      	cmp	r3, #64	@ 0x40
 8007542:	d02a      	beq.n	800759a <UART_SetConfig+0x8aa>
 8007544:	e02d      	b.n	80075a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007546:	f7fd fa25 	bl	8004994 <HAL_RCCEx_GetD3PCLK1Freq>
 800754a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800754c:	e02f      	b.n	80075ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800754e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007552:	4618      	mov	r0, r3
 8007554:	f7fd fa34 	bl	80049c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800755c:	e027      	b.n	80075ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800755e:	f107 0318 	add.w	r3, r7, #24
 8007562:	4618      	mov	r0, r3
 8007564:	f7fd fb80 	bl	8004c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800756c:	e01f      	b.n	80075ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800756e:	4b21      	ldr	r3, [pc, #132]	@ (80075f4 <UART_SetConfig+0x904>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800757a:	4b1e      	ldr	r3, [pc, #120]	@ (80075f4 <UART_SetConfig+0x904>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	08db      	lsrs	r3, r3, #3
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	4a1d      	ldr	r2, [pc, #116]	@ (80075fc <UART_SetConfig+0x90c>)
 8007586:	fa22 f303 	lsr.w	r3, r2, r3
 800758a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800758c:	e00f      	b.n	80075ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800758e:	4b1b      	ldr	r3, [pc, #108]	@ (80075fc <UART_SetConfig+0x90c>)
 8007590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007592:	e00c      	b.n	80075ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007594:	4b1a      	ldr	r3, [pc, #104]	@ (8007600 <UART_SetConfig+0x910>)
 8007596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007598:	e009      	b.n	80075ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a0:	e005      	b.n	80075ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80075ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 81ee 	beq.w	8007992 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	4a12      	ldr	r2, [pc, #72]	@ (8007604 <UART_SetConfig+0x914>)
 80075bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d305      	bcc.n	80075e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d910      	bls.n	8007608 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80075ec:	e1d1      	b.n	8007992 <UART_SetConfig+0xca2>
 80075ee:	bf00      	nop
 80075f0:	40011c00 	.word	0x40011c00
 80075f4:	58024400 	.word	0x58024400
 80075f8:	58000c00 	.word	0x58000c00
 80075fc:	03d09000 	.word	0x03d09000
 8007600:	003d0900 	.word	0x003d0900
 8007604:	0800814c 	.word	0x0800814c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800760a:	2200      	movs	r2, #0
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	60fa      	str	r2, [r7, #12]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007614:	4ac0      	ldr	r2, [pc, #768]	@ (8007918 <UART_SetConfig+0xc28>)
 8007616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800761a:	b29b      	uxth	r3, r3
 800761c:	2200      	movs	r2, #0
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800762a:	f7f8 fe6f 	bl	800030c <__aeabi_uldivmod>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4610      	mov	r0, r2
 8007634:	4619      	mov	r1, r3
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	f04f 0300 	mov.w	r3, #0
 800763e:	020b      	lsls	r3, r1, #8
 8007640:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007644:	0202      	lsls	r2, r0, #8
 8007646:	6979      	ldr	r1, [r7, #20]
 8007648:	6849      	ldr	r1, [r1, #4]
 800764a:	0849      	lsrs	r1, r1, #1
 800764c:	2000      	movs	r0, #0
 800764e:	460c      	mov	r4, r1
 8007650:	4605      	mov	r5, r0
 8007652:	eb12 0804 	adds.w	r8, r2, r4
 8007656:	eb43 0905 	adc.w	r9, r3, r5
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	469a      	mov	sl, r3
 8007662:	4693      	mov	fp, r2
 8007664:	4652      	mov	r2, sl
 8007666:	465b      	mov	r3, fp
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f8 fe4e 	bl	800030c <__aeabi_uldivmod>
 8007670:	4602      	mov	r2, r0
 8007672:	460b      	mov	r3, r1
 8007674:	4613      	mov	r3, r2
 8007676:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800767e:	d308      	bcc.n	8007692 <UART_SetConfig+0x9a2>
 8007680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007686:	d204      	bcs.n	8007692 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800768e:	60da      	str	r2, [r3, #12]
 8007690:	e17f      	b.n	8007992 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007698:	e17b      	b.n	8007992 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a2:	f040 80bd 	bne.w	8007820 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80076a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	dc48      	bgt.n	8007740 <UART_SetConfig+0xa50>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	db7b      	blt.n	80077aa <UART_SetConfig+0xaba>
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d879      	bhi.n	80077aa <UART_SetConfig+0xaba>
 80076b6:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <UART_SetConfig+0x9cc>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	08007747 	.word	0x08007747
 80076c0:	0800774f 	.word	0x0800774f
 80076c4:	080077ab 	.word	0x080077ab
 80076c8:	080077ab 	.word	0x080077ab
 80076cc:	08007757 	.word	0x08007757
 80076d0:	080077ab 	.word	0x080077ab
 80076d4:	080077ab 	.word	0x080077ab
 80076d8:	080077ab 	.word	0x080077ab
 80076dc:	08007767 	.word	0x08007767
 80076e0:	080077ab 	.word	0x080077ab
 80076e4:	080077ab 	.word	0x080077ab
 80076e8:	080077ab 	.word	0x080077ab
 80076ec:	080077ab 	.word	0x080077ab
 80076f0:	080077ab 	.word	0x080077ab
 80076f4:	080077ab 	.word	0x080077ab
 80076f8:	080077ab 	.word	0x080077ab
 80076fc:	08007777 	.word	0x08007777
 8007700:	080077ab 	.word	0x080077ab
 8007704:	080077ab 	.word	0x080077ab
 8007708:	080077ab 	.word	0x080077ab
 800770c:	080077ab 	.word	0x080077ab
 8007710:	080077ab 	.word	0x080077ab
 8007714:	080077ab 	.word	0x080077ab
 8007718:	080077ab 	.word	0x080077ab
 800771c:	080077ab 	.word	0x080077ab
 8007720:	080077ab 	.word	0x080077ab
 8007724:	080077ab 	.word	0x080077ab
 8007728:	080077ab 	.word	0x080077ab
 800772c:	080077ab 	.word	0x080077ab
 8007730:	080077ab 	.word	0x080077ab
 8007734:	080077ab 	.word	0x080077ab
 8007738:	080077ab 	.word	0x080077ab
 800773c:	0800779d 	.word	0x0800779d
 8007740:	2b40      	cmp	r3, #64	@ 0x40
 8007742:	d02e      	beq.n	80077a2 <UART_SetConfig+0xab2>
 8007744:	e031      	b.n	80077aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007746:	f7fb ff59 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 800774a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800774c:	e033      	b.n	80077b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800774e:	f7fb ff6b 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 8007752:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007754:	e02f      	b.n	80077b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd f930 	bl	80049c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007764:	e027      	b.n	80077b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007766:	f107 0318 	add.w	r3, r7, #24
 800776a:	4618      	mov	r0, r3
 800776c:	f7fd fa7c 	bl	8004c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007774:	e01f      	b.n	80077b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007776:	4b69      	ldr	r3, [pc, #420]	@ (800791c <UART_SetConfig+0xc2c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007782:	4b66      	ldr	r3, [pc, #408]	@ (800791c <UART_SetConfig+0xc2c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	08db      	lsrs	r3, r3, #3
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	4a64      	ldr	r2, [pc, #400]	@ (8007920 <UART_SetConfig+0xc30>)
 800778e:	fa22 f303 	lsr.w	r3, r2, r3
 8007792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007794:	e00f      	b.n	80077b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007796:	4b62      	ldr	r3, [pc, #392]	@ (8007920 <UART_SetConfig+0xc30>)
 8007798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800779a:	e00c      	b.n	80077b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800779c:	4b61      	ldr	r3, [pc, #388]	@ (8007924 <UART_SetConfig+0xc34>)
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a0:	e009      	b.n	80077b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a8:	e005      	b.n	80077b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80077b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80ea 	beq.w	8007992 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c2:	4a55      	ldr	r2, [pc, #340]	@ (8007918 <UART_SetConfig+0xc28>)
 80077c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077c8:	461a      	mov	r2, r3
 80077ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80077d0:	005a      	lsls	r2, r3, #1
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	085b      	lsrs	r3, r3, #1
 80077d8:	441a      	add	r2, r3
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d916      	bls.n	8007818 <UART_SetConfig+0xb28>
 80077ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f0:	d212      	bcs.n	8007818 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f023 030f 	bic.w	r3, r3, #15
 80077fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	b29b      	uxth	r3, r3
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	b29a      	uxth	r2, r3
 8007808:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800780a:	4313      	orrs	r3, r2
 800780c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007814:	60da      	str	r2, [r3, #12]
 8007816:	e0bc      	b.n	8007992 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800781e:	e0b8      	b.n	8007992 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007820:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007824:	2b20      	cmp	r3, #32
 8007826:	dc4b      	bgt.n	80078c0 <UART_SetConfig+0xbd0>
 8007828:	2b00      	cmp	r3, #0
 800782a:	f2c0 8087 	blt.w	800793c <UART_SetConfig+0xc4c>
 800782e:	2b20      	cmp	r3, #32
 8007830:	f200 8084 	bhi.w	800793c <UART_SetConfig+0xc4c>
 8007834:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0xb4c>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	080078c7 	.word	0x080078c7
 8007840:	080078cf 	.word	0x080078cf
 8007844:	0800793d 	.word	0x0800793d
 8007848:	0800793d 	.word	0x0800793d
 800784c:	080078d7 	.word	0x080078d7
 8007850:	0800793d 	.word	0x0800793d
 8007854:	0800793d 	.word	0x0800793d
 8007858:	0800793d 	.word	0x0800793d
 800785c:	080078e7 	.word	0x080078e7
 8007860:	0800793d 	.word	0x0800793d
 8007864:	0800793d 	.word	0x0800793d
 8007868:	0800793d 	.word	0x0800793d
 800786c:	0800793d 	.word	0x0800793d
 8007870:	0800793d 	.word	0x0800793d
 8007874:	0800793d 	.word	0x0800793d
 8007878:	0800793d 	.word	0x0800793d
 800787c:	080078f7 	.word	0x080078f7
 8007880:	0800793d 	.word	0x0800793d
 8007884:	0800793d 	.word	0x0800793d
 8007888:	0800793d 	.word	0x0800793d
 800788c:	0800793d 	.word	0x0800793d
 8007890:	0800793d 	.word	0x0800793d
 8007894:	0800793d 	.word	0x0800793d
 8007898:	0800793d 	.word	0x0800793d
 800789c:	0800793d 	.word	0x0800793d
 80078a0:	0800793d 	.word	0x0800793d
 80078a4:	0800793d 	.word	0x0800793d
 80078a8:	0800793d 	.word	0x0800793d
 80078ac:	0800793d 	.word	0x0800793d
 80078b0:	0800793d 	.word	0x0800793d
 80078b4:	0800793d 	.word	0x0800793d
 80078b8:	0800793d 	.word	0x0800793d
 80078bc:	0800792f 	.word	0x0800792f
 80078c0:	2b40      	cmp	r3, #64	@ 0x40
 80078c2:	d037      	beq.n	8007934 <UART_SetConfig+0xc44>
 80078c4:	e03a      	b.n	800793c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c6:	f7fb fe99 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80078ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078cc:	e03c      	b.n	8007948 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ce:	f7fb feab 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 80078d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078d4:	e038      	b.n	8007948 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fd f870 	bl	80049c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e4:	e030      	b.n	8007948 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e6:	f107 0318 	add.w	r3, r7, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fd f9bc 	bl	8004c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f4:	e028      	b.n	8007948 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <UART_SetConfig+0xc2c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d012      	beq.n	8007928 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007902:	4b06      	ldr	r3, [pc, #24]	@ (800791c <UART_SetConfig+0xc2c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	08db      	lsrs	r3, r3, #3
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	4a04      	ldr	r2, [pc, #16]	@ (8007920 <UART_SetConfig+0xc30>)
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007914:	e018      	b.n	8007948 <UART_SetConfig+0xc58>
 8007916:	bf00      	nop
 8007918:	0800814c 	.word	0x0800814c
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007928:	4b24      	ldr	r3, [pc, #144]	@ (80079bc <UART_SetConfig+0xccc>)
 800792a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800792c:	e00c      	b.n	8007948 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800792e:	4b24      	ldr	r3, [pc, #144]	@ (80079c0 <UART_SetConfig+0xcd0>)
 8007930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007932:	e009      	b.n	8007948 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800793a:	e005      	b.n	8007948 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007946:	bf00      	nop
    }

    if (pclk != 0U)
 8007948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d021      	beq.n	8007992 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007952:	4a1c      	ldr	r2, [pc, #112]	@ (80079c4 <UART_SetConfig+0xcd4>)
 8007954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007958:	461a      	mov	r2, r3
 800795a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800795c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	441a      	add	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	2b0f      	cmp	r3, #15
 8007976:	d909      	bls.n	800798c <UART_SetConfig+0xc9c>
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800797e:	d205      	bcs.n	800798c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	b29a      	uxth	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60da      	str	r2, [r3, #12]
 800798a:	e002      	b.n	8007992 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2201      	movs	r2, #1
 8007996:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2201      	movs	r2, #1
 800799e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2200      	movs	r2, #0
 80079ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079ae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3748      	adds	r7, #72	@ 0x48
 80079b6:	46bd      	mov	sp, r7
 80079b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079bc:	03d09000 	.word	0x03d09000
 80079c0:	003d0900 	.word	0x003d0900
 80079c4:	0800814c 	.word	0x0800814c

080079c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	f003 0304 	and.w	r3, r3, #4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ac6:	d10a      	bne.n	8007ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  }
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b098      	sub	sp, #96	@ 0x60
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b1c:	f7f9 fc34 	bl	8001388 <HAL_GetTick>
 8007b20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d12f      	bne.n	8007b90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f88e 	bl	8007c60 <UART_WaitOnFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d022      	beq.n	8007b90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e6      	bne.n	8007b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e063      	b.n	8007c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d149      	bne.n	8007c32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f857 	bl	8007c60 <UART_WaitOnFlagUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d03c      	beq.n	8007c32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e6      	bne.n	8007bb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3308      	adds	r3, #8
 8007bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c0a:	61fa      	str	r2, [r7, #28]
 8007c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	69b9      	ldr	r1, [r7, #24]
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	617b      	str	r3, [r7, #20]
   return(result);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e5      	bne.n	8007bea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e012      	b.n	8007c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3758      	adds	r7, #88	@ 0x58
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c70:	e04f      	b.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d04b      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c7a:	f7f9 fb85 	bl	8001388 <HAL_GetTick>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d302      	bcc.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e04e      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d037      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b80      	cmp	r3, #128	@ 0x80
 8007ca6:	d034      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b40      	cmp	r3, #64	@ 0x40
 8007cac:	d031      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d110      	bne.n	8007cde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f839 	bl	8007d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2208      	movs	r2, #8
 8007cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e029      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cec:	d111      	bne.n	8007d12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f81f 	bl	8007d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e00f      	b.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	69da      	ldr	r2, [r3, #28]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	bf0c      	ite	eq
 8007d22:	2301      	moveq	r3, #1
 8007d24:	2300      	movne	r3, #0
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d0a0      	beq.n	8007c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b095      	sub	sp, #84	@ 0x54
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d62:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	4b1e      	ldr	r3, [pc, #120]	@ (8007e04 <UART_EndRxTransfer+0xc8>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e5      	bne.n	8007d76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d118      	bne.n	8007de4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007df8:	bf00      	nop
 8007dfa:	3754      	adds	r7, #84	@ 0x54
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	effffffe 	.word	0xeffffffe

08007e08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7fe ff4c 	bl	8006cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6979      	ldr	r1, [r7, #20]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	613b      	str	r3, [r7, #16]
   return(result);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fe ff17 	bl	8006cb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e82:	bf00      	nop
 8007e84:	3720      	adds	r7, #32
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_UARTEx_DisableFifoMode+0x16>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e027      	b.n	8007f2c <HAL_UARTEx_DisableFifoMode+0x66>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2224      	movs	r2, #36	@ 0x24
 8007ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e02d      	b.n	8007fac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2224      	movs	r2, #36	@ 0x24
 8007f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f84f 	bl	8008030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e02d      	b.n	8008028 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2224      	movs	r2, #36	@ 0x24
 8007fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0201 	bic.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f811 	bl	8008030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800803c:	2b00      	cmp	r3, #0
 800803e:	d108      	bne.n	8008052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008050:	e031      	b.n	80080b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008052:	2310      	movs	r3, #16
 8008054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008056:	2310      	movs	r3, #16
 8008058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	0e5b      	lsrs	r3, r3, #25
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	0f5b      	lsrs	r3, r3, #29
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	7b3a      	ldrb	r2, [r7, #12]
 800807e:	4911      	ldr	r1, [pc, #68]	@ (80080c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008080:	5c8a      	ldrb	r2, [r1, r2]
 8008082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008086:	7b3a      	ldrb	r2, [r7, #12]
 8008088:	490f      	ldr	r1, [pc, #60]	@ (80080c8 <UARTEx_SetNbDataToProcess+0x98>)
 800808a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800808c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	7b7a      	ldrb	r2, [r7, #13]
 800809c:	4909      	ldr	r1, [pc, #36]	@ (80080c4 <UARTEx_SetNbDataToProcess+0x94>)
 800809e:	5c8a      	ldrb	r2, [r1, r2]
 80080a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080a4:	7b7a      	ldrb	r2, [r7, #13]
 80080a6:	4908      	ldr	r1, [pc, #32]	@ (80080c8 <UARTEx_SetNbDataToProcess+0x98>)
 80080a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	08008164 	.word	0x08008164
 80080c8:	0800816c 	.word	0x0800816c

080080cc <memset>:
 80080cc:	4402      	add	r2, r0
 80080ce:	4603      	mov	r3, r0
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d100      	bne.n	80080d6 <memset+0xa>
 80080d4:	4770      	bx	lr
 80080d6:	f803 1b01 	strb.w	r1, [r3], #1
 80080da:	e7f9      	b.n	80080d0 <memset+0x4>

080080dc <__libc_init_array>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4d0d      	ldr	r5, [pc, #52]	@ (8008114 <__libc_init_array+0x38>)
 80080e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008118 <__libc_init_array+0x3c>)
 80080e2:	1b64      	subs	r4, r4, r5
 80080e4:	10a4      	asrs	r4, r4, #2
 80080e6:	2600      	movs	r6, #0
 80080e8:	42a6      	cmp	r6, r4
 80080ea:	d109      	bne.n	8008100 <__libc_init_array+0x24>
 80080ec:	4d0b      	ldr	r5, [pc, #44]	@ (800811c <__libc_init_array+0x40>)
 80080ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008120 <__libc_init_array+0x44>)
 80080f0:	f000 f818 	bl	8008124 <_init>
 80080f4:	1b64      	subs	r4, r4, r5
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	2600      	movs	r6, #0
 80080fa:	42a6      	cmp	r6, r4
 80080fc:	d105      	bne.n	800810a <__libc_init_array+0x2e>
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	f855 3b04 	ldr.w	r3, [r5], #4
 8008104:	4798      	blx	r3
 8008106:	3601      	adds	r6, #1
 8008108:	e7ee      	b.n	80080e8 <__libc_init_array+0xc>
 800810a:	f855 3b04 	ldr.w	r3, [r5], #4
 800810e:	4798      	blx	r3
 8008110:	3601      	adds	r6, #1
 8008112:	e7f2      	b.n	80080fa <__libc_init_array+0x1e>
 8008114:	0800817c 	.word	0x0800817c
 8008118:	0800817c 	.word	0x0800817c
 800811c:	0800817c 	.word	0x0800817c
 8008120:	08008180 	.word	0x08008180

08008124 <_init>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr

08008130 <_fini>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr
