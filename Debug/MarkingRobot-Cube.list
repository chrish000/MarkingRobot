
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080080b8  080080b8  000090b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080f0  080080f0  000090f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080f8  080080f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080080fc  080080fc  000090fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  08008100  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d4  24000014  08008114  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001e8  08008114  0000a1e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000167dc  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a7d  00000000  00000000  0002081e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001180  00000000  00000000  000232a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000daf  00000000  00000000  00024420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000032ce  00000000  00000000  000251cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018f5b  00000000  00000000  0002849d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c687  00000000  00000000  000413f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018da7f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a10  00000000  00000000  0018dac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001924d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080080a0 	.word	0x080080a0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	080080a0 	.word	0x080080a0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000600:	f000 faea 	bl	8000bd8 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000604:	f000 fdf8 	bl	80011f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000608:	f000 f83a 	bl	8000680 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800060c:	f000 f9e4 	bl	80009d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000610:	f000 f992 	bl	8000938 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8000614:	f000 f8a4 	bl	8000760 <MX_CRC_Init>
	MX_UART8_Init();
 8000618:	f000 f93e 	bl	8000898 <MX_UART8_Init>
	MX_TIM2_Init();
 800061c:	f000 f8c2 	bl	80007a4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000620:	4811      	ldr	r0, [pc, #68]	@ (8000668 <main+0x6c>)
 8000622:	f004 fdef 	bl	8005204 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000626:	2200      	movs	r2, #0
 8000628:	2140      	movs	r1, #64	@ 0x40
 800062a:	4810      	ldr	r0, [pc, #64]	@ (800066c <main+0x70>)
 800062c:	f001 fffc 	bl	8002628 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET); //Direction-Pin von Treiber X setzen
 8000630:	2201      	movs	r2, #1
 8000632:	2108      	movs	r1, #8
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <main+0x70>)
 8000636:	f001 fff7 	bl	8002628 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(BatteryAlarm)
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <main+0x74>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d007      	beq.n	8000654 <main+0x58>
		{
			//TODO gebe leeren Batteriestand auf Display aus
			if(Move_To_Pos(HomePos))
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <main+0x78>)
 8000646:	f000 fb61 	bl	8000d0c <Move_To_Pos>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <main+0x58>
				Error_Handler();
 8000650:	f000 faee 	bl	8000c30 <Error_Handler>
		}
		Move_Linear(50);
 8000654:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000678 <main+0x7c>
 8000658:	f000 fb78 	bl	8000d4c <Move_Linear>
		Move_Linear(-50);
 800065c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800067c <main+0x80>
 8000660:	f000 fb74 	bl	8000d4c <Move_Linear>
		if(BatteryAlarm)
 8000664:	e7e9      	b.n	800063a <main+0x3e>
 8000666:	bf00      	nop
 8000668:	24000054 	.word	0x24000054
 800066c:	58020c00 	.word	0x58020c00
 8000670:	240001c8 	.word	0x240001c8
 8000674:	240001cc 	.word	0x240001cc
 8000678:	42480000 	.word	0x42480000
 800067c:	c2480000 	.word	0xc2480000

08000680 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	@ 0x70
 8000684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068a:	224c      	movs	r2, #76	@ 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fcda 	bl	8008048 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f007 fcd4 	bl	8008048 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f001 fff5 	bl	8002690 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <SystemClock_Config+0xdc>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a2b      	ldr	r2, [pc, #172]	@ (800075c <SystemClock_Config+0xdc>)
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b29      	ldr	r3, [pc, #164]	@ (800075c <SystemClock_Config+0xdc>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c2:	bf00      	nop
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xdc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d0:	d1f8      	bne.n	80006c4 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	2300      	movs	r3, #0
 80006e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 80006ea:	2322      	movs	r3, #34	@ 0x22
 80006ec:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80006f2:	2303      	movs	r3, #3
 80006f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fa:	230c      	movs	r3, #12
 80006fc:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000702:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000706:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fff9 	bl	8002704 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000718:	f000 fa8a 	bl	8000c30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	233f      	movs	r3, #63	@ 0x3f
 800071e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000728:	2308      	movs	r3, #8
 800072a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072c:	2340      	movs	r3, #64	@ 0x40
 800072e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000730:	2340      	movs	r3, #64	@ 0x40
 8000732:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000738:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073a:	2340      	movs	r3, #64	@ 0x40
 800073c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2103      	movs	r1, #3
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fbb8 	bl	8002eb8 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800074e:	f000 fa6f 	bl	8000c30 <Error_Handler>
	}
}
 8000752:	bf00      	nop
 8000754:	3770      	adds	r7, #112	@ 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	58024800 	.word	0x58024800

08000760 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <MX_CRC_Init+0x3c>)
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <MX_CRC_Init+0x40>)
 8000768:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_CRC_Init+0x3c>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <MX_CRC_Init+0x3c>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_CRC_Init+0x3c>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <MX_CRC_Init+0x3c>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_CRC_Init+0x3c>)
 8000784:	2201      	movs	r2, #1
 8000786:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_CRC_Init+0x3c>)
 800078a:	f000 ff4f 	bl	800162c <HAL_CRC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8000794:	f000 fa4c 	bl	8000c30 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000030 	.word	0x24000030
 80007a0:	58024c00 	.word	0x58024c00

080007a4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	@ 0x38
 80007a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_TIM2_Init+0xec>)
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007dc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 275;
 80007de:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_TIM2_Init+0xec>)
 80007e0:	f240 1213 	movw	r2, #275	@ 0x113
 80007e4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_TIM2_Init+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = StepFrequency-1;
 80007ec:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_TIM2_Init+0xf0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	3b01      	subs	r3, #1
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_TIM2_Init+0xec>)
 80007f8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_TIM2_Init+0xec>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <MX_TIM2_Init+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000806:	4822      	ldr	r0, [pc, #136]	@ (8000890 <MX_TIM2_Init+0xec>)
 8000808:	f004 fca4 	bl	8005154 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000812:	f000 fa0d 	bl	8000c30 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000820:	4619      	mov	r1, r3
 8000822:	481b      	ldr	r0, [pc, #108]	@ (8000890 <MX_TIM2_Init+0xec>)
 8000824:	f004 fff0 	bl	8005808 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 800082e:	f000 f9ff 	bl	8000c30 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000832:	4817      	ldr	r0, [pc, #92]	@ (8000890 <MX_TIM2_Init+0xec>)
 8000834:	f004 fd6c 	bl	8005310 <HAL_TIM_PWM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 800083e:	f000 f9f7 	bl	8000c30 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480f      	ldr	r0, [pc, #60]	@ (8000890 <MX_TIM2_Init+0xec>)
 8000852:	f005 fd1f 	bl	8006294 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0xbc>
	{
		Error_Handler();
 800085c:	f000 f9e8 	bl	8000c30 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	@ 0x60
 8000862:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_TIM2_Init+0xec>)
 8000878:	f004 feb2 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0xe2>
	{
		Error_Handler();
 8000882:	f000 f9d5 	bl	8000c30 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3738      	adds	r7, #56	@ 0x38
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	24000054 	.word	0x24000054
 8000894:	24000002 	.word	0x24000002

08000898 <MX_UART8_Init>:
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_UART8_Init+0x98>)
 800089e:	4a25      	ldr	r2, [pc, #148]	@ (8000934 <MX_UART8_Init+0x9c>)
 80008a0:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <MX_UART8_Init+0x98>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_UART8_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_UART8_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <MX_UART8_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_UART8_Init+0x98>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_UART8_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_UART8_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_UART8_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_UART8_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_UART8_Init+0x98>)
 80008dc:	2280      	movs	r2, #128	@ 0x80
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
	huart8.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_UART8_Init+0x98>)
 80008e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008e6:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	@ (8000930 <MX_UART8_Init+0x98>)
 80008ea:	f005 fd8d 	bl	8006408 <HAL_HalfDuplex_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_UART8_Init+0x60>
	{
		Error_Handler();
 80008f4:	f000 f99c 	bl	8000c30 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_UART8_Init+0x98>)
 80008fc:	f007 fada 	bl	8007eb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_UART8_Init+0x72>
	{
		Error_Handler();
 8000906:	f000 f993 	bl	8000c30 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_UART8_Init+0x98>)
 800090e:	f007 fb0f 	bl	8007f30 <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_UART8_Init+0x84>
	{
		Error_Handler();
 8000918:	f000 f98a 	bl	8000c30 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_UART8_Init+0x98>)
 800091e:	f007 fa90 	bl	8007e42 <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_UART8_Init+0x94>
	{
		Error_Handler();
 8000928:	f000 f982 	bl	8000c30 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000a0 	.word	0x240000a0
 8000934:	40007c00 	.word	0x40007c00

08000938 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800093c:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800093e:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <MX_USART2_UART_Init+0x9c>)
 8000940:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000942:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800097c:	2280      	movs	r2, #128	@ 0x80
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
	huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 8000982:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000986:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800098a:	f005 fd3d 	bl	8006408 <HAL_HalfDuplex_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 8000994:	f000 f94c 	bl	8000c30 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 800099c:	f007 fa8a 	bl	8007eb4 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 80009a6:	f000 f943 	bl	8000c30 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 80009ae:	f007 fabf 	bl	8007f30 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80009b8:	f000 f93a 	bl	8000c30 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_USART2_UART_Init+0x98>)
 80009be:	f007 fa40 	bl	8007e42 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 80009c8:	f000 f932 	bl	8000c30 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000134 	.word	0x24000134
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	4b52      	ldr	r3, [pc, #328]	@ (8000b38 <MX_GPIO_Init+0x160>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	4a50      	ldr	r2, [pc, #320]	@ (8000b38 <MX_GPIO_Init+0x160>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	4a49      	ldr	r2, [pc, #292]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1c:	4b46      	ldr	r3, [pc, #280]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b43      	ldr	r3, [pc, #268]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	4a41      	ldr	r2, [pc, #260]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b3b      	ldr	r3, [pc, #236]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a58:	4b37      	ldr	r3, [pc, #220]	@ (8000b38 <MX_GPIO_Init+0x160>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	210c      	movs	r1, #12
 8000a6a:	4834      	ldr	r0, [pc, #208]	@ (8000b3c <MX_GPIO_Init+0x164>)
 8000a6c:	f001 fddc 	bl	8002628 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2118      	movs	r1, #24
 8000a74:	4832      	ldr	r0, [pc, #200]	@ (8000b40 <MX_GPIO_Init+0x168>)
 8000a76:	f001 fdd7 	bl	8002628 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2140      	movs	r1, #64	@ 0x40
 8000a7e:	4830      	ldr	r0, [pc, #192]	@ (8000b40 <MX_GPIO_Init+0x168>)
 8000a80:	f001 fdd2 	bl	8002628 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2108      	movs	r1, #8
 8000a88:	482e      	ldr	r0, [pc, #184]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000a8a:	f001 fdcd 	bl	8002628 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2101      	movs	r1, #1
 8000a92:	482a      	ldr	r0, [pc, #168]	@ (8000b3c <MX_GPIO_Init+0x164>)
 8000a94:	f001 fdc8 	bl	8002628 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 8000a98:	230d      	movs	r3, #13
 8000a9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4823      	ldr	r0, [pc, #140]	@ (8000b3c <MX_GPIO_Init+0x164>)
 8000ab0:	f001 fc12 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8000ab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ab8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000abe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481f      	ldr	r0, [pc, #124]	@ (8000b48 <MX_GPIO_Init+0x170>)
 8000acc:	f001 fc04 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4819      	ldr	r0, [pc, #100]	@ (8000b48 <MX_GPIO_Init+0x170>)
 8000ae4:	f001 fbf8 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000ae8:	2358      	movs	r3, #88	@ 0x58
 8000aea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4810      	ldr	r0, [pc, #64]	@ (8000b40 <MX_GPIO_Init+0x168>)
 8000b00:	f001 fbea 	bl	80022d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000b04:	2308      	movs	r3, #8
 8000b06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <MX_GPIO_Init+0x16c>)
 8000b1c:	f001 fbdc 	bl	80022d8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2028      	movs	r0, #40	@ 0x28
 8000b26:	f000 fcd4 	bl	80014d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b2a:	2028      	movs	r0, #40	@ 0x28
 8000b2c:	f000 fceb 	bl	8001506 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	@ 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58021000 	.word	0x58021000
 8000b40:	58020c00 	.word	0x58020c00
 8000b44:	58020400 	.word	0x58020400
 8000b48:	58020800 	.word	0x58020800

08000b4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b5c:	d102      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0x18>
	{
		BatteryAlarm = true;
 8000b5e:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
	}
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	240001c8 	.word	0x240001c8

08000b74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b84:	d11c      	bne.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		if (PWMEnabledX)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d017      	beq.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			PWMStepX++;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b98:	6013      	str	r3, [r2, #0]
			if (PWMStepX < PWMPulseWidth)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dd05      	ble.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x42>
			{
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2110      	movs	r1, #16
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bb0:	f001 fd3a 	bl	8002628 <HAL_GPIO_WritePin>
			{
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
			}
		}
	}
}
 8000bb4:	e004      	b.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x4c>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bbc:	f001 fd34 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	240001e0 	.word	0x240001e0
 8000bcc:	240001d8 	.word	0x240001d8
 8000bd0:	24000000 	.word	0x24000000
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000bea:	f000 fca7 	bl	800153c <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bfa:	231f      	movs	r3, #31
 8000bfc:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000bfe:	2387      	movs	r3, #135	@ 0x87
 8000c00:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c06:	2300      	movs	r3, #0
 8000c08:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 fcc5 	bl	80015ac <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c22:	2004      	movs	r0, #4
 8000c24:	f000 fca2 	bl	800156c <HAL_MPU_Enable>

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <Error_Handler+0x8>

08000c3c <Step_X>:
 *      Author: chris
 */
#include "main.h"

void Step_X(uint32_t StepCount, uint8_t Dir)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
	PWMStepX = 0;
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <Step_X+0x5c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
	if(Dir == 1) //Vorwärts
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <Step_X+0x24>
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2108      	movs	r1, #8
 8000c58:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <Step_X+0x60>)
 8000c5a:	f001 fce5 	bl	8002628 <HAL_GPIO_WritePin>
 8000c5e:	e007      	b.n	8000c70 <Step_X+0x34>
	else if(Dir == 0) //Rüchwärts
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d104      	bne.n	8000c70 <Step_X+0x34>
		HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <Step_X+0x60>)
 8000c6c:	f001 fcdc 	bl	8002628 <HAL_GPIO_WritePin>
	PWMEnabledX = true; //Bewegung starten
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <Step_X+0x64>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
	if (PWMStepX == StepCount) //Wenn Schrittzahl erreicht
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <Step_X+0x5c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d107      	bne.n	8000c90 <Step_X+0x54>
	{
		PWMEnabledX = false; //Bewegung beenden
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Step_X+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET); // X-STEP Pin auf LOW setzen
 8000c86:	2200      	movs	r2, #0
 8000c88:	2110      	movs	r1, #16
 8000c8a:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <Step_X+0x60>)
 8000c8c:	f001 fccc 	bl	8002628 <HAL_GPIO_WritePin>
	}
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	240001d8 	.word	0x240001d8
 8000c9c:	58020c00 	.word	0x58020c00
 8000ca0:	240001e0 	.word	0x240001e0

08000ca4 <Step_Z>:

void Step_Z(uint32_t StepCount, uint8_t Dir)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
	PWMStepZ = 0;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <Step_Z+0x5c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
	if(Dir == 1) //Vorwärts
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d105      	bne.n	8000cc8 <Step_Z+0x24>
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4810      	ldr	r0, [pc, #64]	@ (8000d04 <Step_Z+0x60>)
 8000cc2:	f001 fcb1 	bl	8002628 <HAL_GPIO_WritePin>
 8000cc6:	e007      	b.n	8000cd8 <Step_Z+0x34>
	else if(Dir == 0) //Rüchwärts
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d104      	bne.n	8000cd8 <Step_Z+0x34>
		HAL_GPIO_WritePin(Z_DIR_GPIO_Port, Z_DIR_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <Step_Z+0x60>)
 8000cd4:	f001 fca8 	bl	8002628 <HAL_GPIO_WritePin>
	PWMEnabledZ = true; //Bewegung starten
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <Step_Z+0x64>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
	if (PWMStepZ == StepCount) //Wenn Schrittzahl erreicht
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <Step_Z+0x5c>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d107      	bne.n	8000cf8 <Step_Z+0x54>
	{
		PWMEnabledZ = false; //Bewegung beenden
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Step_Z+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Z_STEP_GPIO_Port, Z_STEP_Pin, GPIO_PIN_RESET); // Z-STEP Pin auf LOW setzen
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	4804      	ldr	r0, [pc, #16]	@ (8000d04 <Step_Z+0x60>)
 8000cf4:	f001 fc98 	bl	8002628 <HAL_GPIO_WritePin>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	240001dc 	.word	0x240001dc
 8000d04:	58021000 	.word	0x58021000
 8000d08:	240001e1 	.word	0x240001e1

08000d0c <Move_To_Pos>:

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if(NextPosition[0] != PosX && NextPosition[1] != PosY)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <Move_To_Pos+0x38>)
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d001      	beq.n	8000d34 <Move_To_Pos+0x28>
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <Move_To_Pos+0x3c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
	{
		//TODO Logik für Bewegung zu nächstem Punkt
	}
	return true;
 8000d34:	2301      	movs	r3, #1
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	240001d0 	.word	0x240001d0
 8000d48:	240001d4 	.word	0x240001d4

08000d4c <Move_Linear>:

uint8_t Move_Linear(float Distance)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	ed87 0a01 	vstr	s0, [r7, #4]
    if (Distance != 0) //Prüfen ob Distanz nicht 0 ist
 8000d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d62:	d01f      	beq.n	8000da4 <Move_Linear+0x58>
    {
        uint32_t steps = (uint32_t)(Distance * StepsPerMM); //Schritte berechnen
 8000d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d68:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000db0 <Move_Linear+0x64>
 8000d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d74:	ee17 3a90 	vmov	r3, s15
 8000d78:	60fb      	str	r3, [r7, #12]
        uint8_t direction = (Distance > 0) ? 1 : 0; //Richtung bestimmen
 8000d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d86:	bfcc      	ite	gt
 8000d88:	2301      	movgt	r3, #1
 8000d8a:	2300      	movle	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	72fb      	strb	r3, [r7, #11]

        Step_X(steps, direction);
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	4619      	mov	r1, r3
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff ff51 	bl	8000c3c <Step_X>
        Step_Z(steps, direction);
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f7ff ff80 	bl	8000ca4 <Step_Z>
    }
    return true;
 8000da4:	2301      	movs	r3, #1
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	42c80000 	.word	0x42c80000

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc0:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	58024400 	.word	0x58024400

08000de8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <HAL_CRC_MspInit+0x3c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10e      	bne.n	8000e18 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_CRC_MspInit+0x40>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <HAL_CRC_MspInit+0x40>)
 8000e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <HAL_CRC_MspInit+0x40>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	58024c00 	.word	0x58024c00
 8000e28:	58024400 	.word	0x58024400

08000e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e3c:	d116      	bne.n	8000e6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <HAL_TIM_Base_MspInit+0x48>)
 8000e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <HAL_TIM_Base_MspInit+0x48>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	201c      	movs	r0, #28
 8000e62:	f000 fb36 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e66:	201c      	movs	r0, #28
 8000e68:	f000 fb4d 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	22b8      	movs	r2, #184	@ 0xb8
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 f8d5 	bl	8008048 <memset>
  if(huart->Instance==UART8)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a54      	ldr	r2, [pc, #336]	@ (8000ff4 <HAL_UART_MspInit+0x17c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d14e      	bne.n	8000f46 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ea8:	f04f 0202 	mov.w	r2, #2
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fb86 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eca:	f7ff feb1 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000ece:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed4:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000ed6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000eda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ede:	4b46      	ldr	r3, [pc, #280]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eec:	4b42      	ldr	r3, [pc, #264]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a41      	ldr	r2, [pc, #260]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000f22:	2308      	movs	r3, #8
 8000f24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4833      	ldr	r0, [pc, #204]	@ (8000ffc <HAL_UART_MspInit+0x184>)
 8000f30:	f001 f9d2 	bl	80022d8 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2053      	movs	r0, #83	@ 0x53
 8000f3a:	f000 faca 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000f3e:	2053      	movs	r0, #83	@ 0x53
 8000f40:	f000 fae1 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f44:	e052      	b.n	8000fec <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <HAL_UART_MspInit+0x188>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d14d      	bne.n	8000fec <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f50:	f04f 0202 	mov.w	r2, #2
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fb32 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000f72:	f7ff fe5d 	bl	8000c30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_UART_MspInit+0x180>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000faa:	f003 0308 	and.w	r3, r3, #8
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8000fb2:	2320      	movs	r3, #32
 8000fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480b      	ldr	r0, [pc, #44]	@ (8001004 <HAL_UART_MspInit+0x18c>)
 8000fd8:	f001 f97e 	bl	80022d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2026      	movs	r0, #38	@ 0x26
 8000fe2:	f000 fa76 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe6:	2026      	movs	r0, #38	@ 0x26
 8000fe8:	f000 fa8d 	bl	8001506 <HAL_NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	37e8      	adds	r7, #232	@ 0xe8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40007c00 	.word	0x40007c00
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58021000 	.word	0x58021000
 8001000:	40004400 	.word	0x40004400
 8001004:	58020c00 	.word	0x58020c00

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 f93d 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <TIM2_IRQHandler+0x10>)
 800106e:	f004 f9b0 	bl	80053d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000054 	.word	0x24000054

0800107c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <USART2_IRQHandler+0x10>)
 8001082:	f005 fa19 	bl	80064b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000134 	.word	0x24000134

08001090 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001094:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001098:	f001 fadf 	bl	800265a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <UART8_IRQHandler+0x10>)
 80010a6:	f005 fa07 	bl	80064b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	240000a0 	.word	0x240000a0

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b8:	4b32      	ldr	r3, [pc, #200]	@ (8001184 <SystemInit+0xd0>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010be:	4a31      	ldr	r2, [pc, #196]	@ (8001184 <SystemInit+0xd0>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <SystemInit+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d807      	bhi.n	80010e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <SystemInit+0xd4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 030f 	bic.w	r3, r3, #15
 80010dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <SystemInit+0xd4>)
 80010de:	f043 0307 	orr.w	r3, r3, #7
 80010e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <SystemInit+0xd8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a28      	ldr	r2, [pc, #160]	@ (800118c <SystemInit+0xd8>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010f0:	4b26      	ldr	r3, [pc, #152]	@ (800118c <SystemInit+0xd8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <SystemInit+0xd8>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4924      	ldr	r1, [pc, #144]	@ (800118c <SystemInit+0xd8>)
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <SystemInit+0xdc>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <SystemInit+0xd4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <SystemInit+0xd4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 030f 	bic.w	r3, r3, #15
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <SystemInit+0xd4>)
 8001118:	f043 0307 	orr.w	r3, r3, #7
 800111c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800111e:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <SystemInit+0xd8>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <SystemInit+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <SystemInit+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <SystemInit+0xd8>)
 8001132:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <SystemInit+0xe0>)
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <SystemInit+0xd8>)
 8001138:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <SystemInit+0xe4>)
 800113a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <SystemInit+0xd8>)
 800113e:	4a17      	ldr	r2, [pc, #92]	@ (800119c <SystemInit+0xe8>)
 8001140:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001142:	4b12      	ldr	r3, [pc, #72]	@ (800118c <SystemInit+0xd8>)
 8001144:	2200      	movs	r2, #0
 8001146:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <SystemInit+0xd8>)
 800114a:	4a14      	ldr	r2, [pc, #80]	@ (800119c <SystemInit+0xe8>)
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <SystemInit+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <SystemInit+0xd8>)
 8001156:	4a11      	ldr	r2, [pc, #68]	@ (800119c <SystemInit+0xe8>)
 8001158:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <SystemInit+0xd8>)
 800115c:	2200      	movs	r2, #0
 800115e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001160:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <SystemInit+0xd8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <SystemInit+0xd8>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800116a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <SystemInit+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <SystemInit+0xec>)
 8001174:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001178:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	52002000 	.word	0x52002000
 800118c:	58024400 	.word	0x58024400
 8001190:	eaf6ed7f 	.word	0xeaf6ed7f
 8001194:	02020200 	.word	0x02020200
 8001198:	01ff0000 	.word	0x01ff0000
 800119c:	01010280 	.word	0x01010280
 80011a0:	52004000 	.word	0x52004000

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a8:	f7ff ff84 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f006 ff41 	bl	8008058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fa11 	bl	80005fc <main>
  bx  lr
 80011da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011e4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80011e8:	08008100 	.word	0x08008100
  ldr r2, =_sbss
 80011ec:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80011f0:	240001e8 	.word	0x240001e8

080011f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC3_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f95c 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001204:	f002 f80e 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8001208:	4602      	mov	r2, r0
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	4913      	ldr	r1, [pc, #76]	@ (8001264 <HAL_Init+0x6c>)
 8001216:	5ccb      	ldrb	r3, [r1, r3]
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_Init+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <HAL_Init+0x6c>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <HAL_Init+0x70>)
 800123a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800123c:	4a0b      	ldr	r2, [pc, #44]	@ (800126c <HAL_Init+0x74>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f814 	bl	8001270 <HAL_InitTick>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e002      	b.n	8001258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001252:	f7ff fdaf 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58024400 	.word	0x58024400
 8001264:	080080b8 	.word	0x080080b8
 8001268:	24000008 	.word	0x24000008
 800126c:	24000004 	.word	0x24000004

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <HAL_InitTick+0x60>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e021      	b.n	80012c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <HAL_InitTick+0x64>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <HAL_InitTick+0x60>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f941 	bl	8001522 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f90b 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_InitTick+0x68>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	24000010 	.word	0x24000010
 80012d4:	24000004 	.word	0x24000004
 80012d8:	2400000c 	.word	0x2400000c

080012dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	24000010 	.word	0x24000010
 8001300:	240001e4 	.word	0x240001e4

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	240001e4 	.word	0x240001e4

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001346:	4313      	orrs	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <__NVIC_SetPriorityGrouping+0x40>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00
 8001360:	05fa0000 	.word	0x05fa0000

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff40 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa4 	bl	8001478 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001540:	f3bf 8f5f 	dmb	sy
}
 8001544:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <HAL_MPU_Disable+0x28>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	4a06      	ldr	r2, [pc, #24]	@ (8001564 <HAL_MPU_Disable+0x28>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001550:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001552:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_MPU_Disable+0x2c>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	e000ed90 	.word	0xe000ed90

0800156c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001574:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_MPU_Enable+0x38>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_MPU_Enable+0x3c>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_MPU_Enable+0x3c>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001588:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800158a:	f3bf 8f4f 	dsb	sy
}
 800158e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001590:	f3bf 8f6f 	isb	sy
}
 8001594:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed90 	.word	0xe000ed90
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	785a      	ldrb	r2, [r3, #1]
 80015b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015c8:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7b1b      	ldrb	r3, [r3, #12]
 80015d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7adb      	ldrb	r3, [r3, #11]
 80015da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7a9b      	ldrb	r3, [r3, #10]
 80015e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7b5b      	ldrb	r3, [r3, #13]
 80015ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7b9b      	ldrb	r3, [r3, #14]
 80015f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7bdb      	ldrb	r3, [r3, #15]
 80015fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	7a5b      	ldrb	r3, [r3, #9]
 8001602:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001604:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7a1b      	ldrb	r3, [r3, #8]
 800160a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800160c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001616:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001618:	6113      	str	r3, [r2, #16]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed90 	.word	0xe000ed90

0800162c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e054      	b.n	80016e8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7f5b      	ldrb	r3, [r3, #29]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fbca 	bl	8000de8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <HAL_CRC_Init+0xc4>)
 8001668:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0218 	bic.w	r2, r2, #24
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	e00c      	b.n	8001696 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	461a      	mov	r2, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f834 	bl	80016f4 <HAL_CRCEx_Polynomial_Set>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e028      	b.n	80016e8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	795b      	ldrb	r3, [r3, #5]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f04f 32ff 	mov.w	r2, #4294967295
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	e004      	b.n	80016b4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6912      	ldr	r2, [r2, #16]
 80016b2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	04c11db7 	.word	0x04c11db7

080016f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001704:	231f      	movs	r3, #31
 8001706:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	e063      	b.n	80017e0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001718:	bf00      	nop
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1e5a      	subs	r2, r3, #1
 800171e:	613a      	str	r2, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_CRCEx_Polynomial_Set+0x44>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b18      	cmp	r3, #24
 800173c:	d846      	bhi.n	80017cc <HAL_CRCEx_Polynomial_Set+0xd8>
 800173e:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017cd 	.word	0x080017cd
 800174c:	080017cd 	.word	0x080017cd
 8001750:	080017cd 	.word	0x080017cd
 8001754:	080017cd 	.word	0x080017cd
 8001758:	080017cd 	.word	0x080017cd
 800175c:	080017cd 	.word	0x080017cd
 8001760:	080017cd 	.word	0x080017cd
 8001764:	080017c1 	.word	0x080017c1
 8001768:	080017cd 	.word	0x080017cd
 800176c:	080017cd 	.word	0x080017cd
 8001770:	080017cd 	.word	0x080017cd
 8001774:	080017cd 	.word	0x080017cd
 8001778:	080017cd 	.word	0x080017cd
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017cd 	.word	0x080017cd
 8001784:	080017b5 	.word	0x080017b5
 8001788:	080017cd 	.word	0x080017cd
 800178c:	080017cd 	.word	0x080017cd
 8001790:	080017cd 	.word	0x080017cd
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017cd 	.word	0x080017cd
 800179c:	080017cd 	.word	0x080017cd
 80017a0:	080017cd 	.word	0x080017cd
 80017a4:	080017a9 	.word	0x080017a9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d913      	bls.n	80017d6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017b2:	e010      	b.n	80017d6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	2b07      	cmp	r3, #7
 80017b8:	d90f      	bls.n	80017da <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017be:	e00c      	b.n	80017da <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	d90b      	bls.n	80017de <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80017ca:	e008      	b.n	80017de <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	75fb      	strb	r3, [r7, #23]
        break;
 80017d0:	e006      	b.n	80017e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017d2:	bf00      	nop
 80017d4:	e004      	b.n	80017e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017d6:	bf00      	nop
 80017d8:	e002      	b.n	80017e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017da:	bf00      	nop
 80017dc:	e000      	b.n	80017e0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80017de:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10d      	bne.n	8001802 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 0118 	bic.w	r1, r3, #24
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fd74 	bl	8001304 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e2dc      	b.n	8001de2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d008      	beq.n	8001846 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2280      	movs	r2, #128	@ 0x80
 8001838:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e2cd      	b.n	8001de2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a76      	ldr	r2, [pc, #472]	@ (8001a24 <HAL_DMA_Abort+0x214>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04a      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a74      	ldr	r2, [pc, #464]	@ (8001a28 <HAL_DMA_Abort+0x218>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d045      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a73      	ldr	r2, [pc, #460]	@ (8001a2c <HAL_DMA_Abort+0x21c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d040      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a71      	ldr	r2, [pc, #452]	@ (8001a30 <HAL_DMA_Abort+0x220>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d03b      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a70      	ldr	r2, [pc, #448]	@ (8001a34 <HAL_DMA_Abort+0x224>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d036      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a38 <HAL_DMA_Abort+0x228>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d031      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6d      	ldr	r2, [pc, #436]	@ (8001a3c <HAL_DMA_Abort+0x22c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d02c      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a6b      	ldr	r2, [pc, #428]	@ (8001a40 <HAL_DMA_Abort+0x230>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d027      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a44 <HAL_DMA_Abort+0x234>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a68      	ldr	r2, [pc, #416]	@ (8001a48 <HAL_DMA_Abort+0x238>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01d      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a67      	ldr	r2, [pc, #412]	@ (8001a4c <HAL_DMA_Abort+0x23c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d018      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a65      	ldr	r2, [pc, #404]	@ (8001a50 <HAL_DMA_Abort+0x240>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a64      	ldr	r2, [pc, #400]	@ (8001a54 <HAL_DMA_Abort+0x244>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a62      	ldr	r2, [pc, #392]	@ (8001a58 <HAL_DMA_Abort+0x248>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d009      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a61      	ldr	r2, [pc, #388]	@ (8001a5c <HAL_DMA_Abort+0x24c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d004      	beq.n	80018e6 <HAL_DMA_Abort+0xd6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a60 <HAL_DMA_Abort+0x250>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_DMA_Abort+0xda>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_DMA_Abort+0xdc>
 80018ea:	2300      	movs	r3, #0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 021e 	bic.w	r2, r2, #30
 80018fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800190e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e00a      	b.n	800192e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 020e 	bic.w	r2, r2, #14
 8001926:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3c      	ldr	r2, [pc, #240]	@ (8001a24 <HAL_DMA_Abort+0x214>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d072      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a28 <HAL_DMA_Abort+0x218>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d06d      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a39      	ldr	r2, [pc, #228]	@ (8001a2c <HAL_DMA_Abort+0x21c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d068      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a37      	ldr	r2, [pc, #220]	@ (8001a30 <HAL_DMA_Abort+0x220>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d063      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a36      	ldr	r2, [pc, #216]	@ (8001a34 <HAL_DMA_Abort+0x224>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d05e      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a34      	ldr	r2, [pc, #208]	@ (8001a38 <HAL_DMA_Abort+0x228>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d059      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a33      	ldr	r2, [pc, #204]	@ (8001a3c <HAL_DMA_Abort+0x22c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d054      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a31      	ldr	r2, [pc, #196]	@ (8001a40 <HAL_DMA_Abort+0x230>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d04f      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a30      	ldr	r2, [pc, #192]	@ (8001a44 <HAL_DMA_Abort+0x234>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04a      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a2e      	ldr	r2, [pc, #184]	@ (8001a48 <HAL_DMA_Abort+0x238>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d045      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2d      	ldr	r2, [pc, #180]	@ (8001a4c <HAL_DMA_Abort+0x23c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d040      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001a50 <HAL_DMA_Abort+0x240>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d03b      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001a54 <HAL_DMA_Abort+0x244>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d036      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a28      	ldr	r2, [pc, #160]	@ (8001a58 <HAL_DMA_Abort+0x248>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d031      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <HAL_DMA_Abort+0x24c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d02c      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_DMA_Abort+0x250>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d027      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a24      	ldr	r2, [pc, #144]	@ (8001a64 <HAL_DMA_Abort+0x254>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d022      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a22      	ldr	r2, [pc, #136]	@ (8001a68 <HAL_DMA_Abort+0x258>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d01d      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_DMA_Abort+0x25c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d018      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <HAL_DMA_Abort+0x260>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a74 <HAL_DMA_Abort+0x264>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d00e      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <HAL_DMA_Abort+0x268>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d009      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <HAL_DMA_Abort+0x26c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d004      	beq.n	8001a1e <HAL_DMA_Abort+0x20e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a19      	ldr	r2, [pc, #100]	@ (8001a80 <HAL_DMA_Abort+0x270>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d132      	bne.n	8001a84 <HAL_DMA_Abort+0x274>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e031      	b.n	8001a86 <HAL_DMA_Abort+0x276>
 8001a22:	bf00      	nop
 8001a24:	40020010 	.word	0x40020010
 8001a28:	40020028 	.word	0x40020028
 8001a2c:	40020040 	.word	0x40020040
 8001a30:	40020058 	.word	0x40020058
 8001a34:	40020070 	.word	0x40020070
 8001a38:	40020088 	.word	0x40020088
 8001a3c:	400200a0 	.word	0x400200a0
 8001a40:	400200b8 	.word	0x400200b8
 8001a44:	40020410 	.word	0x40020410
 8001a48:	40020428 	.word	0x40020428
 8001a4c:	40020440 	.word	0x40020440
 8001a50:	40020458 	.word	0x40020458
 8001a54:	40020470 	.word	0x40020470
 8001a58:	40020488 	.word	0x40020488
 8001a5c:	400204a0 	.word	0x400204a0
 8001a60:	400204b8 	.word	0x400204b8
 8001a64:	58025408 	.word	0x58025408
 8001a68:	5802541c 	.word	0x5802541c
 8001a6c:	58025430 	.word	0x58025430
 8001a70:	58025444 	.word	0x58025444
 8001a74:	58025458 	.word	0x58025458
 8001a78:	5802546c 	.word	0x5802546c
 8001a7c:	58025480 	.word	0x58025480
 8001a80:	58025494 	.word	0x58025494
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a98:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8001c54 <HAL_DMA_Abort+0x444>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8001c58 <HAL_DMA_Abort+0x448>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a6a      	ldr	r2, [pc, #424]	@ (8001c5c <HAL_DMA_Abort+0x44c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a68      	ldr	r2, [pc, #416]	@ (8001c60 <HAL_DMA_Abort+0x450>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a67      	ldr	r2, [pc, #412]	@ (8001c64 <HAL_DMA_Abort+0x454>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a65      	ldr	r2, [pc, #404]	@ (8001c68 <HAL_DMA_Abort+0x458>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a64      	ldr	r2, [pc, #400]	@ (8001c6c <HAL_DMA_Abort+0x45c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a62      	ldr	r2, [pc, #392]	@ (8001c70 <HAL_DMA_Abort+0x460>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a61      	ldr	r2, [pc, #388]	@ (8001c74 <HAL_DMA_Abort+0x464>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c78 <HAL_DMA_Abort+0x468>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5e      	ldr	r2, [pc, #376]	@ (8001c7c <HAL_DMA_Abort+0x46c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <HAL_DMA_Abort+0x470>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a5b      	ldr	r2, [pc, #364]	@ (8001c84 <HAL_DMA_Abort+0x474>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a59      	ldr	r2, [pc, #356]	@ (8001c88 <HAL_DMA_Abort+0x478>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <HAL_DMA_Abort+0x47c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Abort+0x32a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a56      	ldr	r2, [pc, #344]	@ (8001c90 <HAL_DMA_Abort+0x480>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <HAL_DMA_Abort+0x33c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_DMA_Abort+0x34c>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b5c:	e013      	b.n	8001b86 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5e:	f7ff fbd1 	bl	8001304 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d90c      	bls.n	8001b86 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e12d      	b.n	8001de2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e5      	bne.n	8001b5e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <HAL_DMA_Abort+0x444>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04a      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_DMA_Abort+0x448>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d045      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a2c      	ldr	r2, [pc, #176]	@ (8001c5c <HAL_DMA_Abort+0x44c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d040      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c60 <HAL_DMA_Abort+0x450>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d03b      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <HAL_DMA_Abort+0x454>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d036      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a27      	ldr	r2, [pc, #156]	@ (8001c68 <HAL_DMA_Abort+0x458>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a26      	ldr	r2, [pc, #152]	@ (8001c6c <HAL_DMA_Abort+0x45c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d02c      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a24      	ldr	r2, [pc, #144]	@ (8001c70 <HAL_DMA_Abort+0x460>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d027      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_DMA_Abort+0x464>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a21      	ldr	r2, [pc, #132]	@ (8001c78 <HAL_DMA_Abort+0x468>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01d      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a20      	ldr	r2, [pc, #128]	@ (8001c7c <HAL_DMA_Abort+0x46c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d018      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_DMA_Abort+0x470>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_DMA_Abort+0x474>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_DMA_Abort+0x478>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d009      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_DMA_Abort+0x47c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_Abort+0x422>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	@ (8001c90 <HAL_DMA_Abort+0x480>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Abort+0x426>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_Abort+0x428>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d02b      	beq.n	8001c94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	223f      	movs	r2, #63	@ 0x3f
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	e02a      	b.n	8001caa <HAL_DMA_Abort+0x49a>
 8001c54:	40020010 	.word	0x40020010
 8001c58:	40020028 	.word	0x40020028
 8001c5c:	40020040 	.word	0x40020040
 8001c60:	40020058 	.word	0x40020058
 8001c64:	40020070 	.word	0x40020070
 8001c68:	40020088 	.word	0x40020088
 8001c6c:	400200a0 	.word	0x400200a0
 8001c70:	400200b8 	.word	0x400200b8
 8001c74:	40020410 	.word	0x40020410
 8001c78:	40020428 	.word	0x40020428
 8001c7c:	40020440 	.word	0x40020440
 8001c80:	40020458 	.word	0x40020458
 8001c84:	40020470 	.word	0x40020470
 8001c88:	40020488 	.word	0x40020488
 8001c8c:	400204a0 	.word	0x400204a0
 8001c90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a4f      	ldr	r2, [pc, #316]	@ (8001dec <HAL_DMA_Abort+0x5dc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d072      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	@ (8001df0 <HAL_DMA_Abort+0x5e0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d06d      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8001df4 <HAL_DMA_Abort+0x5e4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d068      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a4a      	ldr	r2, [pc, #296]	@ (8001df8 <HAL_DMA_Abort+0x5e8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d063      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a49      	ldr	r2, [pc, #292]	@ (8001dfc <HAL_DMA_Abort+0x5ec>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d05e      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a47      	ldr	r2, [pc, #284]	@ (8001e00 <HAL_DMA_Abort+0x5f0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d059      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <HAL_DMA_Abort+0x5f4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d054      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a44      	ldr	r2, [pc, #272]	@ (8001e08 <HAL_DMA_Abort+0x5f8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d04f      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a43      	ldr	r2, [pc, #268]	@ (8001e0c <HAL_DMA_Abort+0x5fc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d04a      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a41      	ldr	r2, [pc, #260]	@ (8001e10 <HAL_DMA_Abort+0x600>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d045      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <HAL_DMA_Abort+0x604>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d040      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e18 <HAL_DMA_Abort+0x608>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d03b      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3d      	ldr	r2, [pc, #244]	@ (8001e1c <HAL_DMA_Abort+0x60c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d036      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a3b      	ldr	r2, [pc, #236]	@ (8001e20 <HAL_DMA_Abort+0x610>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d031      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001e24 <HAL_DMA_Abort+0x614>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d02c      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a38      	ldr	r2, [pc, #224]	@ (8001e28 <HAL_DMA_Abort+0x618>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d027      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a37      	ldr	r2, [pc, #220]	@ (8001e2c <HAL_DMA_Abort+0x61c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d022      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a35      	ldr	r2, [pc, #212]	@ (8001e30 <HAL_DMA_Abort+0x620>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01d      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a34      	ldr	r2, [pc, #208]	@ (8001e34 <HAL_DMA_Abort+0x624>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a32      	ldr	r2, [pc, #200]	@ (8001e38 <HAL_DMA_Abort+0x628>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a31      	ldr	r2, [pc, #196]	@ (8001e3c <HAL_DMA_Abort+0x62c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <HAL_DMA_Abort+0x630>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d009      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <HAL_DMA_Abort+0x634>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_Abort+0x58a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <HAL_DMA_Abort+0x638>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_DMA_Abort+0x58e>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_Abort+0x590>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d015      	beq.n	8001dd0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001dac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00c      	beq.n	8001dd0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001dce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020010 	.word	0x40020010
 8001df0:	40020028 	.word	0x40020028
 8001df4:	40020040 	.word	0x40020040
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	40020070 	.word	0x40020070
 8001e00:	40020088 	.word	0x40020088
 8001e04:	400200a0 	.word	0x400200a0
 8001e08:	400200b8 	.word	0x400200b8
 8001e0c:	40020410 	.word	0x40020410
 8001e10:	40020428 	.word	0x40020428
 8001e14:	40020440 	.word	0x40020440
 8001e18:	40020458 	.word	0x40020458
 8001e1c:	40020470 	.word	0x40020470
 8001e20:	40020488 	.word	0x40020488
 8001e24:	400204a0 	.word	0x400204a0
 8001e28:	400204b8 	.word	0x400204b8
 8001e2c:	58025408 	.word	0x58025408
 8001e30:	5802541c 	.word	0x5802541c
 8001e34:	58025430 	.word	0x58025430
 8001e38:	58025444 	.word	0x58025444
 8001e3c:	58025458 	.word	0x58025458
 8001e40:	5802546c 	.word	0x5802546c
 8001e44:	58025480 	.word	0x58025480
 8001e48:	58025494 	.word	0x58025494

08001e4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e237      	b.n	80022ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e22c      	b.n	80022ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a5c      	ldr	r2, [pc, #368]	@ (8001fec <HAL_DMA_Abort_IT+0x1a0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d04a      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a5b      	ldr	r2, [pc, #364]	@ (8001ff0 <HAL_DMA_Abort_IT+0x1a4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d045      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a59      	ldr	r2, [pc, #356]	@ (8001ff4 <HAL_DMA_Abort_IT+0x1a8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d040      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a58      	ldr	r2, [pc, #352]	@ (8001ff8 <HAL_DMA_Abort_IT+0x1ac>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d03b      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a56      	ldr	r2, [pc, #344]	@ (8001ffc <HAL_DMA_Abort_IT+0x1b0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d036      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a55      	ldr	r2, [pc, #340]	@ (8002000 <HAL_DMA_Abort_IT+0x1b4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d031      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a53      	ldr	r2, [pc, #332]	@ (8002004 <HAL_DMA_Abort_IT+0x1b8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02c      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a52      	ldr	r2, [pc, #328]	@ (8002008 <HAL_DMA_Abort_IT+0x1bc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d027      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a50      	ldr	r2, [pc, #320]	@ (800200c <HAL_DMA_Abort_IT+0x1c0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a4f      	ldr	r2, [pc, #316]	@ (8002010 <HAL_DMA_Abort_IT+0x1c4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01d      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	@ (8002014 <HAL_DMA_Abort_IT+0x1c8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a4c      	ldr	r2, [pc, #304]	@ (8002018 <HAL_DMA_Abort_IT+0x1cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a4a      	ldr	r2, [pc, #296]	@ (800201c <HAL_DMA_Abort_IT+0x1d0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a49      	ldr	r2, [pc, #292]	@ (8002020 <HAL_DMA_Abort_IT+0x1d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a47      	ldr	r2, [pc, #284]	@ (8002024 <HAL_DMA_Abort_IT+0x1d8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_DMA_Abort_IT+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a46      	ldr	r2, [pc, #280]	@ (8002028 <HAL_DMA_Abort_IT+0x1dc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_Abort_IT+0xcc>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_DMA_Abort_IT+0xce>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8086 	beq.w	800202c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001fec <HAL_DMA_Abort_IT+0x1a0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d04a      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff0 <HAL_DMA_Abort_IT+0x1a4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d045      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <HAL_DMA_Abort_IT+0x1a8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d040      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff8 <HAL_DMA_Abort_IT+0x1ac>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d03b      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a29      	ldr	r2, [pc, #164]	@ (8001ffc <HAL_DMA_Abort_IT+0x1b0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d036      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a28      	ldr	r2, [pc, #160]	@ (8002000 <HAL_DMA_Abort_IT+0x1b4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d031      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a26      	ldr	r2, [pc, #152]	@ (8002004 <HAL_DMA_Abort_IT+0x1b8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d02c      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a25      	ldr	r2, [pc, #148]	@ (8002008 <HAL_DMA_Abort_IT+0x1bc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d027      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a23      	ldr	r2, [pc, #140]	@ (800200c <HAL_DMA_Abort_IT+0x1c0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d022      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_DMA_Abort_IT+0x1c4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d01d      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_DMA_Abort_IT+0x1c8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_DMA_Abort_IT+0x1cc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <HAL_DMA_Abort_IT+0x1d0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_DMA_Abort_IT+0x1d4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002024 <HAL_DMA_Abort_IT+0x1d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d004      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0x17c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_DMA_Abort_IT+0x1dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d108      	bne.n	8001fda <HAL_DMA_Abort_IT+0x18e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e178      	b.n	80022cc <HAL_DMA_Abort_IT+0x480>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e16f      	b.n	80022cc <HAL_DMA_Abort_IT+0x480>
 8001fec:	40020010 	.word	0x40020010
 8001ff0:	40020028 	.word	0x40020028
 8001ff4:	40020040 	.word	0x40020040
 8001ff8:	40020058 	.word	0x40020058
 8001ffc:	40020070 	.word	0x40020070
 8002000:	40020088 	.word	0x40020088
 8002004:	400200a0 	.word	0x400200a0
 8002008:	400200b8 	.word	0x400200b8
 800200c:	40020410 	.word	0x40020410
 8002010:	40020428 	.word	0x40020428
 8002014:	40020440 	.word	0x40020440
 8002018:	40020458 	.word	0x40020458
 800201c:	40020470 	.word	0x40020470
 8002020:	40020488 	.word	0x40020488
 8002024:	400204a0 	.word	0x400204a0
 8002028:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 020e 	bic.w	r2, r2, #14
 800203a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6c      	ldr	r2, [pc, #432]	@ (80021f4 <HAL_DMA_Abort_IT+0x3a8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d04a      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6b      	ldr	r2, [pc, #428]	@ (80021f8 <HAL_DMA_Abort_IT+0x3ac>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d045      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a69      	ldr	r2, [pc, #420]	@ (80021fc <HAL_DMA_Abort_IT+0x3b0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d040      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a68      	ldr	r2, [pc, #416]	@ (8002200 <HAL_DMA_Abort_IT+0x3b4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d03b      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a66      	ldr	r2, [pc, #408]	@ (8002204 <HAL_DMA_Abort_IT+0x3b8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d036      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a65      	ldr	r2, [pc, #404]	@ (8002208 <HAL_DMA_Abort_IT+0x3bc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d031      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a63      	ldr	r2, [pc, #396]	@ (800220c <HAL_DMA_Abort_IT+0x3c0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02c      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a62      	ldr	r2, [pc, #392]	@ (8002210 <HAL_DMA_Abort_IT+0x3c4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d027      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a60      	ldr	r2, [pc, #384]	@ (8002214 <HAL_DMA_Abort_IT+0x3c8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d022      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5f      	ldr	r2, [pc, #380]	@ (8002218 <HAL_DMA_Abort_IT+0x3cc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d01d      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5d      	ldr	r2, [pc, #372]	@ (800221c <HAL_DMA_Abort_IT+0x3d0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002220 <HAL_DMA_Abort_IT+0x3d4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5a      	ldr	r2, [pc, #360]	@ (8002224 <HAL_DMA_Abort_IT+0x3d8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a59      	ldr	r2, [pc, #356]	@ (8002228 <HAL_DMA_Abort_IT+0x3dc>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a57      	ldr	r2, [pc, #348]	@ (800222c <HAL_DMA_Abort_IT+0x3e0>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_DMA_Abort_IT+0x290>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a56      	ldr	r2, [pc, #344]	@ (8002230 <HAL_DMA_Abort_IT+0x3e4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <HAL_DMA_Abort_IT+0x2a2>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e007      	b.n	80020fe <HAL_DMA_Abort_IT+0x2b2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a3c      	ldr	r2, [pc, #240]	@ (80021f4 <HAL_DMA_Abort_IT+0x3a8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d072      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3a      	ldr	r2, [pc, #232]	@ (80021f8 <HAL_DMA_Abort_IT+0x3ac>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d06d      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a39      	ldr	r2, [pc, #228]	@ (80021fc <HAL_DMA_Abort_IT+0x3b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d068      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a37      	ldr	r2, [pc, #220]	@ (8002200 <HAL_DMA_Abort_IT+0x3b4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d063      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a36      	ldr	r2, [pc, #216]	@ (8002204 <HAL_DMA_Abort_IT+0x3b8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d05e      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a34      	ldr	r2, [pc, #208]	@ (8002208 <HAL_DMA_Abort_IT+0x3bc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d059      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a33      	ldr	r2, [pc, #204]	@ (800220c <HAL_DMA_Abort_IT+0x3c0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d054      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a31      	ldr	r2, [pc, #196]	@ (8002210 <HAL_DMA_Abort_IT+0x3c4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d04f      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <HAL_DMA_Abort_IT+0x3c8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04a      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a2e      	ldr	r2, [pc, #184]	@ (8002218 <HAL_DMA_Abort_IT+0x3cc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d045      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a2d      	ldr	r2, [pc, #180]	@ (800221c <HAL_DMA_Abort_IT+0x3d0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d040      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <HAL_DMA_Abort_IT+0x3d4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d03b      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_DMA_Abort_IT+0x3d8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d036      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a28      	ldr	r2, [pc, #160]	@ (8002228 <HAL_DMA_Abort_IT+0x3dc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d031      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_DMA_Abort_IT+0x3e0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d02c      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a25      	ldr	r2, [pc, #148]	@ (8002230 <HAL_DMA_Abort_IT+0x3e4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d027      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a24      	ldr	r2, [pc, #144]	@ (8002234 <HAL_DMA_Abort_IT+0x3e8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d022      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_DMA_Abort_IT+0x3ec>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01d      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	@ (800223c <HAL_DMA_Abort_IT+0x3f0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d018      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002240 <HAL_DMA_Abort_IT+0x3f4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_DMA_Abort_IT+0x3f8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00e      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_DMA_Abort_IT+0x3fc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <HAL_DMA_Abort_IT+0x400>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_DMA_Abort_IT+0x3a2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_DMA_Abort_IT+0x404>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d132      	bne.n	8002254 <HAL_DMA_Abort_IT+0x408>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e031      	b.n	8002256 <HAL_DMA_Abort_IT+0x40a>
 80021f2:	bf00      	nop
 80021f4:	40020010 	.word	0x40020010
 80021f8:	40020028 	.word	0x40020028
 80021fc:	40020040 	.word	0x40020040
 8002200:	40020058 	.word	0x40020058
 8002204:	40020070 	.word	0x40020070
 8002208:	40020088 	.word	0x40020088
 800220c:	400200a0 	.word	0x400200a0
 8002210:	400200b8 	.word	0x400200b8
 8002214:	40020410 	.word	0x40020410
 8002218:	40020428 	.word	0x40020428
 800221c:	40020440 	.word	0x40020440
 8002220:	40020458 	.word	0x40020458
 8002224:	40020470 	.word	0x40020470
 8002228:	40020488 	.word	0x40020488
 800222c:	400204a0 	.word	0x400204a0
 8002230:	400204b8 	.word	0x400204b8
 8002234:	58025408 	.word	0x58025408
 8002238:	5802541c 	.word	0x5802541c
 800223c:	58025430 	.word	0x58025430
 8002240:	58025444 	.word	0x58025444
 8002244:	58025458 	.word	0x58025458
 8002248:	5802546c 	.word	0x5802546c
 800224c:	58025480 	.word	0x58025480
 8002250:	58025494 	.word	0x58025494
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d028      	beq.n	80022ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002268:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2201      	movs	r2, #1
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002288:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800229c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	@ 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022e6:	4b86      	ldr	r3, [pc, #536]	@ (8002500 <HAL_GPIO_Init+0x228>)
 80022e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ea:	e18c      	b.n	8002606 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 817e 	beq.w	8002600 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d005      	beq.n	800231c <HAL_GPIO_Init+0x44>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d130      	bne.n	800237e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002352:	2201      	movs	r2, #1
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 0201 	and.w	r2, r3, #1
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d017      	beq.n	80023ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d123      	bne.n	800240e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	220f      	movs	r2, #15
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	69b9      	ldr	r1, [r7, #24]
 800240a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f003 0203 	and.w	r2, r3, #3
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80d8 	beq.w	8002600 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_GPIO_Init+0x22c>)
 8002452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002456:	4a2b      	ldr	r2, [pc, #172]	@ (8002504 <HAL_GPIO_Init+0x22c>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_GPIO_Init+0x22c>)
 8002462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246e:	4a26      	ldr	r2, [pc, #152]	@ (8002508 <HAL_GPIO_Init+0x230>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1d      	ldr	r2, [pc, #116]	@ (800250c <HAL_GPIO_Init+0x234>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <HAL_GPIO_Init+0x258>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1c      	ldr	r2, [pc, #112]	@ (8002510 <HAL_GPIO_Init+0x238>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02b      	beq.n	80024fa <HAL_GPIO_Init+0x222>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002514 <HAL_GPIO_Init+0x23c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d025      	beq.n	80024f6 <HAL_GPIO_Init+0x21e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_GPIO_Init+0x240>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01f      	beq.n	80024f2 <HAL_GPIO_Init+0x21a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_GPIO_Init+0x244>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d019      	beq.n	80024ee <HAL_GPIO_Init+0x216>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <HAL_GPIO_Init+0x248>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0x212>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_GPIO_Init+0x24c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00d      	beq.n	80024e6 <HAL_GPIO_Init+0x20e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <HAL_GPIO_Init+0x250>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0x20a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a15      	ldr	r2, [pc, #84]	@ (800252c <HAL_GPIO_Init+0x254>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_GPIO_Init+0x206>
 80024da:	2309      	movs	r3, #9
 80024dc:	e029      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024de:	230a      	movs	r3, #10
 80024e0:	e027      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024e2:	2307      	movs	r3, #7
 80024e4:	e025      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024e6:	2306      	movs	r3, #6
 80024e8:	e023      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024ea:	2305      	movs	r3, #5
 80024ec:	e021      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024ee:	2304      	movs	r3, #4
 80024f0:	e01f      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024f2:	2303      	movs	r3, #3
 80024f4:	e01d      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e01b      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e019      	b.n	8002532 <HAL_GPIO_Init+0x25a>
 80024fe:	bf00      	nop
 8002500:	58000080 	.word	0x58000080
 8002504:	58024400 	.word	0x58024400
 8002508:	58000400 	.word	0x58000400
 800250c:	58020000 	.word	0x58020000
 8002510:	58020400 	.word	0x58020400
 8002514:	58020800 	.word	0x58020800
 8002518:	58020c00 	.word	0x58020c00
 800251c:	58021000 	.word	0x58021000
 8002520:	58021400 	.word	0x58021400
 8002524:	58021800 	.word	0x58021800
 8002528:	58021c00 	.word	0x58021c00
 800252c:	58022400 	.word	0x58022400
 8002530:	2300      	movs	r3, #0
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	f002 0203 	and.w	r2, r2, #3
 8002538:	0092      	lsls	r2, r2, #2
 800253a:	4093      	lsls	r3, r2
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002542:	4938      	ldr	r1, [pc, #224]	@ (8002624 <HAL_GPIO_Init+0x34c>)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	089b      	lsrs	r3, r3, #2
 8002548:	3302      	adds	r3, #2
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3301      	adds	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	f47f ae6b 	bne.w	80022ec <HAL_GPIO_Init+0x14>
  }
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	3724      	adds	r7, #36	@ 0x24
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	58000400 	.word	0x58000400

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002668:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fa63 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <HAL_PWREx_ConfigSupply+0x70>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d00a      	beq.n	80026ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026a4:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <HAL_PWREx_ConfigSupply+0x70>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01f      	b.n	80026f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e01d      	b.n	80026f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026ba:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_PWREx_ConfigSupply+0x70>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 0207 	bic.w	r2, r3, #7
 80026c2:	490f      	ldr	r1, [pc, #60]	@ (8002700 <HAL_PWREx_ConfigSupply+0x70>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026ca:	f7fe fe1b 	bl	8001304 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026d0:	e009      	b.n	80026e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026d2:	f7fe fe17 	bl	8001304 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026e0:	d901      	bls.n	80026e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_PWREx_ConfigSupply+0x70>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026f2:	d1ee      	bne.n	80026d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	58024800 	.word	0x58024800

08002704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	@ 0x30
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e3c8      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002724:	4b88      	ldr	r3, [pc, #544]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800272e:	4b86      	ldr	r3, [pc, #536]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002732:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002736:	2b10      	cmp	r3, #16
 8002738:	d007      	beq.n	800274a <HAL_RCC_OscConfig+0x46>
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	2b18      	cmp	r3, #24
 800273e:	d110      	bne.n	8002762 <HAL_RCC_OscConfig+0x5e>
 8002740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d10b      	bne.n	8002762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274a:	4b7f      	ldr	r3, [pc, #508]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d06c      	beq.n	8002830 <HAL_RCC_OscConfig+0x12c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d168      	bne.n	8002830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e3a2      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x76>
 800276c:	4b76      	ldr	r3, [pc, #472]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a75      	ldr	r2, [pc, #468]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e02e      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x98>
 8002782:	4b71      	ldr	r3, [pc, #452]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a70      	ldr	r2, [pc, #448]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6e      	ldr	r3, [pc, #440]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6d      	ldr	r2, [pc, #436]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xbc>
 80027a6:	4b68      	ldr	r3, [pc, #416]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a67      	ldr	r2, [pc, #412]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b65      	ldr	r3, [pc, #404]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a64      	ldr	r2, [pc, #400]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 80027c0:	4b61      	ldr	r3, [pc, #388]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a60      	ldr	r2, [pc, #384]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fd90 	bl	8001304 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fd8c 	bl	8001304 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	@ 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e356      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fa:	4b53      	ldr	r3, [pc, #332]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xe4>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fd7c 	bl	8001304 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7fe fd78 	bl	8001304 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	@ 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e342      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002822:	4b49      	ldr	r3, [pc, #292]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x10c>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808c 	beq.w	8002958 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002840:	4b41      	ldr	r3, [pc, #260]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002848:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800284a:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_RCC_OscConfig+0x162>
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2b18      	cmp	r3, #24
 800285a:	d137      	bne.n	80028cc <HAL_RCC_OscConfig+0x1c8>
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d132      	bne.n	80028cc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x17a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e314      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800287e:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0219 	bic.w	r2, r3, #25
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	492f      	ldr	r1, [pc, #188]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fd38 	bl	8001304 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fd34 	bl	8001304 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e2fe      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028aa:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	4920      	ldr	r1, [pc, #128]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ca:	e045      	b.n	8002958 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d026      	beq.n	8002922 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 0219 	bic.w	r2, r3, #25
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4919      	ldr	r1, [pc, #100]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7fe fd0d 	bl	8001304 <HAL_GetTick>
 80028ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7fe fd09 	bl	8001304 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e2d3      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	490b      	ldr	r1, [pc, #44]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	e01a      	b.n	8002958 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <HAL_RCC_OscConfig+0x244>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7fe fce9 	bl	8001304 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7fe fce5 	bl	8001304 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d903      	bls.n	800294c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e2af      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
 8002948:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800294c:	4b96      	ldr	r3, [pc, #600]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ee      	bne.n	8002936 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d06a      	beq.n	8002a3a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4b90      	ldr	r3, [pc, #576]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800296c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800296e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d007      	beq.n	800298a <HAL_RCC_OscConfig+0x286>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b18      	cmp	r3, #24
 800297e:	d11b      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2b4>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d116      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800298a:	4b87      	ldr	r3, [pc, #540]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x29e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b80      	cmp	r3, #128	@ 0x80
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e282      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a2:	4b81      	ldr	r3, [pc, #516]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	497d      	ldr	r1, [pc, #500]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029b6:	e040      	b.n	8002a3a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d023      	beq.n	8002a08 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029c0:	4b79      	ldr	r3, [pc, #484]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a78      	ldr	r2, [pc, #480]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 80029c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fc9a 	bl	8001304 <HAL_GetTick>
 80029d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029d4:	f7fe fc96 	bl	8001304 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e260      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029e6:	4b70      	ldr	r3, [pc, #448]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029f2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	061b      	lsls	r3, r3, #24
 8002a00:	4969      	ldr	r1, [pc, #420]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60cb      	str	r3, [r1, #12]
 8002a06:	e018      	b.n	8002a3a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a08:	4b67      	ldr	r3, [pc, #412]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a66      	ldr	r2, [pc, #408]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fc76 	bl	8001304 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fc72 	bl	8001304 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e23c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d036      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a52:	4a55      	ldr	r2, [pc, #340]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fc53 	bl	8001304 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7fe fc4f 	bl	8001304 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e219      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a74:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x35e>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b49      	ldr	r3, [pc, #292]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a86:	4a48      	ldr	r2, [pc, #288]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fc39 	bl	8001304 <HAL_GetTick>
 8002a92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe fc35 	bl	8001304 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1ff      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d036      	beq.n	8002b2e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d019      	beq.n	8002afc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ac8:	4b37      	ldr	r3, [pc, #220]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a36      	ldr	r2, [pc, #216]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002ace:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fc16 	bl	8001304 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002adc:	f7fe fc12 	bl	8001304 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1dc      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x3d8>
 8002afa:	e018      	b.n	8002b2e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a29      	ldr	r2, [pc, #164]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b08:	f7fe fbfc 	bl	8001304 <HAL_GetTick>
 8002b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b10:	f7fe fbf8 	bl	8001304 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1c2      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8086 	beq.w	8002c48 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x4a8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1a      	ldr	r2, [pc, #104]	@ (8002bac <HAL_RCC_OscConfig+0x4a8>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b48:	f7fe fbdc 	bl	8001304 <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b50:	f7fe fbd8 	bl	8001304 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1a2      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b62:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HAL_RCC_OscConfig+0x4a8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x480>
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b82:	e032      	b.n	8002bea <HAL_RCC_OscConfig+0x4e6>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4ac>
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a05      	ldr	r2, [pc, #20]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a02      	ldr	r2, [pc, #8]	@ (8002ba8 <HAL_RCC_OscConfig+0x4a4>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba4:	e021      	b.n	8002bea <HAL_RCC_OscConfig+0x4e6>
 8002ba6:	bf00      	nop
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	58024800 	.word	0x58024800
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4ce>
 8002bb8:	4b83      	ldr	r3, [pc, #524]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbc:	4a82      	ldr	r2, [pc, #520]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc4:	4b80      	ldr	r3, [pc, #512]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd0:	e00b      	b.n	8002bea <HAL_RCC_OscConfig+0x4e6>
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	4b7a      	ldr	r3, [pc, #488]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	4a79      	ldr	r2, [pc, #484]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002be4:	f023 0304 	bic.w	r3, r3, #4
 8002be8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d015      	beq.n	8002c1e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fb87 	bl	8001304 <HAL_GetTick>
 8002bf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fb83 	bl	8001304 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e14b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c10:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ee      	beq.n	8002bfa <HAL_RCC_OscConfig+0x4f6>
 8002c1c:	e014      	b.n	8002c48 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fb71 	bl	8001304 <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fb6d 	bl	8001304 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e135      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c3c:	4b62      	ldr	r3, [pc, #392]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ee      	bne.n	8002c26 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 812a 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c52:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	f000 80ba 	beq.w	8002dd4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	f040 8095 	bne.w	8002d94 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b57      	ldr	r3, [pc, #348]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a56      	ldr	r2, [pc, #344]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fb45 	bl	8001304 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fb41 	bl	8001304 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e10b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c90:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8002dcc <HAL_RCC_OscConfig+0x6c8>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	4945      	ldr	r1, [pc, #276]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	025b      	lsls	r3, r3, #9
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ce6:	4938      	ldr	r1, [pc, #224]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cec:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	4a35      	ldr	r2, [pc, #212]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cf8:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfc:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x6cc>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d04:	00d2      	lsls	r2, r2, #3
 8002d06:	4930      	ldr	r1, [pc, #192]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f023 020c 	bic.w	r2, r3, #12
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	492b      	ldr	r1, [pc, #172]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	f023 0202 	bic.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	4927      	ldr	r1, [pc, #156]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	4a24      	ldr	r2, [pc, #144]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe faca 	bl	8001304 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7fe fac6 	bl	8001304 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e090      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x670>
 8002d92:	e088      	b.n	8002ea6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fab0 	bl	8001304 <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe faac 	bl	8001304 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e076      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dba:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_OscConfig+0x6c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x6a4>
 8002dc6:	e06e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x7a2>
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	fffffc0c 	.word	0xfffffc0c
 8002dd0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dd4:	4b36      	ldr	r3, [pc, #216]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dda:	4b35      	ldr	r3, [pc, #212]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d031      	beq.n	8002e4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0203 	and.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d12a      	bne.n	8002e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d122      	bne.n	8002e4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d11a      	bne.n	8002e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0a5b      	lsrs	r3, r3, #9
 8002e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d111      	bne.n	8002e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	0e1b      	lsrs	r3, r3, #24
 8002e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e02b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e54:	08db      	lsrs	r3, r3, #3
 8002e56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d01f      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	4a11      	ldr	r2, [pc, #68]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e72:	f7fe fa47 	bl	8001304 <HAL_GetTick>
 8002e76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e78:	bf00      	nop
 8002e7a:	f7fe fa43 	bl	8001304 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d0f9      	beq.n	8002e7a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_RCC_OscConfig+0x7b0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e92:	00d2      	lsls	r2, r2, #3
 8002e94:	4906      	ldr	r1, [pc, #24]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e9a:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <HAL_RCC_OscConfig+0x7ac>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3730      	adds	r7, #48	@ 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	ffff0007 	.word	0xffff0007

08002eb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e19c      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d910      	bls.n	8002efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b87      	ldr	r3, [pc, #540]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 020f 	bic.w	r2, r3, #15
 8002ee2:	4985      	ldr	r1, [pc, #532]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b83      	ldr	r3, [pc, #524]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e184      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d908      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f18:	4b78      	ldr	r3, [pc, #480]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4975      	ldr	r1, [pc, #468]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	4b70      	ldr	r3, [pc, #448]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d908      	bls.n	8002f58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f46:	4b6d      	ldr	r3, [pc, #436]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	496a      	ldr	r1, [pc, #424]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	4b64      	ldr	r3, [pc, #400]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d908      	bls.n	8002f86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f74:	4b61      	ldr	r3, [pc, #388]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	495e      	ldr	r1, [pc, #376]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d908      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fa2:	4b56      	ldr	r3, [pc, #344]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4953      	ldr	r1, [pc, #332]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d908      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f023 020f 	bic.w	r2, r3, #15
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4947      	ldr	r1, [pc, #284]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d055      	beq.n	800309a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fee:	4b43      	ldr	r3, [pc, #268]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	4940      	ldr	r1, [pc, #256]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003008:	4b3c      	ldr	r3, [pc, #240]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d121      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0f6      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d107      	bne.n	8003030 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003020:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d115      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0ea      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003038:	4b30      	ldr	r3, [pc, #192]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0de      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003048:	4b2c      	ldr	r3, [pc, #176]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0d6      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003058:	4b28      	ldr	r3, [pc, #160]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f023 0207 	bic.w	r2, r3, #7
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4925      	ldr	r1, [pc, #148]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 8003066:	4313      	orrs	r3, r2
 8003068:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306a:	f7fe f94b 	bl	8001304 <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003070:	e00a      	b.n	8003088 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fe f947 	bl	8001304 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0be      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003088:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	429a      	cmp	r2, r3
 8003098:	d1eb      	bne.n	8003072 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d208      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b6:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	490e      	ldr	r1, [pc, #56]	@ (80030fc <HAL_RCC_ClockConfig+0x244>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d214      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	4906      	ldr	r1, [pc, #24]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_RCC_ClockConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e086      	b.n	8003206 <HAL_RCC_ClockConfig+0x34e>
 80030f8:	52002000 	.word	0x52002000
 80030fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d010      	beq.n	800312e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003118:	429a      	cmp	r2, r3
 800311a:	d208      	bcs.n	800312e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800311c:	4b3c      	ldr	r3, [pc, #240]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4939      	ldr	r1, [pc, #228]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 800312a:	4313      	orrs	r3, r2
 800312c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003146:	429a      	cmp	r2, r3
 8003148:	d208      	bcs.n	800315c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800314a:	4b31      	ldr	r3, [pc, #196]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	492e      	ldr	r1, [pc, #184]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003174:	429a      	cmp	r2, r3
 8003176:	d208      	bcs.n	800318a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003178:	4b25      	ldr	r3, [pc, #148]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4922      	ldr	r1, [pc, #136]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 8003186:	4313      	orrs	r3, r2
 8003188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d208      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4917      	ldr	r1, [pc, #92]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031b8:	f000 f834 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	4912      	ldr	r1, [pc, #72]	@ (8003214 <HAL_RCC_ClockConfig+0x35c>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_RCC_ClockConfig+0x358>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	4a0d      	ldr	r2, [pc, #52]	@ (8003214 <HAL_RCC_ClockConfig+0x35c>)
 80031e0:	5cd3      	ldrb	r3, [r2, r3]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <HAL_RCC_ClockConfig+0x360>)
 80031ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031f0:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <HAL_RCC_ClockConfig+0x364>)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_RCC_ClockConfig+0x368>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe f838 	bl	8001270 <HAL_InitTick>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
 8003214:	080080b8 	.word	0x080080b8
 8003218:	24000008 	.word	0x24000008
 800321c:	24000004 	.word	0x24000004
 8003220:	2400000c 	.word	0x2400000c

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	@ 0x24
 8003228:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800322a:	4bb3      	ldr	r3, [pc, #716]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003232:	2b18      	cmp	r3, #24
 8003234:	f200 8155 	bhi.w	80034e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003238:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <HAL_RCC_GetSysClockFreq+0x1c>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	080032a5 	.word	0x080032a5
 8003244:	080034e3 	.word	0x080034e3
 8003248:	080034e3 	.word	0x080034e3
 800324c:	080034e3 	.word	0x080034e3
 8003250:	080034e3 	.word	0x080034e3
 8003254:	080034e3 	.word	0x080034e3
 8003258:	080034e3 	.word	0x080034e3
 800325c:	080034e3 	.word	0x080034e3
 8003260:	080032cb 	.word	0x080032cb
 8003264:	080034e3 	.word	0x080034e3
 8003268:	080034e3 	.word	0x080034e3
 800326c:	080034e3 	.word	0x080034e3
 8003270:	080034e3 	.word	0x080034e3
 8003274:	080034e3 	.word	0x080034e3
 8003278:	080034e3 	.word	0x080034e3
 800327c:	080034e3 	.word	0x080034e3
 8003280:	080032d1 	.word	0x080032d1
 8003284:	080034e3 	.word	0x080034e3
 8003288:	080034e3 	.word	0x080034e3
 800328c:	080034e3 	.word	0x080034e3
 8003290:	080034e3 	.word	0x080034e3
 8003294:	080034e3 	.word	0x080034e3
 8003298:	080034e3 	.word	0x080034e3
 800329c:	080034e3 	.word	0x080034e3
 80032a0:	080032d7 	.word	0x080032d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032a4:	4b94      	ldr	r3, [pc, #592]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d009      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032b0:	4b91      	ldr	r3, [pc, #580]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	08db      	lsrs	r3, r3, #3
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	4a90      	ldr	r2, [pc, #576]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032c2:	e111      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032c4:	4b8d      	ldr	r3, [pc, #564]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c6:	61bb      	str	r3, [r7, #24]
      break;
 80032c8:	e10e      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032cc:	61bb      	str	r3, [r7, #24]
      break;
 80032ce:	e10b      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032d2:	61bb      	str	r3, [r7, #24]
      break;
 80032d4:	e108      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032d6:	4b88      	ldr	r3, [pc, #544]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032e0:	4b85      	ldr	r3, [pc, #532]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032ec:	4b82      	ldr	r3, [pc, #520]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032f6:	4b80      	ldr	r3, [pc, #512]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	08db      	lsrs	r3, r3, #3
 80032fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80e1 	beq.w	80034dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b02      	cmp	r3, #2
 800331e:	f000 8083 	beq.w	8003428 <HAL_RCC_GetSysClockFreq+0x204>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b02      	cmp	r3, #2
 8003326:	f200 80a1 	bhi.w	800346c <HAL_RCC_GetSysClockFreq+0x248>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x114>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d056      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003336:	e099      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003338:	4b6f      	ldr	r3, [pc, #444]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003344:	4b6c      	ldr	r3, [pc, #432]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
 8003354:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b62      	ldr	r3, [pc, #392]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800339e:	e087      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2e8>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b51      	ldr	r3, [pc, #324]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033e2:	e065      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003510 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b40      	ldr	r3, [pc, #256]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003426:	e043      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003432:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343a:	4b2f      	ldr	r3, [pc, #188]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344a:	ed97 6a02 	vldr	s12, [r7, #8]
 800344e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800345e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800346a:	e021      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003510 <HAL_RCC_GetSysClockFreq+0x2ec>
 800347a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003492:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034b0:	4b11      	ldr	r3, [pc, #68]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ba:	3301      	adds	r3, #1
 80034bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034d4:	ee17 3a90 	vmov	r3, s15
 80034d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034da:	e005      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
      break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034e4:	61bb      	str	r3, [r7, #24]
      break;
 80034e6:	bf00      	nop
  }

  return sysclockfreq;
 80034e8:	69bb      	ldr	r3, [r7, #24]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	58024400 	.word	0x58024400
 80034fc:	03d09000 	.word	0x03d09000
 8003500:	003d0900 	.word	0x003d0900
 8003504:	017d7840 	.word	0x017d7840
 8003508:	46000000 	.word	0x46000000
 800350c:	4c742400 	.word	0x4c742400
 8003510:	4a742400 	.word	0x4a742400
 8003514:	4bbebc20 	.word	0x4bbebc20

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800351e:	f7ff fe81 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x50>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490f      	ldr	r1, [pc, #60]	@ (800356c <HAL_RCC_GetHCLKFreq+0x54>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800353c:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x50>)
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	4a09      	ldr	r2, [pc, #36]	@ (800356c <HAL_RCC_GetHCLKFreq+0x54>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a07      	ldr	r2, [pc, #28]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x58>)
 8003554:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003556:	4a07      	ldr	r2, [pc, #28]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x58>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	58024400 	.word	0x58024400
 800356c:	080080b8 	.word	0x080080b8
 8003570:	24000008 	.word	0x24000008
 8003574:	24000004 	.word	0x24000004

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800357c:	f7ff ffcc 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4904      	ldr	r1, [pc, #16]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	58024400 	.word	0x58024400
 80035a0:	080080b8 	.word	0x080080b8

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035a8:	f7ff ffb6 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	58024400 	.word	0x58024400
 80035cc:	080080b8 	.word	0x080080b8

080035d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d4:	b0c6      	sub	sp, #280	@ 0x118
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035f4:	2500      	movs	r5, #0
 80035f6:	ea54 0305 	orrs.w	r3, r4, r5
 80035fa:	d049      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003602:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003606:	d02f      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003608:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800360c:	d828      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800360e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003612:	d01a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003618:	d822      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003622:	d007      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003624:	e01c      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003626:	4bab      	ldr	r3, [pc, #684]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	4aaa      	ldr	r2, [pc, #680]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003632:	e01a      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003638:	3308      	adds	r3, #8
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f001 fc25 	bl	8004e8c <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003648:	e00f      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364e:	3328      	adds	r3, #40	@ 0x28
 8003650:	2102      	movs	r1, #2
 8003652:	4618      	mov	r0, r3
 8003654:	f001 fccc 	bl	8004ff0 <RCCEx_PLL3_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800365e:	e004      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10a      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003672:	4b98      	ldr	r3, [pc, #608]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003676:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800367a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003680:	4a94      	ldr	r2, [pc, #592]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003682:	430b      	orrs	r3, r1
 8003684:	6513      	str	r3, [r2, #80]	@ 0x50
 8003686:	e003      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800368c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800369c:	f04f 0900 	mov.w	r9, #0
 80036a0:	ea58 0309 	orrs.w	r3, r8, r9
 80036a4:	d047      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d82a      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036b0:	a201      	add	r2, pc, #4	@ (adr r2, 80036b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b6:	bf00      	nop
 80036b8:	080036cd 	.word	0x080036cd
 80036bc:	080036db 	.word	0x080036db
 80036c0:	080036f1 	.word	0x080036f1
 80036c4:	0800370f 	.word	0x0800370f
 80036c8:	0800370f 	.word	0x0800370f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036cc:	4b81      	ldr	r3, [pc, #516]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	4a80      	ldr	r2, [pc, #512]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d8:	e01a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036de:	3308      	adds	r3, #8
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fbd2 	bl	8004e8c <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ee:	e00f      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f4:	3328      	adds	r3, #40	@ 0x28
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fc79 	bl	8004ff0 <RCCEx_PLL3_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800370e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003718:	4b6e      	ldr	r3, [pc, #440]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800371a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371c:	f023 0107 	bic.w	r1, r3, #7
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003726:	4a6b      	ldr	r2, [pc, #428]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003728:	430b      	orrs	r3, r1
 800372a:	6513      	str	r3, [r2, #80]	@ 0x50
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003742:	f04f 0b00 	mov.w	fp, #0
 8003746:	ea5a 030b 	orrs.w	r3, sl, fp
 800374a:	d05b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800374c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003754:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003758:	d03b      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800375a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800375e:	d834      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003764:	d037      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800376a:	d82e      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800376c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003770:	d033      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003776:	d828      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377c:	d01a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800377e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003782:	d822      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800378c:	d007      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800378e:	e01c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b50      	ldr	r3, [pc, #320]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	4a4f      	ldr	r2, [pc, #316]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379c:	e01e      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a2:	3308      	adds	r3, #8
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fb70 	bl	8004e8c <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037b2:	e013      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b8:	3328      	adds	r3, #40	@ 0x28
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fc17 	bl	8004ff0 <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c8:	e008      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037d0:	e004      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80037d2:	bf00      	nop
 80037d4:	e002      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80037d6:	bf00      	nop
 80037d8:	e000      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80037da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037e4:	4b3b      	ldr	r3, [pc, #236]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037f4:	4a37      	ldr	r2, [pc, #220]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037fa:	e003      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800381a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800381e:	460b      	mov	r3, r1
 8003820:	4313      	orrs	r3, r2
 8003822:	d05d      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800382c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003830:	d03b      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003832:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003836:	d834      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800383c:	d037      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800383e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003842:	d82e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003848:	d033      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800384a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800384e:	d828      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003854:	d01a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800385a:	d822      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003864:	d007      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003866:	e01c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800386e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003874:	e01e      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387a:	3308      	adds	r3, #8
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fb04 	bl	8004e8c <RCCEx_PLL2_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800388a:	e013      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003890:	3328      	adds	r3, #40	@ 0x28
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fbab 	bl	8004ff0 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e008      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038a8:	e004      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80038b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038cc:	4a01      	ldr	r2, [pc, #4]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80038ce:	430b      	orrs	r3, r1
 80038d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80038d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d03a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003906:	2b30      	cmp	r3, #48	@ 0x30
 8003908:	d01f      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800390a:	2b30      	cmp	r3, #48	@ 0x30
 800390c:	d819      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d00c      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003912:	2b20      	cmp	r3, #32
 8003914:	d815      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d019      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800391a:	2b10      	cmp	r3, #16
 800391c:	d111      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391e:	4baa      	ldr	r3, [pc, #680]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	4aa9      	ldr	r2, [pc, #676]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800392a:	e011      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003930:	3308      	adds	r3, #8
 8003932:	2102      	movs	r1, #2
 8003934:	4618      	mov	r0, r3
 8003936:	f001 faa9 	bl	8004e8c <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800394e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003958:	4b9b      	ldr	r3, [pc, #620]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800395a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	4a98      	ldr	r2, [pc, #608]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003968:	430b      	orrs	r3, r1
 800396a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003972:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800398c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d051      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a0:	d035      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80039a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a6:	d82e      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80039a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039ac:	d031      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80039ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039b2:	d828      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039b8:	d01a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039be:	d822      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c8:	d007      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80039ca:	e01c      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4b7e      	ldr	r3, [pc, #504]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	4a7d      	ldr	r2, [pc, #500]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039d8:	e01c      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039de:	3308      	adds	r3, #8
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fa52 	bl	8004e8c <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ee:	e011      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f4:	3328      	adds	r3, #40	@ 0x28
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 faf9 	bl	8004ff0 <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a0c:	e002      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2a:	4a67      	ldr	r2, [pc, #412]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	d053      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a64:	d033      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a6a:	d82c      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a70:	d02f      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a76:	d826      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a7c:	d02b      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a82:	d820      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a88:	d012      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a8e:	d81a      	bhi.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d022      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 f9f2 	bl	8004e8c <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003aae:	e015      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab4:	3328      	adds	r3, #40	@ 0x28
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fa99 	bl	8004ff0 <RCCEx_PLL3_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00a      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e004      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e002      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ae4:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	4a35      	ldr	r2, [pc, #212]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af8:	e003      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003afe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b18:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	d058      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b2e:	d033      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b34:	d82c      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3a:	d02f      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b40:	d826      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b46:	d02b      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003b48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b4c:	d820      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b52:	d012      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b58:	d81a      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d022      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b62:	d115      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	3308      	adds	r3, #8
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 f98d 	bl	8004e8c <RCCEx_PLL2_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b78:	e015      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7e:	3328      	adds	r3, #40	@ 0x28
 8003b80:	2101      	movs	r1, #1
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 fa34 	bl	8004ff0 <RCCEx_PLL3_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b96:	e006      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bbe:	4a02      	ldr	r2, [pc, #8]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003bc6:	bf00      	nop
 8003bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	d037      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bfe:	d00e      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c04:	d816      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d018      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0e:	d111      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4bc4      	ldr	r3, [pc, #784]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	4ac3      	ldr	r2, [pc, #780]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c22:	3308      	adds	r3, #8
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f930 	bl	8004e8c <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c46:	4bb7      	ldr	r3, [pc, #732]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c54:	4ab3      	ldr	r2, [pc, #716]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d039      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d81c      	bhi.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cd1 	.word	0x08003cd1
 8003c98:	08003ca5 	.word	0x08003ca5
 8003c9c:	08003cb3 	.word	0x08003cb3
 8003ca0:	08003cd1 	.word	0x08003cd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca4:	4b9f      	ldr	r3, [pc, #636]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	4a9e      	ldr	r2, [pc, #632]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cb0:	e00f      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f8e6 	bl	8004e8c <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cc6:	e004      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cda:	4b92      	ldr	r3, [pc, #584]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cde:	f023 0103 	bic.w	r1, r3, #3
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cea:	430b      	orrs	r3, r1
 8003cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f000 8099 	beq.w	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d1a:	4b83      	ldr	r3, [pc, #524]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a82      	ldr	r2, [pc, #520]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d26:	f7fd faed 	bl	8001304 <HAL_GetTick>
 8003d2a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fd fae8 	bl	8001304 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	@ 0x64
 8003d3e:	d903      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d46:	e005      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d48:	4b77      	ldr	r3, [pc, #476]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ed      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d173      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d5c:	4b71      	ldr	r3, [pc, #452]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d68:	4053      	eors	r3, r2
 8003d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d015      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d72:	4b6c      	ldr	r3, [pc, #432]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d7e:	4b69      	ldr	r3, [pc, #420]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	4a68      	ldr	r2, [pc, #416]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8a:	4b66      	ldr	r3, [pc, #408]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a65      	ldr	r2, [pc, #404]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d96:	4a63      	ldr	r2, [pc, #396]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003daa:	d118      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd faaa 	bl	8001304 <HAL_GetTick>
 8003db0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db4:	e00d      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd faa5 	bl	8001304 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dc0:	1ad2      	subs	r2, r2, r3
 8003dc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d903      	bls.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003dd0:	e005      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd2:	4b54      	ldr	r3, [pc, #336]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0eb      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d129      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003df6:	d10e      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003df8:	4b4a      	ldr	r3, [pc, #296]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e08:	091a      	lsrs	r2, r3, #4
 8003e0a:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	4a45      	ldr	r2, [pc, #276]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6113      	str	r3, [r2, #16]
 8003e14:	e005      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003e16:	4b43      	ldr	r3, [pc, #268]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	4a42      	ldr	r2, [pc, #264]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e20:	6113      	str	r3, [r2, #16]
 8003e22:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e32:	4a3c      	ldr	r2, [pc, #240]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003e42:	e003      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f002 0301 	and.w	r3, r2, #1
 8003e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f000 808f 	beq.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e74:	2b28      	cmp	r3, #40	@ 0x28
 8003e76:	d871      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003e78:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003f65 	.word	0x08003f65
 8003e84:	08003f5d 	.word	0x08003f5d
 8003e88:	08003f5d 	.word	0x08003f5d
 8003e8c:	08003f5d 	.word	0x08003f5d
 8003e90:	08003f5d 	.word	0x08003f5d
 8003e94:	08003f5d 	.word	0x08003f5d
 8003e98:	08003f5d 	.word	0x08003f5d
 8003e9c:	08003f5d 	.word	0x08003f5d
 8003ea0:	08003f31 	.word	0x08003f31
 8003ea4:	08003f5d 	.word	0x08003f5d
 8003ea8:	08003f5d 	.word	0x08003f5d
 8003eac:	08003f5d 	.word	0x08003f5d
 8003eb0:	08003f5d 	.word	0x08003f5d
 8003eb4:	08003f5d 	.word	0x08003f5d
 8003eb8:	08003f5d 	.word	0x08003f5d
 8003ebc:	08003f5d 	.word	0x08003f5d
 8003ec0:	08003f47 	.word	0x08003f47
 8003ec4:	08003f5d 	.word	0x08003f5d
 8003ec8:	08003f5d 	.word	0x08003f5d
 8003ecc:	08003f5d 	.word	0x08003f5d
 8003ed0:	08003f5d 	.word	0x08003f5d
 8003ed4:	08003f5d 	.word	0x08003f5d
 8003ed8:	08003f5d 	.word	0x08003f5d
 8003edc:	08003f5d 	.word	0x08003f5d
 8003ee0:	08003f65 	.word	0x08003f65
 8003ee4:	08003f5d 	.word	0x08003f5d
 8003ee8:	08003f5d 	.word	0x08003f5d
 8003eec:	08003f5d 	.word	0x08003f5d
 8003ef0:	08003f5d 	.word	0x08003f5d
 8003ef4:	08003f5d 	.word	0x08003f5d
 8003ef8:	08003f5d 	.word	0x08003f5d
 8003efc:	08003f5d 	.word	0x08003f5d
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08003f5d 	.word	0x08003f5d
 8003f08:	08003f5d 	.word	0x08003f5d
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	08003f5d 	.word	0x08003f5d
 8003f14:	08003f5d 	.word	0x08003f5d
 8003f18:	08003f5d 	.word	0x08003f5d
 8003f1c:	08003f5d 	.word	0x08003f5d
 8003f20:	08003f65 	.word	0x08003f65
 8003f24:	58024400 	.word	0x58024400
 8003f28:	58024800 	.word	0x58024800
 8003f2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f34:	3308      	adds	r3, #8
 8003f36:	2101      	movs	r1, #1
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 ffa7 	bl	8004e8c <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	3328      	adds	r3, #40	@ 0x28
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 f84e 	bl	8004ff0 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f6e:	4bbf      	ldr	r3, [pc, #764]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f7c:	4abb      	ldr	r2, [pc, #748]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f82:	e003      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f002 0302 	and.w	r3, r2, #2
 8003f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	d041      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d824      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08004009 	.word	0x08004009
 8003fc0:	08003fd5 	.word	0x08003fd5
 8003fc4:	08003feb 	.word	0x08003feb
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004009 	.word	0x08004009
 8003fd0:	08004009 	.word	0x08004009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ff55 	bl	8004e8c <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e00f      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fee:	3328      	adds	r3, #40	@ 0x28
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fffc 	bl	8004ff0 <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e004      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004012:	4b96      	ldr	r3, [pc, #600]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004016:	f023 0107 	bic.w	r1, r3, #7
 800401a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004020:	4a92      	ldr	r2, [pc, #584]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004022:	430b      	orrs	r3, r1
 8004024:	6553      	str	r3, [r2, #84]	@ 0x54
 8004026:	e003      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800402c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f002 0304 	and.w	r3, r2, #4
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004046:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d044      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	2b05      	cmp	r3, #5
 800405a:	d825      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800405c:	a201      	add	r2, pc, #4	@ (adr r2, 8004064 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	080040b1 	.word	0x080040b1
 8004068:	0800407d 	.word	0x0800407d
 800406c:	08004093 	.word	0x08004093
 8004070:	080040b1 	.word	0x080040b1
 8004074:	080040b1 	.word	0x080040b1
 8004078:	080040b1 	.word	0x080040b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800407c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004080:	3308      	adds	r3, #8
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 ff01 	bl	8004e8c <RCCEx_PLL2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004090:	e00f      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004096:	3328      	adds	r3, #40	@ 0x28
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f000 ffa8 	bl	8004ff0 <RCCEx_PLL3_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040a6:	e004      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040ae:	e000      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80040b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ba:	4b6c      	ldr	r3, [pc, #432]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	f023 0107 	bic.w	r1, r3, #7
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ca:	4a68      	ldr	r2, [pc, #416]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d0:	e003      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f002 0320 	and.w	r3, r2, #32
 80040e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	d055      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004106:	d033      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800410c:	d82c      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d02f      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004118:	d826      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800411a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800411e:	d02b      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004120:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004124:	d820      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800412a:	d012      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800412c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004130:	d81a      	bhi.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d022      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800413a:	d115      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	3308      	adds	r3, #8
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fea1 	bl	8004e8c <RCCEx_PLL2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004150:	e015      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004156:	3328      	adds	r3, #40	@ 0x28
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f000 ff48 	bl	8004ff0 <RCCEx_PLL3_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004166:	e00a      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800416e:	e006      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004170:	bf00      	nop
 8004172:	e004      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004186:	4b39      	ldr	r3, [pc, #228]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800418e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004196:	4a35      	ldr	r2, [pc, #212]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004198:	430b      	orrs	r3, r1
 800419a:	6553      	str	r3, [r2, #84]	@ 0x54
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d058      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041d2:	d033      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80041d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041d8:	d82c      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041de:	d02f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d826      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041ea:	d02b      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80041ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041f0:	d820      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f6:	d012      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80041f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041fc:	d81a      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d022      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004206:	d115      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420c:	3308      	adds	r3, #8
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fe3b 	bl	8004e8c <RCCEx_PLL2_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800421c:	e015      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004222:	3328      	adds	r3, #40	@ 0x28
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fee2 	bl	8004ff0 <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004232:	e00a      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800423a:	e006      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800423c:	bf00      	nop
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004240:	bf00      	nop
 8004242:	e002      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10e      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004262:	4a02      	ldr	r2, [pc, #8]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58
 8004268:	e006      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800426a:	bf00      	nop
 800426c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800428e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d055      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042a4:	d033      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80042a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042aa:	d82c      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b0:	d02f      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80042b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b6:	d826      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042bc:	d02b      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80042be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042c2:	d820      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042c8:	d012      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80042ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ce:	d81a      	bhi.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d022      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d8:	d115      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042de:	3308      	adds	r3, #8
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fdd2 	bl	8004e8c <RCCEx_PLL2_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ee:	e015      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f4:	3328      	adds	r3, #40	@ 0x28
 80042f6:	2102      	movs	r1, #2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fe79 	bl	8004ff0 <RCCEx_PLL3_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004304:	e00a      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800430e:	bf00      	nop
 8004310:	e004      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800431a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800431c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004324:	4ba0      	ldr	r3, [pc, #640]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004328:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004330:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004334:	4a9c      	ldr	r2, [pc, #624]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004336:	430b      	orrs	r3, r1
 8004338:	6593      	str	r3, [r2, #88]	@ 0x58
 800433a:	e003      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f002 0308 	and.w	r3, r2, #8
 8004350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800435a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d01e      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d10c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004376:	3328      	adds	r3, #40	@ 0x28
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fe38 	bl	8004ff0 <RCCEx_PLL3_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800438c:	4b86      	ldr	r3, [pc, #536]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800439c:	4a82      	ldr	r2, [pc, #520]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800439e:	430b      	orrs	r3, r1
 80043a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f002 0310 	and.w	r3, r2, #16
 80043ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043b2:	2300      	movs	r3, #0
 80043b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d01e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ce:	d10c      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d4:	3328      	adds	r3, #40	@ 0x28
 80043d6:	2102      	movs	r1, #2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fe09 	bl	8004ff0 <RCCEx_PLL3_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043ea:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fa:	4a6b      	ldr	r2, [pc, #428]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800440c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800440e:	2300      	movs	r3, #0
 8004410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004412:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d03e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004428:	d022      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800442a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800442e:	d81b      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004438:	d00b      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800443a:	e015      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800443c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004440:	3308      	adds	r3, #8
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd21 	bl	8004e8c <RCCEx_PLL2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004450:	e00f      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004456:	3328      	adds	r3, #40	@ 0x28
 8004458:	2102      	movs	r1, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fdc8 	bl	8004ff0 <RCCEx_PLL3_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800447a:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800447c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800448a:	4a47      	ldr	r2, [pc, #284]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800449a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80044a8:	2300      	movs	r3, #0
 80044aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80044ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044b0:	460b      	mov	r3, r1
 80044b2:	4313      	orrs	r3, r2
 80044b4:	d03b      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044c2:	d01f      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80044c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044c8:	d818      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ce:	d003      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80044d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044d4:	d007      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80044d6:	e011      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d8:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	4a32      	ldr	r2, [pc, #200]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044e4:	e00f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ea:	3328      	adds	r3, #40	@ 0x28
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fd7e 	bl	8004ff0 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80044fa:	e004      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451e:	4a22      	ldr	r2, [pc, #136]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004520:	430b      	orrs	r3, r1
 8004522:	6553      	str	r3, [r2, #84]	@ 0x54
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800452a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800453a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800453c:	2300      	movs	r3, #0
 800453e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004540:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d034      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004558:	d007      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800455a:	e011      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800455e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004560:	4a11      	ldr	r2, [pc, #68]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004568:	e00e      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456e:	3308      	adds	r3, #8
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fc8a 	bl	8004e8c <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459e:	4a02      	ldr	r2, [pc, #8]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a4:	e006      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80045c2:	2300      	movs	r3, #0
 80045c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d00c      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d4:	3328      	adds	r3, #40	@ 0x28
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fd09 	bl	8004ff0 <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045f8:	2300      	movs	r3, #0
 80045fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d036      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800460c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004610:	d018      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004616:	d811      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461c:	d014      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800461e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004622:	d80b      	bhi.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d011      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462c:	d106      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800462e:	4bb7      	ldr	r3, [pc, #732]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	4ab6      	ldr	r2, [pc, #728]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800463a:	e008      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004656:	4bad      	ldr	r3, [pc, #692]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800465e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004664:	4aa9      	ldr	r2, [pc, #676]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004666:	430b      	orrs	r3, r1
 8004668:	6553      	str	r3, [r2, #84]	@ 0x54
 800466a:	e003      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004680:	653b      	str	r3, [r7, #80]	@ 0x50
 8004682:	2300      	movs	r3, #0
 8004684:	657b      	str	r3, [r7, #84]	@ 0x54
 8004686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004690:	4b9e      	ldr	r3, [pc, #632]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004694:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	4a9b      	ldr	r2, [pc, #620]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b2:	2300      	movs	r3, #0
 80046b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046c0:	4b92      	ldr	r3, [pc, #584]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ce:	4a8f      	ldr	r2, [pc, #572]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046e2:	2300      	movs	r3, #0
 80046e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046f0:	4b86      	ldr	r3, [pc, #536]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	4a85      	ldr	r2, [pc, #532]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046fa:	6113      	str	r3, [r2, #16]
 80046fc:	4b83      	ldr	r3, [pc, #524]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046fe:	6919      	ldr	r1, [r3, #16]
 8004700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004708:	4a80      	ldr	r2, [pc, #512]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800470a:	430b      	orrs	r3, r1
 800470c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800470e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800471a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800471c:	2300      	movs	r3, #0
 800471e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004720:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004724:	460b      	mov	r3, r1
 8004726:	4313      	orrs	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800472a:	4b78      	ldr	r3, [pc, #480]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800472c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004738:	4a74      	ldr	r2, [pc, #464]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800473a:	430b      	orrs	r3, r1
 800473c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004746:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800474a:	633b      	str	r3, [r7, #48]	@ 0x30
 800474c:	2300      	movs	r3, #0
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004750:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004754:	460b      	mov	r3, r1
 8004756:	4313      	orrs	r3, r2
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800475a:	4b6c      	ldr	r3, [pc, #432]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476a:	4a68      	ldr	r2, [pc, #416]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	2100      	movs	r1, #0
 800477a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d011      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800478c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004790:	3308      	adds	r3, #8
 8004792:	2100      	movs	r1, #0
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fb79 	bl	8004e8c <RCCEx_PLL2_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80047a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	2100      	movs	r1, #0
 80047ba:	6239      	str	r1, [r7, #32]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047c6:	460b      	mov	r3, r1
 80047c8:	4313      	orrs	r3, r2
 80047ca:	d011      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d0:	3308      	adds	r3, #8
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fb59 	bl	8004e8c <RCCEx_PLL2_Config>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80047e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	2100      	movs	r1, #0
 80047fa:	61b9      	str	r1, [r7, #24]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d011      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004810:	3308      	adds	r3, #8
 8004812:	2102      	movs	r1, #2
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb39 	bl	8004e8c <RCCEx_PLL2_Config>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800482c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	2100      	movs	r1, #0
 800483a:	6139      	str	r1, [r7, #16]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004846:	460b      	mov	r3, r1
 8004848:	4313      	orrs	r3, r2
 800484a:	d011      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800484c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004850:	3328      	adds	r3, #40	@ 0x28
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fbcb 	bl	8004ff0 <RCCEx_PLL3_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800486c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	2100      	movs	r1, #0
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d011      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800488c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004890:	3328      	adds	r3, #40	@ 0x28
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fbab 	bl	8004ff0 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	2100      	movs	r1, #0
 80048ba:	6039      	str	r1, [r7, #0]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d011      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d0:	3328      	adds	r3, #40	@ 0x28
 80048d2:	2102      	movs	r1, #2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fb8b 	bl	8004ff0 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80048e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80048f0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
}
 80048fe:	4618      	mov	r0, r3
 8004900:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400

08004910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004914:	f7fe fe00 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4904      	ldr	r1, [pc, #16]	@ (8004938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	58024400 	.word	0x58024400
 8004938:	080080b8 	.word	0x080080b8

0800493c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	@ 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004944:	4ba1      	ldr	r3, [pc, #644]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800494e:	4b9f      	ldr	r3, [pc, #636]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	0b1b      	lsrs	r3, r3, #12
 8004954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800495a:	4b9c      	ldr	r3, [pc, #624]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004966:	4b99      	ldr	r3, [pc, #612]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	08db      	lsrs	r3, r3, #3
 800496c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	fb02 f303 	mul.w	r3, r2, r3
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8111 	beq.w	8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b02      	cmp	r3, #2
 800498e:	f000 8083 	beq.w	8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b02      	cmp	r3, #2
 8004996:	f200 80a1 	bhi.w	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d056      	beq.n	8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049a6:	e099      	b.n	8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a8:	4b88      	ldr	r3, [pc, #544]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02d      	beq.n	8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049b4:	4b85      	ldr	r3, [pc, #532]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	4a84      	ldr	r2, [pc, #528]	@ (8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049de:	4b7b      	ldr	r3, [pc, #492]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a0e:	e087      	b.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a22:	4b6a      	ldr	r3, [pc, #424]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a52:	e065      	b.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a66:	4b59      	ldr	r3, [pc, #356]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a96:	e043      	b.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aaa:	4b48      	ldr	r3, [pc, #288]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004abe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ada:	e021      	b.n	8004b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aee:	4b37      	ldr	r3, [pc, #220]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b20:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b46:	ee17 2a90 	vmov	r2, s15
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b74:	ee17 2a90 	vmov	r2, s15
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b7c:	4b13      	ldr	r3, [pc, #76]	@ (8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	0e1b      	lsrs	r3, r3, #24
 8004b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba2:	ee17 2a90 	vmov	r2, s15
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004baa:	e008      	b.n	8004bbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	3724      	adds	r7, #36	@ 0x24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	03d09000 	.word	0x03d09000
 8004bd4:	46000000 	.word	0x46000000
 8004bd8:	4c742400 	.word	0x4c742400
 8004bdc:	4a742400 	.word	0x4a742400
 8004be0:	4bbebc20 	.word	0x4bbebc20

08004be4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	@ 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bec:	4ba1      	ldr	r3, [pc, #644]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfa:	0d1b      	lsrs	r3, r3, #20
 8004bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c02:	4b9c      	ldr	r3, [pc, #624]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c0e:	4b99      	ldr	r3, [pc, #612]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	08db      	lsrs	r3, r3, #3
 8004c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8111 	beq.w	8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	f000 8083 	beq.w	8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f200 80a1 	bhi.w	8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d056      	beq.n	8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c4e:	e099      	b.n	8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c50:	4b88      	ldr	r3, [pc, #544]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d02d      	beq.n	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c5c:	4b85      	ldr	r3, [pc, #532]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	4a84      	ldr	r2, [pc, #528]	@ (8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c86:	4b7b      	ldr	r3, [pc, #492]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cb6:	e087      	b.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cca:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cfa:	e065      	b.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0e:	4b59      	ldr	r3, [pc, #356]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d3e:	e043      	b.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d52:	4b48      	ldr	r3, [pc, #288]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d82:	e021      	b.n	8004dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d96:	4b37      	ldr	r3, [pc, #220]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004daa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	0a5b      	lsrs	r3, r3, #9
 8004dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dee:	ee17 2a90 	vmov	r2, s15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004df6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e1c:	ee17 2a90 	vmov	r2, s15
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	0e1b      	lsrs	r3, r3, #24
 8004e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4a:	ee17 2a90 	vmov	r2, s15
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e52:	e008      	b.n	8004e66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
}
 8004e66:	bf00      	nop
 8004e68:	3724      	adds	r7, #36	@ 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
 8004e78:	03d09000 	.word	0x03d09000
 8004e7c:	46000000 	.word	0x46000000
 8004e80:	4c742400 	.word	0x4c742400
 8004e84:	4a742400 	.word	0x4a742400
 8004e88:	4bbebc20 	.word	0x4bbebc20

08004e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e9a:	4b53      	ldr	r3, [pc, #332]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d101      	bne.n	8004eaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e099      	b.n	8004fde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb6:	f7fc fa25 	bl	8001304 <HAL_GetTick>
 8004eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ebe:	f7fc fa21 	bl	8001304 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e086      	b.n	8004fde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ed0:	4b45      	ldr	r3, [pc, #276]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004edc:	4b42      	ldr	r3, [pc, #264]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	493f      	ldr	r1, [pc, #252]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f20:	4931      	ldr	r1, [pc, #196]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f26:	4b30      	ldr	r3, [pc, #192]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	492d      	ldr	r1, [pc, #180]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	f023 0220 	bic.w	r2, r3, #32
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	4928      	ldr	r1, [pc, #160]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f50:	f023 0310 	bic.w	r3, r3, #16
 8004f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f5a:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <RCCEx_PLL2_Config+0x160>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	69d2      	ldr	r2, [r2, #28]
 8004f62:	00d2      	lsls	r2, r2, #3
 8004f64:	4920      	ldr	r1, [pc, #128]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f70:	f043 0310 	orr.w	r3, r3, #16
 8004f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f88:	e00f      	b.n	8004faa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d106      	bne.n	8004f9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	4a14      	ldr	r2, [pc, #80]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f9c:	e005      	b.n	8004faa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f9e:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004faa:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004fb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb6:	f7fc f9a5 	bl	8001304 <HAL_GetTick>
 8004fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fbc:	e008      	b.n	8004fd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fbe:	f7fc f9a1 	bl	8001304 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e006      	b.n	8004fde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fd0:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <RCCEx_PLL2_Config+0x15c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	ffff0007 	.word	0xffff0007

08004ff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ffe:	4b53      	ldr	r3, [pc, #332]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d101      	bne.n	800500e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e099      	b.n	8005142 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800500e:	4b4f      	ldr	r3, [pc, #316]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4e      	ldr	r2, [pc, #312]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501a:	f7fc f973 	bl	8001304 <HAL_GetTick>
 800501e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005020:	e008      	b.n	8005034 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005022:	f7fc f96f 	bl	8001304 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e086      	b.n	8005142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005034:	4b45      	ldr	r3, [pc, #276]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005040:	4b42      	ldr	r3, [pc, #264]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	051b      	lsls	r3, r3, #20
 800504e:	493f      	ldr	r1, [pc, #252]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	628b      	str	r3, [r1, #40]	@ 0x28
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	3b01      	subs	r3, #1
 800505a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	3b01      	subs	r3, #1
 8005064:	025b      	lsls	r3, r3, #9
 8005066:	b29b      	uxth	r3, r3
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	3b01      	subs	r3, #1
 800507e:	061b      	lsls	r3, r3, #24
 8005080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005084:	4931      	ldr	r1, [pc, #196]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800508a:	4b30      	ldr	r3, [pc, #192]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	492d      	ldr	r1, [pc, #180]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800509c:	4b2b      	ldr	r3, [pc, #172]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	4928      	ldr	r1, [pc, #160]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050ae:	4b27      	ldr	r3, [pc, #156]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	4a26      	ldr	r2, [pc, #152]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050ba:	4b24      	ldr	r3, [pc, #144]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050be:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <RCCEx_PLL3_Config+0x160>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	69d2      	ldr	r2, [r2, #28]
 80050c6:	00d2      	lsls	r2, r2, #3
 80050c8:	4920      	ldr	r1, [pc, #128]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050ce:	4b1f      	ldr	r3, [pc, #124]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050e0:	4b1a      	ldr	r3, [pc, #104]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	4a19      	ldr	r2, [pc, #100]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050ec:	e00f      	b.n	800510e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d106      	bne.n	8005102 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050f4:	4b15      	ldr	r3, [pc, #84]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	4a14      	ldr	r2, [pc, #80]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 80050fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005100:	e005      	b.n	800510e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a11      	ldr	r2, [pc, #68]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800510e:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0e      	ldr	r2, [pc, #56]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fc f8f3 	bl	8001304 <HAL_GetTick>
 800511e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005120:	e008      	b.n	8005134 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005122:	f7fc f8ef 	bl	8001304 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <RCCEx_PLL3_Config+0x15c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	ffff0007 	.word	0xffff0007

08005154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e049      	b.n	80051fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fe56 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fc58 	bl	8005a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e05e      	b.n	80052da <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2b      	ldr	r2, [pc, #172]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d02c      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005246:	d027      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <HAL_TIM_Base_Start_IT+0xe8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xec>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a24      	ldr	r2, [pc, #144]	@ (80052f4 <HAL_TIM_Base_Start_IT+0xf0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a23      	ldr	r2, [pc, #140]	@ (80052f8 <HAL_TIM_Base_Start_IT+0xf4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <HAL_TIM_Base_Start_IT+0xf8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <HAL_TIM_Base_Start_IT+0xfc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1e      	ldr	r2, [pc, #120]	@ (8005304 <HAL_TIM_Base_Start_IT+0x100>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x94>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1d      	ldr	r2, [pc, #116]	@ (8005308 <HAL_TIM_Base_Start_IT+0x104>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d115      	bne.n	80052c4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <HAL_TIM_Base_Start_IT+0x108>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d015      	beq.n	80052d6 <HAL_TIM_Base_Start_IT+0xd2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b0:	d011      	beq.n	80052d6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	e008      	b.n	80052d6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40001800 	.word	0x40001800
 8005300:	40014000 	.word	0x40014000
 8005304:	4000e000 	.word	0x4000e000
 8005308:	4000e400 	.word	0x4000e400
 800530c:	00010007 	.word	0x00010007

08005310 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e049      	b.n	80053b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f841 	bl	80053be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f000 fb7a 	bl	8005a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01b      	beq.n	8005436 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0202 	mvn.w	r2, #2
 8005406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 faf5 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 8005422:	e005      	b.n	8005430 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fae7 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 faf8 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01b      	beq.n	8005482 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0204 	mvn.w	r2, #4
 8005452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 facf 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 800546e:	e005      	b.n	800547c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fac1 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fad2 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d020      	beq.n	80054ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01b      	beq.n	80054ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0208 	mvn.w	r2, #8
 800549e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2204      	movs	r2, #4
 80054a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 faa9 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 80054ba:	e005      	b.n	80054c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa9b 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 faac 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d020      	beq.n	800551a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01b      	beq.n	800551a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0210 	mvn.w	r2, #16
 80054ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2208      	movs	r2, #8
 80054f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fa83 	bl	8005a0c <HAL_TIM_IC_CaptureCallback>
 8005506:	e005      	b.n	8005514 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa75 	bl	80059f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa86 	bl	8005a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00c      	beq.n	800553e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0201 	mvn.w	r2, #1
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fb fb1b 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 ff3a 	bl	80063e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 ff32 	bl	80063f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa40 	bl	8005a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fefa 	bl	80063cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ff      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b14      	cmp	r3, #20
 800560a:	f200 80f0 	bhi.w	80057ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800560e:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005669 	.word	0x08005669
 8005618:	080057ef 	.word	0x080057ef
 800561c:	080057ef 	.word	0x080057ef
 8005620:	080057ef 	.word	0x080057ef
 8005624:	080056a9 	.word	0x080056a9
 8005628:	080057ef 	.word	0x080057ef
 800562c:	080057ef 	.word	0x080057ef
 8005630:	080057ef 	.word	0x080057ef
 8005634:	080056eb 	.word	0x080056eb
 8005638:	080057ef 	.word	0x080057ef
 800563c:	080057ef 	.word	0x080057ef
 8005640:	080057ef 	.word	0x080057ef
 8005644:	0800572b 	.word	0x0800572b
 8005648:	080057ef 	.word	0x080057ef
 800564c:	080057ef 	.word	0x080057ef
 8005650:	080057ef 	.word	0x080057ef
 8005654:	0800576d 	.word	0x0800576d
 8005658:	080057ef 	.word	0x080057ef
 800565c:	080057ef 	.word	0x080057ef
 8005660:	080057ef 	.word	0x080057ef
 8005664:	080057ad 	.word	0x080057ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa9c 	bl	8005bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]
      break;
 80056a6:	e0a5      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fb0c 	bl	8005ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
      break;
 80056e8:	e084      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb75 	bl	8005de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0204 	bic.w	r2, r2, #4
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
      break;
 8005728:	e064      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fbdd 	bl	8005ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	021a      	lsls	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	61da      	str	r2, [r3, #28]
      break;
 800576a:	e043      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fc26 	bl	8005fc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0208 	orr.w	r2, r2, #8
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057aa:	e023      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fc6a 	bl	800608c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop

08005808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIM_ConfigClockSource+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e0dc      	b.n	80059de <HAL_TIM_ConfigClockSource+0x1d6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	4b6a      	ldr	r3, [pc, #424]	@ (80059e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800584a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a64      	ldr	r2, [pc, #400]	@ (80059ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	f000 80a9 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005860:	4a62      	ldr	r2, [pc, #392]	@ (80059ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	f200 80ae 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005868:	4a61      	ldr	r2, [pc, #388]	@ (80059f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	f000 80a1 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005870:	4a5f      	ldr	r2, [pc, #380]	@ (80059f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	f200 80a6 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005878:	4a5e      	ldr	r2, [pc, #376]	@ (80059f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800587a:	4293      	cmp	r3, r2
 800587c:	f000 8099 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005880:	4a5c      	ldr	r2, [pc, #368]	@ (80059f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005882:	4293      	cmp	r3, r2
 8005884:	f200 809e 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005888:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800588c:	f000 8091 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005890:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005894:	f200 8096 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800589c:	f000 8089 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a4:	f200 808e 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058ac:	d03e      	beq.n	800592c <HAL_TIM_ConfigClockSource+0x124>
 80058ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b2:	f200 8087 	bhi.w	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ba:	f000 8086 	beq.w	80059ca <HAL_TIM_ConfigClockSource+0x1c2>
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c2:	d87f      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058c4:	2b70      	cmp	r3, #112	@ 0x70
 80058c6:	d01a      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0xf6>
 80058c8:	2b70      	cmp	r3, #112	@ 0x70
 80058ca:	d87b      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058cc:	2b60      	cmp	r3, #96	@ 0x60
 80058ce:	d050      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x16a>
 80058d0:	2b60      	cmp	r3, #96	@ 0x60
 80058d2:	d877      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058d4:	2b50      	cmp	r3, #80	@ 0x50
 80058d6:	d03c      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x14a>
 80058d8:	2b50      	cmp	r3, #80	@ 0x50
 80058da:	d873      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d058      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x18a>
 80058e0:	2b40      	cmp	r3, #64	@ 0x40
 80058e2:	d86f      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058e4:	2b30      	cmp	r3, #48	@ 0x30
 80058e6:	d064      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058e8:	2b30      	cmp	r3, #48	@ 0x30
 80058ea:	d86b      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d060      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d867      	bhi.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d05c      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d05a      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80058fc:	e062      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800590e:	f000 fca1 	bl	8006254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	609a      	str	r2, [r3, #8]
      break;
 800592a:	e04f      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800593c:	f000 fc8a 	bl	8006254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800594e:	609a      	str	r2, [r3, #8]
      break;
 8005950:	e03c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	461a      	mov	r2, r3
 8005960:	f000 fbfa 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2150      	movs	r1, #80	@ 0x50
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fc54 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 8005970:	e02c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800597e:	461a      	mov	r2, r3
 8005980:	f000 fc19 	bl	80061b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2160      	movs	r1, #96	@ 0x60
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fc44 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 8005990:	e01c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	461a      	mov	r2, r3
 80059a0:	f000 fbda 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2140      	movs	r1, #64	@ 0x40
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fc34 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 80059b0:	e00c      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f000 fc2b 	bl	8006218 <TIM_ITRx_SetConfig>
      break;
 80059c2:	e003      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e000      	b.n	80059cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80059ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	ffceff88 	.word	0xffceff88
 80059ec:	00100040 	.word	0x00100040
 80059f0:	00100030 	.word	0x00100030
 80059f4:	00100020 	.word	0x00100020

080059f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a66:	d00f      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a47      	ldr	r2, [pc, #284]	@ (8005b88 <TIM_Base_SetConfig+0x140>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a46      	ldr	r2, [pc, #280]	@ (8005b8c <TIM_Base_SetConfig+0x144>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a45      	ldr	r2, [pc, #276]	@ (8005b90 <TIM_Base_SetConfig+0x148>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a44      	ldr	r2, [pc, #272]	@ (8005b94 <TIM_Base_SetConfig+0x14c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d108      	bne.n	8005a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a39      	ldr	r2, [pc, #228]	@ (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d027      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa8:	d023      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a36      	ldr	r2, [pc, #216]	@ (8005b88 <TIM_Base_SetConfig+0x140>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d01f      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a35      	ldr	r2, [pc, #212]	@ (8005b8c <TIM_Base_SetConfig+0x144>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01b      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a34      	ldr	r2, [pc, #208]	@ (8005b90 <TIM_Base_SetConfig+0x148>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d017      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a33      	ldr	r2, [pc, #204]	@ (8005b94 <TIM_Base_SetConfig+0x14c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d013      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a32      	ldr	r2, [pc, #200]	@ (8005b98 <TIM_Base_SetConfig+0x150>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00f      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a31      	ldr	r2, [pc, #196]	@ (8005b9c <TIM_Base_SetConfig+0x154>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <TIM_Base_SetConfig+0x158>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba4 <TIM_Base_SetConfig+0x15c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d003      	beq.n	8005af2 <TIM_Base_SetConfig+0xaa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <TIM_Base_SetConfig+0x160>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d108      	bne.n	8005b04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a16      	ldr	r2, [pc, #88]	@ (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00f      	beq.n	8005b50 <TIM_Base_SetConfig+0x108>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a18      	ldr	r2, [pc, #96]	@ (8005b94 <TIM_Base_SetConfig+0x14c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_Base_SetConfig+0x108>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	@ (8005b98 <TIM_Base_SetConfig+0x150>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0x108>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <TIM_Base_SetConfig+0x154>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0x108>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a15      	ldr	r2, [pc, #84]	@ (8005ba0 <TIM_Base_SetConfig+0x158>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d103      	bne.n	8005b58 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f023 0201 	bic.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	611a      	str	r2, [r3, #16]
  }
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	4000e000 	.word	0x4000e000
 8005ba8:	4000e400 	.word	0x4000e400

08005bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f023 0201 	bic.w	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4b37      	ldr	r3, [pc, #220]	@ (8005cb4 <TIM_OC1_SetConfig+0x108>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f023 0302 	bic.w	r3, r3, #2
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <TIM_OC1_SetConfig+0x10c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_OC1_SetConfig+0x7c>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <TIM_OC1_SetConfig+0x110>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_OC1_SetConfig+0x7c>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc0 <TIM_OC1_SetConfig+0x114>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC1_SetConfig+0x7c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc4 <TIM_OC1_SetConfig+0x118>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC1_SetConfig+0x7c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a29      	ldr	r2, [pc, #164]	@ (8005cc8 <TIM_OC1_SetConfig+0x11c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10c      	bne.n	8005c42 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0308 	bic.w	r3, r3, #8
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 0304 	bic.w	r3, r3, #4
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb8 <TIM_OC1_SetConfig+0x10c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_OC1_SetConfig+0xbe>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cbc <TIM_OC1_SetConfig+0x110>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_OC1_SetConfig+0xbe>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc0 <TIM_OC1_SetConfig+0x114>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_OC1_SetConfig+0xbe>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a19      	ldr	r2, [pc, #100]	@ (8005cc4 <TIM_OC1_SetConfig+0x118>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_OC1_SetConfig+0xbe>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <TIM_OC1_SetConfig+0x11c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d111      	bne.n	8005c8e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	fffeff8f 	.word	0xfffeff8f
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800

08005ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f023 0210 	bic.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4b34      	ldr	r3, [pc, #208]	@ (8005dc8 <TIM_OC2_SetConfig+0xfc>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a29      	ldr	r2, [pc, #164]	@ (8005dcc <TIM_OC2_SetConfig+0x100>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d003      	beq.n	8005d34 <TIM_OC2_SetConfig+0x68>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a28      	ldr	r2, [pc, #160]	@ (8005dd0 <TIM_OC2_SetConfig+0x104>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d10d      	bne.n	8005d50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1e      	ldr	r2, [pc, #120]	@ (8005dcc <TIM_OC2_SetConfig+0x100>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00f      	beq.n	8005d78 <TIM_OC2_SetConfig+0xac>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd0 <TIM_OC2_SetConfig+0x104>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00b      	beq.n	8005d78 <TIM_OC2_SetConfig+0xac>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd4 <TIM_OC2_SetConfig+0x108>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d007      	beq.n	8005d78 <TIM_OC2_SetConfig+0xac>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd8 <TIM_OC2_SetConfig+0x10c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <TIM_OC2_SetConfig+0xac>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1a      	ldr	r2, [pc, #104]	@ (8005ddc <TIM_OC2_SetConfig+0x110>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d113      	bne.n	8005da0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	feff8fff 	.word	0xfeff8fff
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ed8 <TIM_OC3_SetConfig+0xf8>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a28      	ldr	r2, [pc, #160]	@ (8005edc <TIM_OC3_SetConfig+0xfc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC3_SetConfig+0x66>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a27      	ldr	r2, [pc, #156]	@ (8005ee0 <TIM_OC3_SetConfig+0x100>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d10d      	bne.n	8005e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	@ (8005edc <TIM_OC3_SetConfig+0xfc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00f      	beq.n	8005e8a <TIM_OC3_SetConfig+0xaa>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee0 <TIM_OC3_SetConfig+0x100>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <TIM_OC3_SetConfig+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee4 <TIM_OC3_SetConfig+0x104>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d007      	beq.n	8005e8a <TIM_OC3_SetConfig+0xaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee8 <TIM_OC3_SetConfig+0x108>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d003      	beq.n	8005e8a <TIM_OC3_SetConfig+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <TIM_OC3_SetConfig+0x10c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d113      	bne.n	8005eb2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	fffeff8f 	.word	0xfffeff8f
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800

08005ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <TIM_OC4_SetConfig+0xbc>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a19      	ldr	r2, [pc, #100]	@ (8005fb0 <TIM_OC4_SetConfig+0xc0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00f      	beq.n	8005f70 <TIM_OC4_SetConfig+0x80>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <TIM_OC4_SetConfig+0xc4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <TIM_OC4_SetConfig+0x80>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	@ (8005fb8 <TIM_OC4_SetConfig+0xc8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d007      	beq.n	8005f70 <TIM_OC4_SetConfig+0x80>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a16      	ldr	r2, [pc, #88]	@ (8005fbc <TIM_OC4_SetConfig+0xcc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC4_SetConfig+0x80>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <TIM_OC4_SetConfig+0xd0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d109      	bne.n	8005f84 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	019b      	lsls	r3, r3, #6
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	feff8fff 	.word	0xfeff8fff
 8005fb0:	40010000 	.word	0x40010000
 8005fb4:	40010400 	.word	0x40010400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800

08005fc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4b21      	ldr	r3, [pc, #132]	@ (8006074 <TIM_OC5_SetConfig+0xb0>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a18      	ldr	r2, [pc, #96]	@ (8006078 <TIM_OC5_SetConfig+0xb4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_OC5_SetConfig+0x76>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a17      	ldr	r2, [pc, #92]	@ (800607c <TIM_OC5_SetConfig+0xb8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_OC5_SetConfig+0x76>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a16      	ldr	r2, [pc, #88]	@ (8006080 <TIM_OC5_SetConfig+0xbc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_OC5_SetConfig+0x76>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a15      	ldr	r2, [pc, #84]	@ (8006084 <TIM_OC5_SetConfig+0xc0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC5_SetConfig+0x76>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a14      	ldr	r2, [pc, #80]	@ (8006088 <TIM_OC5_SetConfig+0xc4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d109      	bne.n	800604e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006040:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	621a      	str	r2, [r3, #32]
}
 8006068:	bf00      	nop
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	fffeff8f 	.word	0xfffeff8f
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4b22      	ldr	r3, [pc, #136]	@ (8006140 <TIM_OC6_SetConfig+0xb4>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	051b      	lsls	r3, r3, #20
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <TIM_OC6_SetConfig+0xb8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_OC6_SetConfig+0x78>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <TIM_OC6_SetConfig+0xbc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_OC6_SetConfig+0x78>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	@ (800614c <TIM_OC6_SetConfig+0xc0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_OC6_SetConfig+0x78>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <TIM_OC6_SetConfig+0xc4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_OC6_SetConfig+0x78>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <TIM_OC6_SetConfig+0xc8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d109      	bne.n	8006118 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800610a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	029b      	lsls	r3, r3, #10
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	feff8fff 	.word	0xfeff8fff
 8006144:	40010000 	.word	0x40010000
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0210 	bic.w	r2, r3, #16
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <TIM_ITRx_SetConfig+0x38>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	f043 0307 	orr.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	609a      	str	r2, [r3, #8]
}
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	ffcfff8f 	.word	0xffcfff8f

08006254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	431a      	orrs	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e077      	b.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a35      	ldr	r2, [pc, #212]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d004      	beq.n	80062e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a34      	ldr	r2, [pc, #208]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d108      	bne.n	80062f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a25      	ldr	r2, [pc, #148]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d02c      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631e:	d027      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a22      	ldr	r2, [pc, #136]	@ (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a21      	ldr	r2, [pc, #132]	@ (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d01d      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1f      	ldr	r2, [pc, #124]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1a      	ldr	r2, [pc, #104]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1a      	ldr	r2, [pc, #104]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10c      	bne.n	800638a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006376:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40010000 	.word	0x40010000
 80063ac:	40010400 	.word	0x40010400
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40001800 	.word	0x40001800
 80063c0:	40014000 	.word	0x40014000
 80063c4:	4000e000 	.word	0x4000e000
 80063c8:	4000e400 	.word	0x4000e400

080063cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e04a      	b.n	80064b0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7fa fd23 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2224      	movs	r2, #36	@ 0x24
 8006436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fa76 	bl	8007944 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fc07 	bl	8006c6c <UART_SetConfig>
 800645e:	4603      	mov	r3, r0
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e023      	b.n	80064b0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006486:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0208 	orr.w	r2, r2, #8
 8006496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 faed 	bl	8007a88 <UART_CheckIdleState>
 80064ae:	4603      	mov	r3, r0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b0ba      	sub	sp, #232	@ 0xe8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80064e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80064e6:	4013      	ands	r3, r2
 80064e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80064ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d11b      	bne.n	800652c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800650c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8377 	beq.w	8006c10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
      }
      return;
 800652a:	e371      	b.n	8006c10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800652c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8123 	beq.w	800677c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006536:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800653a:	4b8d      	ldr	r3, [pc, #564]	@ (8006770 <HAL_UART_IRQHandler+0x2b8>)
 800653c:	4013      	ands	r3, r2
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006542:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006546:	4b8b      	ldr	r3, [pc, #556]	@ (8006774 <HAL_UART_IRQHandler+0x2bc>)
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8116 	beq.w	800677c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d011      	beq.n	8006580 <HAL_UART_IRQHandler+0xc8>
 800655c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2201      	movs	r2, #1
 800656e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	f043 0201 	orr.w	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d011      	beq.n	80065b0 <HAL_UART_IRQHandler+0xf8>
 800658c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2202      	movs	r2, #2
 800659e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a6:	f043 0204 	orr.w	r2, r3, #4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d011      	beq.n	80065e0 <HAL_UART_IRQHandler+0x128>
 80065bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2204      	movs	r2, #4
 80065ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	f043 0202 	orr.w	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d017      	beq.n	800661c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006770 <HAL_UART_IRQHandler+0x2b8>)
 80065fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2208      	movs	r2, #8
 800660a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006612:	f043 0208 	orr.w	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006624:	2b00      	cmp	r3, #0
 8006626:	d012      	beq.n	800664e <HAL_UART_IRQHandler+0x196>
 8006628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800663c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006644:	f043 0220 	orr.w	r2, r3, #32
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 82dd 	beq.w	8006c14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d013      	beq.n	800668e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800666a:	f003 0320 	and.w	r3, r3, #32
 800666e:	2b00      	cmp	r3, #0
 8006670:	d105      	bne.n	800667e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d007      	beq.n	800668e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006694:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a2:	2b40      	cmp	r3, #64	@ 0x40
 80066a4:	d005      	beq.n	80066b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d054      	beq.n	800675c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fb00 	bl	8007cb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c2:	2b40      	cmp	r3, #64	@ 0x40
 80066c4:	d146      	bne.n	8006754 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3308      	adds	r3, #8
 80066ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800670a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1d9      	bne.n	80066c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006718:	2b00      	cmp	r3, #0
 800671a:	d017      	beq.n	800674c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006722:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <HAL_UART_IRQHandler+0x2c0>)
 8006724:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672c:	4618      	mov	r0, r3
 800672e:	f7fb fb8d 	bl	8001e4c <HAL_DMA_Abort_IT>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d019      	beq.n	800676c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800673e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006746:	4610      	mov	r0, r2
 8006748:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674a:	e00f      	b.n	800676c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa77 	bl	8006c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006752:	e00b      	b.n	800676c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fa73 	bl	8006c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675a:	e007      	b.n	800676c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fa6f 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800676a:	e253      	b.n	8006c14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	bf00      	nop
    return;
 800676e:	e251      	b.n	8006c14 <HAL_UART_IRQHandler+0x75c>
 8006770:	10000001 	.word	0x10000001
 8006774:	04000120 	.word	0x04000120
 8006778:	08007d85 	.word	0x08007d85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006780:	2b01      	cmp	r3, #1
 8006782:	f040 81e7 	bne.w	8006b54 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 81e0 	beq.w	8006b54 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 81d9 	beq.w	8006b54 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b4:	2b40      	cmp	r3, #64	@ 0x40
 80067b6:	f040 8151 	bne.w	8006a5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a96      	ldr	r2, [pc, #600]	@ (8006a1c <HAL_UART_IRQHandler+0x564>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d068      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a93      	ldr	r2, [pc, #588]	@ (8006a20 <HAL_UART_IRQHandler+0x568>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d061      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a91      	ldr	r2, [pc, #580]	@ (8006a24 <HAL_UART_IRQHandler+0x56c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d05a      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a8e      	ldr	r2, [pc, #568]	@ (8006a28 <HAL_UART_IRQHandler+0x570>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d053      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a8c      	ldr	r2, [pc, #560]	@ (8006a2c <HAL_UART_IRQHandler+0x574>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d04c      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a89      	ldr	r2, [pc, #548]	@ (8006a30 <HAL_UART_IRQHandler+0x578>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d045      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a87      	ldr	r2, [pc, #540]	@ (8006a34 <HAL_UART_IRQHandler+0x57c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d03e      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a84      	ldr	r2, [pc, #528]	@ (8006a38 <HAL_UART_IRQHandler+0x580>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d037      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a82      	ldr	r2, [pc, #520]	@ (8006a3c <HAL_UART_IRQHandler+0x584>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d030      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a7f      	ldr	r2, [pc, #508]	@ (8006a40 <HAL_UART_IRQHandler+0x588>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d029      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a44 <HAL_UART_IRQHandler+0x58c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a7a      	ldr	r2, [pc, #488]	@ (8006a48 <HAL_UART_IRQHandler+0x590>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01b      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a78      	ldr	r2, [pc, #480]	@ (8006a4c <HAL_UART_IRQHandler+0x594>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d014      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a75      	ldr	r2, [pc, #468]	@ (8006a50 <HAL_UART_IRQHandler+0x598>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00d      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a73      	ldr	r2, [pc, #460]	@ (8006a54 <HAL_UART_IRQHandler+0x59c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d006      	beq.n	800689a <HAL_UART_IRQHandler+0x3e2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a70      	ldr	r2, [pc, #448]	@ (8006a58 <HAL_UART_IRQHandler+0x5a0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d106      	bne.n	80068a8 <HAL_UART_IRQHandler+0x3f0>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	e005      	b.n	80068b4 <HAL_UART_IRQHandler+0x3fc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 81ab 	beq.w	8006c18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80068c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068cc:	429a      	cmp	r2, r3
 80068ce:	f080 81a3 	bcs.w	8006c18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e8:	f000 8087 	beq.w	80069fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800691a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006922:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800692e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1da      	bne.n	80068ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800695a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800695e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006962:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800696c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e1      	bne.n	8006936 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006996:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006998:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800699c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e3      	bne.n	8006972 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c8:	f023 0310 	bic.w	r3, r3, #16
 80069cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e4      	bne.n	80069b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fa ff0b 	bl	8001810 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f91d 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a1a:	e0fd      	b.n	8006c18 <HAL_UART_IRQHandler+0x760>
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80cf 	beq.w	8006c1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80ca 	beq.w	8006c1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e4      	bne.n	8006a88 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	4b55      	ldr	r3, [pc, #340]	@ (8006c28 <HAL_UART_IRQHandler+0x770>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ae2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0310 	bic.w	r3, r3, #16
 8006b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69b9      	ldr	r1, [r7, #24]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e4      	bne.n	8006b0a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f881 	bl	8006c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b52:	e063      	b.n	8006c1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_UART_IRQHandler+0x6c6>
 8006b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f945 	bl	8007e06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b7c:	e051      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03a      	beq.n	8006c20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
    }
    return;
 8006bb2:	e035      	b.n	8006c20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x71c>
 8006bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f8ef 	bl	8007db0 <UART_EndTransmit_IT>
    return;
 8006bd2:	e026      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x73c>
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006be4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 f91e 	bl	8007e2e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf2:	e016      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <HAL_UART_IRQHandler+0x76a>
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da0c      	bge.n	8006c22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 f906 	bl	8007e1a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c0e:	e008      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
      return;
 8006c10:	bf00      	nop
 8006c12:	e006      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
    return;
 8006c14:	bf00      	nop
 8006c16:	e004      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
      return;
 8006c18:	bf00      	nop
 8006c1a:	e002      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
      return;
 8006c1c:	bf00      	nop
 8006c1e:	e000      	b.n	8006c22 <HAL_UART_IRQHandler+0x76a>
    return;
 8006c20:	bf00      	nop
  }
}
 8006c22:	37e8      	adds	r7, #232	@ 0xe8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	effffffe 	.word	0xeffffffe

08006c2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c70:	b092      	sub	sp, #72	@ 0x48
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8006f94 <UART_SetConfig+0x328>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4ab3      	ldr	r2, [pc, #716]	@ (8006f98 <UART_SetConfig+0x32c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d004      	beq.n	8006cd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	4baf      	ldr	r3, [pc, #700]	@ (8006f9c <UART_SetConfig+0x330>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf2:	f023 010f 	bic.w	r1, r3, #15
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4aa6      	ldr	r2, [pc, #664]	@ (8006fa0 <UART_SetConfig+0x334>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d177      	bne.n	8006dfc <UART_SetConfig+0x190>
 8006d0c:	4ba5      	ldr	r3, [pc, #660]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d14:	2b28      	cmp	r3, #40	@ 0x28
 8006d16:	d86d      	bhi.n	8006df4 <UART_SetConfig+0x188>
 8006d18:	a201      	add	r2, pc, #4	@ (adr r2, 8006d20 <UART_SetConfig+0xb4>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006dc5 	.word	0x08006dc5
 8006d24:	08006df5 	.word	0x08006df5
 8006d28:	08006df5 	.word	0x08006df5
 8006d2c:	08006df5 	.word	0x08006df5
 8006d30:	08006df5 	.word	0x08006df5
 8006d34:	08006df5 	.word	0x08006df5
 8006d38:	08006df5 	.word	0x08006df5
 8006d3c:	08006df5 	.word	0x08006df5
 8006d40:	08006dcd 	.word	0x08006dcd
 8006d44:	08006df5 	.word	0x08006df5
 8006d48:	08006df5 	.word	0x08006df5
 8006d4c:	08006df5 	.word	0x08006df5
 8006d50:	08006df5 	.word	0x08006df5
 8006d54:	08006df5 	.word	0x08006df5
 8006d58:	08006df5 	.word	0x08006df5
 8006d5c:	08006df5 	.word	0x08006df5
 8006d60:	08006dd5 	.word	0x08006dd5
 8006d64:	08006df5 	.word	0x08006df5
 8006d68:	08006df5 	.word	0x08006df5
 8006d6c:	08006df5 	.word	0x08006df5
 8006d70:	08006df5 	.word	0x08006df5
 8006d74:	08006df5 	.word	0x08006df5
 8006d78:	08006df5 	.word	0x08006df5
 8006d7c:	08006df5 	.word	0x08006df5
 8006d80:	08006ddd 	.word	0x08006ddd
 8006d84:	08006df5 	.word	0x08006df5
 8006d88:	08006df5 	.word	0x08006df5
 8006d8c:	08006df5 	.word	0x08006df5
 8006d90:	08006df5 	.word	0x08006df5
 8006d94:	08006df5 	.word	0x08006df5
 8006d98:	08006df5 	.word	0x08006df5
 8006d9c:	08006df5 	.word	0x08006df5
 8006da0:	08006de5 	.word	0x08006de5
 8006da4:	08006df5 	.word	0x08006df5
 8006da8:	08006df5 	.word	0x08006df5
 8006dac:	08006df5 	.word	0x08006df5
 8006db0:	08006df5 	.word	0x08006df5
 8006db4:	08006df5 	.word	0x08006df5
 8006db8:	08006df5 	.word	0x08006df5
 8006dbc:	08006df5 	.word	0x08006df5
 8006dc0:	08006ded 	.word	0x08006ded
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dca:	e326      	b.n	800741a <UART_SetConfig+0x7ae>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd2:	e322      	b.n	800741a <UART_SetConfig+0x7ae>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dda:	e31e      	b.n	800741a <UART_SetConfig+0x7ae>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de2:	e31a      	b.n	800741a <UART_SetConfig+0x7ae>
 8006de4:	2320      	movs	r3, #32
 8006de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dea:	e316      	b.n	800741a <UART_SetConfig+0x7ae>
 8006dec:	2340      	movs	r3, #64	@ 0x40
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df2:	e312      	b.n	800741a <UART_SetConfig+0x7ae>
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfa:	e30e      	b.n	800741a <UART_SetConfig+0x7ae>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a69      	ldr	r2, [pc, #420]	@ (8006fa8 <UART_SetConfig+0x33c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d130      	bne.n	8006e68 <UART_SetConfig+0x1fc>
 8006e06:	4b67      	ldr	r3, [pc, #412]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b05      	cmp	r3, #5
 8006e10:	d826      	bhi.n	8006e60 <UART_SetConfig+0x1f4>
 8006e12:	a201      	add	r2, pc, #4	@ (adr r2, 8006e18 <UART_SetConfig+0x1ac>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e36:	e2f0      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3e:	e2ec      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e46:	e2e8      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e4e:	e2e4      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e50:	2320      	movs	r3, #32
 8006e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e56:	e2e0      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e58:	2340      	movs	r3, #64	@ 0x40
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5e:	e2dc      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e60:	2380      	movs	r3, #128	@ 0x80
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e66:	e2d8      	b.n	800741a <UART_SetConfig+0x7ae>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a4f      	ldr	r2, [pc, #316]	@ (8006fac <UART_SetConfig+0x340>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d130      	bne.n	8006ed4 <UART_SetConfig+0x268>
 8006e72:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d826      	bhi.n	8006ecc <UART_SetConfig+0x260>
 8006e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0x218>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006ea5 	.word	0x08006ea5
 8006e8c:	08006ead 	.word	0x08006ead
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ea2:	e2ba      	b.n	800741a <UART_SetConfig+0x7ae>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eaa:	e2b6      	b.n	800741a <UART_SetConfig+0x7ae>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eb2:	e2b2      	b.n	800741a <UART_SetConfig+0x7ae>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eba:	e2ae      	b.n	800741a <UART_SetConfig+0x7ae>
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec2:	e2aa      	b.n	800741a <UART_SetConfig+0x7ae>
 8006ec4:	2340      	movs	r3, #64	@ 0x40
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eca:	e2a6      	b.n	800741a <UART_SetConfig+0x7ae>
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed2:	e2a2      	b.n	800741a <UART_SetConfig+0x7ae>
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a35      	ldr	r2, [pc, #212]	@ (8006fb0 <UART_SetConfig+0x344>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d130      	bne.n	8006f40 <UART_SetConfig+0x2d4>
 8006ede:	4b31      	ldr	r3, [pc, #196]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d826      	bhi.n	8006f38 <UART_SetConfig+0x2cc>
 8006eea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <UART_SetConfig+0x284>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f11 	.word	0x08006f11
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f29 	.word	0x08006f29
 8006f04:	08006f31 	.word	0x08006f31
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0e:	e284      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f10:	2304      	movs	r3, #4
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f16:	e280      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f18:	2308      	movs	r3, #8
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1e:	e27c      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f20:	2310      	movs	r3, #16
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f26:	e278      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f28:	2320      	movs	r3, #32
 8006f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2e:	e274      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f30:	2340      	movs	r3, #64	@ 0x40
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f36:	e270      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f38:	2380      	movs	r3, #128	@ 0x80
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3e:	e26c      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <UART_SetConfig+0x348>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d142      	bne.n	8006fd0 <UART_SetConfig+0x364>
 8006f4a:	4b16      	ldr	r3, [pc, #88]	@ (8006fa4 <UART_SetConfig+0x338>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d838      	bhi.n	8006fc8 <UART_SetConfig+0x35c>
 8006f56:	a201      	add	r2, pc, #4	@ (adr r2, 8006f5c <UART_SetConfig+0x2f0>)
 8006f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006f7d 	.word	0x08006f7d
 8006f64:	08006f85 	.word	0x08006f85
 8006f68:	08006f8d 	.word	0x08006f8d
 8006f6c:	08006fb9 	.word	0x08006fb9
 8006f70:	08006fc1 	.word	0x08006fc1
 8006f74:	2300      	movs	r3, #0
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7a:	e24e      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f82:	e24a      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f84:	2308      	movs	r3, #8
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8a:	e246      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f92:	e242      	b.n	800741a <UART_SetConfig+0x7ae>
 8006f94:	cfff69f3 	.word	0xcfff69f3
 8006f98:	58000c00 	.word	0x58000c00
 8006f9c:	11fff4ff 	.word	0x11fff4ff
 8006fa0:	40011000 	.word	0x40011000
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	40004400 	.word	0x40004400
 8006fac:	40004800 	.word	0x40004800
 8006fb0:	40004c00 	.word	0x40004c00
 8006fb4:	40005000 	.word	0x40005000
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e22c      	b.n	800741a <UART_SetConfig+0x7ae>
 8006fc0:	2340      	movs	r3, #64	@ 0x40
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e228      	b.n	800741a <UART_SetConfig+0x7ae>
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fce:	e224      	b.n	800741a <UART_SetConfig+0x7ae>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4ab1      	ldr	r2, [pc, #708]	@ (800729c <UART_SetConfig+0x630>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d176      	bne.n	80070c8 <UART_SetConfig+0x45c>
 8006fda:	4bb1      	ldr	r3, [pc, #708]	@ (80072a0 <UART_SetConfig+0x634>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fe2:	2b28      	cmp	r3, #40	@ 0x28
 8006fe4:	d86c      	bhi.n	80070c0 <UART_SetConfig+0x454>
 8006fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fec <UART_SetConfig+0x380>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007091 	.word	0x08007091
 8006ff0:	080070c1 	.word	0x080070c1
 8006ff4:	080070c1 	.word	0x080070c1
 8006ff8:	080070c1 	.word	0x080070c1
 8006ffc:	080070c1 	.word	0x080070c1
 8007000:	080070c1 	.word	0x080070c1
 8007004:	080070c1 	.word	0x080070c1
 8007008:	080070c1 	.word	0x080070c1
 800700c:	08007099 	.word	0x08007099
 8007010:	080070c1 	.word	0x080070c1
 8007014:	080070c1 	.word	0x080070c1
 8007018:	080070c1 	.word	0x080070c1
 800701c:	080070c1 	.word	0x080070c1
 8007020:	080070c1 	.word	0x080070c1
 8007024:	080070c1 	.word	0x080070c1
 8007028:	080070c1 	.word	0x080070c1
 800702c:	080070a1 	.word	0x080070a1
 8007030:	080070c1 	.word	0x080070c1
 8007034:	080070c1 	.word	0x080070c1
 8007038:	080070c1 	.word	0x080070c1
 800703c:	080070c1 	.word	0x080070c1
 8007040:	080070c1 	.word	0x080070c1
 8007044:	080070c1 	.word	0x080070c1
 8007048:	080070c1 	.word	0x080070c1
 800704c:	080070a9 	.word	0x080070a9
 8007050:	080070c1 	.word	0x080070c1
 8007054:	080070c1 	.word	0x080070c1
 8007058:	080070c1 	.word	0x080070c1
 800705c:	080070c1 	.word	0x080070c1
 8007060:	080070c1 	.word	0x080070c1
 8007064:	080070c1 	.word	0x080070c1
 8007068:	080070c1 	.word	0x080070c1
 800706c:	080070b1 	.word	0x080070b1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070c1 	.word	0x080070c1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	2301      	movs	r3, #1
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007096:	e1c0      	b.n	800741a <UART_SetConfig+0x7ae>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709e:	e1bc      	b.n	800741a <UART_SetConfig+0x7ae>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070a6:	e1b8      	b.n	800741a <UART_SetConfig+0x7ae>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ae:	e1b4      	b.n	800741a <UART_SetConfig+0x7ae>
 80070b0:	2320      	movs	r3, #32
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b6:	e1b0      	b.n	800741a <UART_SetConfig+0x7ae>
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070be:	e1ac      	b.n	800741a <UART_SetConfig+0x7ae>
 80070c0:	2380      	movs	r3, #128	@ 0x80
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c6:	e1a8      	b.n	800741a <UART_SetConfig+0x7ae>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a75      	ldr	r2, [pc, #468]	@ (80072a4 <UART_SetConfig+0x638>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d130      	bne.n	8007134 <UART_SetConfig+0x4c8>
 80070d2:	4b73      	ldr	r3, [pc, #460]	@ (80072a0 <UART_SetConfig+0x634>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b05      	cmp	r3, #5
 80070dc:	d826      	bhi.n	800712c <UART_SetConfig+0x4c0>
 80070de:	a201      	add	r2, pc, #4	@ (adr r2, 80070e4 <UART_SetConfig+0x478>)
 80070e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e4:	080070fd 	.word	0x080070fd
 80070e8:	08007105 	.word	0x08007105
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	08007115 	.word	0x08007115
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	2300      	movs	r3, #0
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007102:	e18a      	b.n	800741a <UART_SetConfig+0x7ae>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800710a:	e186      	b.n	800741a <UART_SetConfig+0x7ae>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007112:	e182      	b.n	800741a <UART_SetConfig+0x7ae>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711a:	e17e      	b.n	800741a <UART_SetConfig+0x7ae>
 800711c:	2320      	movs	r3, #32
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e17a      	b.n	800741a <UART_SetConfig+0x7ae>
 8007124:	2340      	movs	r3, #64	@ 0x40
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e176      	b.n	800741a <UART_SetConfig+0x7ae>
 800712c:	2380      	movs	r3, #128	@ 0x80
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e172      	b.n	800741a <UART_SetConfig+0x7ae>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a5b      	ldr	r2, [pc, #364]	@ (80072a8 <UART_SetConfig+0x63c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d130      	bne.n	80071a0 <UART_SetConfig+0x534>
 800713e:	4b58      	ldr	r3, [pc, #352]	@ (80072a0 <UART_SetConfig+0x634>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b05      	cmp	r3, #5
 8007148:	d826      	bhi.n	8007198 <UART_SetConfig+0x52c>
 800714a:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <UART_SetConfig+0x4e4>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007169 	.word	0x08007169
 8007154:	08007171 	.word	0x08007171
 8007158:	08007179 	.word	0x08007179
 800715c:	08007181 	.word	0x08007181
 8007160:	08007189 	.word	0x08007189
 8007164:	08007191 	.word	0x08007191
 8007168:	2300      	movs	r3, #0
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800716e:	e154      	b.n	800741a <UART_SetConfig+0x7ae>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007176:	e150      	b.n	800741a <UART_SetConfig+0x7ae>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800717e:	e14c      	b.n	800741a <UART_SetConfig+0x7ae>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007186:	e148      	b.n	800741a <UART_SetConfig+0x7ae>
 8007188:	2320      	movs	r3, #32
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e144      	b.n	800741a <UART_SetConfig+0x7ae>
 8007190:	2340      	movs	r3, #64	@ 0x40
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e140      	b.n	800741a <UART_SetConfig+0x7ae>
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719e:	e13c      	b.n	800741a <UART_SetConfig+0x7ae>
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a41      	ldr	r2, [pc, #260]	@ (80072ac <UART_SetConfig+0x640>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	f040 8082 	bne.w	80072b0 <UART_SetConfig+0x644>
 80071ac:	4b3c      	ldr	r3, [pc, #240]	@ (80072a0 <UART_SetConfig+0x634>)
 80071ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071b4:	2b28      	cmp	r3, #40	@ 0x28
 80071b6:	d86d      	bhi.n	8007294 <UART_SetConfig+0x628>
 80071b8:	a201      	add	r2, pc, #4	@ (adr r2, 80071c0 <UART_SetConfig+0x554>)
 80071ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071be:	bf00      	nop
 80071c0:	08007265 	.word	0x08007265
 80071c4:	08007295 	.word	0x08007295
 80071c8:	08007295 	.word	0x08007295
 80071cc:	08007295 	.word	0x08007295
 80071d0:	08007295 	.word	0x08007295
 80071d4:	08007295 	.word	0x08007295
 80071d8:	08007295 	.word	0x08007295
 80071dc:	08007295 	.word	0x08007295
 80071e0:	0800726d 	.word	0x0800726d
 80071e4:	08007295 	.word	0x08007295
 80071e8:	08007295 	.word	0x08007295
 80071ec:	08007295 	.word	0x08007295
 80071f0:	08007295 	.word	0x08007295
 80071f4:	08007295 	.word	0x08007295
 80071f8:	08007295 	.word	0x08007295
 80071fc:	08007295 	.word	0x08007295
 8007200:	08007275 	.word	0x08007275
 8007204:	08007295 	.word	0x08007295
 8007208:	08007295 	.word	0x08007295
 800720c:	08007295 	.word	0x08007295
 8007210:	08007295 	.word	0x08007295
 8007214:	08007295 	.word	0x08007295
 8007218:	08007295 	.word	0x08007295
 800721c:	08007295 	.word	0x08007295
 8007220:	0800727d 	.word	0x0800727d
 8007224:	08007295 	.word	0x08007295
 8007228:	08007295 	.word	0x08007295
 800722c:	08007295 	.word	0x08007295
 8007230:	08007295 	.word	0x08007295
 8007234:	08007295 	.word	0x08007295
 8007238:	08007295 	.word	0x08007295
 800723c:	08007295 	.word	0x08007295
 8007240:	08007285 	.word	0x08007285
 8007244:	08007295 	.word	0x08007295
 8007248:	08007295 	.word	0x08007295
 800724c:	08007295 	.word	0x08007295
 8007250:	08007295 	.word	0x08007295
 8007254:	08007295 	.word	0x08007295
 8007258:	08007295 	.word	0x08007295
 800725c:	08007295 	.word	0x08007295
 8007260:	0800728d 	.word	0x0800728d
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726a:	e0d6      	b.n	800741a <UART_SetConfig+0x7ae>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e0d2      	b.n	800741a <UART_SetConfig+0x7ae>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e0ce      	b.n	800741a <UART_SetConfig+0x7ae>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007282:	e0ca      	b.n	800741a <UART_SetConfig+0x7ae>
 8007284:	2320      	movs	r3, #32
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e0c6      	b.n	800741a <UART_SetConfig+0x7ae>
 800728c:	2340      	movs	r3, #64	@ 0x40
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e0c2      	b.n	800741a <UART_SetConfig+0x7ae>
 8007294:	2380      	movs	r3, #128	@ 0x80
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800729a:	e0be      	b.n	800741a <UART_SetConfig+0x7ae>
 800729c:	40011400 	.word	0x40011400
 80072a0:	58024400 	.word	0x58024400
 80072a4:	40007800 	.word	0x40007800
 80072a8:	40007c00 	.word	0x40007c00
 80072ac:	40011800 	.word	0x40011800
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4aad      	ldr	r2, [pc, #692]	@ (800756c <UART_SetConfig+0x900>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d176      	bne.n	80073a8 <UART_SetConfig+0x73c>
 80072ba:	4bad      	ldr	r3, [pc, #692]	@ (8007570 <UART_SetConfig+0x904>)
 80072bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072c2:	2b28      	cmp	r3, #40	@ 0x28
 80072c4:	d86c      	bhi.n	80073a0 <UART_SetConfig+0x734>
 80072c6:	a201      	add	r2, pc, #4	@ (adr r2, 80072cc <UART_SetConfig+0x660>)
 80072c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072cc:	08007371 	.word	0x08007371
 80072d0:	080073a1 	.word	0x080073a1
 80072d4:	080073a1 	.word	0x080073a1
 80072d8:	080073a1 	.word	0x080073a1
 80072dc:	080073a1 	.word	0x080073a1
 80072e0:	080073a1 	.word	0x080073a1
 80072e4:	080073a1 	.word	0x080073a1
 80072e8:	080073a1 	.word	0x080073a1
 80072ec:	08007379 	.word	0x08007379
 80072f0:	080073a1 	.word	0x080073a1
 80072f4:	080073a1 	.word	0x080073a1
 80072f8:	080073a1 	.word	0x080073a1
 80072fc:	080073a1 	.word	0x080073a1
 8007300:	080073a1 	.word	0x080073a1
 8007304:	080073a1 	.word	0x080073a1
 8007308:	080073a1 	.word	0x080073a1
 800730c:	08007381 	.word	0x08007381
 8007310:	080073a1 	.word	0x080073a1
 8007314:	080073a1 	.word	0x080073a1
 8007318:	080073a1 	.word	0x080073a1
 800731c:	080073a1 	.word	0x080073a1
 8007320:	080073a1 	.word	0x080073a1
 8007324:	080073a1 	.word	0x080073a1
 8007328:	080073a1 	.word	0x080073a1
 800732c:	08007389 	.word	0x08007389
 8007330:	080073a1 	.word	0x080073a1
 8007334:	080073a1 	.word	0x080073a1
 8007338:	080073a1 	.word	0x080073a1
 800733c:	080073a1 	.word	0x080073a1
 8007340:	080073a1 	.word	0x080073a1
 8007344:	080073a1 	.word	0x080073a1
 8007348:	080073a1 	.word	0x080073a1
 800734c:	08007391 	.word	0x08007391
 8007350:	080073a1 	.word	0x080073a1
 8007354:	080073a1 	.word	0x080073a1
 8007358:	080073a1 	.word	0x080073a1
 800735c:	080073a1 	.word	0x080073a1
 8007360:	080073a1 	.word	0x080073a1
 8007364:	080073a1 	.word	0x080073a1
 8007368:	080073a1 	.word	0x080073a1
 800736c:	08007399 	.word	0x08007399
 8007370:	2301      	movs	r3, #1
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e050      	b.n	800741a <UART_SetConfig+0x7ae>
 8007378:	2304      	movs	r3, #4
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e04c      	b.n	800741a <UART_SetConfig+0x7ae>
 8007380:	2308      	movs	r3, #8
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e048      	b.n	800741a <UART_SetConfig+0x7ae>
 8007388:	2310      	movs	r3, #16
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800738e:	e044      	b.n	800741a <UART_SetConfig+0x7ae>
 8007390:	2320      	movs	r3, #32
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007396:	e040      	b.n	800741a <UART_SetConfig+0x7ae>
 8007398:	2340      	movs	r3, #64	@ 0x40
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739e:	e03c      	b.n	800741a <UART_SetConfig+0x7ae>
 80073a0:	2380      	movs	r3, #128	@ 0x80
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a6:	e038      	b.n	800741a <UART_SetConfig+0x7ae>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a71      	ldr	r2, [pc, #452]	@ (8007574 <UART_SetConfig+0x908>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d130      	bne.n	8007414 <UART_SetConfig+0x7a8>
 80073b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007570 <UART_SetConfig+0x904>)
 80073b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d826      	bhi.n	800740c <UART_SetConfig+0x7a0>
 80073be:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <UART_SetConfig+0x758>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073dd 	.word	0x080073dd
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	080073ed 	.word	0x080073ed
 80073d0:	080073f5 	.word	0x080073f5
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	08007405 	.word	0x08007405
 80073dc:	2302      	movs	r3, #2
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e01a      	b.n	800741a <UART_SetConfig+0x7ae>
 80073e4:	2304      	movs	r3, #4
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e016      	b.n	800741a <UART_SetConfig+0x7ae>
 80073ec:	2308      	movs	r3, #8
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e012      	b.n	800741a <UART_SetConfig+0x7ae>
 80073f4:	2310      	movs	r3, #16
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fa:	e00e      	b.n	800741a <UART_SetConfig+0x7ae>
 80073fc:	2320      	movs	r3, #32
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007402:	e00a      	b.n	800741a <UART_SetConfig+0x7ae>
 8007404:	2340      	movs	r3, #64	@ 0x40
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740a:	e006      	b.n	800741a <UART_SetConfig+0x7ae>
 800740c:	2380      	movs	r3, #128	@ 0x80
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007412:	e002      	b.n	800741a <UART_SetConfig+0x7ae>
 8007414:	2380      	movs	r3, #128	@ 0x80
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a55      	ldr	r2, [pc, #340]	@ (8007574 <UART_SetConfig+0x908>)
 8007420:	4293      	cmp	r3, r2
 8007422:	f040 80f8 	bne.w	8007616 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007426:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800742a:	2b20      	cmp	r3, #32
 800742c:	dc46      	bgt.n	80074bc <UART_SetConfig+0x850>
 800742e:	2b02      	cmp	r3, #2
 8007430:	db75      	blt.n	800751e <UART_SetConfig+0x8b2>
 8007432:	3b02      	subs	r3, #2
 8007434:	2b1e      	cmp	r3, #30
 8007436:	d872      	bhi.n	800751e <UART_SetConfig+0x8b2>
 8007438:	a201      	add	r2, pc, #4	@ (adr r2, 8007440 <UART_SetConfig+0x7d4>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	080074c3 	.word	0x080074c3
 8007444:	0800751f 	.word	0x0800751f
 8007448:	080074cb 	.word	0x080074cb
 800744c:	0800751f 	.word	0x0800751f
 8007450:	0800751f 	.word	0x0800751f
 8007454:	0800751f 	.word	0x0800751f
 8007458:	080074db 	.word	0x080074db
 800745c:	0800751f 	.word	0x0800751f
 8007460:	0800751f 	.word	0x0800751f
 8007464:	0800751f 	.word	0x0800751f
 8007468:	0800751f 	.word	0x0800751f
 800746c:	0800751f 	.word	0x0800751f
 8007470:	0800751f 	.word	0x0800751f
 8007474:	0800751f 	.word	0x0800751f
 8007478:	080074eb 	.word	0x080074eb
 800747c:	0800751f 	.word	0x0800751f
 8007480:	0800751f 	.word	0x0800751f
 8007484:	0800751f 	.word	0x0800751f
 8007488:	0800751f 	.word	0x0800751f
 800748c:	0800751f 	.word	0x0800751f
 8007490:	0800751f 	.word	0x0800751f
 8007494:	0800751f 	.word	0x0800751f
 8007498:	0800751f 	.word	0x0800751f
 800749c:	0800751f 	.word	0x0800751f
 80074a0:	0800751f 	.word	0x0800751f
 80074a4:	0800751f 	.word	0x0800751f
 80074a8:	0800751f 	.word	0x0800751f
 80074ac:	0800751f 	.word	0x0800751f
 80074b0:	0800751f 	.word	0x0800751f
 80074b4:	0800751f 	.word	0x0800751f
 80074b8:	08007511 	.word	0x08007511
 80074bc:	2b40      	cmp	r3, #64	@ 0x40
 80074be:	d02a      	beq.n	8007516 <UART_SetConfig+0x8aa>
 80074c0:	e02d      	b.n	800751e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80074c2:	f7fd fa25 	bl	8004910 <HAL_RCCEx_GetD3PCLK1Freq>
 80074c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074c8:	e02f      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fd fa34 	bl	800493c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d8:	e027      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074da:	f107 0318 	add.w	r3, r7, #24
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd fb80 	bl	8004be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e8:	e01f      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ea:	4b21      	ldr	r3, [pc, #132]	@ (8007570 <UART_SetConfig+0x904>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007570 <UART_SetConfig+0x904>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	4a1d      	ldr	r2, [pc, #116]	@ (8007578 <UART_SetConfig+0x90c>)
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007508:	e00f      	b.n	800752a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800750a:	4b1b      	ldr	r3, [pc, #108]	@ (8007578 <UART_SetConfig+0x90c>)
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750e:	e00c      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007510:	4b1a      	ldr	r3, [pc, #104]	@ (800757c <UART_SetConfig+0x910>)
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007514:	e009      	b.n	800752a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800751c:	e005      	b.n	800752a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800752a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 81ee 	beq.w	800790e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <UART_SetConfig+0x914>)
 8007538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800753c:	461a      	mov	r2, r3
 800753e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007540:	fbb3 f3f2 	udiv	r3, r3, r2
 8007544:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007552:	429a      	cmp	r2, r3
 8007554:	d305      	bcc.n	8007562 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800755c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800755e:	429a      	cmp	r2, r3
 8007560:	d910      	bls.n	8007584 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007568:	e1d1      	b.n	800790e <UART_SetConfig+0xca2>
 800756a:	bf00      	nop
 800756c:	40011c00 	.word	0x40011c00
 8007570:	58024400 	.word	0x58024400
 8007574:	58000c00 	.word	0x58000c00
 8007578:	03d09000 	.word	0x03d09000
 800757c:	003d0900 	.word	0x003d0900
 8007580:	080080c8 	.word	0x080080c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007586:	2200      	movs	r2, #0
 8007588:	60bb      	str	r3, [r7, #8]
 800758a:	60fa      	str	r2, [r7, #12]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	4ac0      	ldr	r2, [pc, #768]	@ (8007894 <UART_SetConfig+0xc28>)
 8007592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007596:	b29b      	uxth	r3, r3
 8007598:	2200      	movs	r2, #0
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	607a      	str	r2, [r7, #4]
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075a6:	f7f8 feb1 	bl	800030c <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	f04f 0300 	mov.w	r3, #0
 80075ba:	020b      	lsls	r3, r1, #8
 80075bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075c0:	0202      	lsls	r2, r0, #8
 80075c2:	6979      	ldr	r1, [r7, #20]
 80075c4:	6849      	ldr	r1, [r1, #4]
 80075c6:	0849      	lsrs	r1, r1, #1
 80075c8:	2000      	movs	r0, #0
 80075ca:	460c      	mov	r4, r1
 80075cc:	4605      	mov	r5, r0
 80075ce:	eb12 0804 	adds.w	r8, r2, r4
 80075d2:	eb43 0905 	adc.w	r9, r3, r5
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	469a      	mov	sl, r3
 80075de:	4693      	mov	fp, r2
 80075e0:	4652      	mov	r2, sl
 80075e2:	465b      	mov	r3, fp
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f8 fe90 	bl	800030c <__aeabi_uldivmod>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4613      	mov	r3, r2
 80075f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075fa:	d308      	bcc.n	800760e <UART_SetConfig+0x9a2>
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007602:	d204      	bcs.n	800760e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800760a:	60da      	str	r2, [r3, #12]
 800760c:	e17f      	b.n	800790e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007614:	e17b      	b.n	800790e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800761e:	f040 80bd 	bne.w	800779c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007622:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007626:	2b20      	cmp	r3, #32
 8007628:	dc48      	bgt.n	80076bc <UART_SetConfig+0xa50>
 800762a:	2b00      	cmp	r3, #0
 800762c:	db7b      	blt.n	8007726 <UART_SetConfig+0xaba>
 800762e:	2b20      	cmp	r3, #32
 8007630:	d879      	bhi.n	8007726 <UART_SetConfig+0xaba>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <UART_SetConfig+0x9cc>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	080076c3 	.word	0x080076c3
 800763c:	080076cb 	.word	0x080076cb
 8007640:	08007727 	.word	0x08007727
 8007644:	08007727 	.word	0x08007727
 8007648:	080076d3 	.word	0x080076d3
 800764c:	08007727 	.word	0x08007727
 8007650:	08007727 	.word	0x08007727
 8007654:	08007727 	.word	0x08007727
 8007658:	080076e3 	.word	0x080076e3
 800765c:	08007727 	.word	0x08007727
 8007660:	08007727 	.word	0x08007727
 8007664:	08007727 	.word	0x08007727
 8007668:	08007727 	.word	0x08007727
 800766c:	08007727 	.word	0x08007727
 8007670:	08007727 	.word	0x08007727
 8007674:	08007727 	.word	0x08007727
 8007678:	080076f3 	.word	0x080076f3
 800767c:	08007727 	.word	0x08007727
 8007680:	08007727 	.word	0x08007727
 8007684:	08007727 	.word	0x08007727
 8007688:	08007727 	.word	0x08007727
 800768c:	08007727 	.word	0x08007727
 8007690:	08007727 	.word	0x08007727
 8007694:	08007727 	.word	0x08007727
 8007698:	08007727 	.word	0x08007727
 800769c:	08007727 	.word	0x08007727
 80076a0:	08007727 	.word	0x08007727
 80076a4:	08007727 	.word	0x08007727
 80076a8:	08007727 	.word	0x08007727
 80076ac:	08007727 	.word	0x08007727
 80076b0:	08007727 	.word	0x08007727
 80076b4:	08007727 	.word	0x08007727
 80076b8:	08007719 	.word	0x08007719
 80076bc:	2b40      	cmp	r3, #64	@ 0x40
 80076be:	d02e      	beq.n	800771e <UART_SetConfig+0xab2>
 80076c0:	e031      	b.n	8007726 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c2:	f7fb ff59 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 80076c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076c8:	e033      	b.n	8007732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ca:	f7fb ff6b 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80076ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076d0:	e02f      	b.n	8007732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fd f930 	bl	800493c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076e0:	e027      	b.n	8007732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e2:	f107 0318 	add.w	r3, r7, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd fa7c 	bl	8004be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f0:	e01f      	b.n	8007732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f2:	4b69      	ldr	r3, [pc, #420]	@ (8007898 <UART_SetConfig+0xc2c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076fe:	4b66      	ldr	r3, [pc, #408]	@ (8007898 <UART_SetConfig+0xc2c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	08db      	lsrs	r3, r3, #3
 8007704:	f003 0303 	and.w	r3, r3, #3
 8007708:	4a64      	ldr	r2, [pc, #400]	@ (800789c <UART_SetConfig+0xc30>)
 800770a:	fa22 f303 	lsr.w	r3, r2, r3
 800770e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007710:	e00f      	b.n	8007732 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007712:	4b62      	ldr	r3, [pc, #392]	@ (800789c <UART_SetConfig+0xc30>)
 8007714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007716:	e00c      	b.n	8007732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007718:	4b61      	ldr	r3, [pc, #388]	@ (80078a0 <UART_SetConfig+0xc34>)
 800771a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771c:	e009      	b.n	8007732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800771e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007724:	e005      	b.n	8007732 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80ea 	beq.w	800790e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773e:	4a55      	ldr	r2, [pc, #340]	@ (8007894 <UART_SetConfig+0xc28>)
 8007740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007744:	461a      	mov	r2, r3
 8007746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007748:	fbb3 f3f2 	udiv	r3, r3, r2
 800774c:	005a      	lsls	r2, r3, #1
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	441a      	add	r2, r3
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	fbb2 f3f3 	udiv	r3, r2, r3
 800775e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	2b0f      	cmp	r3, #15
 8007764:	d916      	bls.n	8007794 <UART_SetConfig+0xb28>
 8007766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800776c:	d212      	bcs.n	8007794 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007770:	b29b      	uxth	r3, r3
 8007772:	f023 030f 	bic.w	r3, r3, #15
 8007776:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	b29b      	uxth	r3, r3
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	b29a      	uxth	r2, r3
 8007784:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007786:	4313      	orrs	r3, r2
 8007788:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007790:	60da      	str	r2, [r3, #12]
 8007792:	e0bc      	b.n	800790e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800779a:	e0b8      	b.n	800790e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800779c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	dc4b      	bgt.n	800783c <UART_SetConfig+0xbd0>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f2c0 8087 	blt.w	80078b8 <UART_SetConfig+0xc4c>
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	f200 8084 	bhi.w	80078b8 <UART_SetConfig+0xc4c>
 80077b0:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <UART_SetConfig+0xb4c>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	08007843 	.word	0x08007843
 80077bc:	0800784b 	.word	0x0800784b
 80077c0:	080078b9 	.word	0x080078b9
 80077c4:	080078b9 	.word	0x080078b9
 80077c8:	08007853 	.word	0x08007853
 80077cc:	080078b9 	.word	0x080078b9
 80077d0:	080078b9 	.word	0x080078b9
 80077d4:	080078b9 	.word	0x080078b9
 80077d8:	08007863 	.word	0x08007863
 80077dc:	080078b9 	.word	0x080078b9
 80077e0:	080078b9 	.word	0x080078b9
 80077e4:	080078b9 	.word	0x080078b9
 80077e8:	080078b9 	.word	0x080078b9
 80077ec:	080078b9 	.word	0x080078b9
 80077f0:	080078b9 	.word	0x080078b9
 80077f4:	080078b9 	.word	0x080078b9
 80077f8:	08007873 	.word	0x08007873
 80077fc:	080078b9 	.word	0x080078b9
 8007800:	080078b9 	.word	0x080078b9
 8007804:	080078b9 	.word	0x080078b9
 8007808:	080078b9 	.word	0x080078b9
 800780c:	080078b9 	.word	0x080078b9
 8007810:	080078b9 	.word	0x080078b9
 8007814:	080078b9 	.word	0x080078b9
 8007818:	080078b9 	.word	0x080078b9
 800781c:	080078b9 	.word	0x080078b9
 8007820:	080078b9 	.word	0x080078b9
 8007824:	080078b9 	.word	0x080078b9
 8007828:	080078b9 	.word	0x080078b9
 800782c:	080078b9 	.word	0x080078b9
 8007830:	080078b9 	.word	0x080078b9
 8007834:	080078b9 	.word	0x080078b9
 8007838:	080078ab 	.word	0x080078ab
 800783c:	2b40      	cmp	r3, #64	@ 0x40
 800783e:	d037      	beq.n	80078b0 <UART_SetConfig+0xc44>
 8007840:	e03a      	b.n	80078b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007842:	f7fb fe99 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8007846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007848:	e03c      	b.n	80078c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800784a:	f7fb feab 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 800784e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007850:	e038      	b.n	80078c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd f870 	bl	800493c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007860:	e030      	b.n	80078c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007862:	f107 0318 	add.w	r3, r7, #24
 8007866:	4618      	mov	r0, r3
 8007868:	f7fd f9bc 	bl	8004be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007870:	e028      	b.n	80078c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007872:	4b09      	ldr	r3, [pc, #36]	@ (8007898 <UART_SetConfig+0xc2c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b00      	cmp	r3, #0
 800787c:	d012      	beq.n	80078a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800787e:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <UART_SetConfig+0xc2c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	08db      	lsrs	r3, r3, #3
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	4a04      	ldr	r2, [pc, #16]	@ (800789c <UART_SetConfig+0xc30>)
 800788a:	fa22 f303 	lsr.w	r3, r2, r3
 800788e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007890:	e018      	b.n	80078c4 <UART_SetConfig+0xc58>
 8007892:	bf00      	nop
 8007894:	080080c8 	.word	0x080080c8
 8007898:	58024400 	.word	0x58024400
 800789c:	03d09000 	.word	0x03d09000
 80078a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80078a4:	4b24      	ldr	r3, [pc, #144]	@ (8007938 <UART_SetConfig+0xccc>)
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078a8:	e00c      	b.n	80078c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078aa:	4b24      	ldr	r3, [pc, #144]	@ (800793c <UART_SetConfig+0xcd0>)
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ae:	e009      	b.n	80078c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b6:	e005      	b.n	80078c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078c2:	bf00      	nop
    }

    if (pclk != 0U)
 80078c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d021      	beq.n	800790e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007940 <UART_SetConfig+0xcd4>)
 80078d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	085b      	lsrs	r3, r3, #1
 80078e2:	441a      	add	r2, r3
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f0:	2b0f      	cmp	r3, #15
 80078f2:	d909      	bls.n	8007908 <UART_SetConfig+0xc9c>
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078fa:	d205      	bcs.n	8007908 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078fe:	b29a      	uxth	r2, r3
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60da      	str	r2, [r3, #12]
 8007906:	e002      	b.n	800790e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2201      	movs	r2, #1
 8007912:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2201      	movs	r2, #1
 800791a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2200      	movs	r2, #0
 8007922:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2200      	movs	r2, #0
 8007928:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800792a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800792e:	4618      	mov	r0, r3
 8007930:	3748      	adds	r7, #72	@ 0x48
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007938:	03d09000 	.word	0x03d09000
 800793c:	003d0900 	.word	0x003d0900
 8007940:	080080c8 	.word	0x080080c8

08007944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	f003 0308 	and.w	r3, r3, #8
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00a      	beq.n	80079b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	f003 0304 	and.w	r3, r3, #4
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00a      	beq.n	80079f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01a      	beq.n	8007a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a42:	d10a      	bne.n	8007a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	605a      	str	r2, [r3, #4]
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b098      	sub	sp, #96	@ 0x60
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a98:	f7f9 fc34 	bl	8001304 <HAL_GetTick>
 8007a9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d12f      	bne.n	8007b0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f88e 	bl	8007bdc <UART_WaitOnFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d022      	beq.n	8007b0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e6      	bne.n	8007ac6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e063      	b.n	8007bd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d149      	bne.n	8007bae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b22:	2200      	movs	r2, #0
 8007b24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f857 	bl	8007bdc <UART_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d03c      	beq.n	8007bae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	623b      	str	r3, [r7, #32]
   return(result);
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b52:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e6      	bne.n	8007b34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b86:	61fa      	str	r2, [r7, #28]
 8007b88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69b9      	ldr	r1, [r7, #24]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	617b      	str	r3, [r7, #20]
   return(result);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e012      	b.n	8007bd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3758      	adds	r7, #88	@ 0x58
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	4613      	mov	r3, r2
 8007bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bec:	e04f      	b.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d04b      	beq.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bf6:	f7f9 fb85 	bl	8001304 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d302      	bcc.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e04e      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d037      	beq.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b80      	cmp	r3, #128	@ 0x80
 8007c22:	d034      	beq.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b40      	cmp	r3, #64	@ 0x40
 8007c28:	d031      	beq.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d110      	bne.n	8007c5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f839 	bl	8007cb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2208      	movs	r2, #8
 8007c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e029      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c68:	d111      	bne.n	8007c8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f81f 	bl	8007cb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e00f      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2301      	moveq	r3, #1
 8007ca0:	2300      	movne	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d0a0      	beq.n	8007bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b095      	sub	sp, #84	@ 0x54
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e6      	bne.n	8007cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <UART_EndRxTransfer+0xc8>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3308      	adds	r3, #8
 8007d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e5      	bne.n	8007cf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d118      	bne.n	8007d60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f023 0310 	bic.w	r3, r3, #16
 8007d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d4c:	61bb      	str	r3, [r7, #24]
 8007d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	6979      	ldr	r1, [r7, #20]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e6      	bne.n	8007d2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d74:	bf00      	nop
 8007d76:	3754      	adds	r7, #84	@ 0x54
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	effffffe 	.word	0xeffffffe

08007d84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7fe ff4c 	bl	8006c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dcc:	61fb      	str	r3, [r7, #28]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	61bb      	str	r3, [r7, #24]
 8007dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6979      	ldr	r1, [r7, #20]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	613b      	str	r3, [r7, #16]
   return(result);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e6      	bne.n	8007db8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7fe ff17 	bl	8006c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfe:	bf00      	nop
 8007e00:	3720      	adds	r7, #32
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b083      	sub	sp, #12
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e027      	b.n	8007ea8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2224      	movs	r2, #36	@ 0x24
 8007e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0201 	bic.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e02d      	b.n	8007f28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2224      	movs	r2, #36	@ 0x24
 8007ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0201 	bic.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	430a      	orrs	r2, r1
 8007f06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f84f 	bl	8007fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e02d      	b.n	8007fa4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	@ 0x24
 8007f54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0201 	bic.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f811 	bl	8007fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fcc:	e031      	b.n	8008032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fce:	2310      	movs	r3, #16
 8007fd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	0e5b      	lsrs	r3, r3, #25
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	0f5b      	lsrs	r3, r3, #29
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	7b3a      	ldrb	r2, [r7, #12]
 8007ffa:	4911      	ldr	r1, [pc, #68]	@ (8008040 <UARTEx_SetNbDataToProcess+0x94>)
 8007ffc:	5c8a      	ldrb	r2, [r1, r2]
 8007ffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008002:	7b3a      	ldrb	r2, [r7, #12]
 8008004:	490f      	ldr	r1, [pc, #60]	@ (8008044 <UARTEx_SetNbDataToProcess+0x98>)
 8008006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008008:	fb93 f3f2 	sdiv	r3, r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	7b7a      	ldrb	r2, [r7, #13]
 8008018:	4909      	ldr	r1, [pc, #36]	@ (8008040 <UARTEx_SetNbDataToProcess+0x94>)
 800801a:	5c8a      	ldrb	r2, [r1, r2]
 800801c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008020:	7b7a      	ldrb	r2, [r7, #13]
 8008022:	4908      	ldr	r1, [pc, #32]	@ (8008044 <UARTEx_SetNbDataToProcess+0x98>)
 8008024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008026:	fb93 f3f2 	sdiv	r3, r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	080080e0 	.word	0x080080e0
 8008044:	080080e8 	.word	0x080080e8

08008048 <memset>:
 8008048:	4402      	add	r2, r0
 800804a:	4603      	mov	r3, r0
 800804c:	4293      	cmp	r3, r2
 800804e:	d100      	bne.n	8008052 <memset+0xa>
 8008050:	4770      	bx	lr
 8008052:	f803 1b01 	strb.w	r1, [r3], #1
 8008056:	e7f9      	b.n	800804c <memset+0x4>

08008058 <__libc_init_array>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	4d0d      	ldr	r5, [pc, #52]	@ (8008090 <__libc_init_array+0x38>)
 800805c:	4c0d      	ldr	r4, [pc, #52]	@ (8008094 <__libc_init_array+0x3c>)
 800805e:	1b64      	subs	r4, r4, r5
 8008060:	10a4      	asrs	r4, r4, #2
 8008062:	2600      	movs	r6, #0
 8008064:	42a6      	cmp	r6, r4
 8008066:	d109      	bne.n	800807c <__libc_init_array+0x24>
 8008068:	4d0b      	ldr	r5, [pc, #44]	@ (8008098 <__libc_init_array+0x40>)
 800806a:	4c0c      	ldr	r4, [pc, #48]	@ (800809c <__libc_init_array+0x44>)
 800806c:	f000 f818 	bl	80080a0 <_init>
 8008070:	1b64      	subs	r4, r4, r5
 8008072:	10a4      	asrs	r4, r4, #2
 8008074:	2600      	movs	r6, #0
 8008076:	42a6      	cmp	r6, r4
 8008078:	d105      	bne.n	8008086 <__libc_init_array+0x2e>
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008080:	4798      	blx	r3
 8008082:	3601      	adds	r6, #1
 8008084:	e7ee      	b.n	8008064 <__libc_init_array+0xc>
 8008086:	f855 3b04 	ldr.w	r3, [r5], #4
 800808a:	4798      	blx	r3
 800808c:	3601      	adds	r6, #1
 800808e:	e7f2      	b.n	8008076 <__libc_init_array+0x1e>
 8008090:	080080f8 	.word	0x080080f8
 8008094:	080080f8 	.word	0x080080f8
 8008098:	080080f8 	.word	0x080080f8
 800809c:	080080fc 	.word	0x080080fc

080080a0 <_init>:
 80080a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a2:	bf00      	nop
 80080a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a6:	bc08      	pop	{r3}
 80080a8:	469e      	mov	lr, r3
 80080aa:	4770      	bx	lr

080080ac <_fini>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	bf00      	nop
 80080b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b2:	bc08      	pop	{r3}
 80080b4:	469e      	mov	lr, r3
 80080b6:	4770      	bx	lr
