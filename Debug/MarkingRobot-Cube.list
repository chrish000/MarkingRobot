
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d9c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080a0  080080a0  000090a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080a8  080080a8  000090a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080080ac  080080ac  000090ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080080b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  24000014  080080c4  0000a014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001ec  080080c4  0000a1ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000167c9  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a49  00000000  00000000  0002080b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  00023258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000daa  00000000  00000000  000243d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000336d  00000000  00000000  0002517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019ef4  00000000  00000000  000284e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014c6f5  00000000  00000000  000423db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018ead0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000049f4  00000000  00000000  0018eb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  00193508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08008050 	.word	0x08008050

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	08008050 	.word	0x08008050

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000602:	f000 fb15 	bl	8000c30 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fd91 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f841 	bl	8000690 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f9e7 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f995 	bl	8000940 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000616:	f000 f8ab 	bl	8000770 <MX_CRC_Init>
  MX_UART8_Init();
 800061a:	f000 f941 	bl	80008a0 <MX_UART8_Init>
  MX_TIM2_Init();
 800061e:	f000 f8c9 	bl	80007b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000622:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x7c>)
 8000624:	f004 fdc6 	bl	80051b4 <HAL_TIM_Base_Start_IT>
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 8000628:	4b14      	ldr	r3, [pc, #80]	@ (800067c <main+0x80>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	4a13      	ldr	r2, [pc, #76]	@ (800067c <main+0x80>)
 8000630:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <main+0x80>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	@ 0x40
 800064a:	480d      	ldr	r0, [pc, #52]	@ (8000680 <main+0x84>)
 800064c:	f001 ffaa 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <main+0x88>)
 8000656:	f001 ffa5 	bl	80025a4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(BatteryAlarm)
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <main+0x8c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0fa      	beq.n	800065a <main+0x5e>
		{
			//TODO gebe leeren Batteriestand auf Display aus
			if(Move_To_Pos(HomePos))
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <main+0x90>)
 8000666:	f000 fb1f 	bl	8000ca8 <Move_To_Pos>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0f4      	beq.n	800065a <main+0x5e>
				Error_Handler();
 8000670:	f000 fb0a 	bl	8000c88 <Error_Handler>
		if(BatteryAlarm)
 8000674:	e7f1      	b.n	800065a <main+0x5e>
 8000676:	bf00      	nop
 8000678:	24000054 	.word	0x24000054
 800067c:	58024400 	.word	0x58024400
 8000680:	58020c00 	.word	0x58020c00
 8000684:	58021000 	.word	0x58021000
 8000688:	240001c8 	.word	0x240001c8
 800068c:	240001cc 	.word	0x240001cc

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069a:	224c      	movs	r2, #76	@ 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 fcaa 	bl	8007ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2220      	movs	r2, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 fca4 	bl	8007ff8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f001 ffc5 	bl	8002640 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <SystemClock_Config+0xdc>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a2b      	ldr	r2, [pc, #172]	@ (800076c <SystemClock_Config+0xdc>)
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <SystemClock_Config+0xdc>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d2:	bf00      	nop
 80006d4:	4b25      	ldr	r3, [pc, #148]	@ (800076c <SystemClock_Config+0xdc>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006e0:	d1f8      	bne.n	80006d4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006ea:	2340      	movs	r3, #64	@ 0x40
 80006ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80006fa:	2322      	movs	r3, #34	@ 0x22
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000702:	2303      	movs	r3, #3
 8000704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800070a:	230c      	movs	r3, #12
 800070c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800070e:	2300      	movs	r3, #0
 8000710:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000712:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000716:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071c:	4618      	mov	r0, r3
 800071e:	f001 ffc9 	bl	80026b4 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000728:	f000 faae 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	233f      	movs	r3, #63	@ 0x3f
 800072e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2303      	movs	r3, #3
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000738:	2308      	movs	r3, #8
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800073c:	2340      	movs	r3, #64	@ 0x40
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000748:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800074a:	2340      	movs	r3, #64	@ 0x40
 800074c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2103      	movs	r1, #3
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fb88 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800075e:	f000 fa93 	bl	8000c88 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3770      	adds	r7, #112	@ 0x70
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58024800 	.word	0x58024800

08000770 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <MX_CRC_Init+0x40>)
 8000778:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800077a:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000786:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <MX_CRC_Init+0x3c>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_CRC_Init+0x3c>)
 8000794:	2201      	movs	r2, #1
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	@ (80007ac <MX_CRC_Init+0x3c>)
 800079a:	f000 ff05 	bl	80015a8 <HAL_CRC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007a4:	f000 fa70 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	24000030 	.word	0x24000030
 80007b0:	58024c00 	.word	0x58024c00

080007b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	@ 0x38
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007f0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80007f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <MX_TIM2_Init+0xe8>)
 80007fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000802:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_TIM2_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b24      	ldr	r3, [pc, #144]	@ (800089c <MX_TIM2_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000810:	4822      	ldr	r0, [pc, #136]	@ (800089c <MX_TIM2_Init+0xe8>)
 8000812:	f004 fc77 	bl	8005104 <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800081c:	f000 fa34 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800082a:	4619      	mov	r1, r3
 800082c:	481b      	ldr	r0, [pc, #108]	@ (800089c <MX_TIM2_Init+0xe8>)
 800082e:	f004 ffc3 	bl	80057b8 <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000838:	f000 fa26 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800083c:	4817      	ldr	r0, [pc, #92]	@ (800089c <MX_TIM2_Init+0xe8>)
 800083e:	f004 fd3f 	bl	80052c0 <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000848:	f000 fa1e 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	@ (800089c <MX_TIM2_Init+0xe8>)
 800085c:	f005 fcf2 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000866:	f000 fa0f 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	@ 0x60
 800086c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800086e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_TIM2_Init+0xe8>)
 8000884:	f004 fe84 	bl	8005590 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800088e:	f000 f9fb 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3738      	adds	r7, #56	@ 0x38
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	24000054 	.word	0x24000054

080008a0 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_UART8_Init+0x98>)
 80008a6:	4a25      	ldr	r2, [pc, #148]	@ (800093c <MX_UART8_Init+0x9c>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80008aa:	4b23      	ldr	r3, [pc, #140]	@ (8000938 <MX_UART8_Init+0x98>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_UART8_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_UART8_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_UART8_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_UART8_Init+0x98>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_UART8_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_UART8_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_UART8_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_UART8_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_UART8_Init+0x98>)
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart8.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_UART8_Init+0x98>)
 80008ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_UART8_Init+0x98>)
 80008f2:	f005 fd61 	bl	80063b8 <HAL_HalfDuplex_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_UART8_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 f9c4 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_UART8_Init+0x98>)
 8000904:	f007 faae 	bl	8007e64 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_UART8_Init+0x72>
  {
    Error_Handler();
 800090e:	f000 f9bb 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_UART8_Init+0x98>)
 8000916:	f007 fae3 	bl	8007ee0 <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_UART8_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 f9b2 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_UART8_Init+0x98>)
 8000926:	f007 fa64 	bl	8007df2 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_UART8_Init+0x94>
  {
    Error_Handler();
 8000930:	f000 f9aa 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	240000a0 	.word	0x240000a0
 800093c:	40007c00 	.word	0x40007c00

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000946:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <MX_USART2_UART_Init+0x9c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000984:	2280      	movs	r2, #128	@ 0x80
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 800098a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800098e:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 8000992:	f005 fd11 	bl	80063b8 <HAL_HalfDuplex_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800099c:	f000 f974 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 80009a4:	f007 fa5e 	bl	8007e64 <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80009ae:	f000 f96b 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 80009b6:	f007 fa93 	bl	8007ee0 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80009c0:	f000 f962 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_USART2_UART_Init+0x98>)
 80009c6:	f007 fa14 	bl	8007df2 <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80009d0:	f000 f95a 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24000134 	.word	0x24000134
 80009dc:	40004400 	.word	0x40004400

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f6:	4b52      	ldr	r3, [pc, #328]	@ (8000b40 <MX_GPIO_Init+0x160>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a50      	ldr	r2, [pc, #320]	@ (8000b40 <MX_GPIO_Init+0x160>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b4e      	ldr	r3, [pc, #312]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	4b4a      	ldr	r3, [pc, #296]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	4a49      	ldr	r2, [pc, #292]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a24:	4b46      	ldr	r3, [pc, #280]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	4b43      	ldr	r3, [pc, #268]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a41      	ldr	r2, [pc, #260]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b3f      	ldr	r3, [pc, #252]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b3b      	ldr	r3, [pc, #236]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a3a      	ldr	r2, [pc, #232]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b37      	ldr	r3, [pc, #220]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210c      	movs	r1, #12
 8000a72:	4834      	ldr	r0, [pc, #208]	@ (8000b44 <MX_GPIO_Init+0x164>)
 8000a74:	f001 fd96 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2118      	movs	r1, #24
 8000a7c:	4832      	ldr	r0, [pc, #200]	@ (8000b48 <MX_GPIO_Init+0x168>)
 8000a7e:	f001 fd91 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2140      	movs	r1, #64	@ 0x40
 8000a86:	4830      	ldr	r0, [pc, #192]	@ (8000b48 <MX_GPIO_Init+0x168>)
 8000a88:	f001 fd8c 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2108      	movs	r1, #8
 8000a90:	482e      	ldr	r0, [pc, #184]	@ (8000b4c <MX_GPIO_Init+0x16c>)
 8000a92:	f001 fd87 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2101      	movs	r1, #1
 8000a9a:	482a      	ldr	r0, [pc, #168]	@ (8000b44 <MX_GPIO_Init+0x164>)
 8000a9c:	f001 fd82 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
  GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 8000aa0:	230d      	movs	r3, #13
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4823      	ldr	r0, [pc, #140]	@ (8000b44 <MX_GPIO_Init+0x164>)
 8000ab8:	f001 fbcc 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRDET_Pin */
  GPIO_InitStruct.Pin = PWRDET_Pin;
 8000abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481f      	ldr	r0, [pc, #124]	@ (8000b50 <MX_GPIO_Init+0x170>)
 8000ad4:	f001 fbbe 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
  GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4819      	ldr	r0, [pc, #100]	@ (8000b50 <MX_GPIO_Init+0x170>)
 8000aec:	f001 fbb2 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000af0:	2358      	movs	r3, #88	@ 0x58
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4810      	ldr	r0, [pc, #64]	@ (8000b48 <MX_GPIO_Init+0x168>)
 8000b08:	f001 fba4 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : HE0_PWM_Pin */
  GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <MX_GPIO_Init+0x16c>)
 8000b24:	f001 fb96 	bl	8002254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2028      	movs	r0, #40	@ 0x28
 8000b2e:	f000 fc8e 	bl	800144e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b32:	2028      	movs	r0, #40	@ 0x28
 8000b34:	f000 fca5 	bl	8001482 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	@ 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58024400 	.word	0x58024400
 8000b44:	58021000 	.word	0x58021000
 8000b48:	58020c00 	.word	0x58020c00
 8000b4c:	58020400 	.word	0x58020400
 8000b50:	58020800 	.word	0x58020800

08000b54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b64:	d102      	bne.n	8000b6c <HAL_GPIO_EXTI_Callback+0x18>
	{
		BatteryAlarm = true;
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	240001c8 	.word	0x240001c8

08000b7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b8c:	d13d      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if (PWMEnabledX)
 8000b8e:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d038      	beq.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			PWMCounterX++;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ba4:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod)
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d307      	bcc.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x4a>
			{
				PWMCounterX = 0;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000bc4:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth)
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d205      	bcs.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2110      	movs	r1, #16
 8000bda:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000bdc:	f001 fce2 	bl	80025a4 <HAL_GPIO_WritePin>
 8000be0:	e004      	b.n	8000bec <HAL_TIM_PeriodElapsedCallback+0x70>
			}
			else
			{
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2110      	movs	r1, #16
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000be8:	f001 fcdc 	bl	80025a4 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX)
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d307      	bcc.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				PWMEnabledX = false;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2110      	movs	r1, #16
 8000c04:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c06:	f001 fccd 	bl	80025a4 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	240001e4 	.word	0x240001e4
 8000c18:	240001dc 	.word	0x240001dc
 8000c1c:	24000000 	.word	0x24000000
 8000c20:	240001d8 	.word	0x240001d8
 8000c24:	24000002 	.word	0x24000002
 8000c28:	58020c00 	.word	0x58020c00
 8000c2c:	240001e0 	.word	0x240001e0

08000c30 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c42:	f000 fc39 	bl	80014b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c52:	231f      	movs	r3, #31
 8000c54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c56:	2387      	movs	r3, #135	@ 0x87
 8000c58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fc57 	bl	8001528 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f000 fc34 	bl	80014e8 <HAL_MPU_Enable>

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000c90:	2108      	movs	r1, #8
 8000c92:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <Error_Handler+0x1c>)
 8000c94:	f001 fc9f 	bl	80025d6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000c98:	2064      	movs	r0, #100	@ 0x64
 8000c9a:	f000 fad9 	bl	8001250 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000c9e:	bf00      	nop
 8000ca0:	e7f6      	b.n	8000c90 <Error_Handler+0x8>
 8000ca2:	bf00      	nop
 8000ca4:	58020400 	.word	0x58020400

08000ca8 <Move_To_Pos>:
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, (Dir == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	PWMEnabledX = true; // Start Bewegung
}

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	if(NextPosition[0] != PosX && NextPosition[1] != PosY)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <Move_To_Pos+0x38>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d001      	beq.n	8000cd0 <Move_To_Pos+0x28>
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <Move_To_Pos+0x3c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
	{
		//TODO Logik für Bewegung zu nächstem Punkt
	}
	return true;
 8000cd0:	2301      	movs	r3, #1
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	240001d0 	.word	0x240001d0
 8000ce4:	240001d4 	.word	0x240001d4

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_MspInit+0x30>)
 8000cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf4:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x30>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x30>)
 8000d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	58024400 	.word	0x58024400

08000d1c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	@ (8000d58 <HAL_CRC_MspInit+0x3c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10e      	bne.n	8000d4c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_CRC_MspInit+0x40>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a09      	ldr	r2, [pc, #36]	@ (8000d5c <HAL_CRC_MspInit+0x40>)
 8000d36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <HAL_CRC_MspInit+0x40>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	58024c00 	.word	0x58024c00
 8000d5c:	58024400 	.word	0x58024400

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d70:	d116      	bne.n	8000da0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d78:	4a0b      	ldr	r2, [pc, #44]	@ (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_TIM_Base_MspInit+0x48>)
 8000d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	201c      	movs	r0, #28
 8000d96:	f000 fb5a 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d9a:	201c      	movs	r0, #28
 8000d9c:	f000 fb71 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	58024400 	.word	0x58024400

08000dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0ba      	sub	sp, #232	@ 0xe8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	22b8      	movs	r2, #184	@ 0xb8
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 f913 	bl	8007ff8 <memset>
  if(huart->Instance==UART8)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a54      	ldr	r2, [pc, #336]	@ (8000f28 <HAL_UART_MspInit+0x17c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d14e      	bne.n	8000e7a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000ddc:	f04f 0202 	mov.w	r2, #2
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fbc4 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dfe:	f7ff ff43 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000e02:	4b4a      	ldr	r3, [pc, #296]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e08:	4a48      	ldr	r2, [pc, #288]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000e0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e12:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e20:	4b42      	ldr	r3, [pc, #264]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	4a41      	ldr	r2, [pc, #260]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e30:	4b3e      	ldr	r3, [pc, #248]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000e56:	2308      	movs	r3, #8
 8000e58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4833      	ldr	r0, [pc, #204]	@ (8000f30 <HAL_UART_MspInit+0x184>)
 8000e64:	f001 f9f6 	bl	8002254 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2053      	movs	r0, #83	@ 0x53
 8000e6e:	f000 faee 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8000e72:	2053      	movs	r0, #83	@ 0x53
 8000e74:	f000 fb05 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e78:	e052      	b.n	8000f20 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f34 <HAL_UART_MspInit+0x188>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d14d      	bne.n	8000f20 <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e84:	f04f 0202 	mov.w	r2, #2
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0318 	add.w	r3, r7, #24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fb70 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000ea6:	f7ff feef 	bl	8000c88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_UART_MspInit+0x180>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8000ee6:	2320      	movs	r3, #32
 8000ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efe:	2307      	movs	r3, #7
 8000f00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480b      	ldr	r0, [pc, #44]	@ (8000f38 <HAL_UART_MspInit+0x18c>)
 8000f0c:	f001 f9a2 	bl	8002254 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2026      	movs	r0, #38	@ 0x26
 8000f16:	f000 fa9a 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f1a:	2026      	movs	r0, #38	@ 0x26
 8000f1c:	f000 fab1 	bl	8001482 <HAL_NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	37e8      	adds	r7, #232	@ 0xe8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40007c00 	.word	0x40007c00
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58021000 	.word	0x58021000
 8000f34:	40004400 	.word	0x40004400
 8000f38:	58020c00 	.word	0x58020c00

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <NMI_Handler+0x4>

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <MemManage_Handler+0x4>

08000f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f93d 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <TIM2_IRQHandler+0x10>)
 8000fa2:	f004 f9ee 	bl	8005382 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	24000054 	.word	0x24000054

08000fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <USART2_IRQHandler+0x10>)
 8000fb6:	f005 fa57 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	24000134 	.word	0x24000134

08000fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8000fc8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000fcc:	f001 fb1d 	bl	800260a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <UART8_IRQHandler+0x10>)
 8000fda:	f005 fa45 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	240000a0 	.word	0x240000a0

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fec:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <SystemInit+0xd0>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff2:	4a31      	ldr	r2, [pc, #196]	@ (80010b8 <SystemInit+0xd0>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <SystemInit+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	2b06      	cmp	r3, #6
 8001006:	d807      	bhi.n	8001018 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001008:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <SystemInit+0xd4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 030f 	bic.w	r3, r3, #15
 8001010:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <SystemInit+0xd4>)
 8001012:	f043 0307 	orr.w	r3, r3, #7
 8001016:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001018:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <SystemInit+0xd8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a28      	ldr	r2, [pc, #160]	@ (80010c0 <SystemInit+0xd8>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <SystemInit+0xd8>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800102a:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <SystemInit+0xd8>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4924      	ldr	r1, [pc, #144]	@ (80010c0 <SystemInit+0xd8>)
 8001030:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <SystemInit+0xdc>)
 8001032:	4013      	ands	r3, r2
 8001034:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <SystemInit+0xd4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <SystemInit+0xd4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 030f 	bic.w	r3, r3, #15
 800104a:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <SystemInit+0xd4>)
 800104c:	f043 0307 	orr.w	r3, r3, #7
 8001050:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <SystemInit+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <SystemInit+0xd8>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <SystemInit+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <SystemInit+0xd8>)
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <SystemInit+0xe0>)
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <SystemInit+0xd8>)
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <SystemInit+0xe4>)
 800106e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001070:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <SystemInit+0xd8>)
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <SystemInit+0xe8>)
 8001074:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <SystemInit+0xd8>)
 8001078:	2200      	movs	r2, #0
 800107a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800107c:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <SystemInit+0xd8>)
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <SystemInit+0xe8>)
 8001080:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <SystemInit+0xd8>)
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001088:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <SystemInit+0xd8>)
 800108a:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <SystemInit+0xe8>)
 800108c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <SystemInit+0xd8>)
 8001090:	2200      	movs	r2, #0
 8001092:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <SystemInit+0xd8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <SystemInit+0xd8>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <SystemInit+0xd8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <SystemInit+0xec>)
 80010a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	52002000 	.word	0x52002000
 80010c0:	58024400 	.word	0x58024400
 80010c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010c8:	02020200 	.word	0x02020200
 80010cc:	01ff0000 	.word	0x01ff0000
 80010d0:	01010280 	.word	0x01010280
 80010d4:	52004000 	.word	0x52004000

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f7ff ff84 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f006 ff7f 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fa77 	bl	80005fc <main>
  bx  lr
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001114:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001118:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 800111c:	080080b0 	.word	0x080080b0
  ldr r2, =_sbss
 8001120:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8001124:	240001ec 	.word	0x240001ec

08001128 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC3_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f980 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f002 f84c 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	@ (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	200f      	movs	r0, #15
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fdaf 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	08008068 	.word	0x08008068
 800119c:	24000008 	.word	0x24000008
 80011a0:	24000004 	.word	0x24000004

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f965 	bl	800149e <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f92f 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000010 	.word	0x24000010
 8001208:	24000004 	.word	0x24000004
 800120c:	2400000c 	.word	0x2400000c

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000010 	.word	0x24000010
 8001234:	240001e8 	.word	0x240001e8

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	240001e8 	.word	0x240001e8

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	24000010 	.word	0x24000010

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x40>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	05fa0000 	.word	0x05fa0000

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	@ (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	@ (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	@ (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	@ 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	@ (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff40 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff33 	bl	80012fc <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa4 	bl	80013f4 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014bc:	f3bf 8f5f 	dmb	sy
}
 80014c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <HAL_MPU_Disable+0x28>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_MPU_Disable+0x28>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_MPU_Disable+0x2c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	e000ed90 	.word	0xe000ed90

080014e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_MPU_Enable+0x38>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_MPU_Enable+0x3c>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_MPU_Enable+0x3c>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001506:	f3bf 8f4f 	dsb	sy
}
 800150a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800150c:	f3bf 8f6f 	isb	sy
}
 8001510:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed90 	.word	0xe000ed90
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	785a      	ldrb	r2, [r3, #1]
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001536:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001544:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7b1b      	ldrb	r3, [r3, #12]
 8001550:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7adb      	ldrb	r3, [r3, #11]
 8001556:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b5b      	ldrb	r3, [r3, #13]
 8001566:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7b9b      	ldrb	r3, [r3, #14]
 800156e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001570:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7bdb      	ldrb	r3, [r3, #15]
 8001576:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7a1b      	ldrb	r3, [r3, #8]
 8001586:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001588:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001592:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001594:	6113      	str	r3, [r2, #16]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed90 	.word	0xe000ed90

080015a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e054      	b.n	8001664 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7f5b      	ldrb	r3, [r3, #29]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fba6 	bl	8000d1c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10c      	bne.n	80015f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a22      	ldr	r2, [pc, #136]	@ (800166c <HAL_CRC_Init+0xc4>)
 80015e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0218 	bic.w	r2, r2, #24
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	e00c      	b.n	8001612 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	461a      	mov	r2, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f834 	bl	8001670 <HAL_CRCEx_Polynomial_Set>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e028      	b.n	8001664 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	795b      	ldrb	r3, [r3, #5]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f04f 32ff 	mov.w	r2, #4294967295
 8001622:	611a      	str	r2, [r3, #16]
 8001624:	e004      	b.n	8001630 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6912      	ldr	r2, [r2, #16]
 800162e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699a      	ldr	r2, [r3, #24]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	04c11db7 	.word	0x04c11db7

08001670 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001680:	231f      	movs	r3, #31
 8001682:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d102      	bne.n	8001694 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
 8001692:	e063      	b.n	800175c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001694:	bf00      	nop
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1e5a      	subs	r2, r3, #1
 800169a:	613a      	str	r2, [r7, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_CRCEx_Polynomial_Set+0x44>
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b18      	cmp	r3, #24
 80016b8:	d846      	bhi.n	8001748 <HAL_CRCEx_Polynomial_Set+0xd8>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	0800174f 	.word	0x0800174f
 80016c4:	08001749 	.word	0x08001749
 80016c8:	08001749 	.word	0x08001749
 80016cc:	08001749 	.word	0x08001749
 80016d0:	08001749 	.word	0x08001749
 80016d4:	08001749 	.word	0x08001749
 80016d8:	08001749 	.word	0x08001749
 80016dc:	08001749 	.word	0x08001749
 80016e0:	0800173d 	.word	0x0800173d
 80016e4:	08001749 	.word	0x08001749
 80016e8:	08001749 	.word	0x08001749
 80016ec:	08001749 	.word	0x08001749
 80016f0:	08001749 	.word	0x08001749
 80016f4:	08001749 	.word	0x08001749
 80016f8:	08001749 	.word	0x08001749
 80016fc:	08001749 	.word	0x08001749
 8001700:	08001731 	.word	0x08001731
 8001704:	08001749 	.word	0x08001749
 8001708:	08001749 	.word	0x08001749
 800170c:	08001749 	.word	0x08001749
 8001710:	08001749 	.word	0x08001749
 8001714:	08001749 	.word	0x08001749
 8001718:	08001749 	.word	0x08001749
 800171c:	08001749 	.word	0x08001749
 8001720:	08001725 	.word	0x08001725
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d913      	bls.n	8001752 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800172e:	e010      	b.n	8001752 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b07      	cmp	r3, #7
 8001734:	d90f      	bls.n	8001756 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800173a:	e00c      	b.n	8001756 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	d90b      	bls.n	800175a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001746:	e008      	b.n	800175a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]
        break;
 800174c:	e006      	b.n	800175c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800174e:	bf00      	nop
 8001750:	e004      	b.n	800175c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001752:	bf00      	nop
 8001754:	e002      	b.n	800175c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001756:	bf00      	nop
 8001758:	e000      	b.n	800175c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800175a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 0118 	bic.w	r1, r3, #24
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800177e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fd50 	bl	8001238 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e2dc      	b.n	8001d5e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d008      	beq.n	80017c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2280      	movs	r2, #128	@ 0x80
 80017b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e2cd      	b.n	8001d5e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a76      	ldr	r2, [pc, #472]	@ (80019a0 <HAL_DMA_Abort+0x214>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04a      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a74      	ldr	r2, [pc, #464]	@ (80019a4 <HAL_DMA_Abort+0x218>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d045      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a73      	ldr	r2, [pc, #460]	@ (80019a8 <HAL_DMA_Abort+0x21c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d040      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a71      	ldr	r2, [pc, #452]	@ (80019ac <HAL_DMA_Abort+0x220>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d03b      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a70      	ldr	r2, [pc, #448]	@ (80019b0 <HAL_DMA_Abort+0x224>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d036      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6e      	ldr	r2, [pc, #440]	@ (80019b4 <HAL_DMA_Abort+0x228>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6d      	ldr	r2, [pc, #436]	@ (80019b8 <HAL_DMA_Abort+0x22c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d02c      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6b      	ldr	r2, [pc, #428]	@ (80019bc <HAL_DMA_Abort+0x230>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d027      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6a      	ldr	r2, [pc, #424]	@ (80019c0 <HAL_DMA_Abort+0x234>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d022      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a68      	ldr	r2, [pc, #416]	@ (80019c4 <HAL_DMA_Abort+0x238>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01d      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a67      	ldr	r2, [pc, #412]	@ (80019c8 <HAL_DMA_Abort+0x23c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d018      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <HAL_DMA_Abort+0x240>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a64      	ldr	r2, [pc, #400]	@ (80019d0 <HAL_DMA_Abort+0x244>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00e      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a62      	ldr	r2, [pc, #392]	@ (80019d4 <HAL_DMA_Abort+0x248>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d009      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a61      	ldr	r2, [pc, #388]	@ (80019d8 <HAL_DMA_Abort+0x24c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d004      	beq.n	8001862 <HAL_DMA_Abort+0xd6>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5f      	ldr	r2, [pc, #380]	@ (80019dc <HAL_DMA_Abort+0x250>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_DMA_Abort+0xda>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_DMA_Abort+0xdc>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 021e 	bic.w	r2, r2, #30
 800187a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800188a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e00a      	b.n	80018aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020e 	bic.w	r2, r2, #14
 80018a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a3c      	ldr	r2, [pc, #240]	@ (80019a0 <HAL_DMA_Abort+0x214>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d072      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a3a      	ldr	r2, [pc, #232]	@ (80019a4 <HAL_DMA_Abort+0x218>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d06d      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a39      	ldr	r2, [pc, #228]	@ (80019a8 <HAL_DMA_Abort+0x21c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d068      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a37      	ldr	r2, [pc, #220]	@ (80019ac <HAL_DMA_Abort+0x220>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d063      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a36      	ldr	r2, [pc, #216]	@ (80019b0 <HAL_DMA_Abort+0x224>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d05e      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a34      	ldr	r2, [pc, #208]	@ (80019b4 <HAL_DMA_Abort+0x228>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d059      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a33      	ldr	r2, [pc, #204]	@ (80019b8 <HAL_DMA_Abort+0x22c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d054      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a31      	ldr	r2, [pc, #196]	@ (80019bc <HAL_DMA_Abort+0x230>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d04f      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a30      	ldr	r2, [pc, #192]	@ (80019c0 <HAL_DMA_Abort+0x234>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d04a      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2e      	ldr	r2, [pc, #184]	@ (80019c4 <HAL_DMA_Abort+0x238>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d045      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <HAL_DMA_Abort+0x23c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d040      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a2b      	ldr	r2, [pc, #172]	@ (80019cc <HAL_DMA_Abort+0x240>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d03b      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2a      	ldr	r2, [pc, #168]	@ (80019d0 <HAL_DMA_Abort+0x244>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d036      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a28      	ldr	r2, [pc, #160]	@ (80019d4 <HAL_DMA_Abort+0x248>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a27      	ldr	r2, [pc, #156]	@ (80019d8 <HAL_DMA_Abort+0x24c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d02c      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a25      	ldr	r2, [pc, #148]	@ (80019dc <HAL_DMA_Abort+0x250>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d027      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a24      	ldr	r2, [pc, #144]	@ (80019e0 <HAL_DMA_Abort+0x254>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d022      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a22      	ldr	r2, [pc, #136]	@ (80019e4 <HAL_DMA_Abort+0x258>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01d      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <HAL_DMA_Abort+0x25c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d018      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1f      	ldr	r2, [pc, #124]	@ (80019ec <HAL_DMA_Abort+0x260>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1e      	ldr	r2, [pc, #120]	@ (80019f0 <HAL_DMA_Abort+0x264>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00e      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1c      	ldr	r2, [pc, #112]	@ (80019f4 <HAL_DMA_Abort+0x268>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d009      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1b      	ldr	r2, [pc, #108]	@ (80019f8 <HAL_DMA_Abort+0x26c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d004      	beq.n	800199a <HAL_DMA_Abort+0x20e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <HAL_DMA_Abort+0x270>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d132      	bne.n	8001a00 <HAL_DMA_Abort+0x274>
 800199a:	2301      	movs	r3, #1
 800199c:	e031      	b.n	8001a02 <HAL_DMA_Abort+0x276>
 800199e:	bf00      	nop
 80019a0:	40020010 	.word	0x40020010
 80019a4:	40020028 	.word	0x40020028
 80019a8:	40020040 	.word	0x40020040
 80019ac:	40020058 	.word	0x40020058
 80019b0:	40020070 	.word	0x40020070
 80019b4:	40020088 	.word	0x40020088
 80019b8:	400200a0 	.word	0x400200a0
 80019bc:	400200b8 	.word	0x400200b8
 80019c0:	40020410 	.word	0x40020410
 80019c4:	40020428 	.word	0x40020428
 80019c8:	40020440 	.word	0x40020440
 80019cc:	40020458 	.word	0x40020458
 80019d0:	40020470 	.word	0x40020470
 80019d4:	40020488 	.word	0x40020488
 80019d8:	400204a0 	.word	0x400204a0
 80019dc:	400204b8 	.word	0x400204b8
 80019e0:	58025408 	.word	0x58025408
 80019e4:	5802541c 	.word	0x5802541c
 80019e8:	58025430 	.word	0x58025430
 80019ec:	58025444 	.word	0x58025444
 80019f0:	58025458 	.word	0x58025458
 80019f4:	5802546c 	.word	0x5802546c
 80019f8:	58025480 	.word	0x58025480
 80019fc:	58025494 	.word	0x58025494
 8001a00:	2300      	movs	r3, #0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd0 <HAL_DMA_Abort+0x444>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d04a      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd4 <HAL_DMA_Abort+0x448>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d045      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001bd8 <HAL_DMA_Abort+0x44c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d040      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a68      	ldr	r2, [pc, #416]	@ (8001bdc <HAL_DMA_Abort+0x450>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d03b      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a67      	ldr	r2, [pc, #412]	@ (8001be0 <HAL_DMA_Abort+0x454>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d036      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a65      	ldr	r2, [pc, #404]	@ (8001be4 <HAL_DMA_Abort+0x458>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d031      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a64      	ldr	r2, [pc, #400]	@ (8001be8 <HAL_DMA_Abort+0x45c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d02c      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a62      	ldr	r2, [pc, #392]	@ (8001bec <HAL_DMA_Abort+0x460>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d027      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a61      	ldr	r2, [pc, #388]	@ (8001bf0 <HAL_DMA_Abort+0x464>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d022      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a5f      	ldr	r2, [pc, #380]	@ (8001bf4 <HAL_DMA_Abort+0x468>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01d      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf8 <HAL_DMA_Abort+0x46c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d018      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a5c      	ldr	r2, [pc, #368]	@ (8001bfc <HAL_DMA_Abort+0x470>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a5b      	ldr	r2, [pc, #364]	@ (8001c00 <HAL_DMA_Abort+0x474>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d00e      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a59      	ldr	r2, [pc, #356]	@ (8001c04 <HAL_DMA_Abort+0x478>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d009      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_DMA_Abort+0x47c>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d004      	beq.n	8001ab6 <HAL_DMA_Abort+0x32a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	@ (8001c0c <HAL_DMA_Abort+0x480>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d108      	bne.n	8001ac8 <HAL_DMA_Abort+0x33c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_DMA_Abort+0x34c>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ad8:	e013      	b.n	8001b02 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ada:	f7ff fbad 	bl	8001238 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d90c      	bls.n	8001b02 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e12d      	b.n	8001d5e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1e5      	bne.n	8001ada <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd0 <HAL_DMA_Abort+0x444>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04a      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd4 <HAL_DMA_Abort+0x448>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d045      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd8 <HAL_DMA_Abort+0x44c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d040      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <HAL_DMA_Abort+0x450>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d03b      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <HAL_DMA_Abort+0x454>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d036      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a27      	ldr	r2, [pc, #156]	@ (8001be4 <HAL_DMA_Abort+0x458>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a26      	ldr	r2, [pc, #152]	@ (8001be8 <HAL_DMA_Abort+0x45c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d02c      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a24      	ldr	r2, [pc, #144]	@ (8001bec <HAL_DMA_Abort+0x460>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d027      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a23      	ldr	r2, [pc, #140]	@ (8001bf0 <HAL_DMA_Abort+0x464>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <HAL_DMA_Abort+0x468>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <HAL_DMA_Abort+0x46c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1e      	ldr	r2, [pc, #120]	@ (8001bfc <HAL_DMA_Abort+0x470>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <HAL_DMA_Abort+0x474>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1b      	ldr	r2, [pc, #108]	@ (8001c04 <HAL_DMA_Abort+0x478>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c08 <HAL_DMA_Abort+0x47c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Abort+0x422>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a18      	ldr	r2, [pc, #96]	@ (8001c0c <HAL_DMA_Abort+0x480>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_DMA_Abort+0x426>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_Abort+0x428>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d02b      	beq.n	8001c10 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bbc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	223f      	movs	r2, #63	@ 0x3f
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	e02a      	b.n	8001c26 <HAL_DMA_Abort+0x49a>
 8001bd0:	40020010 	.word	0x40020010
 8001bd4:	40020028 	.word	0x40020028
 8001bd8:	40020040 	.word	0x40020040
 8001bdc:	40020058 	.word	0x40020058
 8001be0:	40020070 	.word	0x40020070
 8001be4:	40020088 	.word	0x40020088
 8001be8:	400200a0 	.word	0x400200a0
 8001bec:	400200b8 	.word	0x400200b8
 8001bf0:	40020410 	.word	0x40020410
 8001bf4:	40020428 	.word	0x40020428
 8001bf8:	40020440 	.word	0x40020440
 8001bfc:	40020458 	.word	0x40020458
 8001c00:	40020470 	.word	0x40020470
 8001c04:	40020488 	.word	0x40020488
 8001c08:	400204a0 	.word	0x400204a0
 8001c0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a4f      	ldr	r2, [pc, #316]	@ (8001d68 <HAL_DMA_Abort+0x5dc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d072      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a4d      	ldr	r2, [pc, #308]	@ (8001d6c <HAL_DMA_Abort+0x5e0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d06d      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d70 <HAL_DMA_Abort+0x5e4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d068      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a4a      	ldr	r2, [pc, #296]	@ (8001d74 <HAL_DMA_Abort+0x5e8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d063      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a49      	ldr	r2, [pc, #292]	@ (8001d78 <HAL_DMA_Abort+0x5ec>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d05e      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a47      	ldr	r2, [pc, #284]	@ (8001d7c <HAL_DMA_Abort+0x5f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d059      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a46      	ldr	r2, [pc, #280]	@ (8001d80 <HAL_DMA_Abort+0x5f4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d054      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a44      	ldr	r2, [pc, #272]	@ (8001d84 <HAL_DMA_Abort+0x5f8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04f      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a43      	ldr	r2, [pc, #268]	@ (8001d88 <HAL_DMA_Abort+0x5fc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d04a      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a41      	ldr	r2, [pc, #260]	@ (8001d8c <HAL_DMA_Abort+0x600>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d045      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a40      	ldr	r2, [pc, #256]	@ (8001d90 <HAL_DMA_Abort+0x604>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d040      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3e      	ldr	r2, [pc, #248]	@ (8001d94 <HAL_DMA_Abort+0x608>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d03b      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8001d98 <HAL_DMA_Abort+0x60c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d036      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a3b      	ldr	r2, [pc, #236]	@ (8001d9c <HAL_DMA_Abort+0x610>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d031      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <HAL_DMA_Abort+0x614>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d02c      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a38      	ldr	r2, [pc, #224]	@ (8001da4 <HAL_DMA_Abort+0x618>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d027      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a37      	ldr	r2, [pc, #220]	@ (8001da8 <HAL_DMA_Abort+0x61c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d022      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a35      	ldr	r2, [pc, #212]	@ (8001dac <HAL_DMA_Abort+0x620>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01d      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a34      	ldr	r2, [pc, #208]	@ (8001db0 <HAL_DMA_Abort+0x624>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d018      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a32      	ldr	r2, [pc, #200]	@ (8001db4 <HAL_DMA_Abort+0x628>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a31      	ldr	r2, [pc, #196]	@ (8001db8 <HAL_DMA_Abort+0x62c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <HAL_DMA_Abort+0x630>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc0 <HAL_DMA_Abort+0x634>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_DMA_Abort+0x58a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc4 <HAL_DMA_Abort+0x638>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Abort+0x58e>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_DMA_Abort+0x590>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d015      	beq.n	8001d4c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d28:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d40:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d4a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40020010 	.word	0x40020010
 8001d6c:	40020028 	.word	0x40020028
 8001d70:	40020040 	.word	0x40020040
 8001d74:	40020058 	.word	0x40020058
 8001d78:	40020070 	.word	0x40020070
 8001d7c:	40020088 	.word	0x40020088
 8001d80:	400200a0 	.word	0x400200a0
 8001d84:	400200b8 	.word	0x400200b8
 8001d88:	40020410 	.word	0x40020410
 8001d8c:	40020428 	.word	0x40020428
 8001d90:	40020440 	.word	0x40020440
 8001d94:	40020458 	.word	0x40020458
 8001d98:	40020470 	.word	0x40020470
 8001d9c:	40020488 	.word	0x40020488
 8001da0:	400204a0 	.word	0x400204a0
 8001da4:	400204b8 	.word	0x400204b8
 8001da8:	58025408 	.word	0x58025408
 8001dac:	5802541c 	.word	0x5802541c
 8001db0:	58025430 	.word	0x58025430
 8001db4:	58025444 	.word	0x58025444
 8001db8:	58025458 	.word	0x58025458
 8001dbc:	5802546c 	.word	0x5802546c
 8001dc0:	58025480 	.word	0x58025480
 8001dc4:	58025494 	.word	0x58025494

08001dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e237      	b.n	800224a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d004      	beq.n	8001df0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e22c      	b.n	800224a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_DMA_Abort_IT+0x1a0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04a      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8001f6c <HAL_DMA_Abort_IT+0x1a4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d045      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a59      	ldr	r2, [pc, #356]	@ (8001f70 <HAL_DMA_Abort_IT+0x1a8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d040      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a58      	ldr	r2, [pc, #352]	@ (8001f74 <HAL_DMA_Abort_IT+0x1ac>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03b      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_DMA_Abort_IT+0x1b0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a55      	ldr	r2, [pc, #340]	@ (8001f7c <HAL_DMA_Abort_IT+0x1b4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a53      	ldr	r2, [pc, #332]	@ (8001f80 <HAL_DMA_Abort_IT+0x1b8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02c      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a52      	ldr	r2, [pc, #328]	@ (8001f84 <HAL_DMA_Abort_IT+0x1bc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d027      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a50      	ldr	r2, [pc, #320]	@ (8001f88 <HAL_DMA_Abort_IT+0x1c0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001f8c <HAL_DMA_Abort_IT+0x1c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d01d      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4d      	ldr	r2, [pc, #308]	@ (8001f90 <HAL_DMA_Abort_IT+0x1c8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a4c      	ldr	r2, [pc, #304]	@ (8001f94 <HAL_DMA_Abort_IT+0x1cc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001f98 <HAL_DMA_Abort_IT+0x1d0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_DMA_Abort_IT+0x1d4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a47      	ldr	r2, [pc, #284]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1d8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Abort_IT+0xc8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a46      	ldr	r2, [pc, #280]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1dc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Abort_IT+0xcc>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_DMA_Abort_IT+0xce>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8086 	beq.w	8001fa8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f68 <HAL_DMA_Abort_IT+0x1a0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d04a      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f6c <HAL_DMA_Abort_IT+0x1a4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d045      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f70 <HAL_DMA_Abort_IT+0x1a8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d040      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f74 <HAL_DMA_Abort_IT+0x1ac>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d03b      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a29      	ldr	r2, [pc, #164]	@ (8001f78 <HAL_DMA_Abort_IT+0x1b0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d036      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a28      	ldr	r2, [pc, #160]	@ (8001f7c <HAL_DMA_Abort_IT+0x1b4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_DMA_Abort_IT+0x1b8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02c      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a25      	ldr	r2, [pc, #148]	@ (8001f84 <HAL_DMA_Abort_IT+0x1bc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d027      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	@ (8001f88 <HAL_DMA_Abort_IT+0x1c0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a22      	ldr	r2, [pc, #136]	@ (8001f8c <HAL_DMA_Abort_IT+0x1c4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d01d      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a20      	ldr	r2, [pc, #128]	@ (8001f90 <HAL_DMA_Abort_IT+0x1c8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	@ (8001f94 <HAL_DMA_Abort_IT+0x1cc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	@ (8001f98 <HAL_DMA_Abort_IT+0x1d0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <HAL_DMA_Abort_IT+0x1d4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1d8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x17c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1dc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d108      	bne.n	8001f56 <HAL_DMA_Abort_IT+0x18e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e178      	b.n	8002248 <HAL_DMA_Abort_IT+0x480>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e16f      	b.n	8002248 <HAL_DMA_Abort_IT+0x480>
 8001f68:	40020010 	.word	0x40020010
 8001f6c:	40020028 	.word	0x40020028
 8001f70:	40020040 	.word	0x40020040
 8001f74:	40020058 	.word	0x40020058
 8001f78:	40020070 	.word	0x40020070
 8001f7c:	40020088 	.word	0x40020088
 8001f80:	400200a0 	.word	0x400200a0
 8001f84:	400200b8 	.word	0x400200b8
 8001f88:	40020410 	.word	0x40020410
 8001f8c:	40020428 	.word	0x40020428
 8001f90:	40020440 	.word	0x40020440
 8001f94:	40020458 	.word	0x40020458
 8001f98:	40020470 	.word	0x40020470
 8001f9c:	40020488 	.word	0x40020488
 8001fa0:	400204a0 	.word	0x400204a0
 8001fa4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 020e 	bic.w	r2, r2, #14
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6c      	ldr	r2, [pc, #432]	@ (8002170 <HAL_DMA_Abort_IT+0x3a8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d04a      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6b      	ldr	r2, [pc, #428]	@ (8002174 <HAL_DMA_Abort_IT+0x3ac>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d045      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a69      	ldr	r2, [pc, #420]	@ (8002178 <HAL_DMA_Abort_IT+0x3b0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d040      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a68      	ldr	r2, [pc, #416]	@ (800217c <HAL_DMA_Abort_IT+0x3b4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d03b      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a66      	ldr	r2, [pc, #408]	@ (8002180 <HAL_DMA_Abort_IT+0x3b8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d036      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a65      	ldr	r2, [pc, #404]	@ (8002184 <HAL_DMA_Abort_IT+0x3bc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a63      	ldr	r2, [pc, #396]	@ (8002188 <HAL_DMA_Abort_IT+0x3c0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d02c      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a62      	ldr	r2, [pc, #392]	@ (800218c <HAL_DMA_Abort_IT+0x3c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d027      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a60      	ldr	r2, [pc, #384]	@ (8002190 <HAL_DMA_Abort_IT+0x3c8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a5f      	ldr	r2, [pc, #380]	@ (8002194 <HAL_DMA_Abort_IT+0x3cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01d      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5d      	ldr	r2, [pc, #372]	@ (8002198 <HAL_DMA_Abort_IT+0x3d0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a5c      	ldr	r2, [pc, #368]	@ (800219c <HAL_DMA_Abort_IT+0x3d4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_DMA_Abort_IT+0x3d8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a59      	ldr	r2, [pc, #356]	@ (80021a4 <HAL_DMA_Abort_IT+0x3dc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a57      	ldr	r2, [pc, #348]	@ (80021a8 <HAL_DMA_Abort_IT+0x3e0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_DMA_Abort_IT+0x290>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a56      	ldr	r2, [pc, #344]	@ (80021ac <HAL_DMA_Abort_IT+0x3e4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <HAL_DMA_Abort_IT+0x2a2>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e007      	b.n	800207a <HAL_DMA_Abort_IT+0x2b2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a3c      	ldr	r2, [pc, #240]	@ (8002170 <HAL_DMA_Abort_IT+0x3a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d072      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a3a      	ldr	r2, [pc, #232]	@ (8002174 <HAL_DMA_Abort_IT+0x3ac>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d06d      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a39      	ldr	r2, [pc, #228]	@ (8002178 <HAL_DMA_Abort_IT+0x3b0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d068      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a37      	ldr	r2, [pc, #220]	@ (800217c <HAL_DMA_Abort_IT+0x3b4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d063      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a36      	ldr	r2, [pc, #216]	@ (8002180 <HAL_DMA_Abort_IT+0x3b8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d05e      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a34      	ldr	r2, [pc, #208]	@ (8002184 <HAL_DMA_Abort_IT+0x3bc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d059      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a33      	ldr	r2, [pc, #204]	@ (8002188 <HAL_DMA_Abort_IT+0x3c0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d054      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a31      	ldr	r2, [pc, #196]	@ (800218c <HAL_DMA_Abort_IT+0x3c4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d04f      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a30      	ldr	r2, [pc, #192]	@ (8002190 <HAL_DMA_Abort_IT+0x3c8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d04a      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002194 <HAL_DMA_Abort_IT+0x3cc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d045      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002198 <HAL_DMA_Abort_IT+0x3d0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d040      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	@ (800219c <HAL_DMA_Abort_IT+0x3d4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d03b      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2a      	ldr	r2, [pc, #168]	@ (80021a0 <HAL_DMA_Abort_IT+0x3d8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d036      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a28      	ldr	r2, [pc, #160]	@ (80021a4 <HAL_DMA_Abort_IT+0x3dc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d031      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <HAL_DMA_Abort_IT+0x3e0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d02c      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a25      	ldr	r2, [pc, #148]	@ (80021ac <HAL_DMA_Abort_IT+0x3e4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d027      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a24      	ldr	r2, [pc, #144]	@ (80021b0 <HAL_DMA_Abort_IT+0x3e8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a22      	ldr	r2, [pc, #136]	@ (80021b4 <HAL_DMA_Abort_IT+0x3ec>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01d      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a21      	ldr	r2, [pc, #132]	@ (80021b8 <HAL_DMA_Abort_IT+0x3f0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d018      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1f      	ldr	r2, [pc, #124]	@ (80021bc <HAL_DMA_Abort_IT+0x3f4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1e      	ldr	r2, [pc, #120]	@ (80021c0 <HAL_DMA_Abort_IT+0x3f8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00e      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1c      	ldr	r2, [pc, #112]	@ (80021c4 <HAL_DMA_Abort_IT+0x3fc>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d009      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <HAL_DMA_Abort_IT+0x400>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d004      	beq.n	800216a <HAL_DMA_Abort_IT+0x3a2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a19      	ldr	r2, [pc, #100]	@ (80021cc <HAL_DMA_Abort_IT+0x404>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d132      	bne.n	80021d0 <HAL_DMA_Abort_IT+0x408>
 800216a:	2301      	movs	r3, #1
 800216c:	e031      	b.n	80021d2 <HAL_DMA_Abort_IT+0x40a>
 800216e:	bf00      	nop
 8002170:	40020010 	.word	0x40020010
 8002174:	40020028 	.word	0x40020028
 8002178:	40020040 	.word	0x40020040
 800217c:	40020058 	.word	0x40020058
 8002180:	40020070 	.word	0x40020070
 8002184:	40020088 	.word	0x40020088
 8002188:	400200a0 	.word	0x400200a0
 800218c:	400200b8 	.word	0x400200b8
 8002190:	40020410 	.word	0x40020410
 8002194:	40020428 	.word	0x40020428
 8002198:	40020440 	.word	0x40020440
 800219c:	40020458 	.word	0x40020458
 80021a0:	40020470 	.word	0x40020470
 80021a4:	40020488 	.word	0x40020488
 80021a8:	400204a0 	.word	0x400204a0
 80021ac:	400204b8 	.word	0x400204b8
 80021b0:	58025408 	.word	0x58025408
 80021b4:	5802541c 	.word	0x5802541c
 80021b8:	58025430 	.word	0x58025430
 80021bc:	58025444 	.word	0x58025444
 80021c0:	58025458 	.word	0x58025458
 80021c4:	5802546c 	.word	0x5802546c
 80021c8:	58025480 	.word	0x58025480
 80021cc:	58025494 	.word	0x58025494
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d028      	beq.n	8002228 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2201      	movs	r2, #1
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002204:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002226:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002262:	4b86      	ldr	r3, [pc, #536]	@ (800247c <HAL_GPIO_Init+0x228>)
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002266:	e18c      	b.n	8002582 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 817e 	beq.w	800257c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <HAL_GPIO_Init+0x44>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 0201 	and.w	r2, r3, #1
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b03      	cmp	r3, #3
 8002304:	d017      	beq.n	8002336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d123      	bne.n	800238a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0203 	and.w	r2, r3, #3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80d8 	beq.w	800257c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002480 <HAL_GPIO_Init+0x22c>)
 80023ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_GPIO_Init+0x22c>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023dc:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <HAL_GPIO_Init+0x22c>)
 80023de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ea:	4a26      	ldr	r2, [pc, #152]	@ (8002484 <HAL_GPIO_Init+0x230>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1d      	ldr	r2, [pc, #116]	@ (8002488 <HAL_GPIO_Init+0x234>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d04a      	beq.n	80024ac <HAL_GPIO_Init+0x258>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1c      	ldr	r2, [pc, #112]	@ (800248c <HAL_GPIO_Init+0x238>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d02b      	beq.n	8002476 <HAL_GPIO_Init+0x222>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1b      	ldr	r2, [pc, #108]	@ (8002490 <HAL_GPIO_Init+0x23c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d025      	beq.n	8002472 <HAL_GPIO_Init+0x21e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1a      	ldr	r2, [pc, #104]	@ (8002494 <HAL_GPIO_Init+0x240>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01f      	beq.n	800246e <HAL_GPIO_Init+0x21a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a19      	ldr	r2, [pc, #100]	@ (8002498 <HAL_GPIO_Init+0x244>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x216>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_GPIO_Init+0x248>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x212>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_GPIO_Init+0x24c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x20e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <HAL_GPIO_Init+0x250>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x20a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <HAL_GPIO_Init+0x254>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x206>
 8002456:	2309      	movs	r3, #9
 8002458:	e029      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 800245a:	230a      	movs	r3, #10
 800245c:	e027      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 800245e:	2307      	movs	r3, #7
 8002460:	e025      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 8002462:	2306      	movs	r3, #6
 8002464:	e023      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 8002466:	2305      	movs	r3, #5
 8002468:	e021      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 800246a:	2304      	movs	r3, #4
 800246c:	e01f      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 800246e:	2303      	movs	r3, #3
 8002470:	e01d      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 8002472:	2302      	movs	r3, #2
 8002474:	e01b      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 8002476:	2301      	movs	r3, #1
 8002478:	e019      	b.n	80024ae <HAL_GPIO_Init+0x25a>
 800247a:	bf00      	nop
 800247c:	58000080 	.word	0x58000080
 8002480:	58024400 	.word	0x58024400
 8002484:	58000400 	.word	0x58000400
 8002488:	58020000 	.word	0x58020000
 800248c:	58020400 	.word	0x58020400
 8002490:	58020800 	.word	0x58020800
 8002494:	58020c00 	.word	0x58020c00
 8002498:	58021000 	.word	0x58021000
 800249c:	58021400 	.word	0x58021400
 80024a0:	58021800 	.word	0x58021800
 80024a4:	58021c00 	.word	0x58021c00
 80024a8:	58022400 	.word	0x58022400
 80024ac:	2300      	movs	r3, #0
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f002 0203 	and.w	r2, r2, #3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4093      	lsls	r3, r2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024be:	4938      	ldr	r1, [pc, #224]	@ (80025a0 <HAL_GPIO_Init+0x34c>)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f ae6b 	bne.w	8002268 <HAL_GPIO_Init+0x14>
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	3724      	adds	r7, #36	@ 0x24
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	58000400 	.word	0x58000400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	041a      	lsls	r2, r3, #16
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	400b      	ands	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002618:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002624:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fe fa8f 	bl	8000b54 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <HAL_PWREx_ConfigSupply+0x70>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00a      	beq.n	800266a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002654:	4b16      	ldr	r3, [pc, #88]	@ (80026b0 <HAL_PWREx_ConfigSupply+0x70>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e01f      	b.n	80026a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e01d      	b.n	80026a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_PWREx_ConfigSupply+0x70>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f023 0207 	bic.w	r2, r3, #7
 8002672:	490f      	ldr	r1, [pc, #60]	@ (80026b0 <HAL_PWREx_ConfigSupply+0x70>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4313      	orrs	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800267a:	f7fe fddd 	bl	8001238 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002680:	e009      	b.n	8002696 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002682:	f7fe fdd9 	bl	8001238 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002690:	d901      	bls.n	8002696 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_PWREx_ConfigSupply+0x70>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a2:	d1ee      	bne.n	8002682 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	58024800 	.word	0x58024800

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	@ 0x30
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e3c8      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8087 	beq.w	80027e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d4:	4b88      	ldr	r3, [pc, #544]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026de:	4b86      	ldr	r3, [pc, #536]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d007      	beq.n	80026fa <HAL_RCC_OscConfig+0x46>
 80026ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ec:	2b18      	cmp	r3, #24
 80026ee:	d110      	bne.n	8002712 <HAL_RCC_OscConfig+0x5e>
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	4b7f      	ldr	r3, [pc, #508]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d06c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x12c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d168      	bne.n	80027e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e3a2      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x76>
 800271c:	4b76      	ldr	r3, [pc, #472]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a75      	ldr	r2, [pc, #468]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e02e      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b71      	ldr	r3, [pc, #452]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a70      	ldr	r2, [pc, #448]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b6e      	ldr	r3, [pc, #440]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6d      	ldr	r2, [pc, #436]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01d      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0xbc>
 8002756:	4b68      	ldr	r3, [pc, #416]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a67      	ldr	r2, [pc, #412]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b65      	ldr	r3, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a64      	ldr	r2, [pc, #400]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 8002770:	4b61      	ldr	r3, [pc, #388]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a60      	ldr	r2, [pc, #384]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b5e      	ldr	r3, [pc, #376]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fd52 	bl	8001238 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe fd4e 	bl	8001238 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	@ 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e356      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027aa:	4b53      	ldr	r3, [pc, #332]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0xe4>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fd3e 	bl	8001238 <HAL_GetTick>
 80027bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fd3a 	bl	8001238 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	@ 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e342      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d2:	4b49      	ldr	r3, [pc, #292]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x10c>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 808c 	beq.w	8002908 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f0:	4b41      	ldr	r3, [pc, #260]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027fa:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_RCC_OscConfig+0x162>
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2b18      	cmp	r3, #24
 800280a:	d137      	bne.n	800287c <HAL_RCC_OscConfig+0x1c8>
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d132      	bne.n	800287c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002816:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x17a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e314      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800282e:	4b32      	ldr	r3, [pc, #200]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0219 	bic.w	r2, r3, #25
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	492f      	ldr	r1, [pc, #188]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fcfa 	bl	8001238 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fcf6 	bl	8001238 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e2fe      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285a:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	4920      	ldr	r1, [pc, #128]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287a:	e045      	b.n	8002908 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d026      	beq.n	80028d2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002884:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0219 	bic.w	r2, r3, #25
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4919      	ldr	r1, [pc, #100]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fccf 	bl	8001238 <HAL_GetTick>
 800289a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7fe fccb 	bl	8001238 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e2d3      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	490b      	ldr	r1, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e01a      	b.n	8002908 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a08      	ldr	r2, [pc, #32]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fcab 	bl	8001238 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe fca7 	bl	8001238 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d903      	bls.n	80028fc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e2af      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
 80028f8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fc:	4b96      	ldr	r3, [pc, #600]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ee      	bne.n	80028e6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	d06a      	beq.n	80029ea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002914:	4b90      	ldr	r3, [pc, #576]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800291c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291e:	4b8e      	ldr	r3, [pc, #568]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d007      	beq.n	800293a <HAL_RCC_OscConfig+0x286>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b18      	cmp	r3, #24
 800292e:	d11b      	bne.n	8002968 <HAL_RCC_OscConfig+0x2b4>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d116      	bne.n	8002968 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800293a:	4b87      	ldr	r3, [pc, #540]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_RCC_OscConfig+0x29e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	2b80      	cmp	r3, #128	@ 0x80
 800294c:	d001      	beq.n	8002952 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e282      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002952:	4b81      	ldr	r3, [pc, #516]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	497d      	ldr	r1, [pc, #500]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002966:	e040      	b.n	80029ea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d023      	beq.n	80029b8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002970:	4b79      	ldr	r3, [pc, #484]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a78      	ldr	r2, [pc, #480]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800297a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe fc5c 	bl	8001238 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002984:	f7fe fc58 	bl	8001238 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e260      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002996:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	061b      	lsls	r3, r3, #24
 80029b0:	4969      	ldr	r1, [pc, #420]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60cb      	str	r3, [r1, #12]
 80029b6:	e018      	b.n	80029ea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029b8:	4b67      	ldr	r3, [pc, #412]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a66      	ldr	r2, [pc, #408]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 80029be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fc38 	bl	8001238 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029cc:	f7fe fc34 	bl	8001238 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e23c      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029de:	4b5e      	ldr	r3, [pc, #376]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d036      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d019      	beq.n	8002a32 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b56      	ldr	r3, [pc, #344]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a02:	4a55      	ldr	r2, [pc, #340]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fc15 	bl	8001238 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a12:	f7fe fc11 	bl	8001238 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e219      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a24:	4b4c      	ldr	r3, [pc, #304]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x35e>
 8002a30:	e018      	b.n	8002a64 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a32:	4b49      	ldr	r3, [pc, #292]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a36:	4a48      	ldr	r2, [pc, #288]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fbfb 	bl	8001238 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe fbf7 	bl	8001238 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1ff      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a58:	4b3f      	ldr	r3, [pc, #252]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d036      	beq.n	8002ade <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a78:	4b37      	ldr	r3, [pc, #220]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a36      	ldr	r2, [pc, #216]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002a7e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a84:	f7fe fbd8 	bl	8001238 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7fe fbd4 	bl	8001238 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1dc      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x3d8>
 8002aaa:	e018      	b.n	8002ade <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aac:	4b2a      	ldr	r3, [pc, #168]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a29      	ldr	r2, [pc, #164]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fbbe 	bl	8001238 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac0:	f7fe fbba 	bl	8001238 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1c2      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ad2:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8086 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x4a8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b5c <HAL_RCC_OscConfig+0x4a8>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af8:	f7fe fb9e 	bl	8001238 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7fe fb9a 	bl	8001238 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b64      	cmp	r3, #100	@ 0x64
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1a2      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_RCC_OscConfig+0x4a8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d106      	bne.n	8002b34 <HAL_RCC_OscConfig+0x480>
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e6>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4ac>
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a05      	ldr	r2, [pc, #20]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	4a02      	ldr	r2, [pc, #8]	@ (8002b58 <HAL_RCC_OscConfig+0x4a4>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b54:	e021      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e6>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
 8002b5c:	58024800 	.word	0x58024800
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x4ce>
 8002b68:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	4a82      	ldr	r2, [pc, #520]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b74:	4b80      	ldr	r3, [pc, #512]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b78:	4a7f      	ldr	r2, [pc, #508]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e6>
 8002b82:	4b7d      	ldr	r3, [pc, #500]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	4a7c      	ldr	r2, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b92:	4a79      	ldr	r2, [pc, #484]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fb49 	bl	8001238 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fb45 	bl	8001238 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e14b      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RCC_OscConfig+0x4f6>
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe fb33 	bl	8001238 <HAL_GetTick>
 8002bd2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fb2f 	bl	8001238 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e135      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bec:	4b62      	ldr	r3, [pc, #392]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 812a 	beq.w	8002e56 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c02:	4b5d      	ldr	r3, [pc, #372]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c0a:	2b18      	cmp	r3, #24
 8002c0c:	f000 80ba 	beq.w	8002d84 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	f040 8095 	bne.w	8002d44 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b57      	ldr	r3, [pc, #348]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a56      	ldr	r2, [pc, #344]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fb07 	bl	8001238 <HAL_GetTick>
 8002c2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fb03 	bl	8001238 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e10b      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c40:	4b4d      	ldr	r3, [pc, #308]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c50:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <HAL_RCC_OscConfig+0x6c8>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	4945      	ldr	r1, [pc, #276]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	3b01      	subs	r3, #1
 8002c76:	025b      	lsls	r3, r3, #9
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	3b01      	subs	r3, #1
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c96:	4938      	ldr	r1, [pc, #224]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c9c:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	4a35      	ldr	r2, [pc, #212]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ca8:	4b33      	ldr	r3, [pc, #204]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cac:	4b34      	ldr	r3, [pc, #208]	@ (8002d80 <HAL_RCC_OscConfig+0x6cc>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cb4:	00d2      	lsls	r2, r2, #3
 8002cb6:	4930      	ldr	r1, [pc, #192]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	f023 020c 	bic.w	r2, r3, #12
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	492b      	ldr	r1, [pc, #172]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cce:	4b2a      	ldr	r3, [pc, #168]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	f023 0202 	bic.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4927      	ldr	r1, [pc, #156]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ce0:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cec:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	4a21      	ldr	r2, [pc, #132]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002cfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	4a1b      	ldr	r2, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a18      	ldr	r2, [pc, #96]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fa8c 	bl	8001238 <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fa88 	bl	8001238 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e090      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x670>
 8002d42:	e088      	b.n	8002e56 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0b      	ldr	r2, [pc, #44]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fa72 	bl	8001238 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fa6e 	bl	8001238 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e076      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d6a:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <HAL_RCC_OscConfig+0x6c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x6a4>
 8002d76:	e06e      	b.n	8002e56 <HAL_RCC_OscConfig+0x7a2>
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	fffffc0c 	.word	0xfffffc0c
 8002d80:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d84:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d8a:	4b35      	ldr	r3, [pc, #212]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d031      	beq.n	8002dfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f003 0203 	and.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d12a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d122      	bne.n	8002dfc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d11a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0a5b      	lsrs	r3, r3, #9
 8002dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d111      	bne.n	8002dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d108      	bne.n	8002dfc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0e1b      	lsrs	r3, r3, #24
 8002dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e02b      	b.n	8002e58 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e00:	4b17      	ldr	r3, [pc, #92]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d01f      	beq.n	8002e56 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e16:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	4a11      	ldr	r2, [pc, #68]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e22:	f7fe fa09 	bl	8001238 <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e28:	bf00      	nop
 8002e2a:	f7fe fa05 	bl	8001238 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d0f9      	beq.n	8002e2a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e64 <HAL_RCC_OscConfig+0x7b0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e42:	00d2      	lsls	r2, r2, #3
 8002e44:	4906      	ldr	r1, [pc, #24]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_RCC_OscConfig+0x7ac>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3730      	adds	r7, #48	@ 0x30
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	58024400 	.word	0x58024400
 8002e64:	ffff0007 	.word	0xffff0007

08002e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e19c      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b87      	ldr	r3, [pc, #540]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4985      	ldr	r1, [pc, #532]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b83      	ldr	r3, [pc, #524]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e184      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d908      	bls.n	8002eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec8:	4b78      	ldr	r3, [pc, #480]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4975      	ldr	r1, [pc, #468]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b70      	ldr	r3, [pc, #448]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d908      	bls.n	8002f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	496a      	ldr	r1, [pc, #424]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d908      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f24:	4b61      	ldr	r3, [pc, #388]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	495e      	ldr	r1, [pc, #376]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	4b59      	ldr	r3, [pc, #356]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f52:	4b56      	ldr	r3, [pc, #344]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4953      	ldr	r1, [pc, #332]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4b4d      	ldr	r3, [pc, #308]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b4a      	ldr	r3, [pc, #296]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f023 020f 	bic.w	r2, r3, #15
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4947      	ldr	r1, [pc, #284]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d055      	beq.n	800304a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f9e:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4940      	ldr	r1, [pc, #256]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d121      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0f6      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0ea      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe8:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0de      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0d6      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003008:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f023 0207 	bic.w	r2, r3, #7
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4925      	ldr	r1, [pc, #148]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003016:	4313      	orrs	r3, r2
 8003018:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301a:	f7fe f90d 	bl	8001238 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	e00a      	b.n	8003038 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7fe f909 	bl	8001238 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0be      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	429a      	cmp	r2, r3
 8003048:	d1eb      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	4b14      	ldr	r3, [pc, #80]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	429a      	cmp	r2, r3
 8003064:	d208      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003066:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	490e      	ldr	r1, [pc, #56]	@ (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003074:	4313      	orrs	r3, r2
 8003076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d214      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 020f 	bic.w	r2, r3, #15
 800308e:	4906      	ldr	r1, [pc, #24]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e086      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
 80030a8:	52002000 	.word	0x52002000
 80030ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	4b3f      	ldr	r3, [pc, #252]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d208      	bcs.n	80030de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030cc:	4b3c      	ldr	r3, [pc, #240]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	4939      	ldr	r1, [pc, #228]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d208      	bcs.n	800310c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030fa:	4b31      	ldr	r3, [pc, #196]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	492e      	ldr	r1, [pc, #184]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003124:	429a      	cmp	r2, r3
 8003126:	d208      	bcs.n	800313a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4922      	ldr	r1, [pc, #136]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003136:	4313      	orrs	r3, r2
 8003138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d208      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003156:	4b1a      	ldr	r3, [pc, #104]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4917      	ldr	r1, [pc, #92]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003164:	4313      	orrs	r3, r2
 8003166:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003168:	f000 f834 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	4912      	ldr	r1, [pc, #72]	@ (80031c4 <HAL_RCC_ClockConfig+0x35c>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <HAL_RCC_ClockConfig+0x35c>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a0a      	ldr	r2, [pc, #40]	@ (80031c8 <HAL_RCC_ClockConfig+0x360>)
 800319e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031a0:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <HAL_RCC_ClockConfig+0x364>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <HAL_RCC_ClockConfig+0x368>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd fffa 	bl	80011a4 <HAL_InitTick>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	58024400 	.word	0x58024400
 80031c4:	08008068 	.word	0x08008068
 80031c8:	24000008 	.word	0x24000008
 80031cc:	24000004 	.word	0x24000004
 80031d0:	2400000c 	.word	0x2400000c

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031da:	4bb3      	ldr	r3, [pc, #716]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031e2:	2b18      	cmp	r3, #24
 80031e4:	f200 8155 	bhi.w	8003492 <HAL_RCC_GetSysClockFreq+0x2be>
 80031e8:	a201      	add	r2, pc, #4	@ (adr r2, 80031f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003493 	.word	0x08003493
 80031f8:	08003493 	.word	0x08003493
 80031fc:	08003493 	.word	0x08003493
 8003200:	08003493 	.word	0x08003493
 8003204:	08003493 	.word	0x08003493
 8003208:	08003493 	.word	0x08003493
 800320c:	08003493 	.word	0x08003493
 8003210:	0800327b 	.word	0x0800327b
 8003214:	08003493 	.word	0x08003493
 8003218:	08003493 	.word	0x08003493
 800321c:	08003493 	.word	0x08003493
 8003220:	08003493 	.word	0x08003493
 8003224:	08003493 	.word	0x08003493
 8003228:	08003493 	.word	0x08003493
 800322c:	08003493 	.word	0x08003493
 8003230:	08003281 	.word	0x08003281
 8003234:	08003493 	.word	0x08003493
 8003238:	08003493 	.word	0x08003493
 800323c:	08003493 	.word	0x08003493
 8003240:	08003493 	.word	0x08003493
 8003244:	08003493 	.word	0x08003493
 8003248:	08003493 	.word	0x08003493
 800324c:	08003493 	.word	0x08003493
 8003250:	08003287 	.word	0x08003287
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b94      	ldr	r3, [pc, #592]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003260:	4b91      	ldr	r3, [pc, #580]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a90      	ldr	r2, [pc, #576]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003272:	e111      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003274:	4b8d      	ldr	r3, [pc, #564]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e10e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800327a:	4b8d      	ldr	r3, [pc, #564]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800327c:	61bb      	str	r3, [r7, #24]
      break;
 800327e:	e10b      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003280:	4b8c      	ldr	r3, [pc, #560]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003282:	61bb      	str	r3, [r7, #24]
      break;
 8003284:	e108      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003286:	4b88      	ldr	r3, [pc, #544]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003290:	4b85      	ldr	r3, [pc, #532]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800329c:	4b82      	ldr	r3, [pc, #520]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032a6:	4b80      	ldr	r3, [pc, #512]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80e1 	beq.w	800348c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f000 8083 	beq.w	80033d8 <HAL_RCC_GetSysClockFreq+0x204>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f200 80a1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x248>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x114>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d056      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032e6:	e099      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b6f      	ldr	r3, [pc, #444]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032f4:	4b6c      	ldr	r3, [pc, #432]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	4a6b      	ldr	r2, [pc, #428]	@ (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b62      	ldr	r3, [pc, #392]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800334e:	e087      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b51      	ldr	r3, [pc, #324]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003392:	e065      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b40      	ldr	r3, [pc, #256]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033d6:	e043      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b2f      	ldr	r3, [pc, #188]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800341a:	e021      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003442:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800345e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003460:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	0a5b      	lsrs	r3, r3, #9
 8003466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800346a:	3301      	adds	r3, #1
 800346c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003478:	edd7 6a07 	vldr	s13, [r7, #28]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003484:	ee17 3a90 	vmov	r3, s15
 8003488:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
      break;
 8003490:	e002      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
      break;
 8003496:	bf00      	nop
  }

  return sysclockfreq;
 8003498:	69bb      	ldr	r3, [r7, #24]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	@ 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	03d09000 	.word	0x03d09000
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	017d7840 	.word	0x017d7840
 80034b8:	46000000 	.word	0x46000000
 80034bc:	4c742400 	.word	0x4c742400
 80034c0:	4a742400 	.word	0x4a742400
 80034c4:	4bbebc20 	.word	0x4bbebc20

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ce:	f7ff fe81 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490f      	ldr	r1, [pc, #60]	@ (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	4a07      	ldr	r2, [pc, #28]	@ (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 8003504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003506:	4a07      	ldr	r2, [pc, #28]	@ (8003524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800350c:	4b04      	ldr	r3, [pc, #16]	@ (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	58024400 	.word	0x58024400
 800351c:	08008068 	.word	0x08008068
 8003520:	24000008 	.word	0x24000008
 8003524:	24000004 	.word	0x24000004

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800352c:	f7ff ffcc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	@ (8003550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024400 	.word	0x58024400
 8003550:	08008068 	.word	0x08008068

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003558:	f7ff ffb6 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	@ (800357c <HAL_RCC_GetPCLK2Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	08008068 	.word	0x08008068

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b0c6      	sub	sp, #280	@ 0x118
 8003586:	af00      	add	r7, sp, #0
 8003588:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80035a4:	2500      	movs	r5, #0
 80035a6:	ea54 0305 	orrs.w	r3, r4, r5
 80035aa:	d049      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035b6:	d02f      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035bc:	d828      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035c2:	d01a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035c8:	d822      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d2:	d007      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035d4:	e01c      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4bab      	ldr	r3, [pc, #684]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	4aaa      	ldr	r2, [pc, #680]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035e2:	e01a      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e8:	3308      	adds	r3, #8
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fc25 	bl	8004e3c <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035f8:	e00f      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fe:	3328      	adds	r3, #40	@ 0x28
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fccc 	bl	8004fa0 <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800360e:	e004      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003622:	4b98      	ldr	r3, [pc, #608]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003626:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800362a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003630:	4a94      	ldr	r2, [pc, #592]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003632:	430b      	orrs	r3, r1
 8003634:	6513      	str	r3, [r2, #80]	@ 0x50
 8003636:	e003      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800363c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800364c:	f04f 0900 	mov.w	r9, #0
 8003650:	ea58 0309 	orrs.w	r3, r8, r9
 8003654:	d047      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365c:	2b04      	cmp	r3, #4
 800365e:	d82a      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003660:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800367d 	.word	0x0800367d
 800366c:	0800368b 	.word	0x0800368b
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036bf 	.word	0x080036bf
 8003678:	080036bf 	.word	0x080036bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4b81      	ldr	r3, [pc, #516]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	4a80      	ldr	r2, [pc, #512]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003688:	e01a      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368e:	3308      	adds	r3, #8
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fbd2 	bl	8004e3c <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800369e:	e00f      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a4:	3328      	adds	r3, #40	@ 0x28
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fc79 	bl	8004fa0 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c8:	4b6e      	ldr	r3, [pc, #440]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	f023 0107 	bic.w	r1, r3, #7
 80036d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6513      	str	r3, [r2, #80]	@ 0x50
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80036f2:	f04f 0b00 	mov.w	fp, #0
 80036f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80036fa:	d05b      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003704:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003708:	d03b      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800370a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800370e:	d834      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003714:	d037      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003716:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800371a:	d82e      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800371c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003720:	d033      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003722:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003726:	d828      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800372c:	d01a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800372e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003732:	d822      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800373c:	d007      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800373e:	e01c      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003740:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	4a4f      	ldr	r2, [pc, #316]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374c:	e01e      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003752:	3308      	adds	r3, #8
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fb70 	bl	8004e3c <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003762:	e013      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003768:	3328      	adds	r3, #40	@ 0x28
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fc17 	bl	8004fa0 <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003778:	e008      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003780:	e004      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800378a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003794:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800379c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037a4:	4a37      	ldr	r2, [pc, #220]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037aa:	e003      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80037ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d05d      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80037e0:	d03b      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037e2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80037e6:	d834      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ec:	d037      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80037ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f2:	d82e      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037f8:	d033      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80037fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037fe:	d828      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003804:	d01a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800380a:	d822      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003814:	d007      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003816:	e01c      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	4a19      	ldr	r2, [pc, #100]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003824:	e01e      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382a:	3308      	adds	r3, #8
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fb04 	bl	8004e3c <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800383a:	e013      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800383c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003840:	3328      	adds	r3, #40	@ 0x28
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f001 fbab 	bl	8004fa0 <RCCEx_PLL3_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003850:	e008      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003858:	e004      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003864:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003878:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800387c:	4a01      	ldr	r2, [pc, #4]	@ (8003884 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800387e:	430b      	orrs	r3, r1
 8003880:	6593      	str	r3, [r2, #88]	@ 0x58
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800388c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800389c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038a6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d03a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b6:	2b30      	cmp	r3, #48	@ 0x30
 80038b8:	d01f      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80038ba:	2b30      	cmp	r3, #48	@ 0x30
 80038bc:	d819      	bhi.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d00c      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d815      	bhi.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d019      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d111      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ce:	4baa      	ldr	r3, [pc, #680]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	4aa9      	ldr	r2, [pc, #676]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80038da:	e011      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e0:	3308      	adds	r3, #8
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 faa9 	bl	8004e3c <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80038f0:	e006      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038f8:	e002      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80038fa:	bf00      	nop
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80038fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003908:	4b9b      	ldr	r3, [pc, #620]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800390a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	4a98      	ldr	r2, [pc, #608]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003918:	430b      	orrs	r3, r1
 800391a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800393c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003940:	460b      	mov	r3, r1
 8003942:	4313      	orrs	r3, r2
 8003944:	d051      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003950:	d035      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003956:	d82e      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003958:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800395c:	d031      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800395e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003962:	d828      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003968:	d01a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396e:	d822      	bhi.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003978:	d007      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800397a:	e01c      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	4a7d      	ldr	r2, [pc, #500]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003988:	e01c      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	3308      	adds	r3, #8
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fa52 	bl	8004e3c <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800399e:	e011      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a4:	3328      	adds	r3, #40	@ 0x28
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 faf9 	bl	8004fa0 <RCCEx_PLL3_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039b4:	e006      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039bc:	e002      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80039c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039da:	4a67      	ldr	r2, [pc, #412]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	6513      	str	r3, [r2, #80]	@ 0x50
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4313      	orrs	r3, r2
 8003a08:	d053      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a14:	d033      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003a16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a1a:	d82c      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a20:	d02f      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a26:	d826      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a2c:	d02b      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003a2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a32:	d820      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a38:	d012      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a3e:	d81a      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d022      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d115      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4e:	3308      	adds	r3, #8
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 f9f2 	bl	8004e3c <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a5e:	e015      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a64:	3328      	adds	r3, #40	@ 0x28
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fa99 	bl	8004fa0 <RCCEx_PLL3_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a74:	e00a      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a7c:	e006      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a94:	4b38      	ldr	r3, [pc, #224]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	4a35      	ldr	r2, [pc, #212]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ac8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003acc:	460b      	mov	r3, r1
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	d058      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ade:	d033      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae4:	d82c      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aea:	d02f      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af0:	d826      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003af2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003af6:	d02b      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003af8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003afc:	d820      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003afe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b02:	d012      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b08:	d81a      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d022      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b12:	d115      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b18:	3308      	adds	r3, #8
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 f98d 	bl	8004e3c <RCCEx_PLL2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b28:	e015      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2e:	3328      	adds	r3, #40	@ 0x28
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 fa34 	bl	8004fa0 <RCCEx_PLL3_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b46:	e006      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b48:	bf00      	nop
 8003b4a:	e004      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b4c:	bf00      	nop
 8003b4e:	e002      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b50:	bf00      	nop
 8003b52:	e000      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10e      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b6e:	4a02      	ldr	r2, [pc, #8]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b74:	e006      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	d037      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003baa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bae:	d00e      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb4:	d816      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d018      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc0:	4bc4      	ldr	r3, [pc, #784]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	4ac3      	ldr	r2, [pc, #780]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bcc:	e00f      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f001 f930 	bl	8004e3c <RCCEx_PLL2_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003be2:	e004      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bf6:	4bb7      	ldr	r3, [pc, #732]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bfa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c04:	4ab3      	ldr	r2, [pc, #716]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c06:	430b      	orrs	r3, r1
 8003c08:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c0a:	e003      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d039      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d81c      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c81 	.word	0x08003c81
 8003c48:	08003c55 	.word	0x08003c55
 8003c4c:	08003c63 	.word	0x08003c63
 8003c50:	08003c81 	.word	0x08003c81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c54:	4b9f      	ldr	r3, [pc, #636]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c58:	4a9e      	ldr	r2, [pc, #632]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c60:	e00f      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c66:	3308      	adds	r3, #8
 8003c68:	2102      	movs	r1, #2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 f8e6 	bl	8004e3c <RCCEx_PLL2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c76:	e004      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10a      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c8a:	4b92      	ldr	r3, [pc, #584]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8e:	f023 0103 	bic.w	r1, r3, #3
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c98:	4a8e      	ldr	r2, [pc, #568]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f000 8099 	beq.w	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cca:	4b83      	ldr	r3, [pc, #524]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a82      	ldr	r2, [pc, #520]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd6:	f7fd faaf 	bl	8001238 <HAL_GetTick>
 8003cda:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fd faaa 	bl	8001238 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b64      	cmp	r3, #100	@ 0x64
 8003cee:	d903      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cf6:	e005      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf8:	4b77      	ldr	r3, [pc, #476]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ed      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d173      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d0c:	4b71      	ldr	r3, [pc, #452]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d18:	4053      	eors	r3, r2
 8003d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d015      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d22:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2e:	4b69      	ldr	r3, [pc, #420]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a68      	ldr	r2, [pc, #416]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3a:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a65      	ldr	r2, [pc, #404]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d46:	4a63      	ldr	r2, [pc, #396]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d5a:	d118      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fa6c 	bl	8001238 <HAL_GetTick>
 8003d60:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d64:	e00d      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d66:	f7fd fa67 	bl	8001238 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003d70:	1ad2      	subs	r2, r2, r3
 8003d72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d903      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003d80:	e005      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d82:	4b54      	ldr	r3, [pc, #336]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0eb      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d129      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da6:	d10e      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003da8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003db8:	091a      	lsrs	r2, r3, #4
 8003dba:	4b48      	ldr	r3, [pc, #288]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	4a45      	ldr	r2, [pc, #276]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6113      	str	r3, [r2, #16]
 8003dc4:	e005      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003dc6:	4b43      	ldr	r3, [pc, #268]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	4a42      	ldr	r2, [pc, #264]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dd0:	6113      	str	r3, [r2, #16]
 8003dd2:	4b40      	ldr	r3, [pc, #256]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de2:	4a3c      	ldr	r2, [pc, #240]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de8:	e008      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f002 0301 	and.w	r3, r2, #1
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f000 808f 	beq.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e24:	2b28      	cmp	r3, #40	@ 0x28
 8003e26:	d871      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003f15 	.word	0x08003f15
 8003e34:	08003f0d 	.word	0x08003f0d
 8003e38:	08003f0d 	.word	0x08003f0d
 8003e3c:	08003f0d 	.word	0x08003f0d
 8003e40:	08003f0d 	.word	0x08003f0d
 8003e44:	08003f0d 	.word	0x08003f0d
 8003e48:	08003f0d 	.word	0x08003f0d
 8003e4c:	08003f0d 	.word	0x08003f0d
 8003e50:	08003ee1 	.word	0x08003ee1
 8003e54:	08003f0d 	.word	0x08003f0d
 8003e58:	08003f0d 	.word	0x08003f0d
 8003e5c:	08003f0d 	.word	0x08003f0d
 8003e60:	08003f0d 	.word	0x08003f0d
 8003e64:	08003f0d 	.word	0x08003f0d
 8003e68:	08003f0d 	.word	0x08003f0d
 8003e6c:	08003f0d 	.word	0x08003f0d
 8003e70:	08003ef7 	.word	0x08003ef7
 8003e74:	08003f0d 	.word	0x08003f0d
 8003e78:	08003f0d 	.word	0x08003f0d
 8003e7c:	08003f0d 	.word	0x08003f0d
 8003e80:	08003f0d 	.word	0x08003f0d
 8003e84:	08003f0d 	.word	0x08003f0d
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08003f0d 	.word	0x08003f0d
 8003e90:	08003f15 	.word	0x08003f15
 8003e94:	08003f0d 	.word	0x08003f0d
 8003e98:	08003f0d 	.word	0x08003f0d
 8003e9c:	08003f0d 	.word	0x08003f0d
 8003ea0:	08003f0d 	.word	0x08003f0d
 8003ea4:	08003f0d 	.word	0x08003f0d
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003f0d 	.word	0x08003f0d
 8003eb0:	08003f15 	.word	0x08003f15
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003f0d 	.word	0x08003f0d
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f15 	.word	0x08003f15
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	58024800 	.word	0x58024800
 8003edc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 ffa7 	bl	8004e3c <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 f84e 	bl	8004fa0 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f1e:	4bbf      	ldr	r3, [pc, #764]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f2c:	4abb      	ldr	r2, [pc, #748]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f002 0302 	and.w	r3, r2, #2
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d041      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d824      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003f66:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003f85 	.word	0x08003f85
 8003f74:	08003f9b 	.word	0x08003f9b
 8003f78:	08003fb9 	.word	0x08003fb9
 8003f7c:	08003fb9 	.word	0x08003fb9
 8003f80:	08003fb9 	.word	0x08003fb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	3308      	adds	r3, #8
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 ff55 	bl	8004e3c <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f98:	e00f      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9e:	3328      	adds	r3, #40	@ 0x28
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fffc 	bl	8004fa0 <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fae:	e004      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fc2:	4b96      	ldr	r3, [pc, #600]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc6:	f023 0107 	bic.w	r1, r3, #7
 8003fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd0:	4a92      	ldr	r2, [pc, #584]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f002 0304 	and.w	r3, r2, #4
 8003fec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ff6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d044      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004008:	2b05      	cmp	r3, #5
 800400a:	d825      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800400c:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004061 	.word	0x08004061
 8004018:	0800402d 	.word	0x0800402d
 800401c:	08004043 	.word	0x08004043
 8004020:	08004061 	.word	0x08004061
 8004024:	08004061 	.word	0x08004061
 8004028:	08004061 	.word	0x08004061
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	3308      	adds	r3, #8
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f000 ff01 	bl	8004e3c <RCCEx_PLL2_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004040:	e00f      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004046:	3328      	adds	r3, #40	@ 0x28
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f000 ffa8 	bl	8004fa0 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800406a:	4b6c      	ldr	r3, [pc, #432]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406e:	f023 0107 	bic.w	r1, r3, #7
 8004072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	4a68      	ldr	r2, [pc, #416]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800407c:	430b      	orrs	r3, r1
 800407e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004086:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f002 0320 	and.w	r3, r2, #32
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d055      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b6:	d033      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80040b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040bc:	d82c      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c2:	d02f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c8:	d826      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80040ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ce:	d02b      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80040d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040d4:	d820      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80040d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040da:	d012      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80040dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040e0:	d81a      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d022      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80040e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ea:	d115      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f0:	3308      	adds	r3, #8
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fea1 	bl	8004e3c <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004100:	e015      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	3328      	adds	r3, #40	@ 0x28
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 ff48 	bl	8004fa0 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004116:	e00a      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800411e:	e006      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004120:	bf00      	nop
 8004122:	e004      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004124:	bf00      	nop
 8004126:	e002      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800412c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004136:	4b39      	ldr	r3, [pc, #228]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800413e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004146:	4a35      	ldr	r2, [pc, #212]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004148:	430b      	orrs	r3, r1
 800414a:	6553      	str	r3, [r2, #84]	@ 0x54
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004162:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800416c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d058      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800417e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004182:	d033      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004184:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004188:	d82c      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418e:	d02f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004194:	d826      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800419a:	d02b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800419c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041a0:	d820      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a6:	d012      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80041a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ac:	d81a      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d022      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b6:	d115      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041bc:	3308      	adds	r3, #8
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fe3b 	bl	8004e3c <RCCEx_PLL2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041cc:	e015      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	3328      	adds	r3, #40	@ 0x28
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fee2 	bl	8004fa0 <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041e2:	e00a      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041ea:	e006      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041ec:	bf00      	nop
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041f0:	bf00      	nop
 80041f2:	e002      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10e      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004202:	4b06      	ldr	r3, [pc, #24]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800420a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004212:	4a02      	ldr	r2, [pc, #8]	@ (800421c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6593      	str	r3, [r2, #88]	@ 0x58
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004224:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004234:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800423e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004242:	460b      	mov	r3, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	d055      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004250:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004254:	d033      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004256:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800425a:	d82c      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004260:	d02f      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004262:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004266:	d826      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004268:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800426c:	d02b      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800426e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004272:	d820      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004278:	d012      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800427a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800427e:	d81a      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d022      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004288:	d115      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428e:	3308      	adds	r3, #8
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fdd2 	bl	8004e3c <RCCEx_PLL2_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800429e:	e015      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	3328      	adds	r3, #40	@ 0x28
 80042a6:	2102      	movs	r1, #2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fe79 	bl	8004fa0 <RCCEx_PLL3_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042b4:	e00a      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80042be:	bf00      	nop
 80042c0:	e004      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80042ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042d4:	4ba0      	ldr	r3, [pc, #640]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042e4:	4a9c      	ldr	r2, [pc, #624]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e6:	430b      	orrs	r3, r1
 80042e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f002 0308 	and.w	r3, r2, #8
 8004300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800430a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d01e      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004320:	d10c      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004326:	3328      	adds	r3, #40	@ 0x28
 8004328:	2102      	movs	r1, #2
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fe38 	bl	8004fa0 <RCCEx_PLL3_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800433c:	4b86      	ldr	r3, [pc, #536]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434c:	4a82      	ldr	r2, [pc, #520]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800434e:	430b      	orrs	r3, r1
 8004350:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f002 0310 	and.w	r3, r2, #16
 800435e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004362:	2300      	movs	r3, #0
 8004364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004368:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800436c:	460b      	mov	r3, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	d01e      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437e:	d10c      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004384:	3328      	adds	r3, #40	@ 0x28
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fe09 	bl	8004fa0 <RCCEx_PLL3_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800439a:	4b6f      	ldr	r3, [pc, #444]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043be:	2300      	movs	r3, #0
 80043c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d03e      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d8:	d022      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043de:	d81b      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d00b      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80043ea:	e015      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f0:	3308      	adds	r3, #8
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fd21 	bl	8004e3c <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fdc8 	bl	8004fa0 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800442a:	4b4b      	ldr	r3, [pc, #300]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004436:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800443a:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004440:	e003      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800444a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004456:	673b      	str	r3, [r7, #112]	@ 0x70
 8004458:	2300      	movs	r3, #0
 800445a:	677b      	str	r3, [r7, #116]	@ 0x74
 800445c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800446e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004472:	d01f      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004474:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004478:	d818      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800447e:	d003      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004484:	d007      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004486:	e011      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004488:	4b33      	ldr	r3, [pc, #204]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800448e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fd7e 	bl	8004fa0 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044be:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ce:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ec:	2300      	movs	r3, #0
 80044ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d034      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d007      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800450a:	e011      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004518:	e00e      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451e:	3308      	adds	r3, #8
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fc8a 	bl	8004e3c <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004544:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	4a02      	ldr	r2, [pc, #8]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004550:	430b      	orrs	r3, r1
 8004552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004560:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004570:	663b      	str	r3, [r7, #96]	@ 0x60
 8004572:	2300      	movs	r3, #0
 8004574:	667b      	str	r3, [r7, #100]	@ 0x64
 8004576:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d00c      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004584:	3328      	adds	r3, #40	@ 0x28
 8004586:	2102      	movs	r1, #2
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fd09 	bl	8004fa0 <RCCEx_PLL3_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800459a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045a8:	2300      	movs	r3, #0
 80045aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045b0:	460b      	mov	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d036      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c0:	d018      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80045c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c6:	d811      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045cc:	d014      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80045ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d2:	d80b      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d011      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045dc:	d106      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045de:	4bb7      	ldr	r3, [pc, #732]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	4ab6      	ldr	r2, [pc, #728]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045ea:	e008      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045f2:	e004      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045f4:	bf00      	nop
 80045f6:	e002      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045f8:	bf00      	nop
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80045fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004606:	4bad      	ldr	r3, [pc, #692]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800460e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004614:	4aa9      	ldr	r2, [pc, #676]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004616:	430b      	orrs	r3, r1
 8004618:	6553      	str	r3, [r2, #84]	@ 0x54
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004630:	653b      	str	r3, [r7, #80]	@ 0x50
 8004632:	2300      	movs	r3, #0
 8004634:	657b      	str	r3, [r7, #84]	@ 0x54
 8004636:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800463a:	460b      	mov	r3, r1
 800463c:	4313      	orrs	r3, r2
 800463e:	d009      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004640:	4b9e      	ldr	r3, [pc, #632]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	4a9b      	ldr	r2, [pc, #620]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004662:	2300      	movs	r3, #0
 8004664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004666:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004670:	4b92      	ldr	r3, [pc, #584]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004674:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800467c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800467e:	4a8f      	ldr	r2, [pc, #572]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004690:	643b      	str	r3, [r7, #64]	@ 0x40
 8004692:	2300      	movs	r3, #0
 8004694:	647b      	str	r3, [r7, #68]	@ 0x44
 8004696:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800469a:	460b      	mov	r3, r1
 800469c:	4313      	orrs	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046a0:	4b86      	ldr	r3, [pc, #536]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4a85      	ldr	r2, [pc, #532]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046aa:	6113      	str	r3, [r2, #16]
 80046ac:	4b83      	ldr	r3, [pc, #524]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ae:	6919      	ldr	r1, [r3, #16]
 80046b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046b8:	4a80      	ldr	r2, [pc, #512]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80046ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046cc:	2300      	movs	r3, #0
 80046ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046da:	4b78      	ldr	r3, [pc, #480]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e8:	4a74      	ldr	r2, [pc, #464]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80046fc:	2300      	movs	r3, #0
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004700:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800470a:	4b6c      	ldr	r3, [pc, #432]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800470c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	4a68      	ldr	r2, [pc, #416]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	2100      	movs	r1, #0
 800472a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004732:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d011      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004740:	3308      	adds	r3, #8
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fb79 	bl	8004e3c <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800475c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	2100      	movs	r1, #0
 800476a:	6239      	str	r1, [r7, #32]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
 8004772:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d011      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004780:	3308      	adds	r3, #8
 8004782:	2101      	movs	r1, #1
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fb59 	bl	8004e3c <RCCEx_PLL2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800479c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	2100      	movs	r1, #0
 80047aa:	61b9      	str	r1, [r7, #24]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047b6:	460b      	mov	r3, r1
 80047b8:	4313      	orrs	r3, r2
 80047ba:	d011      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c0:	3308      	adds	r3, #8
 80047c2:	2102      	movs	r1, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fb39 	bl	8004e3c <RCCEx_PLL2_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80047d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	2100      	movs	r1, #0
 80047ea:	6139      	str	r1, [r7, #16]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047f6:	460b      	mov	r3, r1
 80047f8:	4313      	orrs	r3, r2
 80047fa:	d011      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004800:	3328      	adds	r3, #40	@ 0x28
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fbcb 	bl	8004fa0 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800481c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	2100      	movs	r1, #0
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004836:	460b      	mov	r3, r1
 8004838:	4313      	orrs	r3, r2
 800483a:	d011      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800483c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004840:	3328      	adds	r3, #40	@ 0x28
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fbab 	bl	8004fa0 <RCCEx_PLL3_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004850:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004858:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800485c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	2100      	movs	r1, #0
 800486a:	6039      	str	r1, [r7, #0]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004876:	460b      	mov	r3, r1
 8004878:	4313      	orrs	r3, r2
 800487a:	d011      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800487c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004880:	3328      	adds	r3, #40	@ 0x28
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fb8b 	bl	8004fa0 <RCCEx_PLL3_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800489c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80048a0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80048b4:	46bd      	mov	sp, r7
 80048b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ba:	bf00      	nop
 80048bc:	58024400 	.word	0x58024400

080048c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048c4:	f7fe fe00 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4904      	ldr	r1, [pc, #16]	@ (80048e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	58024400 	.word	0x58024400
 80048e8:	08008068 	.word	0x08008068

080048ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	@ 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048f4:	4ba1      	ldr	r3, [pc, #644]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048fe:	4b9f      	ldr	r3, [pc, #636]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	0b1b      	lsrs	r3, r3, #12
 8004904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004908:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800490a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004916:	4b99      	ldr	r3, [pc, #612]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8111 	beq.w	8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f000 8083 	beq.w	8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f200 80a1 	bhi.w	8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d056      	beq.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004956:	e099      	b.n	8004a8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004958:	4b88      	ldr	r3, [pc, #544]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02d      	beq.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004964:	4b85      	ldr	r3, [pc, #532]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	4a84      	ldr	r2, [pc, #528]	@ (8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049be:	e087      	b.n	8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a02:	e065      	b.n	8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a16:	4b59      	ldr	r3, [pc, #356]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a46:	e043      	b.n	8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	4b48      	ldr	r3, [pc, #288]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8a:	e021      	b.n	8004ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9e:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ace:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	0a5b      	lsrs	r3, r3, #9
 8004ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af6:	ee17 2a90 	vmov	r2, s15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004afe:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b24:	ee17 2a90 	vmov	r2, s15
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b2c:	4b13      	ldr	r3, [pc, #76]	@ (8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b52:	ee17 2a90 	vmov	r2, s15
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b5a:	e008      	b.n	8004b6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	3724      	adds	r7, #36	@ 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	03d09000 	.word	0x03d09000
 8004b84:	46000000 	.word	0x46000000
 8004b88:	4c742400 	.word	0x4c742400
 8004b8c:	4a742400 	.word	0x4a742400
 8004b90:	4bbebc20 	.word	0x4bbebc20

08004b94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	@ 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b9c:	4ba1      	ldr	r3, [pc, #644]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ba6:	4b9f      	ldr	r3, [pc, #636]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004baa:	0d1b      	lsrs	r3, r3, #20
 8004bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bb2:	4b9c      	ldr	r3, [pc, #624]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bbe:	4b99      	ldr	r3, [pc, #612]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	08db      	lsrs	r3, r3, #3
 8004bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	fb02 f303 	mul.w	r3, r2, r3
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8111 	beq.w	8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f000 8083 	beq.w	8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	f200 80a1 	bhi.w	8004d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d056      	beq.n	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bfe:	e099      	b.n	8004d34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c00:	4b88      	ldr	r3, [pc, #544]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d02d      	beq.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c0c:	4b85      	ldr	r3, [pc, #532]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	4a84      	ldr	r2, [pc, #528]	@ (8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b7b      	ldr	r3, [pc, #492]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c66:	e087      	b.n	8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c82:	ee07 3a90 	vmov	s15, r3
 8004c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004caa:	e065      	b.n	8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cbe:	4b59      	ldr	r3, [pc, #356]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cee:	e043      	b.n	8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b48      	ldr	r3, [pc, #288]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d32:	e021      	b.n	8004d78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b37      	ldr	r3, [pc, #220]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d78:	4b2a      	ldr	r3, [pc, #168]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9e:	ee17 2a90 	vmov	r2, s15
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004da6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	0c1b      	lsrs	r3, r3, #16
 8004dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db0:	ee07 3a90 	vmov	s15, r3
 8004db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dcc:	ee17 2a90 	vmov	r2, s15
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004dd4:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	0e1b      	lsrs	r3, r3, #24
 8004dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dfa:	ee17 2a90 	vmov	r2, s15
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e02:	e008      	b.n	8004e16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
}
 8004e16:	bf00      	nop
 8004e18:	3724      	adds	r7, #36	@ 0x24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
 8004e28:	03d09000 	.word	0x03d09000
 8004e2c:	46000000 	.word	0x46000000
 8004e30:	4c742400 	.word	0x4c742400
 8004e34:	4a742400 	.word	0x4a742400
 8004e38:	4bbebc20 	.word	0x4bbebc20

08004e3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e4a:	4b53      	ldr	r3, [pc, #332]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d101      	bne.n	8004e5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e099      	b.n	8004f8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e66:	f7fc f9e7 	bl	8001238 <HAL_GetTick>
 8004e6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e6e:	f7fc f9e3 	bl	8001238 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e086      	b.n	8004f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e80:	4b45      	ldr	r3, [pc, #276]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e8c:	4b42      	ldr	r3, [pc, #264]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	031b      	lsls	r3, r3, #12
 8004e9a:	493f      	ldr	r1, [pc, #252]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	025b      	lsls	r3, r3, #9
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ed0:	4931      	ldr	r1, [pc, #196]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ed6:	4b30      	ldr	r3, [pc, #192]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	492d      	ldr	r1, [pc, #180]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	f023 0220 	bic.w	r2, r3, #32
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	4928      	ldr	r1, [pc, #160]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	4a26      	ldr	r2, [pc, #152]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f06:	4b24      	ldr	r3, [pc, #144]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f0a:	4b24      	ldr	r3, [pc, #144]	@ (8004f9c <RCCEx_PLL2_Config+0x160>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	69d2      	ldr	r2, [r2, #28]
 8004f12:	00d2      	lsls	r2, r2, #3
 8004f14:	4920      	ldr	r1, [pc, #128]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	f043 0310 	orr.w	r3, r3, #16
 8004f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a19      	ldr	r2, [pc, #100]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f38:	e00f      	b.n	8004f5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f40:	4b15      	ldr	r3, [pc, #84]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a14      	ldr	r2, [pc, #80]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f4c:	e005      	b.n	8004f5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f66:	f7fc f967 	bl	8001238 <HAL_GetTick>
 8004f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f6e:	f7fc f963 	bl	8001238 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <RCCEx_PLL2_Config+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	ffff0007 	.word	0xffff0007

08004fa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fae:	4b53      	ldr	r3, [pc, #332]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d101      	bne.n	8004fbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e099      	b.n	80050f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fca:	f7fc f935 	bl	8001238 <HAL_GetTick>
 8004fce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fd2:	f7fc f931 	bl	8001238 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e086      	b.n	80050f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fe4:	4b45      	ldr	r3, [pc, #276]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f0      	bne.n	8004fd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ff0:	4b42      	ldr	r3, [pc, #264]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	051b      	lsls	r3, r3, #20
 8004ffe:	493f      	ldr	r1, [pc, #252]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	628b      	str	r3, [r1, #40]	@ 0x28
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	3b01      	subs	r3, #1
 800500a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	3b01      	subs	r3, #1
 8005014:	025b      	lsls	r3, r3, #9
 8005016:	b29b      	uxth	r3, r3
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	3b01      	subs	r3, #1
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	3b01      	subs	r3, #1
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005034:	4931      	ldr	r1, [pc, #196]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800503a:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	492d      	ldr	r1, [pc, #180]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800504c:	4b2b      	ldr	r3, [pc, #172]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	4928      	ldr	r1, [pc, #160]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 800505a:	4313      	orrs	r3, r2
 800505c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	4a26      	ldr	r2, [pc, #152]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005068:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800506a:	4b24      	ldr	r3, [pc, #144]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 800506c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800506e:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <RCCEx_PLL3_Config+0x160>)
 8005070:	4013      	ands	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	69d2      	ldr	r2, [r2, #28]
 8005076:	00d2      	lsls	r2, r2, #3
 8005078:	4920      	ldr	r1, [pc, #128]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 800507a:	4313      	orrs	r3, r2
 800507c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800507e:	4b1f      	ldr	r3, [pc, #124]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	4a1e      	ldr	r2, [pc, #120]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005090:	4b1a      	ldr	r3, [pc, #104]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 8005096:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800509a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800509c:	e00f      	b.n	80050be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d106      	bne.n	80050b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050a4:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	4a14      	ldr	r2, [pc, #80]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b0:	e005      	b.n	80050be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a11      	ldr	r2, [pc, #68]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050be:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a0e      	ldr	r2, [pc, #56]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ca:	f7fc f8b5 	bl	8001238 <HAL_GetTick>
 80050ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050d2:	f7fc f8b1 	bl	8001238 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e006      	b.n	80050f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <RCCEx_PLL3_Config+0x15c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	58024400 	.word	0x58024400
 8005100:	ffff0007 	.word	0xffff0007

08005104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e049      	b.n	80051aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fb fe18 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f000 fc58 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d001      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e05e      	b.n	800528a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005298 <HAL_TIM_Base_Start_IT+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02c      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f6:	d027      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a27      	ldr	r2, [pc, #156]	@ (800529c <HAL_TIM_Base_Start_IT+0xe8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d022      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a26      	ldr	r2, [pc, #152]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xec>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d01d      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a24      	ldr	r2, [pc, #144]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d018      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a23      	ldr	r2, [pc, #140]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xf4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a21      	ldr	r2, [pc, #132]	@ (80052ac <HAL_TIM_Base_Start_IT+0xf8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00e      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a20      	ldr	r2, [pc, #128]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xfc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d009      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <HAL_TIM_Base_Start_IT+0x100>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x94>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1d      	ldr	r2, [pc, #116]	@ (80052b8 <HAL_TIM_Base_Start_IT+0x104>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d115      	bne.n	8005274 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <HAL_TIM_Base_Start_IT+0x108>)
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b06      	cmp	r3, #6
 8005258:	d015      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0xd2>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d011      	beq.n	8005286 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	e008      	b.n	8005286 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e000      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40010400 	.word	0x40010400
 80052ac:	40001800 	.word	0x40001800
 80052b0:	40014000 	.word	0x40014000
 80052b4:	4000e000 	.word	0x4000e000
 80052b8:	4000e400 	.word	0x4000e400
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e049      	b.n	8005366 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f841 	bl	800536e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fb7a 	bl	80059f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d020      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01b      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0202 	mvn.w	r2, #2
 80053b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 faf5 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 80053d2:	e005      	b.n	80053e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fae7 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 faf8 	bl	80059d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d020      	beq.n	8005432 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d01b      	beq.n	8005432 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f06f 0204 	mvn.w	r2, #4
 8005402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 facf 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 800541e:	e005      	b.n	800542c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fac1 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fad2 	bl	80059d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d020      	beq.n	800547e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0208 	mvn.w	r2, #8
 800544e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2204      	movs	r2, #4
 8005454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 faa9 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 800546a:	e005      	b.n	8005478 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa9b 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 faac 	bl	80059d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	d020      	beq.n	80054ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01b      	beq.n	80054ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0210 	mvn.w	r2, #16
 800549a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2208      	movs	r2, #8
 80054a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa83 	bl	80059bc <HAL_TIM_IC_CaptureCallback>
 80054b6:	e005      	b.n	80054c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fa75 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fa86 	bl	80059d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00c      	beq.n	80054ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f06f 0201 	mvn.w	r2, #1
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fb fb47 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00c      	beq.n	800551c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 ff3a 	bl	8006390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00c      	beq.n	8005540 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 ff32 	bl	80063a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00c      	beq.n	8005564 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800555c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa40 	bl	80059e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0220 	mvn.w	r2, #32
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fefa 	bl	800637c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e0ff      	b.n	80057ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b14      	cmp	r3, #20
 80055ba:	f200 80f0 	bhi.w	800579e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80055be:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	08005619 	.word	0x08005619
 80055c8:	0800579f 	.word	0x0800579f
 80055cc:	0800579f 	.word	0x0800579f
 80055d0:	0800579f 	.word	0x0800579f
 80055d4:	08005659 	.word	0x08005659
 80055d8:	0800579f 	.word	0x0800579f
 80055dc:	0800579f 	.word	0x0800579f
 80055e0:	0800579f 	.word	0x0800579f
 80055e4:	0800569b 	.word	0x0800569b
 80055e8:	0800579f 	.word	0x0800579f
 80055ec:	0800579f 	.word	0x0800579f
 80055f0:	0800579f 	.word	0x0800579f
 80055f4:	080056db 	.word	0x080056db
 80055f8:	0800579f 	.word	0x0800579f
 80055fc:	0800579f 	.word	0x0800579f
 8005600:	0800579f 	.word	0x0800579f
 8005604:	0800571d 	.word	0x0800571d
 8005608:	0800579f 	.word	0x0800579f
 800560c:	0800579f 	.word	0x0800579f
 8005610:	0800579f 	.word	0x0800579f
 8005614:	0800575d 	.word	0x0800575d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fa9c 	bl	8005b5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0204 	bic.w	r2, r2, #4
 8005642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6999      	ldr	r1, [r3, #24]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]
      break;
 8005656:	e0a5      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fb0c 	bl	8005c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699a      	ldr	r2, [r3, #24]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6999      	ldr	r1, [r3, #24]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	619a      	str	r2, [r3, #24]
      break;
 8005698:	e084      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fb75 	bl	8005d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0208 	orr.w	r2, r2, #8
 80056b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0204 	bic.w	r2, r2, #4
 80056c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69d9      	ldr	r1, [r3, #28]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	61da      	str	r2, [r3, #28]
      break;
 80056d8:	e064      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fbdd 	bl	8005ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69d9      	ldr	r1, [r3, #28]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	021a      	lsls	r2, r3, #8
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	61da      	str	r2, [r3, #28]
      break;
 800571a:	e043      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fc26 	bl	8005f74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0208 	orr.w	r2, r2, #8
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0204 	bic.w	r2, r2, #4
 8005746:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691a      	ldr	r2, [r3, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800575a:	e023      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fc6a 	bl	800603c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005776:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005786:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	021a      	lsls	r2, r3, #8
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800579c:	e002      	b.n	80057a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	75fb      	strb	r3, [r7, #23]
      break;
 80057a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop

080057b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_ConfigClockSource+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e0dc      	b.n	800598e <HAL_TIM_ConfigClockSource+0x1d6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005998 <HAL_TIM_ConfigClockSource+0x1e0>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a64      	ldr	r2, [pc, #400]	@ (800599c <HAL_TIM_ConfigClockSource+0x1e4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f000 80a9 	beq.w	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 8005810:	4a62      	ldr	r2, [pc, #392]	@ (800599c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	f200 80ae 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005818:	4a61      	ldr	r2, [pc, #388]	@ (80059a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	f000 80a1 	beq.w	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 8005820:	4a5f      	ldr	r2, [pc, #380]	@ (80059a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f200 80a6 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005828:	4a5e      	ldr	r2, [pc, #376]	@ (80059a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800582a:	4293      	cmp	r3, r2
 800582c:	f000 8099 	beq.w	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 8005830:	4a5c      	ldr	r2, [pc, #368]	@ (80059a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005832:	4293      	cmp	r3, r2
 8005834:	f200 809e 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005838:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800583c:	f000 8091 	beq.w	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 8005840:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005844:	f200 8096 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800584c:	f000 8089 	beq.w	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 8005850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005854:	f200 808e 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585c:	d03e      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0x124>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005862:	f200 8087 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586a:	f000 8086 	beq.w	800597a <HAL_TIM_ConfigClockSource+0x1c2>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005872:	d87f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005874:	2b70      	cmp	r3, #112	@ 0x70
 8005876:	d01a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xf6>
 8005878:	2b70      	cmp	r3, #112	@ 0x70
 800587a:	d87b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 800587c:	2b60      	cmp	r3, #96	@ 0x60
 800587e:	d050      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x16a>
 8005880:	2b60      	cmp	r3, #96	@ 0x60
 8005882:	d877      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005884:	2b50      	cmp	r3, #80	@ 0x50
 8005886:	d03c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x14a>
 8005888:	2b50      	cmp	r3, #80	@ 0x50
 800588a:	d873      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 800588c:	2b40      	cmp	r3, #64	@ 0x40
 800588e:	d058      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x18a>
 8005890:	2b40      	cmp	r3, #64	@ 0x40
 8005892:	d86f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 8005894:	2b30      	cmp	r3, #48	@ 0x30
 8005896:	d064      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 8005898:	2b30      	cmp	r3, #48	@ 0x30
 800589a:	d86b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d060      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d867      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d05a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x1aa>
 80058ac:	e062      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	f000 fca1 	bl	8006204 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	609a      	str	r2, [r3, #8]
      break;
 80058da:	e04f      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	f000 fc8a 	bl	8006204 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058fe:	609a      	str	r2, [r3, #8]
      break;
 8005900:	e03c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fbfa 	bl	8006108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2150      	movs	r1, #80	@ 0x50
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fc54 	bl	80061c8 <TIM_ITRx_SetConfig>
      break;
 8005920:	e02c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fc19 	bl	8006166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2160      	movs	r1, #96	@ 0x60
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc44 	bl	80061c8 <TIM_ITRx_SetConfig>
      break;
 8005940:	e01c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fbda 	bl	8006108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2140      	movs	r1, #64	@ 0x40
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fc34 	bl	80061c8 <TIM_ITRx_SetConfig>
      break;
 8005960:	e00c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 fc2b 	bl	80061c8 <TIM_ITRx_SetConfig>
      break;
 8005972:	e003      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	e000      	b.n	800597c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800597a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	ffceff88 	.word	0xffceff88
 800599c:	00100040 	.word	0x00100040
 80059a0:	00100030 	.word	0x00100030
 80059a4:	00100020 	.word	0x00100020

080059a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b34 <TIM_Base_SetConfig+0x13c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a16:	d00f      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a47      	ldr	r2, [pc, #284]	@ (8005b38 <TIM_Base_SetConfig+0x140>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a46      	ldr	r2, [pc, #280]	@ (8005b3c <TIM_Base_SetConfig+0x144>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a45      	ldr	r2, [pc, #276]	@ (8005b40 <TIM_Base_SetConfig+0x148>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a44      	ldr	r2, [pc, #272]	@ (8005b44 <TIM_Base_SetConfig+0x14c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d108      	bne.n	8005a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a39      	ldr	r2, [pc, #228]	@ (8005b34 <TIM_Base_SetConfig+0x13c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a36      	ldr	r2, [pc, #216]	@ (8005b38 <TIM_Base_SetConfig+0x140>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a35      	ldr	r2, [pc, #212]	@ (8005b3c <TIM_Base_SetConfig+0x144>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a34      	ldr	r2, [pc, #208]	@ (8005b40 <TIM_Base_SetConfig+0x148>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <TIM_Base_SetConfig+0x14c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a32      	ldr	r2, [pc, #200]	@ (8005b48 <TIM_Base_SetConfig+0x150>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a31      	ldr	r2, [pc, #196]	@ (8005b4c <TIM_Base_SetConfig+0x154>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a30      	ldr	r2, [pc, #192]	@ (8005b50 <TIM_Base_SetConfig+0x158>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a2f      	ldr	r2, [pc, #188]	@ (8005b54 <TIM_Base_SetConfig+0x15c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xaa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b58 <TIM_Base_SetConfig+0x160>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a16      	ldr	r2, [pc, #88]	@ (8005b34 <TIM_Base_SetConfig+0x13c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_Base_SetConfig+0x108>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <TIM_Base_SetConfig+0x14c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_Base_SetConfig+0x108>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <TIM_Base_SetConfig+0x150>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_Base_SetConfig+0x108>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <TIM_Base_SetConfig+0x154>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_Base_SetConfig+0x108>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <TIM_Base_SetConfig+0x158>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d103      	bne.n	8005b08 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d105      	bne.n	8005b26 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f023 0201 	bic.w	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]
  }
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40000400 	.word	0x40000400
 8005b3c:	40000800 	.word	0x40000800
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40010400 	.word	0x40010400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800
 8005b54:	4000e000 	.word	0x4000e000
 8005b58:	4000e400 	.word	0x4000e400

08005b5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f023 0201 	bic.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4b37      	ldr	r3, [pc, #220]	@ (8005c64 <TIM_OC1_SetConfig+0x108>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 0302 	bic.w	r3, r3, #2
 8005ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c68 <TIM_OC1_SetConfig+0x10c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x7c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a2c      	ldr	r2, [pc, #176]	@ (8005c6c <TIM_OC1_SetConfig+0x110>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x7c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c70 <TIM_OC1_SetConfig+0x114>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x7c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <TIM_OC1_SetConfig+0x118>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_OC1_SetConfig+0x7c>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a29      	ldr	r2, [pc, #164]	@ (8005c78 <TIM_OC1_SetConfig+0x11c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d10c      	bne.n	8005bf2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0308 	bic.w	r3, r3, #8
 8005bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 0304 	bic.w	r3, r3, #4
 8005bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c68 <TIM_OC1_SetConfig+0x10c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00f      	beq.n	8005c1a <TIM_OC1_SetConfig+0xbe>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c6c <TIM_OC1_SetConfig+0x110>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_OC1_SetConfig+0xbe>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <TIM_OC1_SetConfig+0x114>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d007      	beq.n	8005c1a <TIM_OC1_SetConfig+0xbe>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	@ (8005c74 <TIM_OC1_SetConfig+0x118>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_OC1_SetConfig+0xbe>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a18      	ldr	r2, [pc, #96]	@ (8005c78 <TIM_OC1_SetConfig+0x11c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d111      	bne.n	8005c3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	fffeff8f 	.word	0xfffeff8f
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f023 0210 	bic.w	r2, r3, #16
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4b34      	ldr	r3, [pc, #208]	@ (8005d78 <TIM_OC2_SetConfig+0xfc>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 0320 	bic.w	r3, r3, #32
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a29      	ldr	r2, [pc, #164]	@ (8005d7c <TIM_OC2_SetConfig+0x100>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC2_SetConfig+0x68>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <TIM_OC2_SetConfig+0x104>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10d      	bne.n	8005d00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <TIM_OC2_SetConfig+0x100>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_OC2_SetConfig+0xac>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <TIM_OC2_SetConfig+0x104>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_OC2_SetConfig+0xac>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	@ (8005d84 <TIM_OC2_SetConfig+0x108>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_OC2_SetConfig+0xac>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d88 <TIM_OC2_SetConfig+0x10c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_OC2_SetConfig+0xac>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a1a      	ldr	r2, [pc, #104]	@ (8005d8c <TIM_OC2_SetConfig+0x110>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d113      	bne.n	8005d50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	feff8fff 	.word	0xfeff8fff
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800

08005d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4b33      	ldr	r3, [pc, #204]	@ (8005e88 <TIM_OC3_SetConfig+0xf8>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0303 	bic.w	r3, r3, #3
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a28      	ldr	r2, [pc, #160]	@ (8005e8c <TIM_OC3_SetConfig+0xfc>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d003      	beq.n	8005df6 <TIM_OC3_SetConfig+0x66>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a27      	ldr	r2, [pc, #156]	@ (8005e90 <TIM_OC3_SetConfig+0x100>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10d      	bne.n	8005e12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1d      	ldr	r2, [pc, #116]	@ (8005e8c <TIM_OC3_SetConfig+0xfc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00f      	beq.n	8005e3a <TIM_OC3_SetConfig+0xaa>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <TIM_OC3_SetConfig+0x100>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_OC3_SetConfig+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <TIM_OC3_SetConfig+0x104>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <TIM_OC3_SetConfig+0xaa>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e98 <TIM_OC3_SetConfig+0x108>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_OC3_SetConfig+0xaa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <TIM_OC3_SetConfig+0x10c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d113      	bne.n	8005e62 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	621a      	str	r2, [r3, #32]
}
 8005e7c:	bf00      	nop
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	fffeff8f 	.word	0xfffeff8f
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40010400 	.word	0x40010400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800

08005ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <TIM_OC4_SetConfig+0xbc>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	031b      	lsls	r3, r3, #12
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a19      	ldr	r2, [pc, #100]	@ (8005f60 <TIM_OC4_SetConfig+0xc0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00f      	beq.n	8005f20 <TIM_OC4_SetConfig+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a18      	ldr	r2, [pc, #96]	@ (8005f64 <TIM_OC4_SetConfig+0xc4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_OC4_SetConfig+0x80>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a17      	ldr	r2, [pc, #92]	@ (8005f68 <TIM_OC4_SetConfig+0xc8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_OC4_SetConfig+0x80>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a16      	ldr	r2, [pc, #88]	@ (8005f6c <TIM_OC4_SetConfig+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_OC4_SetConfig+0x80>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <TIM_OC4_SetConfig+0xd0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d109      	bne.n	8005f34 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	feff8fff 	.word	0xfeff8fff
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800

08005f74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4b21      	ldr	r3, [pc, #132]	@ (8006024 <TIM_OC5_SetConfig+0xb0>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a18      	ldr	r2, [pc, #96]	@ (8006028 <TIM_OC5_SetConfig+0xb4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00f      	beq.n	8005fea <TIM_OC5_SetConfig+0x76>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a17      	ldr	r2, [pc, #92]	@ (800602c <TIM_OC5_SetConfig+0xb8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_OC5_SetConfig+0x76>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a16      	ldr	r2, [pc, #88]	@ (8006030 <TIM_OC5_SetConfig+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_OC5_SetConfig+0x76>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a15      	ldr	r2, [pc, #84]	@ (8006034 <TIM_OC5_SetConfig+0xc0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC5_SetConfig+0x76>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a14      	ldr	r2, [pc, #80]	@ (8006038 <TIM_OC5_SetConfig+0xc4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d109      	bne.n	8005ffe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	fffeff8f 	.word	0xfffeff8f
 8006028:	40010000 	.word	0x40010000
 800602c:	40010400 	.word	0x40010400
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800

0800603c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4b22      	ldr	r3, [pc, #136]	@ (80060f0 <TIM_OC6_SetConfig+0xb4>)
 8006068:	4013      	ands	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800607e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	051b      	lsls	r3, r3, #20
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a19      	ldr	r2, [pc, #100]	@ (80060f4 <TIM_OC6_SetConfig+0xb8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00f      	beq.n	80060b4 <TIM_OC6_SetConfig+0x78>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a18      	ldr	r2, [pc, #96]	@ (80060f8 <TIM_OC6_SetConfig+0xbc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00b      	beq.n	80060b4 <TIM_OC6_SetConfig+0x78>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a17      	ldr	r2, [pc, #92]	@ (80060fc <TIM_OC6_SetConfig+0xc0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_OC6_SetConfig+0x78>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a16      	ldr	r2, [pc, #88]	@ (8006100 <TIM_OC6_SetConfig+0xc4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_OC6_SetConfig+0x78>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a15      	ldr	r2, [pc, #84]	@ (8006104 <TIM_OC6_SetConfig+0xc8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	feff8fff 	.word	0xfeff8fff
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800

08006108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 030a 	bic.w	r3, r3, #10
 8006144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006166:	b480      	push	{r7}
 8006168:	b087      	sub	sp, #28
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f023 0210 	bic.w	r2, r3, #16
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	031b      	lsls	r3, r3, #12
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4b09      	ldr	r3, [pc, #36]	@ (8006200 <TIM_ITRx_SetConfig+0x38>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f043 0307 	orr.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	609a      	str	r2, [r3, #8]
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	ffcfff8f 	.word	0xffcfff8f

08006204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800621e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	431a      	orrs	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4313      	orrs	r3, r2
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e077      	b.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a35      	ldr	r2, [pc, #212]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a34      	ldr	r2, [pc, #208]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006296:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a25      	ldr	r2, [pc, #148]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02c      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ce:	d027      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a22      	ldr	r2, [pc, #136]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d022      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a21      	ldr	r2, [pc, #132]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1a      	ldr	r2, [pc, #104]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1b      	ldr	r2, [pc, #108]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1a      	ldr	r2, [pc, #104]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a18      	ldr	r2, [pc, #96]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a17      	ldr	r2, [pc, #92]	@ (8006378 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10c      	bne.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006326:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4313      	orrs	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	40001800 	.word	0x40001800
 8006370:	40014000 	.word	0x40014000
 8006374:	4000e000 	.word	0x4000e000
 8006378:	4000e400 	.word	0x4000e400

0800637c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e04a      	b.n	8006460 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d106      	bne.n	80063e2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fa fce5 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2224      	movs	r2, #36	@ 0x24
 80063e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fa76 	bl	80078f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc07 	bl	8006c1c <UART_SetConfig>
 800640e:	4603      	mov	r3, r0
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e023      	b.n	8006460 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006436:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 faed 	bl	8007a38 <UART_CheckIdleState>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b0ba      	sub	sp, #232	@ 0xe8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800648e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006492:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006496:	4013      	ands	r3, r2
 8006498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800649c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11b      	bne.n	80064dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d015      	beq.n	80064dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8377 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
      }
      return;
 80064da:	e371      	b.n	8006bc0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8123 	beq.w	800672c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80064ea:	4b8d      	ldr	r3, [pc, #564]	@ (8006720 <HAL_UART_IRQHandler+0x2b8>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006724 <HAL_UART_IRQHandler+0x2bc>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8116 	beq.w	800672c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d011      	beq.n	8006530 <HAL_UART_IRQHandler+0xc8>
 800650c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2201      	movs	r2, #1
 800651e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006526:	f043 0201 	orr.w	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d011      	beq.n	8006560 <HAL_UART_IRQHandler+0xf8>
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2202      	movs	r2, #2
 800654e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006556:	f043 0204 	orr.w	r2, r3, #4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d011      	beq.n	8006590 <HAL_UART_IRQHandler+0x128>
 800656c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2204      	movs	r2, #4
 800657e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006586:	f043 0202 	orr.w	r2, r3, #2
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800659c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006720 <HAL_UART_IRQHandler+0x2b8>)
 80065ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2208      	movs	r2, #8
 80065ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c2:	f043 0208 	orr.w	r2, r3, #8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d012      	beq.n	80065fe <HAL_UART_IRQHandler+0x196>
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f4:	f043 0220 	orr.w	r2, r3, #32
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 82dd 	beq.w	8006bc4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d013      	beq.n	800663e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006644:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d005      	beq.n	8006662 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800665a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800665e:	2b00      	cmp	r3, #0
 8006660:	d054      	beq.n	800670c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fb00 	bl	8007c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006672:	2b40      	cmp	r3, #64	@ 0x40
 8006674:	d146      	bne.n	8006704 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800668c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1d9      	bne.n	8006676 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	4a15      	ldr	r2, [pc, #84]	@ (8006728 <HAL_UART_IRQHandler+0x2c0>)
 80066d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fb fb73 	bl	8001dc8 <HAL_DMA_Abort_IT>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d019      	beq.n	800671c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80066f6:	4610      	mov	r0, r2
 80066f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fa:	e00f      	b.n	800671c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa77 	bl	8006bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006702:	e00b      	b.n	800671c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa73 	bl	8006bf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670a:	e007      	b.n	800671c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa6f 	bl	8006bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800671a:	e253      	b.n	8006bc4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	bf00      	nop
    return;
 800671e:	e251      	b.n	8006bc4 <HAL_UART_IRQHandler+0x75c>
 8006720:	10000001 	.word	0x10000001
 8006724:	04000120 	.word	0x04000120
 8006728:	08007d35 	.word	0x08007d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006730:	2b01      	cmp	r3, #1
 8006732:	f040 81e7 	bne.w	8006b04 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 81e0 	beq.w	8006b04 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 81d9 	beq.w	8006b04 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2210      	movs	r2, #16
 8006758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006764:	2b40      	cmp	r3, #64	@ 0x40
 8006766:	f040 8151 	bne.w	8006a0c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a96      	ldr	r2, [pc, #600]	@ (80069cc <HAL_UART_IRQHandler+0x564>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d068      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a93      	ldr	r2, [pc, #588]	@ (80069d0 <HAL_UART_IRQHandler+0x568>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d061      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a91      	ldr	r2, [pc, #580]	@ (80069d4 <HAL_UART_IRQHandler+0x56c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d05a      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a8e      	ldr	r2, [pc, #568]	@ (80069d8 <HAL_UART_IRQHandler+0x570>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d053      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a8c      	ldr	r2, [pc, #560]	@ (80069dc <HAL_UART_IRQHandler+0x574>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04c      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a89      	ldr	r2, [pc, #548]	@ (80069e0 <HAL_UART_IRQHandler+0x578>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d045      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a87      	ldr	r2, [pc, #540]	@ (80069e4 <HAL_UART_IRQHandler+0x57c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d03e      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a84      	ldr	r2, [pc, #528]	@ (80069e8 <HAL_UART_IRQHandler+0x580>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d037      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a82      	ldr	r2, [pc, #520]	@ (80069ec <HAL_UART_IRQHandler+0x584>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d030      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a7f      	ldr	r2, [pc, #508]	@ (80069f0 <HAL_UART_IRQHandler+0x588>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d029      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a7d      	ldr	r2, [pc, #500]	@ (80069f4 <HAL_UART_IRQHandler+0x58c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a7a      	ldr	r2, [pc, #488]	@ (80069f8 <HAL_UART_IRQHandler+0x590>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01b      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a78      	ldr	r2, [pc, #480]	@ (80069fc <HAL_UART_IRQHandler+0x594>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d014      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a75      	ldr	r2, [pc, #468]	@ (8006a00 <HAL_UART_IRQHandler+0x598>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00d      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a73      	ldr	r2, [pc, #460]	@ (8006a04 <HAL_UART_IRQHandler+0x59c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d006      	beq.n	800684a <HAL_UART_IRQHandler+0x3e2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a70      	ldr	r2, [pc, #448]	@ (8006a08 <HAL_UART_IRQHandler+0x5a0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d106      	bne.n	8006858 <HAL_UART_IRQHandler+0x3f0>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	b29b      	uxth	r3, r3
 8006856:	e005      	b.n	8006864 <HAL_UART_IRQHandler+0x3fc>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 81ab 	beq.w	8006bc8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800687c:	429a      	cmp	r2, r3
 800687e:	f080 81a3 	bcs.w	8006bc8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006888:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006898:	f000 8087 	beq.w	80069aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1da      	bne.n	800689c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800690a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800690e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006912:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800691c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e1      	bne.n	80068e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006946:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006948:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800694c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e3      	bne.n	8006922 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006978:	f023 0310 	bic.w	r3, r3, #16
 800697c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800698a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800698c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e4      	bne.n	8006968 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fa fef1 	bl	800178c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f91d 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ca:	e0fd      	b.n	8006bc8 <HAL_UART_IRQHandler+0x760>
 80069cc:	40020010 	.word	0x40020010
 80069d0:	40020028 	.word	0x40020028
 80069d4:	40020040 	.word	0x40020040
 80069d8:	40020058 	.word	0x40020058
 80069dc:	40020070 	.word	0x40020070
 80069e0:	40020088 	.word	0x40020088
 80069e4:	400200a0 	.word	0x400200a0
 80069e8:	400200b8 	.word	0x400200b8
 80069ec:	40020410 	.word	0x40020410
 80069f0:	40020428 	.word	0x40020428
 80069f4:	40020440 	.word	0x40020440
 80069f8:	40020458 	.word	0x40020458
 80069fc:	40020470 	.word	0x40020470
 8006a00:	40020488 	.word	0x40020488
 8006a04:	400204a0 	.word	0x400204a0
 8006a08:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80cf 	beq.w	8006bcc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 80ca 	beq.w	8006bcc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e4      	bne.n	8006a38 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7e:	6a3a      	ldr	r2, [r7, #32]
 8006a80:	4b55      	ldr	r3, [pc, #340]	@ (8006bd8 <HAL_UART_IRQHandler+0x770>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a92:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e3      	bne.n	8006a6e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0310 	bic.w	r3, r3, #16
 8006ace:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	69fa      	ldr	r2, [r7, #28]
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e4      	bne.n	8006aba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f881 	bl	8006c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b02:	e063      	b.n	8006bcc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <HAL_UART_IRQHandler+0x6c6>
 8006b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d008      	beq.n	8006b2e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f945 	bl	8007db6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b2c:	e051      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d03a      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
    }
    return;
 8006b62:	e035      	b.n	8006bd0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <HAL_UART_IRQHandler+0x71c>
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f8ef 	bl	8007d60 <UART_EndTransmit_IT>
    return;
 8006b82:	e026      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d009      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x73c>
 8006b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b94:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f91e 	bl	8007dde <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba2:	e016      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d010      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da0c      	bge.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f906 	bl	8007dca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bbe:	e008      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006bc0:	bf00      	nop
 8006bc2:	e006      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006bc4:	bf00      	nop
 8006bc6:	e004      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
      return;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <HAL_UART_IRQHandler+0x76a>
    return;
 8006bd0:	bf00      	nop
  }
}
 8006bd2:	37e8      	adds	r7, #232	@ 0xe8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	effffffe 	.word	0xeffffffe

08006bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c20:	b092      	sub	sp, #72	@ 0x48
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4bbe      	ldr	r3, [pc, #760]	@ (8006f44 <UART_SetConfig+0x328>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4ab3      	ldr	r2, [pc, #716]	@ (8006f48 <UART_SetConfig+0x32c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c84:	4313      	orrs	r3, r2
 8006c86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	4baf      	ldr	r3, [pc, #700]	@ (8006f4c <UART_SetConfig+0x330>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca2:	f023 010f 	bic.w	r1, r3, #15
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8006f50 <UART_SetConfig+0x334>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d177      	bne.n	8006dac <UART_SetConfig+0x190>
 8006cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8006f54 <UART_SetConfig+0x338>)
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cc4:	2b28      	cmp	r3, #40	@ 0x28
 8006cc6:	d86d      	bhi.n	8006da4 <UART_SetConfig+0x188>
 8006cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0xb4>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d75 	.word	0x08006d75
 8006cd4:	08006da5 	.word	0x08006da5
 8006cd8:	08006da5 	.word	0x08006da5
 8006cdc:	08006da5 	.word	0x08006da5
 8006ce0:	08006da5 	.word	0x08006da5
 8006ce4:	08006da5 	.word	0x08006da5
 8006ce8:	08006da5 	.word	0x08006da5
 8006cec:	08006da5 	.word	0x08006da5
 8006cf0:	08006d7d 	.word	0x08006d7d
 8006cf4:	08006da5 	.word	0x08006da5
 8006cf8:	08006da5 	.word	0x08006da5
 8006cfc:	08006da5 	.word	0x08006da5
 8006d00:	08006da5 	.word	0x08006da5
 8006d04:	08006da5 	.word	0x08006da5
 8006d08:	08006da5 	.word	0x08006da5
 8006d0c:	08006da5 	.word	0x08006da5
 8006d10:	08006d85 	.word	0x08006d85
 8006d14:	08006da5 	.word	0x08006da5
 8006d18:	08006da5 	.word	0x08006da5
 8006d1c:	08006da5 	.word	0x08006da5
 8006d20:	08006da5 	.word	0x08006da5
 8006d24:	08006da5 	.word	0x08006da5
 8006d28:	08006da5 	.word	0x08006da5
 8006d2c:	08006da5 	.word	0x08006da5
 8006d30:	08006d8d 	.word	0x08006d8d
 8006d34:	08006da5 	.word	0x08006da5
 8006d38:	08006da5 	.word	0x08006da5
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006da5 	.word	0x08006da5
 8006d48:	08006da5 	.word	0x08006da5
 8006d4c:	08006da5 	.word	0x08006da5
 8006d50:	08006d95 	.word	0x08006d95
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006da5 	.word	0x08006da5
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	08006da5 	.word	0x08006da5
 8006d68:	08006da5 	.word	0x08006da5
 8006d6c:	08006da5 	.word	0x08006da5
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e326      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e322      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006d84:	2308      	movs	r3, #8
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e31e      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e31a      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006d94:	2320      	movs	r3, #32
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e316      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006d9c:	2340      	movs	r3, #64	@ 0x40
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e312      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e30e      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a69      	ldr	r2, [pc, #420]	@ (8006f58 <UART_SetConfig+0x33c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d130      	bne.n	8006e18 <UART_SetConfig+0x1fc>
 8006db6:	4b67      	ldr	r3, [pc, #412]	@ (8006f54 <UART_SetConfig+0x338>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d826      	bhi.n	8006e10 <UART_SetConfig+0x1f4>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <UART_SetConfig+0x1ac>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	08006df1 	.word	0x08006df1
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e09 	.word	0x08006e09
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e2f0      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e2ec      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e2e8      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e2e4      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e00:	2320      	movs	r3, #32
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e2e0      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e08:	2340      	movs	r3, #64	@ 0x40
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e2dc      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e2d8      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8006f5c <UART_SetConfig+0x340>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d130      	bne.n	8006e84 <UART_SetConfig+0x268>
 8006e22:	4b4c      	ldr	r3, [pc, #304]	@ (8006f54 <UART_SetConfig+0x338>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d826      	bhi.n	8006e7c <UART_SetConfig+0x260>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x218>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e2ba      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e2b6      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e2b2      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6a:	e2ae      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e72:	e2aa      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e74:	2340      	movs	r3, #64	@ 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7a:	e2a6      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e82:	e2a2      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a35      	ldr	r2, [pc, #212]	@ (8006f60 <UART_SetConfig+0x344>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d130      	bne.n	8006ef0 <UART_SetConfig+0x2d4>
 8006e8e:	4b31      	ldr	r3, [pc, #196]	@ (8006f54 <UART_SetConfig+0x338>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d826      	bhi.n	8006ee8 <UART_SetConfig+0x2cc>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <UART_SetConfig+0x284>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ec9 	.word	0x08006ec9
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e284      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e280      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e27c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e278      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e274      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ee0:	2340      	movs	r3, #64	@ 0x40
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e270      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ee8:	2380      	movs	r3, #128	@ 0x80
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e26c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f64 <UART_SetConfig+0x348>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d142      	bne.n	8006f80 <UART_SetConfig+0x364>
 8006efa:	4b16      	ldr	r3, [pc, #88]	@ (8006f54 <UART_SetConfig+0x338>)
 8006efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d838      	bhi.n	8006f78 <UART_SetConfig+0x35c>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0x2f0>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e24e      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e24a      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e246      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e242      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f44:	cfff69f3 	.word	0xcfff69f3
 8006f48:	58000c00 	.word	0x58000c00
 8006f4c:	11fff4ff 	.word	0x11fff4ff
 8006f50:	40011000 	.word	0x40011000
 8006f54:	58024400 	.word	0x58024400
 8006f58:	40004400 	.word	0x40004400
 8006f5c:	40004800 	.word	0x40004800
 8006f60:	40004c00 	.word	0x40004c00
 8006f64:	40005000 	.word	0x40005000
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e22c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f70:	2340      	movs	r3, #64	@ 0x40
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e228      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f78:	2380      	movs	r3, #128	@ 0x80
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e224      	b.n	80073ca <UART_SetConfig+0x7ae>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4ab1      	ldr	r2, [pc, #708]	@ (800724c <UART_SetConfig+0x630>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d176      	bne.n	8007078 <UART_SetConfig+0x45c>
 8006f8a:	4bb1      	ldr	r3, [pc, #708]	@ (8007250 <UART_SetConfig+0x634>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f92:	2b28      	cmp	r3, #40	@ 0x28
 8006f94:	d86c      	bhi.n	8007070 <UART_SetConfig+0x454>
 8006f96:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <UART_SetConfig+0x380>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08007041 	.word	0x08007041
 8006fa0:	08007071 	.word	0x08007071
 8006fa4:	08007071 	.word	0x08007071
 8006fa8:	08007071 	.word	0x08007071
 8006fac:	08007071 	.word	0x08007071
 8006fb0:	08007071 	.word	0x08007071
 8006fb4:	08007071 	.word	0x08007071
 8006fb8:	08007071 	.word	0x08007071
 8006fbc:	08007049 	.word	0x08007049
 8006fc0:	08007071 	.word	0x08007071
 8006fc4:	08007071 	.word	0x08007071
 8006fc8:	08007071 	.word	0x08007071
 8006fcc:	08007071 	.word	0x08007071
 8006fd0:	08007071 	.word	0x08007071
 8006fd4:	08007071 	.word	0x08007071
 8006fd8:	08007071 	.word	0x08007071
 8006fdc:	08007051 	.word	0x08007051
 8006fe0:	08007071 	.word	0x08007071
 8006fe4:	08007071 	.word	0x08007071
 8006fe8:	08007071 	.word	0x08007071
 8006fec:	08007071 	.word	0x08007071
 8006ff0:	08007071 	.word	0x08007071
 8006ff4:	08007071 	.word	0x08007071
 8006ff8:	08007071 	.word	0x08007071
 8006ffc:	08007059 	.word	0x08007059
 8007000:	08007071 	.word	0x08007071
 8007004:	08007071 	.word	0x08007071
 8007008:	08007071 	.word	0x08007071
 800700c:	08007071 	.word	0x08007071
 8007010:	08007071 	.word	0x08007071
 8007014:	08007071 	.word	0x08007071
 8007018:	08007071 	.word	0x08007071
 800701c:	08007061 	.word	0x08007061
 8007020:	08007071 	.word	0x08007071
 8007024:	08007071 	.word	0x08007071
 8007028:	08007071 	.word	0x08007071
 800702c:	08007071 	.word	0x08007071
 8007030:	08007071 	.word	0x08007071
 8007034:	08007071 	.word	0x08007071
 8007038:	08007071 	.word	0x08007071
 800703c:	08007069 	.word	0x08007069
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e1c0      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e1bc      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e1b8      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e1b4      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007060:	2320      	movs	r3, #32
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e1b0      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007068:	2340      	movs	r3, #64	@ 0x40
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706e:	e1ac      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007076:	e1a8      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a75      	ldr	r2, [pc, #468]	@ (8007254 <UART_SetConfig+0x638>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d130      	bne.n	80070e4 <UART_SetConfig+0x4c8>
 8007082:	4b73      	ldr	r3, [pc, #460]	@ (8007250 <UART_SetConfig+0x634>)
 8007084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b05      	cmp	r3, #5
 800708c:	d826      	bhi.n	80070dc <UART_SetConfig+0x4c0>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <UART_SetConfig+0x478>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070ad 	.word	0x080070ad
 8007098:	080070b5 	.word	0x080070b5
 800709c:	080070bd 	.word	0x080070bd
 80070a0:	080070c5 	.word	0x080070c5
 80070a4:	080070cd 	.word	0x080070cd
 80070a8:	080070d5 	.word	0x080070d5
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e18a      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e186      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e182      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e17e      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070cc:	2320      	movs	r3, #32
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e17a      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070d4:	2340      	movs	r3, #64	@ 0x40
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070da:	e176      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e2:	e172      	b.n	80073ca <UART_SetConfig+0x7ae>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5b      	ldr	r2, [pc, #364]	@ (8007258 <UART_SetConfig+0x63c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d130      	bne.n	8007150 <UART_SetConfig+0x534>
 80070ee:	4b58      	ldr	r3, [pc, #352]	@ (8007250 <UART_SetConfig+0x634>)
 80070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d826      	bhi.n	8007148 <UART_SetConfig+0x52c>
 80070fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <UART_SetConfig+0x4e4>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007119 	.word	0x08007119
 8007104:	08007121 	.word	0x08007121
 8007108:	08007129 	.word	0x08007129
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	2300      	movs	r3, #0
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e154      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e150      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e14c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e148      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007138:	2320      	movs	r3, #32
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e144      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007140:	2340      	movs	r3, #64	@ 0x40
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e140      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e13c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a41      	ldr	r2, [pc, #260]	@ (800725c <UART_SetConfig+0x640>)
 8007156:	4293      	cmp	r3, r2
 8007158:	f040 8082 	bne.w	8007260 <UART_SetConfig+0x644>
 800715c:	4b3c      	ldr	r3, [pc, #240]	@ (8007250 <UART_SetConfig+0x634>)
 800715e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007164:	2b28      	cmp	r3, #40	@ 0x28
 8007166:	d86d      	bhi.n	8007244 <UART_SetConfig+0x628>
 8007168:	a201      	add	r2, pc, #4	@ (adr r2, 8007170 <UART_SetConfig+0x554>)
 800716a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716e:	bf00      	nop
 8007170:	08007215 	.word	0x08007215
 8007174:	08007245 	.word	0x08007245
 8007178:	08007245 	.word	0x08007245
 800717c:	08007245 	.word	0x08007245
 8007180:	08007245 	.word	0x08007245
 8007184:	08007245 	.word	0x08007245
 8007188:	08007245 	.word	0x08007245
 800718c:	08007245 	.word	0x08007245
 8007190:	0800721d 	.word	0x0800721d
 8007194:	08007245 	.word	0x08007245
 8007198:	08007245 	.word	0x08007245
 800719c:	08007245 	.word	0x08007245
 80071a0:	08007245 	.word	0x08007245
 80071a4:	08007245 	.word	0x08007245
 80071a8:	08007245 	.word	0x08007245
 80071ac:	08007245 	.word	0x08007245
 80071b0:	08007225 	.word	0x08007225
 80071b4:	08007245 	.word	0x08007245
 80071b8:	08007245 	.word	0x08007245
 80071bc:	08007245 	.word	0x08007245
 80071c0:	08007245 	.word	0x08007245
 80071c4:	08007245 	.word	0x08007245
 80071c8:	08007245 	.word	0x08007245
 80071cc:	08007245 	.word	0x08007245
 80071d0:	0800722d 	.word	0x0800722d
 80071d4:	08007245 	.word	0x08007245
 80071d8:	08007245 	.word	0x08007245
 80071dc:	08007245 	.word	0x08007245
 80071e0:	08007245 	.word	0x08007245
 80071e4:	08007245 	.word	0x08007245
 80071e8:	08007245 	.word	0x08007245
 80071ec:	08007245 	.word	0x08007245
 80071f0:	08007235 	.word	0x08007235
 80071f4:	08007245 	.word	0x08007245
 80071f8:	08007245 	.word	0x08007245
 80071fc:	08007245 	.word	0x08007245
 8007200:	08007245 	.word	0x08007245
 8007204:	08007245 	.word	0x08007245
 8007208:	08007245 	.word	0x08007245
 800720c:	08007245 	.word	0x08007245
 8007210:	0800723d 	.word	0x0800723d
 8007214:	2301      	movs	r3, #1
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721a:	e0d6      	b.n	80073ca <UART_SetConfig+0x7ae>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007222:	e0d2      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722a:	e0ce      	b.n	80073ca <UART_SetConfig+0x7ae>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007232:	e0ca      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007234:	2320      	movs	r3, #32
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800723a:	e0c6      	b.n	80073ca <UART_SetConfig+0x7ae>
 800723c:	2340      	movs	r3, #64	@ 0x40
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007242:	e0c2      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007244:	2380      	movs	r3, #128	@ 0x80
 8007246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800724a:	e0be      	b.n	80073ca <UART_SetConfig+0x7ae>
 800724c:	40011400 	.word	0x40011400
 8007250:	58024400 	.word	0x58024400
 8007254:	40007800 	.word	0x40007800
 8007258:	40007c00 	.word	0x40007c00
 800725c:	40011800 	.word	0x40011800
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4aad      	ldr	r2, [pc, #692]	@ (800751c <UART_SetConfig+0x900>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d176      	bne.n	8007358 <UART_SetConfig+0x73c>
 800726a:	4bad      	ldr	r3, [pc, #692]	@ (8007520 <UART_SetConfig+0x904>)
 800726c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800726e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007272:	2b28      	cmp	r3, #40	@ 0x28
 8007274:	d86c      	bhi.n	8007350 <UART_SetConfig+0x734>
 8007276:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <UART_SetConfig+0x660>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	08007321 	.word	0x08007321
 8007280:	08007351 	.word	0x08007351
 8007284:	08007351 	.word	0x08007351
 8007288:	08007351 	.word	0x08007351
 800728c:	08007351 	.word	0x08007351
 8007290:	08007351 	.word	0x08007351
 8007294:	08007351 	.word	0x08007351
 8007298:	08007351 	.word	0x08007351
 800729c:	08007329 	.word	0x08007329
 80072a0:	08007351 	.word	0x08007351
 80072a4:	08007351 	.word	0x08007351
 80072a8:	08007351 	.word	0x08007351
 80072ac:	08007351 	.word	0x08007351
 80072b0:	08007351 	.word	0x08007351
 80072b4:	08007351 	.word	0x08007351
 80072b8:	08007351 	.word	0x08007351
 80072bc:	08007331 	.word	0x08007331
 80072c0:	08007351 	.word	0x08007351
 80072c4:	08007351 	.word	0x08007351
 80072c8:	08007351 	.word	0x08007351
 80072cc:	08007351 	.word	0x08007351
 80072d0:	08007351 	.word	0x08007351
 80072d4:	08007351 	.word	0x08007351
 80072d8:	08007351 	.word	0x08007351
 80072dc:	08007339 	.word	0x08007339
 80072e0:	08007351 	.word	0x08007351
 80072e4:	08007351 	.word	0x08007351
 80072e8:	08007351 	.word	0x08007351
 80072ec:	08007351 	.word	0x08007351
 80072f0:	08007351 	.word	0x08007351
 80072f4:	08007351 	.word	0x08007351
 80072f8:	08007351 	.word	0x08007351
 80072fc:	08007341 	.word	0x08007341
 8007300:	08007351 	.word	0x08007351
 8007304:	08007351 	.word	0x08007351
 8007308:	08007351 	.word	0x08007351
 800730c:	08007351 	.word	0x08007351
 8007310:	08007351 	.word	0x08007351
 8007314:	08007351 	.word	0x08007351
 8007318:	08007351 	.word	0x08007351
 800731c:	08007349 	.word	0x08007349
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e050      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007328:	2304      	movs	r3, #4
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800732e:	e04c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007330:	2308      	movs	r3, #8
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e048      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007338:	2310      	movs	r3, #16
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e044      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007340:	2320      	movs	r3, #32
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e040      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007348:	2340      	movs	r3, #64	@ 0x40
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e03c      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007350:	2380      	movs	r3, #128	@ 0x80
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e038      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a71      	ldr	r2, [pc, #452]	@ (8007524 <UART_SetConfig+0x908>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d130      	bne.n	80073c4 <UART_SetConfig+0x7a8>
 8007362:	4b6f      	ldr	r3, [pc, #444]	@ (8007520 <UART_SetConfig+0x904>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b05      	cmp	r3, #5
 800736c:	d826      	bhi.n	80073bc <UART_SetConfig+0x7a0>
 800736e:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <UART_SetConfig+0x758>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	0800738d 	.word	0x0800738d
 8007378:	08007395 	.word	0x08007395
 800737c:	0800739d 	.word	0x0800739d
 8007380:	080073a5 	.word	0x080073a5
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073b5 	.word	0x080073b5
 800738c:	2302      	movs	r3, #2
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007392:	e01a      	b.n	80073ca <UART_SetConfig+0x7ae>
 8007394:	2304      	movs	r3, #4
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800739a:	e016      	b.n	80073ca <UART_SetConfig+0x7ae>
 800739c:	2308      	movs	r3, #8
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a2:	e012      	b.n	80073ca <UART_SetConfig+0x7ae>
 80073a4:	2310      	movs	r3, #16
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073aa:	e00e      	b.n	80073ca <UART_SetConfig+0x7ae>
 80073ac:	2320      	movs	r3, #32
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b2:	e00a      	b.n	80073ca <UART_SetConfig+0x7ae>
 80073b4:	2340      	movs	r3, #64	@ 0x40
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e006      	b.n	80073ca <UART_SetConfig+0x7ae>
 80073bc:	2380      	movs	r3, #128	@ 0x80
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e002      	b.n	80073ca <UART_SetConfig+0x7ae>
 80073c4:	2380      	movs	r3, #128	@ 0x80
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a55      	ldr	r2, [pc, #340]	@ (8007524 <UART_SetConfig+0x908>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	f040 80f8 	bne.w	80075c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073da:	2b20      	cmp	r3, #32
 80073dc:	dc46      	bgt.n	800746c <UART_SetConfig+0x850>
 80073de:	2b02      	cmp	r3, #2
 80073e0:	db75      	blt.n	80074ce <UART_SetConfig+0x8b2>
 80073e2:	3b02      	subs	r3, #2
 80073e4:	2b1e      	cmp	r3, #30
 80073e6:	d872      	bhi.n	80074ce <UART_SetConfig+0x8b2>
 80073e8:	a201      	add	r2, pc, #4	@ (adr r2, 80073f0 <UART_SetConfig+0x7d4>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007473 	.word	0x08007473
 80073f4:	080074cf 	.word	0x080074cf
 80073f8:	0800747b 	.word	0x0800747b
 80073fc:	080074cf 	.word	0x080074cf
 8007400:	080074cf 	.word	0x080074cf
 8007404:	080074cf 	.word	0x080074cf
 8007408:	0800748b 	.word	0x0800748b
 800740c:	080074cf 	.word	0x080074cf
 8007410:	080074cf 	.word	0x080074cf
 8007414:	080074cf 	.word	0x080074cf
 8007418:	080074cf 	.word	0x080074cf
 800741c:	080074cf 	.word	0x080074cf
 8007420:	080074cf 	.word	0x080074cf
 8007424:	080074cf 	.word	0x080074cf
 8007428:	0800749b 	.word	0x0800749b
 800742c:	080074cf 	.word	0x080074cf
 8007430:	080074cf 	.word	0x080074cf
 8007434:	080074cf 	.word	0x080074cf
 8007438:	080074cf 	.word	0x080074cf
 800743c:	080074cf 	.word	0x080074cf
 8007440:	080074cf 	.word	0x080074cf
 8007444:	080074cf 	.word	0x080074cf
 8007448:	080074cf 	.word	0x080074cf
 800744c:	080074cf 	.word	0x080074cf
 8007450:	080074cf 	.word	0x080074cf
 8007454:	080074cf 	.word	0x080074cf
 8007458:	080074cf 	.word	0x080074cf
 800745c:	080074cf 	.word	0x080074cf
 8007460:	080074cf 	.word	0x080074cf
 8007464:	080074cf 	.word	0x080074cf
 8007468:	080074c1 	.word	0x080074c1
 800746c:	2b40      	cmp	r3, #64	@ 0x40
 800746e:	d02a      	beq.n	80074c6 <UART_SetConfig+0x8aa>
 8007470:	e02d      	b.n	80074ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007472:	f7fd fa25 	bl	80048c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007478:	e02f      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800747a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800747e:	4618      	mov	r0, r3
 8007480:	f7fd fa34 	bl	80048ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007488:	e027      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800748a:	f107 0318 	add.w	r3, r7, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f7fd fb80 	bl	8004b94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007498:	e01f      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749a:	4b21      	ldr	r3, [pc, #132]	@ (8007520 <UART_SetConfig+0x904>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007520 <UART_SetConfig+0x904>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	08db      	lsrs	r3, r3, #3
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <UART_SetConfig+0x90c>)
 80074b2:	fa22 f303 	lsr.w	r3, r2, r3
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074b8:	e00f      	b.n	80074da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <UART_SetConfig+0x90c>)
 80074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074be:	e00c      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074c0:	4b1a      	ldr	r3, [pc, #104]	@ (800752c <UART_SetConfig+0x910>)
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 81ee 	beq.w	80078be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	4a12      	ldr	r2, [pc, #72]	@ (8007530 <UART_SetConfig+0x914>)
 80074e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007502:	429a      	cmp	r2, r3
 8007504:	d305      	bcc.n	8007512 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800750c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750e:	429a      	cmp	r2, r3
 8007510:	d910      	bls.n	8007534 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007518:	e1d1      	b.n	80078be <UART_SetConfig+0xca2>
 800751a:	bf00      	nop
 800751c:	40011c00 	.word	0x40011c00
 8007520:	58024400 	.word	0x58024400
 8007524:	58000c00 	.word	0x58000c00
 8007528:	03d09000 	.word	0x03d09000
 800752c:	003d0900 	.word	0x003d0900
 8007530:	08008078 	.word	0x08008078
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007536:	2200      	movs	r2, #0
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	60fa      	str	r2, [r7, #12]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	4ac0      	ldr	r2, [pc, #768]	@ (8007844 <UART_SetConfig+0xc28>)
 8007542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007546:	b29b      	uxth	r3, r3
 8007548:	2200      	movs	r2, #0
 800754a:	603b      	str	r3, [r7, #0]
 800754c:	607a      	str	r2, [r7, #4]
 800754e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007552:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007556:	f7f8 fed9 	bl	800030c <__aeabi_uldivmod>
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	020b      	lsls	r3, r1, #8
 800756c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007570:	0202      	lsls	r2, r0, #8
 8007572:	6979      	ldr	r1, [r7, #20]
 8007574:	6849      	ldr	r1, [r1, #4]
 8007576:	0849      	lsrs	r1, r1, #1
 8007578:	2000      	movs	r0, #0
 800757a:	460c      	mov	r4, r1
 800757c:	4605      	mov	r5, r0
 800757e:	eb12 0804 	adds.w	r8, r2, r4
 8007582:	eb43 0905 	adc.w	r9, r3, r5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	469a      	mov	sl, r3
 800758e:	4693      	mov	fp, r2
 8007590:	4652      	mov	r2, sl
 8007592:	465b      	mov	r3, fp
 8007594:	4640      	mov	r0, r8
 8007596:	4649      	mov	r1, r9
 8007598:	f7f8 feb8 	bl	800030c <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4613      	mov	r3, r2
 80075a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075aa:	d308      	bcc.n	80075be <UART_SetConfig+0x9a2>
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075b2:	d204      	bcs.n	80075be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80075ba:	60da      	str	r2, [r3, #12]
 80075bc:	e17f      	b.n	80078be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80075c4:	e17b      	b.n	80078be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ce:	f040 80bd 	bne.w	800774c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80075d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	dc48      	bgt.n	800766c <UART_SetConfig+0xa50>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	db7b      	blt.n	80076d6 <UART_SetConfig+0xaba>
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d879      	bhi.n	80076d6 <UART_SetConfig+0xaba>
 80075e2:	a201      	add	r2, pc, #4	@ (adr r2, 80075e8 <UART_SetConfig+0x9cc>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	08007673 	.word	0x08007673
 80075ec:	0800767b 	.word	0x0800767b
 80075f0:	080076d7 	.word	0x080076d7
 80075f4:	080076d7 	.word	0x080076d7
 80075f8:	08007683 	.word	0x08007683
 80075fc:	080076d7 	.word	0x080076d7
 8007600:	080076d7 	.word	0x080076d7
 8007604:	080076d7 	.word	0x080076d7
 8007608:	08007693 	.word	0x08007693
 800760c:	080076d7 	.word	0x080076d7
 8007610:	080076d7 	.word	0x080076d7
 8007614:	080076d7 	.word	0x080076d7
 8007618:	080076d7 	.word	0x080076d7
 800761c:	080076d7 	.word	0x080076d7
 8007620:	080076d7 	.word	0x080076d7
 8007624:	080076d7 	.word	0x080076d7
 8007628:	080076a3 	.word	0x080076a3
 800762c:	080076d7 	.word	0x080076d7
 8007630:	080076d7 	.word	0x080076d7
 8007634:	080076d7 	.word	0x080076d7
 8007638:	080076d7 	.word	0x080076d7
 800763c:	080076d7 	.word	0x080076d7
 8007640:	080076d7 	.word	0x080076d7
 8007644:	080076d7 	.word	0x080076d7
 8007648:	080076d7 	.word	0x080076d7
 800764c:	080076d7 	.word	0x080076d7
 8007650:	080076d7 	.word	0x080076d7
 8007654:	080076d7 	.word	0x080076d7
 8007658:	080076d7 	.word	0x080076d7
 800765c:	080076d7 	.word	0x080076d7
 8007660:	080076d7 	.word	0x080076d7
 8007664:	080076d7 	.word	0x080076d7
 8007668:	080076c9 	.word	0x080076c9
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	d02e      	beq.n	80076ce <UART_SetConfig+0xab2>
 8007670:	e031      	b.n	80076d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007672:	f7fb ff59 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8007676:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007678:	e033      	b.n	80076e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800767a:	f7fb ff6b 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 800767e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007680:	e02f      	b.n	80076e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007686:	4618      	mov	r0, r3
 8007688:	f7fd f930 	bl	80048ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007690:	e027      	b.n	80076e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007692:	f107 0318 	add.w	r3, r7, #24
 8007696:	4618      	mov	r0, r3
 8007698:	f7fd fa7c 	bl	8004b94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076a0:	e01f      	b.n	80076e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a2:	4b69      	ldr	r3, [pc, #420]	@ (8007848 <UART_SetConfig+0xc2c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80076ae:	4b66      	ldr	r3, [pc, #408]	@ (8007848 <UART_SetConfig+0xc2c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	08db      	lsrs	r3, r3, #3
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	4a64      	ldr	r2, [pc, #400]	@ (800784c <UART_SetConfig+0xc30>)
 80076ba:	fa22 f303 	lsr.w	r3, r2, r3
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80076c0:	e00f      	b.n	80076e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80076c2:	4b62      	ldr	r3, [pc, #392]	@ (800784c <UART_SetConfig+0xc30>)
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076c6:	e00c      	b.n	80076e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80076c8:	4b61      	ldr	r3, [pc, #388]	@ (8007850 <UART_SetConfig+0xc34>)
 80076ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076cc:	e009      	b.n	80076e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076d4:	e005      	b.n	80076e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80076e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 80ea 	beq.w	80078be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	4a55      	ldr	r2, [pc, #340]	@ (8007844 <UART_SetConfig+0xc28>)
 80076f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fc:	005a      	lsls	r2, r3, #1
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	085b      	lsrs	r3, r3, #1
 8007704:	441a      	add	r2, r3
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	fbb2 f3f3 	udiv	r3, r2, r3
 800770e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007712:	2b0f      	cmp	r3, #15
 8007714:	d916      	bls.n	8007744 <UART_SetConfig+0xb28>
 8007716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800771c:	d212      	bcs.n	8007744 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800771e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007720:	b29b      	uxth	r3, r3
 8007722:	f023 030f 	bic.w	r3, r3, #15
 8007726:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	b29b      	uxth	r3, r3
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	b29a      	uxth	r2, r3
 8007734:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007736:	4313      	orrs	r3, r2
 8007738:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	e0bc      	b.n	80078be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800774a:	e0b8      	b.n	80078be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800774c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007750:	2b20      	cmp	r3, #32
 8007752:	dc4b      	bgt.n	80077ec <UART_SetConfig+0xbd0>
 8007754:	2b00      	cmp	r3, #0
 8007756:	f2c0 8087 	blt.w	8007868 <UART_SetConfig+0xc4c>
 800775a:	2b20      	cmp	r3, #32
 800775c:	f200 8084 	bhi.w	8007868 <UART_SetConfig+0xc4c>
 8007760:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <UART_SetConfig+0xb4c>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	080077f3 	.word	0x080077f3
 800776c:	080077fb 	.word	0x080077fb
 8007770:	08007869 	.word	0x08007869
 8007774:	08007869 	.word	0x08007869
 8007778:	08007803 	.word	0x08007803
 800777c:	08007869 	.word	0x08007869
 8007780:	08007869 	.word	0x08007869
 8007784:	08007869 	.word	0x08007869
 8007788:	08007813 	.word	0x08007813
 800778c:	08007869 	.word	0x08007869
 8007790:	08007869 	.word	0x08007869
 8007794:	08007869 	.word	0x08007869
 8007798:	08007869 	.word	0x08007869
 800779c:	08007869 	.word	0x08007869
 80077a0:	08007869 	.word	0x08007869
 80077a4:	08007869 	.word	0x08007869
 80077a8:	08007823 	.word	0x08007823
 80077ac:	08007869 	.word	0x08007869
 80077b0:	08007869 	.word	0x08007869
 80077b4:	08007869 	.word	0x08007869
 80077b8:	08007869 	.word	0x08007869
 80077bc:	08007869 	.word	0x08007869
 80077c0:	08007869 	.word	0x08007869
 80077c4:	08007869 	.word	0x08007869
 80077c8:	08007869 	.word	0x08007869
 80077cc:	08007869 	.word	0x08007869
 80077d0:	08007869 	.word	0x08007869
 80077d4:	08007869 	.word	0x08007869
 80077d8:	08007869 	.word	0x08007869
 80077dc:	08007869 	.word	0x08007869
 80077e0:	08007869 	.word	0x08007869
 80077e4:	08007869 	.word	0x08007869
 80077e8:	0800785b 	.word	0x0800785b
 80077ec:	2b40      	cmp	r3, #64	@ 0x40
 80077ee:	d037      	beq.n	8007860 <UART_SetConfig+0xc44>
 80077f0:	e03a      	b.n	8007868 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f2:	f7fb fe99 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80077f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077f8:	e03c      	b.n	8007874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fa:	f7fb feab 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 80077fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007800:	e038      	b.n	8007874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd f870 	bl	80048ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007810:	e030      	b.n	8007874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007812:	f107 0318 	add.w	r3, r7, #24
 8007816:	4618      	mov	r0, r3
 8007818:	f7fd f9bc 	bl	8004b94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007820:	e028      	b.n	8007874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007822:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <UART_SetConfig+0xc2c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d012      	beq.n	8007854 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800782e:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <UART_SetConfig+0xc2c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	08db      	lsrs	r3, r3, #3
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	4a04      	ldr	r2, [pc, #16]	@ (800784c <UART_SetConfig+0xc30>)
 800783a:	fa22 f303 	lsr.w	r3, r2, r3
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007840:	e018      	b.n	8007874 <UART_SetConfig+0xc58>
 8007842:	bf00      	nop
 8007844:	08008078 	.word	0x08008078
 8007848:	58024400 	.word	0x58024400
 800784c:	03d09000 	.word	0x03d09000
 8007850:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007854:	4b24      	ldr	r3, [pc, #144]	@ (80078e8 <UART_SetConfig+0xccc>)
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007858:	e00c      	b.n	8007874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800785a:	4b24      	ldr	r3, [pc, #144]	@ (80078ec <UART_SetConfig+0xcd0>)
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785e:	e009      	b.n	8007874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007866:	e005      	b.n	8007874 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007872:	bf00      	nop
    }

    if (pclk != 0U)
 8007874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d021      	beq.n	80078be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	4a1c      	ldr	r2, [pc, #112]	@ (80078f0 <UART_SetConfig+0xcd4>)
 8007880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007884:	461a      	mov	r2, r3
 8007886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007888:	fbb3 f2f2 	udiv	r2, r3, r2
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	441a      	add	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	fbb2 f3f3 	udiv	r3, r2, r3
 800789c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	2b0f      	cmp	r3, #15
 80078a2:	d909      	bls.n	80078b8 <UART_SetConfig+0xc9c>
 80078a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078aa:	d205      	bcs.n	80078b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e002      	b.n	80078be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2200      	movs	r2, #0
 80078d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2200      	movs	r2, #0
 80078d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3748      	adds	r7, #72	@ 0x48
 80078e2:	46bd      	mov	sp, r7
 80078e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e8:	03d09000 	.word	0x03d09000
 80078ec:	003d0900 	.word	0x003d0900
 80078f0:	08008078 	.word	0x08008078

080078f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079f2:	d10a      	bne.n	8007a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b098      	sub	sp, #96	@ 0x60
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a48:	f7f9 fbf6 	bl	8001238 <HAL_GetTick>
 8007a4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d12f      	bne.n	8007abc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a64:	2200      	movs	r2, #0
 8007a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f88e 	bl	8007b8c <UART_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d022      	beq.n	8007abc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e063      	b.n	8007b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d149      	bne.n	8007b5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f857 	bl	8007b8c <UART_WaitOnFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d03c      	beq.n	8007b5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	623b      	str	r3, [r7, #32]
   return(result);
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e6      	bne.n	8007ae4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b36:	61fa      	str	r2, [r7, #28]
 8007b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	69b9      	ldr	r1, [r7, #24]
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	617b      	str	r3, [r7, #20]
   return(result);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e012      	b.n	8007b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3758      	adds	r7, #88	@ 0x58
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9c:	e04f      	b.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba4:	d04b      	beq.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba6:	f7f9 fb47 	bl	8001238 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d302      	bcc.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e04e      	b.n	8007c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d037      	beq.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b80      	cmp	r3, #128	@ 0x80
 8007bd2:	d034      	beq.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b40      	cmp	r3, #64	@ 0x40
 8007bd8:	d031      	beq.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b08      	cmp	r3, #8
 8007be6:	d110      	bne.n	8007c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2208      	movs	r2, #8
 8007bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 f839 	bl	8007c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e029      	b.n	8007c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c18:	d111      	bne.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f81f 	bl	8007c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e00f      	b.n	8007c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4013      	ands	r3, r2
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	bf0c      	ite	eq
 8007c4e:	2301      	moveq	r3, #1
 8007c50:	2300      	movne	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	79fb      	ldrb	r3, [r7, #7]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d0a0      	beq.n	8007b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b095      	sub	sp, #84	@ 0x54
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c96:	e841 2300 	strex	r3, r2, [r1]
 8007c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1e6      	bne.n	8007c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8007d30 <UART_EndRxTransfer+0xc8>)
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e5      	bne.n	8007ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d118      	bne.n	8007d10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f023 0310 	bic.w	r3, r3, #16
 8007cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6979      	ldr	r1, [r7, #20]
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e6      	bne.n	8007cde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d24:	bf00      	nop
 8007d26:	3754      	adds	r7, #84	@ 0x54
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	effffffe 	.word	0xeffffffe

08007d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7fe ff4c 	bl	8006bf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	61bb      	str	r3, [r7, #24]
 8007d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6979      	ldr	r1, [r7, #20]
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	613b      	str	r3, [r7, #16]
   return(result);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e6      	bne.n	8007d68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ff17 	bl	8006bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dae:	bf00      	nop
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e027      	b.n	8007e58 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2224      	movs	r2, #36	@ 0x24
 8007e14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0201 	bic.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e02d      	b.n	8007ed8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2224      	movs	r2, #36	@ 0x24
 8007e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f84f 	bl	8007f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e02d      	b.n	8007f54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2224      	movs	r2, #36	@ 0x24
 8007f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 0201 	bic.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f811 	bl	8007f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f7c:	e031      	b.n	8007fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f7e:	2310      	movs	r3, #16
 8007f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f82:	2310      	movs	r3, #16
 8007f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	0e5b      	lsrs	r3, r3, #25
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	0f5b      	lsrs	r3, r3, #29
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	7b3a      	ldrb	r2, [r7, #12]
 8007faa:	4911      	ldr	r1, [pc, #68]	@ (8007ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8007fac:	5c8a      	ldrb	r2, [r1, r2]
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fb2:	7b3a      	ldrb	r2, [r7, #12]
 8007fb4:	490f      	ldr	r1, [pc, #60]	@ (8007ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8007fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	7b7a      	ldrb	r2, [r7, #13]
 8007fc8:	4909      	ldr	r1, [pc, #36]	@ (8007ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8007fca:	5c8a      	ldrb	r2, [r1, r2]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fd0:	7b7a      	ldrb	r2, [r7, #13]
 8007fd2:	4908      	ldr	r1, [pc, #32]	@ (8007ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8007fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	08008090 	.word	0x08008090
 8007ff4:	08008098 	.word	0x08008098

08007ff8 <memset>:
 8007ff8:	4402      	add	r2, r0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d100      	bne.n	8008002 <memset+0xa>
 8008000:	4770      	bx	lr
 8008002:	f803 1b01 	strb.w	r1, [r3], #1
 8008006:	e7f9      	b.n	8007ffc <memset+0x4>

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	@ (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	@ (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	@ (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	@ (800804c <__libc_init_array+0x44>)
 800801c:	f000 f818 	bl	8008050 <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	080080a8 	.word	0x080080a8
 8008044:	080080a8 	.word	0x080080a8
 8008048:	080080a8 	.word	0x080080a8
 800804c:	080080ac 	.word	0x080080ac

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr
